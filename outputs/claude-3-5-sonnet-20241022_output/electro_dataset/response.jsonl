{"id": "electro/3_4", "solution": "Let me solve this step by step.\n\n1) First, let's calculate the total capacitance of parallel capacitors:\n   * In parallel, capacitances add: Ctotal = C1 + C2 + C3 + C4\n   * Ctotal = 4 × 1µF = 4µF = 4 × 10^-6 F\n\n2) Calculate the energy stored in the capacitors:\n   * E = ½CV² \n   * E = ½ × (4 × 10^-6) × (200)²\n   * E = 0.08 Joules\n\n3) Calculate the resistance of the wire:\n   * R = (4 Ω/m) × (5 × 10^-3 m)\n   * R = 0.02 Ω\n\n4) Calculate the mass of the wire:\n   * m = (0.045 g/m) × (5 × 10^-3 m)\n   * m = 2.25 × 10^-4 g = 2.25 × 10^-7 kg\n\n5) The specific heat capacity of copper is about 385 J/(kg·K)\n   The melting point of copper is 1085°C = 1358 K\n   Room temperature ≈ 293 K\n   Temperature rise needed = 1065 K\n\n6) Energy needed to heat the wire to melting point:\n   * E = mc∆T\n   * E = (2.25 × 10^-7)(385)(1065)\n   * E = 0.092 Joules\n\n7) Compare:\n   * Energy available: 0.08 Joules\n   * Energy needed: 0.092 Joules\n\nSince the energy stored in the capacitors (0.08 J) is slightly less than the energy needed to melt the wire (0.092 J), and considering some energy will be lost to the surroundings, the wire would likely get very hot but probably not melt.\n\n\\[\\boxed{\\text{Wire would not melt. Available energy (0.08 J) < Required energy (0.092 J)}}\\]", "final_answers": ["\\text{Wire would not melt. Available energy (0.08 J) < Required energy (0.092 J)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Wire would not melt. Available energy (0.08 J) < Required energy (0.092 J)}", "expr2": "\\text{The copper wire will not melt.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_22", "solution": "Let's solve this step by step.\n\n(a) First, let's find B and E fields:\n\n1) For magnetic field B:\n* Using Ampère's law for a circular path of radius r (R₁ < r < R₂)\n* Only current through inner conductor contributes\n* B(r) = μ₀i/(2πr) in the region between conductors\n* Direction is azimuthal (circular around axis)\n\n2) For electric field E:\n* Using Gauss's law for a cylindrical surface\n* E(r) = λ/(2πε₀r) where λ is charge per unit length\n* λ = CV where C is capacitance per unit length\n* Direction is radial\n\n(b) For energy densities:\n\n1) Magnetic energy density = B²/(2μ₀)\n* Per unit length: ∫(B²/(2μ₀))2πrdr from R₁ to R₂\n* U_m = (μ₀i²/4π)ln(R₂/R₁) per unit length\n\n2) Electric energy density = ε₀E²/2\n* Per unit length: ∫(ε₀E²/2)2πrdr from R₁ to R₂\n* U_e = (λ²/4πε₀)ln(R₂/R₁) per unit length\n\n(c) For inductance and capacitance:\n\n1) Inductance per unit length:\n* L = 2U_m/i²\n* L = (μ₀/2π)ln(R₂/R₁)\n\n2) Capacitance per unit length:\n* C = 2U_e/V²\n* C = 2πε₀/ln(R₂/R₁)\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\nB(r) &= \\frac{\\mu_0 i}{2\\pi r} \\\\\nE(r) &= \\frac{V}{r\\ln(R_2/R_1)} \\\\\nL &= \\frac{\\mu_0}{2\\pi}\\ln(R_2/R_1) \\\\\nC &= \\frac{2\\pi\\epsilon_0}{\\ln(R_2/R_1)}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nB(r) &= \\frac{\\mu_0 i}{2\\pi r} \\\\\nE(r) &= \\frac{V}{r\\ln(R_2/R_1)} \\\\\nL &= \\frac{\\mu_0}{2\\pi}\\ln(R_2/R_1) \\\\\nC &= \\frac{2\\pi\\epsilon_0}{\\ln(R_2/R_1)}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nB(r) &= \\frac{\\mu_0 i}{2\\pi r} \\\\\nE(r) &= \\frac{V}{r\\ln(R_2/R_1)} \\\\\nL &= \\frac{\\mu_0}{2\\pi}\\ln(R_2/R_1) \\\\\nC &= \\frac{2\\pi\\epsilon_0}{\\ln(R_2/R_1)}\n\\end{align*}", "expr2": "\\mathbf{B} = \\frac{\\mu_0 i}{2 \\pi r} \\mathbf{e_\\theta}"}, "preprocessed_expressions": {"expr1": "zoo*end*epsilon*pi", "expr2": "a*e**2*h*i*mathbf*mu*t/(2*pi*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nB(r) &= \\frac{\\mu_0 i}{2\\pi r} \\\\\nE(r) &= \\frac{V}{r\\ln(R_2/R_1)} \\\\\nL &= \\frac{\\mu_0}{2\\pi}\\ln(R_2/R_1) \\\\\nC &= \\frac{2\\pi\\epsilon_0}{\\ln(R_2/R_1)}\n\\end{align*}", "expr2": "\\mathbf{E} = \\frac{V}{r \\ln \\frac{R_2}{R_1}} \\mathbf{e_r}"}, "preprocessed_expressions": {"expr1": "zoo*end*epsilon*pi", "expr2": "zoo*V*e*mathbf"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_25", "solution": "Let's solve this step by step:\n\n1) First, recall that for a toroid, the magnetic field H inside is given by:\n   H = NI/(2πr)\n   where r is the distance from the center axis.\n\n2) The relationship between B, H, and M in a magnetic material is:\n   B = μ₀(H + M)\n   where μ₀ is the permeability of free space.\n\n3) We also know that for a magnetic material:\n   B = μH\n   where μ is the permeability of the material.\n\n4) From these two equations:\n   μH = μ₀(H + M)\n\n5) Solving for M:\n   μH = μ₀H + μ₀M\n   μH - μ₀H = μ₀M\n   H(μ - μ₀) = μ₀M\n   M = H(μ/μ₀ - 1)\n\n6) Substituting the expression for H:\n   M = (NI/2πr)(μ/μ₀ - 1)\n\n7) Since μ >> μ₀ for iron, we can approximate:\n   M ≈ (NI/2πr)(μ/μ₀)\n\nThe final answer for the magnitude of magnetization is:\n\n\\[\\boxed{M = \\frac{NI}{2\\pi r}\\left(\\frac{\\mu}{\\mu_0} - 1\\right)}\\]\n\nNote: This M varies with r, the distance from the center axis of the toroid.", "final_answers": ["M = \\frac{NI}{2\\pi r}\\left(\\frac{\\mu}{\\mu_0} - 1\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "M = \\frac{NI}{2\\pi r}\\left(\\frac{\\mu}{\\mu_0} - 1\\right)", "expr2": "M = \\frac{\\mu - 1}{\\mu_0} \\cdot \\frac{NI}{2\\pi r}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "I*N*(mu - 1)/(2*mu*pi*r)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_3", "solution": "Let's solve this step by step.\n\n(a) For Fig. 3.5:\n1) This is the simplest case with one voltage source Vn and two resistors\n2) The equivalent resistance r is the parallel combination of 2R with the series combination of 2R and 2R\n3) r = 2R || (2R + 2R) = 2R || 4R = (2R × 4R)/(2R + 4R) = 8R/6 = 4R/3\n4) V = Vn (voltage divider) × 2R/(2R + 2R) = Vn × 1/2\n\nFor Fig. 3.5:\n\\[\\boxed{V = \\frac{V_n}{2}, r = \\frac{4R}{3}}\\]\n\n(b) For Fig. 3.6:\n1) We have two voltage sources and more resistors\n2) Using superposition for V:\n   - For Vn: V1 = Vn × 2R/(4R + R) = Vn × 2/5\n   - For Vn-1: V2 = Vn-1 × 2R/(4R + R) = Vn-1 × 2/5\n3) Total V = V1 + V2 = (2/5)(Vn + Vn-1)\n4) For r, calculate equivalent resistance looking from A-B\n   r = 2R || (2R + R || 2R) = 2R || (2R + 2R/3) = 2R || (8R/3) = 16R/11\n\nFor Fig. 3.6:\n\\[\\boxed{V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}}\\]\n\n(c) For Fig. 3.7:\n1) Using mathematical induction, we can see a pattern forming\n2) For voltage:\n   - Each voltage source contributes through voltage division\n   - The contribution decreases as we move away from A-B\n3) The pattern for V is:\n   V = (2/5)Vn + (2/5)Vn-1 + (2/5)Vn-2 + ... + (2/5)V\n4) For resistance:\n   - The pattern shows that parallel-series combinations continue\n   - Each additional stage modifies the equivalent resistance\n\nFor Fig. 3.7:\n\\[\\boxed{V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}}\\]", "final_answers": ["V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}"], "equivalency_results": [{"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "V = \\frac{1}{2} V_n"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "V/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "V = \\frac{1}{2} \\left( V_{n-1} + \\frac{1}{2} V_n \\right)"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "V = 2^{-1} V_1 + 2^{-2} V_2 + \\cdots + 2^{-n} V_n"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{V_n}{2}, r = \\frac{4R}{3}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "4*R/3", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "V = \\frac{1}{2} V_n"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "V/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "V = \\frac{1}{2} \\left( V_{n-1} + \\frac{1}{2} V_n \\right)"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "V = 2^{-1} V_1 + 2^{-2} V_2 + \\cdots + 2^{-n} V_n"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1}), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "V = \\frac{1}{2} V_n"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "V/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "V = \\frac{1}{2} \\left( V_{n-1} + \\frac{1}{2} V_n \\right)"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "V = 2^{-1} V_1 + 2^{-2} V_2 + \\cdots + 2^{-n} V_n"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "3*V/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = \\frac{2}{5}(V_n + V_{n-1} + V_{n-2} + ... + V), r = \\frac{16R}{11}", "expr2": "r = R"}, "preprocessed_expressions": {"expr1": "16*R/11", "expr2": "R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_13", "solution": "Let's solve this step by step.\n\n(a) First, let's find the electric field and surface charge density:\n\n1) For a parallel plate capacitor with d≪R, the electric field is uniform between plates:\n   E = V/d = (V₀/d)cos(ωt)\n   Direction: perpendicular to plates\n\n2) Surface charge density (σ) on plates:\n   σ = ε₀KₑE = (ε₀KₑV₀/d)cos(ωt)\n\n(b) For magnetic field:\n\n1) Due to time-varying electric field, there's a displacement current:\n   Id = ε₀KₑπR²(dE/dt) = -ε₀KₑπR²(V₀ω/d)sin(ωt)\n\n2) Using Ampère's law with displacement current:\n   B(r) = (μ₀r/2πr)Id for r < R\n   \n3) Substituting Id:\n   B(r) = -μ₀ε₀KₑrR²(V₀ω/2d)sin(ωt)\n   Direction: azimuthal (φ direction)\n\n(c) Poynting vector flux:\n\n1) Poynting vector S = E × B\n   |S| = EB = (V₀/d)cos(ωt) × μ₀ε₀KₑrR²(V₀ω/2d)sin(ωt)\n\n2) Total flux through edges:\n   Φₛ = ∫₀²ᵖ ∫₀ᵈ S·r̂ dz dφ\n   = -πR²ε₀KₑV₀²ω sin(2ωt)/2\n\nFinal answer for Poynting vector flux:\n\n\\[\\boxed{\\Phi_S = -\\frac{\\pi R^2\\epsilon_0K_eV_0^2\\omega}{2}\\sin(2\\omega t)}\\]\n\nThis represents the rate of energy flow out of the capacitor through its edges.", "final_answers": ["\\Phi_S = -\\frac{\\pi R^2\\epsilon_0K_eV_0^2\\omega}{2}\\sin(2\\omega t)"], "equivalency_results": [{"input_expressions": {"expr1": "\\Phi_S = -\\frac{\\pi R^2\\epsilon_0K_eV_0^2\\omega}{2}\\sin(2\\omega t)", "expr2": "\\mathbf{E}(t) = \\frac{V_0}{d} \\cos(\\omega t) \\mathbf{e}_z, \\quad \\sigma(t) = \\pm k_e \\varepsilon_0 \\frac{V_0}{d} \\cos(\\omega t)"}, "preprocessed_expressions": {"expr1": "-R**2*epsilonKV**2*omega*pi*sin(2*omega*t)/2", "expr2": "V*k*pm*varepsilon*cos(omega*t)/d"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Phi_S = -\\frac{\\pi R^2\\epsilon_0K_eV_0^2\\omega}{2}\\sin(2\\omega t)", "expr2": "\\mathbf{B}(r, t) = \\frac{k_e \\varepsilon_0 \\mu_0 \\omega V_0}{2d} r \\sin(\\omega t) \\mathbf{e}_{\\theta}"}, "preprocessed_expressions": {"expr1": "-R**2*epsilonKV**2*omega*pi*sin(2*omega*t)/2", "expr2": "V*e*k*mathbf*mu*omega*r*varepsilon*sin(omega*t)/(2*d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Phi_S = -\\frac{\\pi R^2\\epsilon_0K_eV_0^2\\omega}{2}\\sin(2\\omega t)", "expr2": "\\phi(t) = \\frac{\\pi k_e \\varepsilon_0 \\omega V_0^2 R^2 \\sin(2\\omega t)}{2d}"}, "preprocessed_expressions": {"expr1": "-R**2*epsilonKV**2*omega*pi*sin(2*omega*t)/2", "expr2": "R**2*V**2*k*omega*pi*varepsilon*sin(2*omega*t)/(2*d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_34", "solution": "Let's solve this step by step:\n\n1) First, let's understand what's happening:\n   * We have a coaxial cable with inner radius a and outer radius b\n   * Current density j flows in the +z direction in inner conductor\n   * Return current flows in the outer conductor\n   * The space between conductors is empty (vacuum)\n\n2) Inside the inner conductor (r < a):\n   * Current density is uniform: J = jẑ\n   * Electric field follows Ohm's law: E = J/σ = (j/σ)ẑ\n\n3) In the space between conductors (a < r < b):\n   * No current flows\n   * Electric field must have both radial and z components\n   * Must satisfy Laplace's equation ∇²V = 0\n\n4) Due to symmetry:\n   * The potential V must be independent of φ (azimuthal angle)\n   * The solution must be symmetric about z = 0\n\n5) The general solution in the region a < r < b is:\n   * V(r,z) = A ln(r/a) + (j/σ)z\n   where A is a constant to be determined\n\n6) The radial electric field at r = a is:\n   * Er = -A/a\n\n7) The surface charge density ρs is related to the radial electric field by:\n   * ρs = ε₀Er = -ε₀A/a\n\n8) From the boundary conditions and symmetry:\n   * A = -(j/σ)a ln(b/a)\n\n9) Therefore, the surface charge density is:\n   * ρs = ε₀(j/σ)ln(b/a)\n\nThe final answer for the surface charge density is:\n\n\\[\\boxed{\\rho_s = \\frac{\\varepsilon_0 j}{\\sigma}\\ln(b/a)}\\]\n\nThis shows that the surface charge density is constant along the length of the cable, which makes sense given the uniform current density and symmetry of the problem.", "final_answers": ["\\rho_s = \\frac{\\varepsilon_0 j}{\\sigma}\\ln(b/a)"], "equivalency_results": [{"input_expressions": {"expr1": "\\rho_s = \\frac{\\varepsilon_0 j}{\\sigma}\\ln(b/a)", "expr2": "\\sigma_s(z) = -\\frac{\\epsilon_0 j z}{a \\sigma \\ln(b/a)}"}, "preprocessed_expressions": {"expr1": "j*varepsilon*log(b/a)/sigma", "expr2": "-epsilon*j*z/(a*sigma*log(b/a))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_33", "solution": "Let's solve this step by step.\n\n1) First, recall that the electric field between concentric cylinders is:\n   E(r) = λ/(2πε₀r) = V/(r ln(b/a))\n   where a is inner radius, b is outer radius (1 cm = 0.01 m)\n\n2) For (a), we need to find where the maximum field occurs:\n   - In cylindrical capacitors, E is strongest at r = a (inner surface)\n   - E(a) = V/(a ln(b/a))\n   - For maximum voltage before breakdown, E(a) = 3×10⁶ V/m\n\n3) For maximum potential difference:\n   - We need to maximize V = E(a)×a×ln(b/a)\n   - Taking derivative with respect to a and setting to zero:\n   - Maximum occurs when a = b/e\n   - For b = 0.01 m, a = 0.01/e ≈ 0.00368 m = 3.68 mm\n\n4) For (b), energy stored is:\n   - U = ½CV² = πε₀L V²/ln(b/a)\n   - With V = E(a)×a×ln(b/a)\n   - Substituting and maximizing with respect to a:\n   - Maximum occurs when a = b/√e\n   - For b = 0.01 m, a = 0.01/√e ≈ 0.00607 m = 6.07 mm\n\n5) For (c), calculate maximum potentials:\n   For case (a):\n   - V = E(a)×a×ln(b/a)\n   - V = 3×10⁶ × 0.00368 × ln(0.01/0.00368)\n   - V ≈ 30.4 kV\n\n   For case (b):\n   - V = 3×10⁶ × 0.00607 × ln(0.01/0.00607)\n   - V ≈ 27.9 kV\n\nThe final answer combining all parts:\n\n\\[\\boxed{\n\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}", "expr2": "R_1 = \\frac{R_2}{e}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}", "expr2": "R_1 = \\frac{R_2}{\\sqrt{e}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}", "expr2": "V_{\\text{max}} = 1.1 \\times 10^4 \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) &: r = 3.68 \\text{ mm} \\\\\n(b) &: r = 6.07 \\text{ mm} \\\\\n(c) &: V_a = 30.4 \\text{ kV}, V_b = 27.9 \\text{ kV}\n\\end{align*}", "expr2": "V_{\\text{max}} = 9.2 \\times 10^3 \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_14", "solution": "Let's solve this step by step.\n\n(a) First, let's find the magnetic induction:\n\n1) Due to the time-varying voltage, there's a displacement current between the plates:\n   * The electric field is E = V/d = (V₀/d)sin(ωt)\n   * The electric flux is Φₑ = πr²E = (πr²V₀/d)sin(ωt)\n   * Displacement current: Id = ε₀(dΦₑ/dt) = ε₀(πr²V₀ω/d)cos(ωt)\n\n2) By Ampère's law with Maxwell's correction, this displacement current creates a magnetic field:\n   * The magnetic field forms concentric circles around the axis\n   * Direction is determined by right-hand rule: if displacement current flows upward, B is azimuthal\n\n3) Using Ampère's law for a circular path of radius r:\n   * ∮B·dl = μ₀Id\n   * B(2πr) = μ₀ε₀(πr²V₀ω/d)cos(ωt)\n   * B = (μ₀ε₀rV₀ω/2d)cos(ωt)\n\nTherefore:\n\\[ \\boxed{\\mathbf{B} = \\frac{\\mu_0\\epsilon_0rV_0\\omega}{2d}\\cos(\\omega t)\\hat{\\phi}} \\]\n\n(b) For the experimental setup:\n\n1) The best arrangement would be a rectangular loop with:\n   * One side parallel to the axis of the capacitor\n   * At radius r from the axis\n   * Height h (less than plate separation d)\n   * Width w extending radially\n\n2) The induced EMF in the loop will be:\n   * EMF = -dΦ/dt where Φ is the magnetic flux through the loop\n   * Φ = Bwh = (μ₀ε₀rwV₀ω/2d)cos(ωt)·h\n   * EMF = -(μ₀ε₀rwhV₀ω²/2d)sin(ωt)\n\nThe oscilloscope signal will be:\n\\[ \\boxed{\\text{EMF} = -\\frac{\\mu_0\\epsilon_0rwhV_0\\omega^2}{2d}\\sin(\\omega t)} \\]\n\nA sketch would show:\n- Two parallel circular plates\n- A rectangular wire loop between them\n- Connection to oscilloscope\n- Loop oriented to maximize magnetic flux\n\nThe signal will be small due to the factor μ₀ε₀, requiring a sensitive oscilloscope.", "final_answers": ["\\mathbf{B} = \\frac{\\mu_0\\epsilon_0rV_0\\omega}{2d}\\cos(\\omega t)\\hat{\\phi}", "\\text{EMF} = -\\frac{\\mu_0\\epsilon_0rwhV_0\\omega^2}{2d}\\sin(\\omega t)"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{B} = \\frac{\\mu_0\\epsilon_0rV_0\\omega}{2d}\\cos(\\omega t)\\hat{\\phi}", "expr2": "\\mathbf{B}(r, t) = \\frac{\\varepsilon_0 \\mu_0 V_0 \\omega r}{2d} \\cos (\\omega t) \\mathbf{e}_{\\theta}"}, "preprocessed_expressions": {"expr1": "epsilonrV*hat*mu*omega*phi*cos(omega*t)/(2*d)", "expr2": "V*e*mathbf*mu*omega*r*varepsilon*cos(omega*t)/(2*d)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{EMF} = -\\frac{\\mu_0\\epsilon_0rwhV_0\\omega^2}{2d}\\sin(\\omega t)", "expr2": "\\mathbf{B}(r, t) = \\frac{\\varepsilon_0 \\mu_0 V_0 \\omega r}{2d} \\cos (\\omega t) \\mathbf{e}_{\\theta}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{EMF} = -\\frac{\\mu_0\\epsilon_0rwhV_0\\omega^2}{2d}\\sin(\\omega t)", "expr2": "|\\epsilon| = \\omega |B| \\Delta S"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "electro/1_58", "solution": "Let's solve this step by step.\n\n(a) First, let's find the total current:\n\n1) The electric field in the medium between spheres at radius r is:\n   $E(r) = \\frac{q(t)}{4\\pi\\epsilon_0\\epsilon r^2}$\n\n2) The current density J is related to E by Ohm's law:\n   $J = \\sigma E = \\frac{\\sigma q(t)}{4\\pi\\epsilon_0\\epsilon r^2}$\n\n3) The total current I through any spherical surface is:\n   $I = J \\cdot (4\\pi r^2) = \\frac{\\sigma q(t)}{\\epsilon_0\\epsilon}$\n\n4) This current causes charge to accumulate on the outer sphere and decrease on the inner sphere. The rate of charge decrease on inner sphere:\n   $\\frac{dq}{dt} = -I = -\\frac{\\sigma q}{\\epsilon_0\\epsilon}$\n\n5) Solving this differential equation:\n   $q(t) = q_0e^{-\\sigma t/\\epsilon_0\\epsilon}$\n\n6) Therefore, the total current is:\n   $I(t) = \\frac{\\sigma q_0}{\\epsilon_0\\epsilon}e^{-\\sigma t/\\epsilon_0\\epsilon}$\n\n(b) For Joule heating:\n\n1) The power dissipated at any instant is:\n   $P(t) = I^2R = \\frac{(b-a)}{4\\pi\\sigma ab}(\\frac{\\sigma q_0}{\\epsilon_0\\epsilon})^2e^{-2\\sigma t/\\epsilon_0\\epsilon}$\n\n2) Total heat produced is the integral:\n   $Q = \\int_0^\\infty P(t)dt = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right)$\n\n3) The initial electrostatic energy was:\n   $U_i = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon a}$\n\n4) The final electrostatic energy (when charge is distributed between spheres) is:\n   $U_f = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon b}$\n\n5) The decrease in electrostatic energy:\n   $\\Delta U = U_i - U_f = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right) = Q$\n\nThe final answers are:\n\n\\[\\boxed{I(t) = \\frac{\\sigma q_0}{\\epsilon_0\\epsilon}e^{-\\sigma t/\\epsilon_0\\epsilon}}\\]\n\n\\[\\boxed{Q = \\Delta U = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right)}\\]", "final_answers": ["I(t) = \\frac{\\sigma q_0}{\\epsilon_0\\epsilon}e^{-\\sigma t/\\epsilon_0\\epsilon}", "Q = \\Delta U = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "I(t) = \\frac{\\sigma q_0}{\\epsilon_0\\epsilon}e^{-\\sigma t/\\epsilon_0\\epsilon}", "expr2": "I(t) = \\frac{\\sigma q}{\\epsilon} e^{-\\frac{\\sigma}{\\epsilon} t}"}, "preprocessed_expressions": {"expr1": "q*sigma/(e**(sigma*t/epsilon**2)*epsilon**2)", "expr2": "q*sigma/(e**(sigma*t/epsilon)*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(t) = \\frac{\\sigma q_0}{\\epsilon_0\\epsilon}e^{-\\sigma t/\\epsilon_0\\epsilon}", "expr2": "W = \\frac{q^2}{8\\pi \\epsilon} \\left( \\frac{1}{a} - \\frac{1}{b} \\right)"}, "preprocessed_expressions": {"expr1": "q*sigma/(e**(sigma*t/epsilon**2)*epsilon**2)", "expr2": "q**2*(-a + b)/(8*a*b*epsilon*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q = \\Delta U = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right)", "expr2": "I(t) = \\frac{\\sigma q}{\\epsilon} e^{-\\frac{\\sigma}{\\epsilon} t}"}, "preprocessed_expressions": {"expr1": "q**2*(-a + b)/(8*a*b*epsilon**2*pi)", "expr2": "q*sigma/(e**(sigma*t/epsilon)*epsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q = \\Delta U = \\frac{q_0^2}{8\\pi\\epsilon_0\\epsilon}\\left(\\frac{1}{a}-\\frac{1}{b}\\right)", "expr2": "W = \\frac{q^2}{8\\pi \\epsilon} \\left( \\frac{1}{a} - \\frac{1}{b} \\right)"}, "preprocessed_expressions": {"expr1": "q**2*(-a + b)/(8*a*b*epsilon**2*pi)", "expr2": "q**2*(-a + b)/(8*a*b*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_67", "solution": "Let me solve this step by step.\n\n1) First, let's recall that the electric potential must satisfy Poisson's equation:\n   * Inside the sphere (r < R): ∇²Φ = -ρ/ε₀ = -qδ(r)/ε₀\n   * Outside the sphere (r > R): ∇²Φ = 0 (Laplace's equation)\n\n2) The general solution in spherical coordinates can be written as:\n   * For r < R: Φᵢₙ = A₁r + B₁/r + sum of spherical harmonics\n   * For r > R: Φₒᵤₜ = A₂r + B₂/r + sum of spherical harmonics\n\n3) Boundary conditions:\n   * At r = R: Φ = V₀cos(θ)\n   * At r = 0: potential must be finite\n   * At r → ∞: potential must go to zero\n   * Potential must be continuous at r = R\n\n4) Due to the cos(θ) dependence on the surface, we only need P₁(cos θ) = cos(θ) terms.\n\n5) Inside sphere (r < R):\n   * B₁/r term is allowed because of point charge at origin\n   * B₁ = q/(4πε₀)\n   * Regular term: A₁r cos(θ)\n\n6) Outside sphere (r > R):\n   * Only B₂/r term is allowed (A₂r would diverge at infinity)\n   * Φₒᵤₜ = B₂cos(θ)/r\n\n7) At r = R:\n   * A₁R cos(θ) + q/(4πε₀r) = V₀cos(θ)\n   * B₂cos(θ)/R = V₀cos(θ)\n\n8) Solving:\n   * B₂ = V₀R\n   * A₁ = (V₀ - q/(4πε₀R))/R\n\nTherefore, the complete solution is:\n\nFor r < R:\nΦᵢₙ = [(V₀ - q/(4πε₀R))/R]r cos(θ) + q/(4πε₀r)\n\nFor r > R:\nΦₒᵤₜ = V₀R cos(θ)/r\n\n\\[\\boxed{\\Phi = \\begin{cases} \n[(V_0 - \\frac{q}{4\\pi\\epsilon_0R})\\frac{r}{R}]\\cos\\theta + \\frac{q}{4\\pi\\epsilon_0r}, & r < R \\\\\nV_0R\\frac{\\cos\\theta}{r}, & r > R\n\\end{cases}}\\]", "final_answers": ["\\Phi = \\begin{cases} \n[(V_0 - \\frac{q}{4\\pi\\epsilon_0R})\\frac{r}{R}]\\cos\\theta + \\frac{q}{4\\pi\\epsilon_0r}, & r < R \\\\\nV_0R\\frac{\\cos\\theta}{r}, & r > R\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Phi = \\begin{cases} \n[(V_0 - \\frac{q}{4\\pi\\epsilon_0R})\\frac{r}{R}]\\cos\\theta + \\frac{q}{4\\pi\\epsilon_0r}, & r < R \\\\\nV_0R\\frac{\\cos\\theta}{r}, & r > R\n\\end{cases}", "expr2": "\\Phi_- = \\frac{q}{4\\pi\\epsilon_0 r} - \\frac{q}{4\\pi\\epsilon_0 R} + \\frac{V_0 \\cos \\theta}{R} r"}, "preprocessed_expressions": {"expr1": "q/(4*epsilonr*pi) + V*a*begin*c*e*r*s**2*cos(theta)/R - a*begin*c*e*q*r*s**2*cos(theta)/(4*R*epsilonR*pi)", "expr2": "q/(4*epsilon*pi*r) + V*r*cos(theta)/R - q/(4*R*epsilon*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Phi = \\begin{cases} \n[(V_0 - \\frac{q}{4\\pi\\epsilon_0R})\\frac{r}{R}]\\cos\\theta + \\frac{q}{4\\pi\\epsilon_0r}, & r < R \\\\\nV_0R\\frac{\\cos\\theta}{r}, & r > R\n\\end{cases}", "expr2": "\\Phi_+ = \\frac{V_0 R^2}{r^2} \\cos \\theta"}, "preprocessed_expressions": {"expr1": "q/(4*epsilonr*pi) + V*a*begin*c*e*r*s**2*cos(theta)/R - a*begin*c*e*q*r*s**2*cos(theta)/(4*R*epsilonR*pi)", "expr2": "R**2*V*cos(theta)/r**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_8", "solution": "Let me solve this step by step.\n\n1) First, recall the Lorentz transformation for electric and magnetic fields:\n   * E'ₓ = Eₓ\n   * E'ᵧ = γ(Eᵧ - vBz)\n   * E'z = γ(Ez + vBy)\n   * B'ₓ = Bₓ\n   * B'ᵧ = γ(Bᵧ + vEz)\n   * B'z = γ(Bz - vEy)\n   where γ = 1/√(1-v²)\n\n2) For E² - B², let's expand in the primed frame:\n   E'² - B'² = (E'ₓ)² + (E'ᵧ)² + (E'z)² - [(B'ₓ)² + (B'ᵧ)² + (B'z)²]\n\n3) Substituting the transformations:\n   = Eₓ² + γ²(Eᵧ - vBz)² + γ²(Ez + vBy)² \n   - [Bₓ² + γ²(Bᵧ + vEz)² + γ²(Bz - vEy)²]\n\n4) Expanding the squared terms and collecting like terms:\n   After algebraic manipulation, all v² terms and cross terms cancel out\n   The result is: E'² - B'² = E² - B²\n\n5) For E·B, expand in primed frame:\n   E'·B' = E'ₓB'ₓ + E'ᵧB'ᵧ + E'zB'z\n\n6) Substituting transformations:\n   = EₓBₓ + γ²(Eᵧ - vBz)(Bᵧ + vEz) + γ²(Ez + vBy)(Bz - vEy)\n\n7) Expanding and collecting terms:\n   All v terms and γ² terms cancel out\n   The result is: E'·B' = E·B\n\nTherefore, both E² - B² and E·B are Lorentz invariant quantities.\n\n\\[\\boxed{E^2 - B^2 \\text{ and } \\mathbf{E} \\cdot \\mathbf{B} \\text{ are Lorentz invariant}}\\]", "final_answers": ["E^2 - B^2 \\text{ and } \\mathbf{E} \\cdot \\mathbf{B} \\text{ are Lorentz invariant}"], "equivalency_results": [{"input_expressions": {"expr1": "E^2 - B^2 \\text{ and } \\mathbf{E} \\cdot \\mathbf{B} \\text{ are Lorentz invariant}", "expr2": "E^2 - B^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E^2 - B^2 \\text{ and } \\mathbf{E} \\cdot \\mathbf{B} \\text{ are Lorentz invariant}", "expr2": "\\mathbf{E} \\cdot \\mathbf{B}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_60", "solution": "Let's solve this step by step.\n\n1) First, let's recall key principles:\n- Due to Gauss's law, D(r) = Q/(4πr²) in the region a < r < b\n- E(r) = D(r)/ε(r)\n- The relationship between D and E in a dielectric is D = εE\n- Polarization charge density ρₚ = -∇⋅P where P = D - ε₀E\n\n2) Part (a): Finding D(r)\n- From Gauss's law directly:\n- D(r) = Q/(4πr²) for a < r < b\n\n3) Part (b): Finding Capacitance\n- Capacitance C = Q/V where V is potential difference\n- V = -∫E(r)dr from a to b\n- E(r) = D(r)/ε(r) = [Q/(4πr²)][1 + Kr]/ε₀\n- V = -(Q/4πε₀)∫(1 + Kr)/r²dr from a to b\n- V = -(Q/4πε₀)[(-1/r + K ln r)]ᵇₐ\n- V = (Q/4πε₀)[1/a - 1/b + K(ln a - ln b)]\n- C = Q/V = 4πε₀/[1/a - 1/b + K(ln a - ln b)]\n\n4) Part (c): Finding ρₚ\n- P = D - ε₀E = D - ε₀D/ε = D(1 - ε₀/ε)\n- P = (Q/4πr²)[1 - (1 + Kr)]\n- ρₚ = -∇⋅P = -(1/r²)∂(r²P)/∂r\n- After calculation: ρₚ = -(QK/4πr³)\n\n5) Part (d): Surface polarization charge density\n- At r = a: σₚ = P(a) = (Q/4πa²)[Kr/(1 + Ka)]\n- At r = b: σₚ = -P(b) = -(Q/4πb²)[Kr/(1 + Kb)]\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\n&(a) \\: D(r) = \\frac{Q}{4\\pi r^2} \\\\\n&(b) \\: C = \\frac{4\\pi\\varepsilon_0}{1/a - 1/b + K(\\ln a - \\ln b)} \\\\\n&(c) \\: \\rho_p = -\\frac{QK}{4\\pi r^3} \\\\\n&(d) \\: \\sigma_p(a) = \\frac{QKa}{4\\pi a^2(1 + Ka)}, \\: \\sigma_p(b) = -\\frac{QKb}{4\\pi b^2(1 + Kb)}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a) \\: D(r) = \\frac{Q}{4\\pi r^2} \\\\\n&(b) \\: C = \\frac{4\\pi\\varepsilon_0}{1/a - 1/b + K(\\ln a - \\ln b)} \\\\\n&(c) \\: \\rho_p = -\\frac{QK}{4\\pi r^3} \\\\\n&(d) \\: \\sigma_p(a) = \\frac{QKa}{4\\pi a^2(1 + Ka)}, \\: \\sigma_p(b) = -\\frac{QKb}{4\\pi b^2(1 + Kb)}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: D(r) = \\frac{Q}{4\\pi r^2} \\\\\n&(b) \\: C = \\frac{4\\pi\\varepsilon_0}{1/a - 1/b + K(\\ln a - \\ln b)} \\\\\n&(c) \\: \\rho_p = -\\frac{QK}{4\\pi r^3} \\\\\n&(d) \\: \\sigma_p(a) = \\frac{QKa}{4\\pi a^2(1 + Ka)}, \\: \\sigma_p(b) = -\\frac{QKb}{4\\pi b^2(1 + Kb)}\n\\end{align*}", "expr2": "\\mathbf{D} = \\frac{Q}{4 \\pi r^2} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-K*Q*end/(4*b*pi*(K*b + 1))", "expr2": "Q*e*mathbf/(4*pi*r**2)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_69", "solution": "Let me solve this step by step.\n\n1) First, let's understand what contributes to the potential:\n   * The uniform field E₀\n   * The original charge q on the sphere\n   * The induced charge distribution (polarization)\n\n2) For points outside the sphere (r > a):\n   * The potential due to E₀: -E₀r cos θ\n   * The potential due to q: q/(4πε₀r)\n   * The potential due to induced dipole: (p·r)/(4πε₀r³) = (pE₀ cos θ)/(4πε₀r²)\n   where p is the dipole moment\n\n3) For points inside the sphere (r < a):\n   * The potential must be constant (conductor property)\n   * Let's call this constant V₀\n\n4) The dipole moment can be found by matching boundary conditions:\n   * At r = a, the potential must be continuous\n   * The induced dipole moment p = 4πε₀a³E₀\n\n5) The complete potential solution:\n   Outside (r > a):\n   V = q/(4πε₀r) - E₀r cos θ + (a³E₀ cos θ)/r²\n\n   Inside (r < a):\n   V = constant = q/(4πε₀a) - E₀a cos θ\n\n6) The six energy terms:\n   a) W(q,q): Self-energy of charge q (infinite)\n   b) W(E₀,E₀): Energy of uniform field (unbounded)\n   c) W(p,p): Self-energy of induced dipole (finite)\n   d) W(q,E₀): Interaction energy of q with E₀ (unbounded)\n   e) W(q,p): Interaction energy of q with induced dipole (finite)\n   f) W(E₀,p): Interaction energy of E₀ with induced dipole (finite)\n\nThe final answer for the dipole moment is:\n\n\\[ \\boxed{p = 4\\pi\\varepsilon_0a^3E_0} \\]", "final_answers": ["p = 4\\pi\\varepsilon_0a^3E_0"], "equivalency_results": [{"input_expressions": {"expr1": "p = 4\\pi\\varepsilon_0a^3E_0", "expr2": "\\Phi_1 = \\frac{q}{4\\pi \\varepsilon_0 a}"}, "preprocessed_expressions": {"expr1": "4*E*pi*varepsilona**3", "expr2": "q/(4*a*pi*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p = 4\\pi\\varepsilon_0a^3E_0", "expr2": "\\Phi_2 = -E_0 r \\cos \\theta + \\frac{q}{4\\pi \\varepsilon_0 r} + \\frac{E_0 a^3}{r^2} \\cos \\theta"}, "preprocessed_expressions": {"expr1": "4*E*pi*varepsilona**3", "expr2": "E*a**3*cos(theta)/r**2 - E*r*cos(theta) + q/(4*pi*r*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p = 4\\pi\\varepsilon_0a^3E_0", "expr2": "P = 4\\pi \\varepsilon_0 a^3 E_0"}, "preprocessed_expressions": {"expr1": "4*E*pi*varepsilona**3", "expr2": "4*E*a**3*pi*varepsilon"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_1", "solution": "Let me solve this step by step.\n\n1) The beat frequency is the difference between the transmitted and received frequencies. For a moving object, this is the Doppler shift.\n\n2) For radar, since the signal makes a round trip (to the car and back), the Doppler shift is doubled.\n\n3) The Doppler shift formula for radar is:\n   $f_b = \\frac{2v}{c}f_0$\n   where:\n   - $f_b$ is the beat frequency\n   - $v$ is the velocity of the car\n   - $c$ is the speed of light (3 × 10⁸ m/s)\n   - $f_0$ is the transmitted frequency\n\n4) Let's substitute the values:\n   - $v = 30$ m/s\n   - $c = 3 × 10⁸$ m/s\n   - $f_0 = 10⁹$ Hz\n\n5) $f_b = \\frac{2(30)}{3 × 10⁸}(10⁹)$\n\n6) $f_b = \\frac{60 × 10⁹}{3 × 10⁸}$\n\n7) $f_b = 200$ Hz\n\nTherefore, the beat frequency is 200 Hz.\n\n\\[ \\boxed{200 \\text{ Hz}} \\]", "final_answers": ["200 \\text{ Hz}"], "equivalency_results": [{"input_expressions": {"expr1": "200 \\text{ Hz}", "expr2": "200 \\, \\text{Hz}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_56", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when a dielectric sphere is placed in a uniform electric field:\n   - The field inside the sphere (E_in) is uniform but different from E_0\n   - The field outside (E_out) is a superposition of the original field and the field due to polarization\n\n2) For a dielectric sphere in a uniform field E_0, the electric field outside the sphere in polar coordinates is:\n   E_out = E_0[cos(θ)(1 - α)r̂ + sin(θ)(1 + α)θ̂]\n   where α = (K_e - 1)/(K_e + 2)(R³/r³)\n\n3) At the surface of the sphere (r = R):\n   α = (K_e - 1)/(K_e + 2)\n\n4) Therefore, at point p on the surface:\n   E = E_0[cos(θ)(1 - α)r̂ + sin(θ)(1 + α)θ̂]\n   where α = (K_e - 1)/(K_e + 2)\n\n5) The bound surface charge density σ_b is given by:\n   σ_b = ϵ_0(E_out - E_in)·n̂\n   where n̂ is the unit normal vector (r̂ in this case)\n\n6) The field inside the sphere is:\n   E_in = 3E_0/(K_e + 2)\n\n7) Therefore:\n   σ_b = ϵ_0[E_0cos(θ)(1 - α) - 3E_0/(K_e + 2)]\n   \n8) Substituting α = (K_e - 1)/(K_e + 2):\n   σ_b = ϵ_0E_0cos(θ)[3/(K_e + 2)]\n\nThe final answer for the bound surface charge density is:\n\n\\[ \\boxed{\\sigma_b = 3\\epsilon_0 E_0 \\cos(\\theta)/(K_e + 2)} \\]\n\nThis shows that the bound surface charge density varies as cos(θ), being maximum at θ = 0° (facing the positive plate) and minimum at θ = 180° (facing the negative plate).", "final_answers": ["\\sigma_b = 3\\epsilon_0 E_0 \\cos(\\theta)/(K_e + 2)"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma_b = 3\\epsilon_0 E_0 \\cos(\\theta)/(K_e + 2)", "expr2": "E = K_e E_0 \\cos \\theta \\, e_r - E_0 \\sin \\theta \\, e_\\theta"}, "preprocessed_expressions": {"expr1": "3*E*epsilon*cos(theta)/(K + 2)", "expr2": "E*(K*cos(e*theta) - sin(a*e**2*h*t*theta))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma_b = 3\\epsilon_0 E_0 \\cos(\\theta)/(K_e + 2)", "expr2": "\\sigma_p = \\epsilon_0 (K_e - 1) E_0 \\cos \\theta"}, "preprocessed_expressions": {"expr1": "3*E*epsilon*cos(theta)/(K + 2)", "expr2": "E*epsilon(K - 1)*cos(theta)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_51", "solution": "Let's solve this step by step.\n\n(a) For constant voltage case:\n\n1) The capacitor can be considered as two parallel capacitors:\n   - One with dielectric (length x)\n   - One without dielectric (length b-x)\n\n2) Total capacitance:\n   C = C₁ + C₂\n   C = (ε₀Ka/d)x + (ε₀a/d)(b-x)\n   C = (ε₀a/d)[Kx + (b-x)]\n\n3) Energy stored in capacitor:\n   U = ½CV² = ½(ε₀a/d)[Kx + (b-x)]V²\n\n4) Force is negative derivative of energy with respect to x:\n   F = -dU/dx = -½(ε₀a/d)(K-1)V²\n\n\\[ \\boxed{F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2} \\]\n\n(b) For constant charge case:\n\n1) Initial charge when fully inserted:\n   Q = C₀V where C₀ = (ε₀Ka/d)b\n\n2) When partially pulled out, voltage changes but charge remains constant:\n   Q = CV' where C = (ε₀a/d)[Kx + (b-x)]\n\n3) Since Q remains constant:\n   V' = Q/C = (ε₀Ka/d)bV/[(ε₀a/d)(Kx + (b-x))]\n\n4) Energy stored:\n   U = ½Q²/C = ½(ε₀Ka/d)²b²V²/[(ε₀a/d)(Kx + (b-x))]\n\n5) Force:\n   F = -dU/dx = -½(ε₀a/d)(K-1)V²(Kb/[Kx + (b-x)])²\n\n\\[ \\boxed{F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2\\left(\\frac{Kb}{Kx + (b-x)}\\right)^2} \\]\n\nThe negative sign indicates the force is in the direction to pull the dielectric back into the capacitor in both cases.", "final_answers": ["F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2", "F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2\\left(\\frac{Kb}{Kx + (b-x)}\\right)^2"], "equivalency_results": [{"input_expressions": {"expr1": "F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2", "expr2": "F = \\frac{\\varepsilon_0(K-1)aV^2}{2d}"}, "preprocessed_expressions": {"expr1": "V**2*a*epsilon*(1 - K)/(2*d)", "expr2": "V**2*a*varepsilon(K - 1)/(2*d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2", "expr2": "F = \\frac{\\varepsilon_0 K^2 (K-1)}{[(K-1)x + b]^2} \\cdot \\frac{a b^2}{2d} V_0^2"}, "preprocessed_expressions": {"expr1": "V**2*a*epsilon*(1 - K)/(2*d)", "expr2": "K**2*V**2*a*b**2*varepsilon*(K - 1)/(2*d*(K**2*x**2 + 2*K*b*x - 2*K*x**2 + b**2 - 2*b*x + x**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2\\left(\\frac{Kb}{Kx + (b-x)}\\right)^2", "expr2": "F = \\frac{\\varepsilon_0(K-1)aV^2}{2d}"}, "preprocessed_expressions": {"expr1": "K**2*V**2*a*b**2*epsilon*(1 - K)/(2*d*(K**2*x**2 + 2*K*b*x - 2*K*x**2 + b**2 - 2*b*x + x**2))", "expr2": "V**2*a*varepsilon(K - 1)/(2*d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\epsilon_0 a}{2d}(K-1)V^2\\left(\\frac{Kb}{Kx + (b-x)}\\right)^2", "expr2": "F = \\frac{\\varepsilon_0 K^2 (K-1)}{[(K-1)x + b]^2} \\cdot \\frac{a b^2}{2d} V_0^2"}, "preprocessed_expressions": {"expr1": "K**2*V**2*a*b**2*epsilon*(1 - K)/(2*d*(K**2*x**2 + 2*K*b*x - 2*K*x**2 + b**2 - 2*b*x + x**2))", "expr2": "K**2*V**2*a*b**2*varepsilon*(K - 1)/(2*d*(K**2*x**2 + 2*K*b*x - 2*K*x**2 + b**2 - 2*b*x + x**2))"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 0.5}
{"id": "electro/5_6", "solution": "Let's solve this step by step:\n\n1) This is a problem involving the Doppler effect combined with the periodic nature of the source's motion relative to the conducting sheet.\n\n2) The charged particle moving above the undulating surface will create an image charge that moves with it, creating a periodic variation in the electromagnetic field.\n\n3) The key components are:\n   - The particle moves with velocity v in x-direction\n   - The conducting sheet has wavelength L\n   - The radiation is observed at angle θ\n\n4) For a moving source of waves, the observed wavelength λ is related to the source wavelength L by the relativistic Doppler effect formula:\n\n   λ = L(1 - β cos θ)\n\n   where β = v/c\n\n5) However, in this case, the source wavelength L is not directly the wavelength of the radiation. The particle passes over one wavelength L of the conducting sheet in time t = L/v.\n\n6) During this time, one complete cycle of radiation is emitted. Therefore, the radiation wavelength λ must satisfy:\n\n   λ = cT = c(L/v)(1 - β cos θ)\n   \n   where T is the period of one cycle.\n\n7) Simplifying:\n   λ = (c/v)L(1 - (v/c)cos θ)\n   λ = L((1/β) - cos θ)\n\nTherefore, the wavelength of radiation detected by the observer is:\n\n\\[ \\boxed{\\lambda = L(\\frac{1}{\\beta} - \\cos \\theta)} \\]\n\nwhere β = v/c, L is the wavelength of the conducting sheet undulation, and θ is the observation angle.", "final_answers": ["\\lambda = L(\\frac{1}{\\beta} - \\cos \\theta)"], "equivalency_results": [{"input_expressions": {"expr1": "\\lambda = L(\\frac{1}{\\beta} - \\cos \\theta)", "expr2": "\\lambda = L \\left(\\frac{c}{v} - \\cos \\theta \\right)"}, "preprocessed_expressions": {"expr1": "L(-cos(theta) + 1/beta)", "expr2": "L(c/v - cos(theta))"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_15", "solution": "Let me solve this step by step.\n\n1) To find drift velocity, we'll use the equation:\n   I = nAev_d\n   where:\n   - I is current\n   - n is number density of free electrons\n   - A is cross-sectional area\n   - e is electron charge\n   - v_d is drift velocity\n\n2) For copper:\n   - n ≈ 8.5 × 10²⁸ electrons/m³\n   - e = 1.6 × 10⁻¹⁹ C\n\n3) Calculate area of wire:\n   - diameter = 1 mm = 10⁻³ m\n   - radius = 0.5 × 10⁻³ m\n   - A = πr² = π(0.5 × 10⁻³)² = 7.85 × 10⁻⁷ m²\n\n4) Rearrange equation to solve for v_d:\n   v_d = I/(nAe)\n\n5) Plug in values:\n   v_d = 10/[(8.5 × 10²⁸)(7.85 × 10⁻⁷)(1.6 × 10⁻¹⁹)]\n   = 10/(1.07 × 10⁴)\n   ≈ 9.35 × 10⁻⁴ m/s\n\n6) Convert to cm/s:\n   9.35 × 10⁻⁴ m/s = 9.35 × 10⁻² cm/s\n\n7) Looking at the given options (10⁻⁵, 10⁻², 10¹, 10⁵ cm/sec), \n   the closest value is 10⁻² cm/sec\n\n\\[ \\boxed{10^{-2} \\text{ cm/sec}} \\]", "final_answers": ["10^{-2} \\text{ cm/sec}"], "equivalency_results": [{"input_expressions": {"expr1": "10^{-2} \\text{ cm/sec}", "expr2": "10^{-2} \\text{ cm/sec}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_32", "solution": "Let's solve this step by step:\n\n1) First, let's understand what we're dealing with:\n   * A hollow cylinder with inner radius r₀\n   * Outer radius r₀ + Δr where Δr ≪ r₀\n   * Uniform space charge density ρ₀ inside the metal\n   * Net charge is zero\n   * Need to find E-fields and surface charges\n\n2) Due to cylindrical symmetry, the electric field will be radial and will only depend on r.\n\n3) For r < r₀ (inside the hollow region):\n   * By Gauss's law, since there's no enclosed charge, E = 0\n\n4) For r > r₀ + Δr (outside the cylinder):\n   * Since net charge is zero and by Gauss's law, E = 0\n\n5) For r₀ < r < r₀ + Δr (inside the metal):\n   * Using Gauss's law: ∮E⋅dA = Q_enclosed/ε₀\n   * Q_enclosed = ρ₀V = ρ₀π(r² - r₀²)L for length L\n   * E(r) = ρ₀(r² - r₀²)/(2ε₀r)\n\n6) For surface charges:\n   * Let's call inner surface charge density σᵢ and outer σₒ\n   * For net charge to be zero:\n   * σᵢ(2πr₀L) + ρ₀π((r₀+Δr)² - r₀²)L + σₒ(2π(r₀+Δr)L) = 0\n   * σᵢr₀ + ρ₀Δr(r₀ + Δr/2) + σₒ(r₀+Δr) = 0\n\n7) When grounded:\n   * The potential must be zero everywhere in the metal\n   * This means E = 0 inside the metal\n   * All charge moves to the surfaces\n   * The surface charges must still satisfy the net charge = 0 condition\n\nThe final answer for the ungrounded case:\n\\[\\boxed{\n\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}\n}\\]\n\nFor the grounded case:\n\\[\\boxed{\n\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\mathbf{E}_1(r) = \\frac{\\rho_0 r}{2\\epsilon_0} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "e*mathbf*r*rho/(2*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\mathbf{E}_2(r) = \\frac{\\rho_0 r_0^2}{2r\\epsilon_0} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "e*mathbf*r*rho/(2*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\mathbf{E}_3(r) = 0"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\sigma(r_0) = -\\frac{\\rho_0 r_0}{2}"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "-r*rho/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\sigma(r_0 + \\Delta r) = \\frac{\\rho_0 r_0^2}{2(r_0 + \\Delta r)}"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "r*rho/(2*(Delta + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "E = 0"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r < r_0) &= 0 \\\\\nE(r_0 < r < r_0+\\Delta r) &= \\frac{\\rho_0(r^2 - r_0^2)}{2\\epsilon_0r} \\\\\nE(r > r_0+\\Delta r) &= 0 \\\\\n\\sigma_i &= -\\frac{\\rho_0\\Delta r(r_0 + \\Delta r/2)}{r_0} \\\\\n\\sigma_o &= \\frac{\\rho_0\\Delta r r_0}{r_0+\\Delta r}\n\\end{align*}", "expr2": "\\sigma(r_0 + \\Delta r) = 0"}, "preprocessed_expressions": {"expr1": "Delta*end*r*rho/(Delta + 1)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\mathbf{E}_1(r) = \\frac{\\rho_0 r}{2\\epsilon_0} \\mathbf{e}_r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\mathbf{E}_2(r) = \\frac{\\rho_0 r_0^2}{2r\\epsilon_0} \\mathbf{e}_r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\mathbf{E}_3(r) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\sigma(r_0) = -\\frac{\\rho_0 r_0}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\sigma(r_0 + \\Delta r) = \\frac{\\rho_0 r_0^2}{2(r_0 + \\Delta r)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "E = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= 0 \\text{ everywhere} \\\\\n\\sigma_i &= -\\sigma_o\\frac{r_0+\\Delta r}{r_0}\n\\end{align*}", "expr2": "\\sigma(r_0 + \\Delta r) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_35", "solution": "Let's solve this step by step.\n\n1) First, let's recall key principles:\n   * Charges in a conductor move under the influence of electric fields\n   * In equilibrium, the electric field inside a conductor must be zero\n   * Charges in a conductor can only reside on the surface in equilibrium\n   * The relaxation time for a conductor is τ = ε/σ\n\n2) Case (a): Spherical Conductor\n   * Due to perfect spherical symmetry, the charges will move radially outward\n   * The movement will be uniform in all directions\n   * All charges will end up on the surface, distributed uniformly\n   * The final charge distribution will be a uniform surface charge density\n   * No oscillations will occur due to the resistive nature of the medium\n\n3) Case (b): Non-spherical Conductor\n   * The charge movement will not be uniform\n   * Local concentrations of charge may occur temporarily\n   * The final distribution will still be on the surface\n   * The surface charge density will not be uniform\n   * The distribution will depend on the conductor's geometry\n\n4) Energy Analysis:\n   * Initial energy includes both electrostatic potential energy and bulk charge energy\n   * During the movement, some energy is converted to heat due to resistive forces\n   * The final state has only surface charge distribution\n\n5) Energy Comparison:\n   * For the sphere: Minimum energy loss, most efficient path to equilibrium\n   * For non-sphere: More energy is lost to heat due to non-uniform paths\n   * Both cases reach a lower energy state than initial\n\nThe final answer can be summarized as:\n\n\\[\\boxed{\\begin{array}{l} \n\\text{Sphere: Uniform radial charge movement to surface, minimal energy loss} \\\\\n\\text{Non-sphere: Non-uniform charge movement, greater energy dissipation} \\\\\n\\text{Both: Final state has surface charges only, E_{final} < E_{initial}}\n\\end{array}}\\]", "final_answers": ["\\begin{array}{l} \n\\text{Sphere: Uniform radial charge movement to surface, minimal energy loss} \\\\\n\\text{Non-sphere: Non-uniform charge movement, greater energy dissipation} \\\\\n\\text{Both: Final state has surface charges only, E_{final} < E_{initial}}\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{Sphere: Uniform radial charge movement to surface, minimal energy loss} \\\\\n\\text{Non-sphere: Non-uniform charge movement, greater energy dissipation} \\\\\n\\text{Both: Final state has surface charges only, E_{final} < E_{initial}}\n\\end{array}", "expr2": "\\begin{aligned}\n&\\mathbf{E} = 0, \\\\\n&\\rho = 0, \\\\\n&\\mathbf{J} = 0 \\quad \\text{(for $t \\to \\infty$)} \\\\\n&\\text{Charge distributed uniformly on the spherical surface.} \\\\\n&\\text{Electric energy decreases, converted to heat.}\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_12", "solution": "Let's solve this step by step.\n\n(a) First, let's determine the electric and magnetic fields in region I:\n\n1) Due to circular symmetry and the parallel plate geometry:\n- E field must be uniform and perpendicular to plates (z-direction)\n- E field magnitude must be V/d\n- E field must oscillate with same frequency as voltage\n\nTherefore: $\\vec{E} = \\frac{V_0}{d}\\cos(\\omega t)\\hat{z}$\n\n2) For B field:\n- Must be azimuthal (φ-direction) due to symmetry\n- Varies with radius r due to Ampère's law\n- From Faraday's law: $\\nabla \\times \\vec{E} = -\\frac{\\partial \\vec{B}}{\\partial t}$\n\nUsing Stokes' theorem and symmetry:\n$B_φ(r) = -\\frac{r}{2}\\frac{\\partial E_z}{\\partial t} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t)$\n\n(b) For current:\n\n1) Displacement current in region I:\n$I_d = \\epsilon_0\\frac{d\\Phi_E}{dt} = \\epsilon_0\\pi a^2\\frac{\\partial E}{\\partial t} = -\\epsilon_0\\pi a^2\\frac{V_0\\omega}{d}\\sin(\\omega t)$\n\n2) Current density in plates:\n$\\vec{J} = \\frac{I}{2\\pi r}\\hat{r}$ where I is the total current above\n\nTherefore: $\\vec{J} = -\\frac{\\epsilon_0 a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)\\hat{r}$\n\n(c) For magnetic field in region II:\n\n1) Same azimuthal form as region I but different magnitude\n2) At the plate surface, the discontinuity in B is related to surface current K by:\n$\\vec{K} = \\frac{1}{\\mu_0}(\\vec{B}_2 - \\vec{B}_1) \\times \\hat{n}$\n\n3) The surface current density K is related to the total current I by:\n$K = \\frac{I}{2\\pi r}$\n\nTherefore:\n$B_{II} - B_I = \\mu_0K = \\frac{\\mu_0I}{2\\pi r}$\n\nThe final expression for B in region II is:\n\n\\[\\boxed{B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)}\\]", "final_answers": ["B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)"], "equivalency_results": [{"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "E^{(I)}_z = - \\frac{V_0}{d} \\cos \\omega t"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "-V*cos(omega*t)/d"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "B_{\\phi}^{(I)} = \\frac{\\mu_0 \\epsilon_0 V_0 \\omega}{2d} r \\sin \\omega t"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "V*epsilon*mu*omega*r*sin(omega*t)/(2*d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "I = -\\frac{\\pi a^2 \\epsilon_0 V_0 \\omega}{d} \\sin \\omega t"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "-V*a**2*epsilon*omega*pi*sin(omega*t)/d"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "j_l(r) = \\frac{(a^2 - r^2) \\epsilon_0 V_0 \\omega}{2 d r} \\sin (\\omega t) \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "V*e*epsilon*mathbf*omega*(a**2 - r**2)*sin(omega*t)/(2*dr)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "B^{(II)}_{\\phi} = \\frac{\\mu_0 \\epsilon_0 a^2 V_0 \\omega}{2dr} \\sin \\omega t"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "V*a**2*epsilon*mu*omega*sin(omega*t)/(2*dr)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_{II} = \\frac{rV_0\\omega}{2d}\\sin(\\omega t) + \\frac{\\mu_0\\epsilon_0\\pi a^2V_0\\omega}{2\\pi rd}\\sin(\\omega t)", "expr2": "\\mathbf{n} \\times (\\mathbf{B}^{(II)} - \\mathbf{B}^{(I)}) = \\mu_0 \\mathbf{j}"}, "preprocessed_expressions": {"expr1": "V*omega*(a**2*epsilon*mu + r**2)*sin(omega*t)/(2*d*r)", "expr2": "j*mathbf*mu"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_2", "solution": "Let me solve this step by step.\n\n1) For a battery with emf $ε_0$ and internal resistance $r$, the voltage-current relationship is:\n   V = $ε_0$ - Ir\n   where V is the terminal voltage and I is the current.\n\n2) From the given current-voltage characteristic:\n   - When I = 0 (open circuit), V = 12V\n   - When V = 0 (short circuit), I = 3A\n\n3) Using the first condition (I = 0):\n   12 = $ε_0$ - (0)r\n   Therefore, $ε_0$ = 12V\n\n4) Using the second condition (V = 0):\n   0 = 12 - (3)r\n   3r = 12\n   r = 4Ω\n\n5) The short-circuit current ($I_{sc}$) is the current when V = 0, which we already found:\n   $I_{sc}$ = 3A\n\n6) Let's verify:\n   - The emf $ε_0$ = 12V\n   - The internal resistance r = 4Ω\n   - The short-circuit current = 3A\n   These values satisfy the battery equation: V = $ε_0$ - Ir\n\nThe final answer with all three values is:\n\n\\[\\boxed{ε_0 = 12V, r = 4Ω, I_{sc} = 3A}\\]", "final_answers": ["ε_0 = 12V, r = 4Ω, I_{sc} = 3A"], "equivalency_results": [{"input_expressions": {"expr1": "ε_0 = 12V, r = 4Ω, I_{sc} = 3A", "expr2": "\\varepsilon_0 = 3 \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "ε_0 = 12V, r = 4Ω, I_{sc} = 3A", "expr2": "r = 4.8 \\, \\Omega"}, "preprocessed_expressions": {"expr1": "3*A", "expr2": "4.8*Omega"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "ε_0 = 12V, r = 4Ω, I_{sc} = 3A", "expr2": "I = 0.625 \\, \\text{A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_24", "solution": "Let's solve this step by step.\n\n1) First, recall that in cylindrical coordinates, the magnetic field must satisfy Maxwell's equations:\n   - ∇ · B = 0 (no magnetic monopoles)\n   - ∇ × B = μ₀j (Ampère's law)\n\n2) For part (a), let's use ∇ · B = 0:\n   - In cylindrical coordinates: $\\frac{1}{r}\\frac{\\partial}{\\partial r}(rB_r) + \\frac{1}{\\partial \\theta}B_\\theta + \\frac{\\partial B_z}{\\partial z} = 0$\n   - Given $B_\\theta = 0$ and $B_z = B_0(1 + \\nu z^2)$\n\n3) Therefore:\n   $\\frac{1}{r}\\frac{\\partial}{\\partial r}(rB_r) + \\frac{\\partial}{\\partial z}[B_0(1 + \\nu z^2)] = 0$\n   $\\frac{1}{r}\\frac{\\partial}{\\partial r}(rB_r) + 2B_0\\nu z = 0$\n\n4) Integrating with respect to r:\n   $rB_r = -B_0\\nu zr^2 + C$\n   $B_r = -B_0\\nu zr + \\frac{C}{r}$\n\n5) Since we want the field near the axis to be finite, C must be 0.\n   Therefore: $B_r = -B_0\\nu zr$\n\n6) For part (b), we use Ampère's law: ∇ × B = μ₀j\n\n7) In cylindrical coordinates:\n   $j_r = \\frac{1}{\\mu_0}(\\frac{1}{r}\\frac{\\partial B_z}{\\partial \\theta} - \\frac{\\partial B_\\theta}{\\partial z})$ = 0\n   $j_\\theta = \\frac{1}{\\mu_0}(\\frac{\\partial B_r}{\\partial z} - \\frac{\\partial B_z}{\\partial r})$ = $\\frac{1}{\\mu_0}(-B_0\\nu r - 0)$ = $-\\frac{B_0\\nu r}{\\mu_0}$\n   $j_z = \\frac{1}{\\mu_0}[\\frac{1}{r}\\frac{\\partial}{\\partial r}(rB_\\theta) - \\frac{\\partial B_r}{\\partial \\theta}]$ = 0\n\nTherefore:\n$\\mathbf{j} = -\\frac{B_0\\nu r}{\\mu_0}\\mathbf{e}_\\theta$\n\nThe final answer in vector form is:\n\n\\[\\boxed{\\mathbf{j} = -\\frac{B_0\\nu r}{\\mu_0}\\mathbf{e}_\\theta}\\]", "final_answers": ["\\mathbf{j} = -\\frac{B_0\\nu r}{\\mu_0}\\mathbf{e}_\\theta"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{j} = -\\frac{B_0\\nu r}{\\mu_0}\\mathbf{e}_\\theta", "expr2": "B_r(r, z) = -\\nu B_0 r z"}, "preprocessed_expressions": {"expr1": "-B*a*e**2*h*mathbf*nu*r*t/mu", "expr2": "-B*nu*r*z"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{j} = -\\frac{B_0\\nu r}{\\mu_0}\\mathbf{e}_\\theta", "expr2": "\\mathbf{j}(r, z) = -\\frac{1}{\\mu_0} \\nu B_0 r \\mathbf{e}_\\theta"}, "preprocessed_expressions": {"expr1": "-B*a*e**2*h*mathbf*nu*r*t/mu", "expr2": "-B*a*e**2*h*mathbf*nu*r*t/mu"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_23", "solution": "Let's solve this step by step.\n\n(a) For the electric field:\n1) In a coaxial cable, the electric field is radial due to symmetry\n2) Using Gauss's law and the potential difference V between conductors:\n3) The electric field at radius r is: E(r) = V/(r ln(r₂/r₁))\n4) This satisfies ∫E·dr = V from r₁ to r₂\n\n(b) For the magnetic field:\n1) The magnetic field is circular due to symmetry\n2) Using Ampere's law: B(r) = μ₀I/(2πr)\n3) Current I = V/R from Ohm's law\n4) Therefore: B(r) = μ₀V/(2πrR)\n\n(c) The Poynting vector S = E × B:\n1) E is radial (r̂) and B is azimuthal (φ̂)\n2) Therefore S is in the z direction (ẑ)\n3) Magnitude: S = EB = [V/(r ln(r₂/r₁))] × [μ₀V/(2πrR)]\n4) S = μ₀V²/(2πr²R ln(r₂/r₁))\n\n(d) Power flow calculation:\n1) Integrate S over cylindrical surface:\n2) P = ∫S·dA = ∫∫S r dφ dz\n3) P = ∫₀²ᵖ ∫[μ₀V²/(2πr²R ln(r₂/r₁))] r dφ dz\n4) After integration: P = V²/R\n\nThe final answer for the power flow is:\n\n\\[\\boxed{P = \\frac{V^2}{R}}\\]\n\nThis matches the power dissipated in the resistor R according to Ohm's law, confirming energy conservation.", "final_answers": ["P = \\frac{V^2}{R}"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{V^2}{R}", "expr2": "\\mathbf{E} = \\frac{V}{r \\ln \\frac{r_2}{r_1}} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "V**2/R", "expr2": "zoo*V*e*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = \\frac{V^2}{R}", "expr2": "\\mathbf{B} = \\frac{\\mu_0 V}{2 \\pi r R} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {"expr1": "V**2/R", "expr2": "V*a*e**2*h*mathbf*mu*t/(2*R*pi*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = \\frac{V^2}{R}", "expr2": "\\mathbf{N} = \\frac{V^2}{2 \\pi r^2 R \\ln \\frac{r_2}{r_1}} \\mathbf{e}_z"}, "preprocessed_expressions": {"expr1": "V**2/R", "expr2": "zoo*V**2*e*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = \\frac{V^2}{R}", "expr2": "P = \\frac{V^2}{R}"}, "preprocessed_expressions": {"expr1": "V**2/R", "expr2": "V**2/R"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_5", "solution": "Let me solve this step by step:\n\n1) When the switch is closed and steady current is flowing:\n   * The current is I = V/R\n   * Energy stored in inductor is E = ½LI²\n\n2) When switch S is suddenly opened:\n   * The circuit is broken, but due to inductance, current cannot stop instantaneously\n   * The inductor tries to maintain the current flow\n   * This creates a large induced EMF (L di/dt)\n\n3) What happens to the energy:\n   * The energy must be dissipated somewhere (conservation of energy)\n   * In real circuits, this energy is dissipated in several ways:\n     - Heat in the resistor R\n     - Arc across the switch contacts\n     - Electromagnetic radiation\n     - Heat in any parasitic resistance of the inductor\n\n4) The process:\n   * The stored magnetic energy is converted to electrical energy (high voltage spike)\n   * This energy is then converted to:\n     - Thermal energy (heat)\n     - Light and sound (in the arc)\n     - Electromagnetic waves\n\nTherefore, the magnetic energy stored in the inductor is completely converted to other forms of energy, primarily heat and electromagnetic radiation.\n\n\\[\\boxed{\\text{Energy is converted to heat, light, and electromagnetic radiation}}\\]", "final_answers": ["\\text{Energy is converted to heat, light, and electromagnetic radiation}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Energy is converted to heat, light, and electromagnetic radiation}", "expr2": "\\text{The energy is radiated in the form of electromagnetic waves.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_50", "solution": "Let's solve this step by step:\n\n1) First, let's understand what happens when we add a dielectric to half the capacitor:\n   * The capacitor effectively becomes two capacitors in parallel\n   * One half with air (C/2)\n   * One half with dielectric (εC/2)\n\n2) The total capacitance after adding dielectric (C_new) is:\n   C_new = C/2 + εC/2 = C(1+ε)/2\n\n3) For an RC circuit with AC source, the voltage drop across R (V_R) is related to the source voltage (V) by:\n   V_R = V/√(1 + 1/(ω²C²R²))\n\n4) Let's write equations for both cases:\n   Initial: V_R = V/√(1 + 1/(ω²C²R²))\n   Final: 2V_R = V/√(1 + 1/(ω²C_new²R²))\n\n5) Dividing the second equation by the first:\n   2 = √(1 + 1/(ω²C²R²))/√(1 + 1/(ω²C_new²R²))\n\n6) Substitute C_new = C(1+ε)/2:\n   4 = (1 + 1/(ω²C²R²))/(1 + 4/(ω²C²R²(1+ε)²))\n\n7) Let x = 1/(ω²C²R²) for simplicity:\n   4(1 + 4x/(1+ε)²) = 1 + x\n\n8) Expand:\n   4 + 16x/(1+ε)² = 1 + x\n\n9) Solve for ε:\n   3 + 16x/(1+ε)² = x\n   16x/(1+ε)² = x - 3\n   (1+ε)² = 16x/(x-3)\n   1+ε = 4/√(1-3/x)\n   ε = 4/√(1-3ω²C²R²) - 1\n\nTherefore, the dielectric constant is:\n\n\\[\\boxed{\\epsilon = \\frac{4}{\\sqrt{1-3\\omega^2C^2R^2}} - 1}\\]", "final_answers": ["\\epsilon = \\frac{4}{\\sqrt{1-3\\omega^2C^2R^2}} - 1"], "equivalency_results": [{"input_expressions": {"expr1": "\\epsilon = \\frac{4}{\\sqrt{1-3\\omega^2C^2R^2}} - 1", "expr2": "\\varepsilon = \\left(\\frac{4}{\\sqrt{1 - 3R^2 C^2 \\omega^2}} - 1\\right) \\varepsilon_0"}, "preprocessed_expressions": {"expr1": "-1 + 4/sqrt(-3*C**2*R**2*omega**2 + 1)", "expr2": "-varepsilon + 4*varepsilon/sqrt(-3*C**2*R**2*omega**2 + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_7", "solution": "Let's solve this step by step:\n\n1) First, let's consider the electric field in the rest frame of the plates (S'):\n- Due to the uniform charge densities +σ and -σ, the electric field is uniform\n- Using Gauss's law: E' = σ/ε₀ in the +z direction\n- There is no magnetic field in this frame (B' = 0) as charges are at rest\n\n2) Now we need to transform these fields to the lab frame (S) using Lorentz transformations:\n- The plates are moving in the x-direction with velocity v\n- Let β = v/c and γ = 1/√(1-β²)\n\n3) The Lorentz transformations for electromagnetic fields are:\n- Ex = E'x\n- Ey = γ(E'y - vB'z)\n- Ez = γ(E'z + vB'y)\n- Bx = B'x\n- By = γ(B'y + vE'z/c²)\n- Bz = γ(B'z - vE'y/c²)\n\n4) In our case:\n- E'x = E'y = 0, E'z = σ/ε₀\n- B'x = B'y = B'z = 0\n\n5) Applying the transformations:\n- Ex = 0\n- Ey = 0\n- Ez = γ(σ/ε₀)\n- Bx = 0\n- By = γ(v/c²)(σ/ε₀)\n- Bz = 0\n\nTherefore:\n- Electric field: E = γ(σ/ε₀)ẑ\n- Magnetic field: B = γ(v/c²)(σ/ε₀)ŷ = (v/c²)E\n\n\\[\\boxed{E = \\gamma\\frac{\\sigma}{\\epsilon_0}\\hat{z}, \\quad B = \\gamma\\frac{v}{c^2}\\frac{\\sigma}{\\epsilon_0}\\hat{y}}\\]", "final_answers": ["E = \\gamma\\frac{\\sigma}{\\epsilon_0}\\hat{z}, \\quad B = \\gamma\\frac{v}{c^2}\\frac{\\sigma}{\\epsilon_0}\\hat{y}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\gamma\\frac{\\sigma}{\\epsilon_0}\\hat{z}, \\quad B = \\gamma\\frac{v}{c^2}\\frac{\\sigma}{\\epsilon_0}\\hat{y}", "expr2": "E = \\frac{\\gamma \\sigma}{\\varepsilon_0} \\hat{z}"}, "preprocessed_expressions": {"expr1": "gamma*hat*sigma*v*y/(c**2*epsilon)", "expr2": "gamma*hat*sigma*z/varepsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\gamma\\frac{\\sigma}{\\epsilon_0}\\hat{z}, \\quad B = \\gamma\\frac{v}{c^2}\\frac{\\sigma}{\\epsilon_0}\\hat{y}", "expr2": "B = \\frac{v}{\\varepsilon_0 c^2} \\sigma \\hat{y}"}, "preprocessed_expressions": {"expr1": "gamma*hat*sigma*v*y/(c**2*epsilon)", "expr2": "hat*sigma*v*y/(c**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_68", "solution": "Let's solve this step by step.\n\n(a) First, let's establish the general solution:\n\n1) The potential V(r,θ) must satisfy Laplace's equation in spherical coordinates (with azimuthal symmetry):\n   ∇²V = (1/r²)∂/∂r(r²∂V/∂r) + (1/r²sinθ)∂/∂θ(sinθ∂V/∂θ) = 0\n\n2) The general solution can be written as:\n   V(r,θ) = Σ(Ar^n + Br^-(n+1))Pn(cosθ)\n\n3) For r < a (inside):\n   - Must be finite at r = 0\n   - Therefore B terms must be zero\n   V_in(r,θ) = Σ A_n r^n P_n(cosθ)\n\n4) For r > a (outside):\n   - Must vanish at infinity\n   - Therefore A terms must be zero\n   V_out(r,θ) = Σ B_n r^-(n+1) P_n(cosθ)\n\n5) At r = a:\n   V_in(a,θ) = V_out(a,θ) = V(θ)\n\n6) The surface charge density σ can be found from:\n   σ = -ε₀(∂V_out/∂r - ∂V_in/∂r)|_{r=a}\n\n(b) For V(θ) = V₀cos²θ:\n\n1) We need to express cos²θ in terms of Legendre polynomials:\n   cos²θ = (2P₂(cosθ) + 1)/3\n\n2) Therefore:\n   V(θ) = V₀[(2P₂(cosθ) + 1)/3]\n   = (V₀/3) + (2V₀/3)P₂(cosθ)\n\n3) Inside (r < a):\n   V_in(r,θ) = (V₀/3)(r/a)⁰ + (2V₀/3)(r/a)²P₂(cosθ)\n\n4) Outside (r > a):\n   V_out(r,θ) = (V₀/3)(a/r) + (2V₀/3)(a/r)³P₂(cosθ)\n\n5) Surface charge density:\n   σ = -ε₀V₀/a[1/3 + 2P₂(cosθ)]\n\nThe final answer for the potential and surface charge density is:\n\n\\[\\boxed{\n\\begin{align*}\nV_{in}(r,θ) &= \\frac{V_0}{3} + \\frac{2V_0}{3}(\\frac{r}{a})^2P_2(\\cos θ) \\\\\nV_{out}(r,θ) &= \\frac{V_0}{3}\\frac{a}{r} + \\frac{2V_0}{3}(\\frac{a}{r})^3P_2(\\cos θ) \\\\\nσ &= -\\frac{ε_0V_0}{a}[\\frac{1}{3} + 2P_2(\\cos θ)]\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nV_{in}(r,θ) &= \\frac{V_0}{3} + \\frac{2V_0}{3}(\\frac{r}{a})^2P_2(\\cos θ) \\\\\nV_{out}(r,θ) &= \\frac{V_0}{3}\\frac{a}{r} + \\frac{2V_0}{3}(\\frac{a}{r})^3P_2(\\cos θ) \\\\\nσ &= -\\frac{ε_0V_0}{a}[\\frac{1}{3} + 2P_2(\\cos θ)]\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nV_{in}(r,θ) &= \\frac{V_0}{3} + \\frac{2V_0}{3}(\\frac{r}{a})^2P_2(\\cos θ) \\\\\nV_{out}(r,θ) &= \\frac{V_0}{3}\\frac{a}{r} + \\frac{2V_0}{3}(\\frac{a}{r})^3P_2(\\cos θ) \\\\\nσ &= -\\frac{ε_0V_0}{a}[\\frac{1}{3} + 2P_2(\\cos θ)]\n\\end{align*}", "expr2": "\\begin{aligned}\n\\Phi_1 &= \\sum_{n=0}^{\\infty} \\left[ \\frac{2n + 1}{2R^n} \\int_0^\\pi V(\\theta) P_n(\\cos \\theta) \\sin \\theta \\, d\\theta \\right] P_n(\\cos \\theta) r^n, \\\\\n\\Phi_2 &= \\sum_{n=0}^{\\infty} \\left[ \\frac{(2n+1)R^{n+1}}{2} \\int_0^r V(\\theta) P_n(\\cos \\theta) \\sin \\theta \\, d\\theta \\right] \\frac{P_n(\\cos \\theta)}{r^{n+1}}, \\\\\n\\sigma(\\theta) &= \\varepsilon_0 \\sum_{n=0}^{\\infty} \\left[ \\frac{(2n+1)^2}{2R} \\int_0^r V(\\theta) P_n(\\cos \\theta) \\sin \\theta \\, d\\theta \\right] P_n(\\cos \\theta).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n-\\frac{εV}{a}[\\frac{1}{3} + 2P(\\cos θ)]\n\\end{align*}\n~~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\nV_{in}(r,θ) &= \\frac{V_0}{3} + \\frac{2V_0}{3}(\\frac{r}{a})^2P_2(\\cos θ) \\\\\nV_{out}(r,θ) &= \\frac{V_0}{3}\\frac{a}{r} + \\frac{2V_0}{3}(\\frac{a}{r})^3P_2(\\cos θ) \\\\\nσ &= -\\frac{ε_0V_0}{a}[\\frac{1}{3} + 2P_2(\\cos θ)]\n\\end{align*}", "expr2": "\\begin{aligned}\n\\Phi_1 &= \\frac{V_0}{3} + \\frac{2V_0}{3} P_2(\\cos\\theta) \\frac{r^2}{R^2}, \\quad (r < R), \\\\\n\\Phi_2 &= \\frac{V_0 R}{3r} + \\frac{2V_0}{3} P_2(\\cos \\theta) \\frac{R^3}{r^3}, \\quad (r > R), \\\\\n\\sigma(\\theta) &= \\frac{\\varepsilon_0 V_0}{3R} \\left[ 1 + 5 P_2(\\cos \\theta) \\right].\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n-\\frac{εV}{a}[\\frac{1}{3} + 2P(\\cos θ)]\n\\end{align*}\n~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_57", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we know:\n- We have a spherical capacitor with inner radius a and outer radius b\n- Half is filled with dielectric ε₁ and half with ε₂\n- Inner plate has charge Q, outer plate has charge -Q\n\n2) For part (a), to find D₁ and D₂:\n- Due to spherical symmetry, D is radially directed\n- The total flux through any spherical surface must be Q/2 for each half\n- For a spherical surface at radius r:\nD₁(4πr²/2) = Q/2 and D₂(4πr²/2) = Q/2\n- Therefore:\nD₁ = D₂ = Q/(2πr²)\n\n3) For part (b), to find E₁ and E₂:\n- Using D = εE relation:\nE₁ = D₁/ε₁ = Q/(2πr²ε₁)\nE₂ = D₂/ε₂ = Q/(2πr²ε₂)\n\n4) For part (c), to find total capacitance:\n- The potential difference is:\nΔV = ∫(E₁dr) over half + ∫(E₂dr) over half\n- Integrating from a to b:\nΔV = (Q/4π)[(1/ε₁ + 1/ε₂)(1/a - 1/b)]\n- Capacitance is C = Q/ΔV:\nC = 4πab/[(b-a)(1/ε₁ + 1/ε₂)]\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}", "expr2": "D_1 = \\frac{\\epsilon_1 Qr}{2\\pi(\\epsilon_1 + \\epsilon_2) r^3}"}, "preprocessed_expressions": {"expr1": "-2*a*b*end*pi*varepsilon/(a - b)", "expr2": "Q*epsilon/(2*r**2*pi(2*epsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}", "expr2": "D_2 = \\frac{\\epsilon_2 Qr}{2\\pi(\\epsilon_1 + \\epsilon_2) r^3}"}, "preprocessed_expressions": {"expr1": "-2*a*b*end*pi*varepsilon/(a - b)", "expr2": "Q*epsilon/(2*r**2*pi(2*epsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}", "expr2": "E_1 = E_2 = \\frac{Qr}{2\\pi(\\epsilon_1 + \\epsilon_2) r^3}"}, "preprocessed_expressions": {"expr1": "-2*a*b*end*pi*varepsilon/(a - b)", "expr2": "Q/(2*r**2*pi(2*epsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nD_1 = D_2 &= \\frac{Q}{2\\pi r^2} \\\\\nE_1 &= \\frac{Q}{2\\pi r^2\\varepsilon_1} \\\\\nE_2 &= \\frac{Q}{2\\pi r^2\\varepsilon_2} \\\\\nC &= \\frac{4\\pi ab}{(b-a)(1/\\varepsilon_1 + 1/\\varepsilon_2)}\n\\end{align*}", "expr2": "C = \\frac{2\\pi (\\epsilon_1 + \\epsilon_2) ab}{b-a}"}, "preprocessed_expressions": {"expr1": "-2*a*b*end*pi*varepsilon/(a - b)", "expr2": "-2*a*b*pi(2*epsilon)/(a - b)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_9", "solution": "Let's solve this step by step.\n\n(a) First, let's show the Lorentz invariance of E⋅B = 0 and E² = c²B².\n\n1) These relations can be written in terms of the field strength tensor Fμν:\n   * E⋅B = ¼εμναβFμνFαβ = 0 (Lorentz scalar)\n   * E² - c²B² = ½FμνFμν (Lorentz scalar)\n\n2) Since these are written as Lorentz scalars, they must be invariant under Lorentz transformations.\n\n(b) For the second part:\n\n1) In the classical form, K⋅E = K⋅B = 0 means the fields are perpendicular to the propagation direction.\n\n2) The four-vector nμ can be written as nμ = (1, K)/c where K is the unit vector in the propagation direction.\n\n3) The equation nμFμν = 0 in components gives:\n   * For ν = 0: n⋅E = 0\n   * For ν = i: n⋅B = 0 and n×E = cB\n\n4) These are equivalent to the classical conditions, proving Lorentz invariance.\n\n(c) For the wave transformation:\n\n1) The fields in the original frame are:\n   * Ex = f(ct - z)\n   * By = f(ct - z)/c\n   * All other components = 0\n\n2) Under Lorentz transformation with velocity v in z-direction:\n   * γ = 1/√(1-β²), β = v/c\n   * The argument (ct - z) transforms to γ(ct' - βz' - z' + βct') = γ(1-β)(ct' - z')\n\n3) Therefore, in the new frame:\n   * Ex' = γ(Ex - vBy) = γ(1-β)f(γ(1-β)(ct' - z'))\n   * By' = γ(By - vEx/c²) = γ(1-β)f(γ(1-β)(ct' - z'))/c\n\n4) Energy-momentum density in original frame:\n   * u = (E² + c²B²)/8π = f²(ct-z)/4π\n   * S = (E×B)/4π = f²(ct-z)ẑ/4π\n\n5) Total energy-momentum transforms as:\n   * E = ∫udV\n   * P = ∫SdV/c²\n\nThe final answer showing the transformation of energy-momentum is:\n\n\\[\\boxed{(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)}\\]\n\nThis confirms that the energy-momentum transforms as a four-vector under Lorentz transformations.", "final_answers": ["(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)"], "equivalency_results": [{"input_expressions": {"expr1": "(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)", "expr2": "\\text{Lorentz invariance of } \\mathbf{E} \\cdot \\mathbf{B} = 0 \\text{ and } E^2 = c^2 B^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)", "expr2": "n^\\mu F_{\\mu \\nu} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nγ(E - vP, -\\frac{v}{c^2}E + P)\n^"}, {"input_expressions": {"expr1": "(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)", "expr2": "\\begin{align*}\nE_x' &= \\gamma(1 - \\beta) f(ct - z) \\\\\nB_y' &= \\frac{\\gamma}{c} (1 - \\beta) f(ct - z)\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nγ(E - vP, -\\frac{v}{c^2}E + P)\n^"}, {"input_expressions": {"expr1": "(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)", "expr2": "\\begin{align*}\nw' &= \\varepsilon_0 \\gamma^2 (1 - \\beta)^2 f^2(ct - z) \\\\\ng'_z &= \\frac{\\varepsilon_0}{c} \\gamma^2 (1 - \\beta)^2 f^2 \\left[\\gamma(1 - \\beta)(ct' - z')\\right]\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nγ(E - vP, -\\frac{v}{c^2}E + P)\n^"}, {"input_expressions": {"expr1": "(E', P'_z) = γ(E - vP_z, -\\frac{v}{c^2}E + P_z)", "expr2": "\\begin{align*}\nG'_z &= \\gamma \\left( G_z - \\beta \\frac{W}{c} \\right) \\\\\n\\frac{W'}{c} &= \\gamma \\left( \\frac{W}{c} - \\beta G_z \\right)\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\nγ(E - vP, -\\frac{v}{c^2}E + P)\n^"}], "accuracy": 1.0}
{"id": "electro/1_61", "solution": "Let me solve this step by step.\n\nAssumptions:\n1. Current flow is steady (time-independent)\n2. Material is ohmic (obeys Ohm's law)\n3. Material has uniform conductivity σ\n4. Spherical symmetry\n5. Current flows radially between spheres\n\nStep 1: Use Ohm's law in differential form\n- $\\vec{J} = \\sigma \\vec{E}$ where $\\vec{J}$ is current density and $\\vec{E}$ is electric field\n\nStep 2: Due to spherical symmetry, current flows radially\n- Current I is constant through any spherical surface\n- $I = J(r) \\cdot 4\\pi r^2$ where $J(r)$ is magnitude of current density at radius r\n\nStep 3: Express electric field in terms of potential difference\n- $\\vec{E} = -\\nabla V$\n- In spherical coordinates with radial dependence: $E(r) = -\\frac{dV}{dr}$\n\nStep 4: Combine equations\n- $J(r) = \\sigma E(r)$\n- $\\frac{I}{4\\pi r^2} = -\\sigma \\frac{dV}{dr}$\n\nStep 5: Separate variables and integrate from r = a to r = b\n- $\\int_a^b \\frac{I}{4\\pi \\sigma r^2}dr = -\\int_{V_a}^{V_b} dV$\n- $\\frac{I}{4\\pi \\sigma}(\\frac{1}{a} - \\frac{1}{b}) = V_a - V_b$\n\nStep 6: Use definition of resistance R = V/I where V = Vₐ - Vᵦ\n- $R = \\frac{1}{4\\pi \\sigma}(\\frac{1}{a} - \\frac{1}{b})$\n\nTherefore, the resistance between the spherical conductors is:\n\n\\[ \\boxed{R = \\frac{1}{4\\pi \\sigma}(\\frac{1}{a} - \\frac{1}{b})} \\]", "final_answers": ["R = \\frac{1}{4\\pi \\sigma}(\\frac{1}{a} - \\frac{1}{b})"], "equivalency_results": [{"input_expressions": {"expr1": "R = \\frac{1}{4\\pi \\sigma}(\\frac{1}{a} - \\frac{1}{b})", "expr2": "R = \\frac{1}{4\\pi\\sigma} \\left( \\frac{1}{a} - \\frac{1}{b} \\right)"}, "preprocessed_expressions": {"expr1": "(-a + b)/(4*a*b*pi*sigma)", "expr2": "(-a + b)/(4*a*b*pi*sigma)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_59", "solution": "Let's solve this step by step.\n\n1) First, let's understand that in each region, the electric field follows the form E = k/r², where k is different for each region.\n\n2) Let's call the constants k₁, k₂, k₃ for the three regions respectively.\n\n3) The potential difference V is the integral of -E from a to d:\n   V = -∫(k₁/r²)dr from a to b - ∫(k₂/r²)dr from b to c - ∫(k₃/r²)dr from c to d\n\n4) After integration:\n   V = k₁(1/a - 1/b) + k₂(1/b - 1/c) + k₃(1/c - 1/d)\n\n5) At boundaries, D must be continuous:\n   K₁ε₀E₁ = ε₀E₂ at r = b\n   ε₀E₂ = K₂ε₀E₃ at r = c\n\n6) This gives:\n   K₁k₁/b² = k₂/b²\n   k₂/c² = K₂k₃/c²\n\n7) Solving these equations:\n   k₂ = K₁k₁\n   k₃ = k₂/K₂\n\n8) The free charge Q on the inner sphere is:\n   Q = 4πε₀k₁\n\n(a) Free charges:\nQ₁ = 4πε₀V/[1/a - 1/b)/K₁ + (1/b - 1/c) + (1/c - 1/d)/K₂]\nQ₂ = -Q₁\n\n(b) Electric fields:\nFor a < r < b: E₁ = Q₁/(4πε₀K₁r²)\nFor b < r < c: E₂ = Q₁/(4πε₀r²)\nFor c < r < d: E₃ = Q₁/(4πε₀K₂r²)\n\n(c) Polarization charges:\nAt r = a: σₚ = -ε₀(K₁-1)E₁\nAt r = b: σₚ = ε₀(K₁-1)E₁\nAt r = c: σₚ = -ε₀(K₂-1)E₃\nAt r = d: σₚ = ε₀(K₂-1)E₃\n\n(d) The capacitance is:\nC = Q₁/V = 4πε₀/[1/a - 1/b)/K₁ + (1/b - 1/c) + (1/c - 1/d)/K₂]\n\nThe final answer for capacitance is:\n\n\\[ \\boxed{C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}} \\]", "final_answers": ["C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}"], "equivalency_results": [{"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "Q_{\\text{inner}} = Q, \\quad Q_{\\text{outer}} = -Q"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\mathbf{E}(a < r < b) = \\frac{Q}{{4\\pi K_1 \\varepsilon_0 r^2}} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*e*mathbf/(4*K*pi*r**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\mathbf{E}(b < r < c) = \\frac{Q}{{4\\pi \\varepsilon_0 r^2}} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*e*mathbf/(4*pi*r**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\mathbf{E}(c < r < d) = \\frac{Q}{{4\\pi \\varepsilon_0 K_2 r^2}} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*e*mathbf/(4*K*pi*r**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\sigma_P(r = a) = \\frac{Q}{4\\pi a^2} \\frac{1 - K_1}{K_1}"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*(1 - K)/(4*K*a**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\sigma_P(r = b) = \\frac{Q}{4\\pi b^2} \\frac{K_1 - 1}{K_1}"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*(K - 1)/(4*K*b**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\sigma_P(r = c) = \\frac{Q}{4\\pi c^2} \\frac{1 - K_2}{K_2}"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*(1 - K)/(4*K*c**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "\\sigma_P(r = d) = \\frac{Q}{4\\pi d^2} \\frac{K_2 - 1}{K_2}"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "Q*(K - 1)/(4*K*d**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{4\\pi\\varepsilon_0}{\\frac{1}{K_1}(\\frac{1}{a} - \\frac{1}{b}) + (\\frac{1}{b} - \\frac{1}{c}) + \\frac{1}{K_2}(\\frac{1}{c} - \\frac{1}{d})}", "expr2": "C = \\frac{4 \\pi \\varepsilon_0 K_1 K_2 abcd}{K_1 ab (d - c) + K_1 K_2 ad (c - b) + K_2 cd (b - a)}"}, "preprocessed_expressions": {"expr1": "-4*K*a*b*c*d*pi*varepsilon/(K*a*b*d - K*a*c*d + a*b*c - a*b*d + a*c*d - b*c*d)", "expr2": "4*K*a*b*c*d*pi*varepsilon/(K*a*d(-b + c) + a*b(-c + d) + c*d(-a + b))"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_66", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for a spherically symmetric charge distribution, we can use Gauss's law and the fact that the potential and field must be continuous at r = R.\n\n2) Due to the $\\cos \\theta$ dependence, this is not completely spherically symmetric. We should use Legendre polynomials to solve this.\n\n3) The general solution for the potential in spherical coordinates is:\n   * For r < R: $V_{in}(r,\\theta) = \\sum_{l=0}^{\\infty} A_l r^l P_l(\\cos\\theta)$\n   * For r > R: $V_{out}(r,\\theta) = \\sum_{l=0}^{\\infty} B_l r^{-(l+1)} P_l(\\cos\\theta)$\n\n4) Note that $\\cos \\theta = P_1(\\cos\\theta)$, so our charge density only has l = 1 term.\n\n5) The boundary conditions at r = R are:\n   * Continuity of potential: $V_{in}(R,\\theta) = V_{out}(R,\\theta)$\n   * Discontinuity in radial E-field: $-\\frac{\\partial V_{out}}{\\partial r}|_{r=R} + \\frac{\\partial V_{in}}{\\partial r}|_{r=R} = \\frac{\\sigma(\\theta)}{\\epsilon_0}$\n\n6) Given the form of $\\sigma(\\theta)$, only l = 1 terms will survive. Therefore:\n   * $V_{in}(r,\\theta) = A_1 r \\cos\\theta$\n   * $V_{out}(r,\\theta) = B_1 \\frac{\\cos\\theta}{r^2}$\n\n7) From the boundary conditions:\n   * $A_1 R = B_1/R^2$\n   * $2B_1/R^3 + A_1 = \\sigma_0/\\epsilon_0$\n\n8) Solving these equations:\n   * $A_1 = \\frac{\\sigma_0}{3\\epsilon_0}$\n   * $B_1 = \\frac{\\sigma_0 R^3}{3\\epsilon_0}$\n\n9) Therefore:\n   * $V_{in}(r,\\theta) = \\frac{\\sigma_0}{3\\epsilon_0}r\\cos\\theta$\n   * $V_{out}(r,\\theta) = \\frac{\\sigma_0 R^3}{3\\epsilon_0}\\frac{\\cos\\theta}{r^2}$\n\n10) The electric field can be found from $\\vec{E} = -\\nabla V$:\n    * Inside: $\\vec{E}_{in} = -\\frac{\\sigma_0}{3\\epsilon_0}(\\hat{r}\\cos\\theta - \\hat{\\theta}\\sin\\theta)$\n    * Outside: $\\vec{E}_{out} = -\\frac{\\sigma_0 R^3}{3\\epsilon_0}(\\frac{-2\\cos\\theta}{r^3}\\hat{r} - \\frac{\\sin\\theta}{r^3}\\hat{\\theta})$\n\nThe final answer for potential and electric field is:\n\n\\[\\boxed{\n\\begin{aligned}\nV_{in} &= \\frac{\\sigma_0}{3\\epsilon_0}r\\cos\\theta \\\\\nV_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}\\frac{\\cos\\theta}{r^2} \\\\\n\\vec{E}_{in} &= -\\frac{\\sigma_0}{3\\epsilon_0}(\\hat{r}\\cos\\theta - \\hat{\\theta}\\sin\\theta) \\\\\n\\vec{E}_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}(\\frac{2\\cos\\theta}{r^3}\\hat{r} + \\frac{\\sin\\theta}{r^3}\\hat{\\theta})\n\\end{aligned}\n}\\]", "final_answers": ["\\begin{aligned}\nV_{in} &= \\frac{\\sigma_0}{3\\epsilon_0}r\\cos\\theta \\\\\nV_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}\\frac{\\cos\\theta}{r^2} \\\\\n\\vec{E}_{in} &= -\\frac{\\sigma_0}{3\\epsilon_0}(\\hat{r}\\cos\\theta - \\hat{\\theta}\\sin\\theta) \\\\\n\\vec{E}_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}(\\frac{2\\cos\\theta}{r^3}\\hat{r} + \\frac{\\sin\\theta}{r^3}\\hat{\\theta})\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\nV_{in} &= \\frac{\\sigma_0}{3\\epsilon_0}r\\cos\\theta \\\\\nV_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}\\frac{\\cos\\theta}{r^2} \\\\\n\\vec{E}_{in} &= -\\frac{\\sigma_0}{3\\epsilon_0}(\\hat{r}\\cos\\theta - \\hat{\\theta}\\sin\\theta) \\\\\n\\vec{E}_{out} &= \\frac{\\sigma_0 R^3}{3\\epsilon_0}(\\frac{2\\cos\\theta}{r^3}\\hat{r} + \\frac{\\sin\\theta}{r^3}\\hat{\\theta})\n\\end{aligned}", "expr2": "\\Phi_+ = \\frac{\\sigma_0 R^3}{3\\varepsilon_0 r^2} \\cos \\theta , \\quad r > R"}, "preprocessed_expressions": {"expr1": "R**3*a*d*e*end*g*hat*i*l*n*sigma*(2*r*cos(theta) + theta*sin(theta))/(3*epsilon*r**3)", "expr2": "R**3*sigma*cos(theta)/(3*r**2*varepsilon)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_15", "solution": "Let me solve this step by step.\n\n1) First, let's analyze the initial and final conditions:\n   * Before t = 0 (switch open): I_L = 0\n   * At t → ∞ (steady state): The inductor acts like a short circuit\n\n2) For the final current (steady state):\n   * The two 200Ω resistors are in parallel\n   * R_equivalent = (200 × 200)/(200 + 200) = 100Ω\n   * I_L(∞) = 10V/100Ω = 0.1A\n\n3) The circuit's time constant τ:\n   * The two 200Ω resistors are in parallel: R_eq = 100Ω\n   * τ = L/R_eq = 10^(-5)/100 = 10^(-7) seconds\n\n4) For an RL circuit, the current follows the equation:\n   * I_L(t) = I_L(∞)(1 - e^(-t/τ))\n   * I_L(t) = 0.1(1 - e^(-t/10^(-7)))\n\n5) Therefore, the complete solution is:\n   * I_L(t) = 0.1(1 - e^(-10^7t)) amperes, for t ≥ 0\n\n\\[\\boxed{I_L(t) = 0.1(1 - e^{-10^7t}) \\text{ A}, \\text{ for } t \\geq 0}\\]", "final_answers": ["I_L(t) = 0.1(1 - e^{-10^7t}) \\text{ A}, \\text{ for } t \\geq 0"], "equivalency_results": [{"input_expressions": {"expr1": "I_L(t) = 0.1(1 - e^{-10^7t}) \\text{ A}, \\text{ for } t \\geq 0", "expr2": "I_L(t) = 0.05(1 - e^{-10^7 t})"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_12", "solution": "Let me solve this step by step.\n\n1) First, let's identify what we know:\n   * Two identical capacitors C\n   * Two identical resistors R\n   * Initial voltage across each capacitor is V₀\n   * Three currents: i₁, i₂, and i₃\n\n2) Let's apply Kirchhoff's Current Law (KCL) at point A:\n   i₁ - i₂ - i₃ = 0\n\n3) For the capacitors:\n   i₃ = C(dv₂/dt)\n   i₁ = C(dv₁/dt)\n   i₂ = C(dv₂/dt)\n\n4) Using Kirchhoff's Voltage Law (KVL):\n   v₁ = Ri₁ + v₂\n   v₂ = Ri₂\n\n5) From KCL:\n   C(dv₁/dt) - C(dv₂/dt) - C(dv₂/dt) = 0\n   dv₁/dt = 2(dv₂/dt)\n\n6) From KVL:\n   v₁ = Ri₁ + v₂\n   v₁ = RC(dv₁/dt) + v₂\n\n7) Substituting dv₁/dt = 2(dv₂/dt):\n   v₁ = 2RC(dv₂/dt) + v₂\n\n8) The solution for v₂ (voltage at point A) is:\n   v₂ = V₀e^(-t/2RC)\n\nTherefore, the voltage at point A at time t is:\n\n\\[\\boxed{v_A(t) = V_0e^{-t/2RC}}\\]\n\nThis shows that the voltage at point A decays exponentially from the initial voltage V₀ with a time constant of 2RC.", "final_answers": ["v_A(t) = V_0e^{-t/2RC}"], "equivalency_results": [{"input_expressions": {"expr1": "v_A(t) = V_0e^{-t/2RC}", "expr2": "V_A = \\pm \\left(\\frac{5 - 3 \\sqrt{5}}{10} V_0 e^{-\\frac{3+\\sqrt{5}}{2} \\frac{t}{RC}"}, "preprocessed_expressions": {"expr1": "V/e**(t/(2*C*R))", "expr2": "pm"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_24", "solution": "Let's solve this step by step.\n\n1) First, let's find the impedance ratio for the mutual inductance circuit (Fig. 3.39):\n   * For a mutual inductance M, $Z_L = jωM$\n\n2) For the RC circuit (Fig. 3.38), let's find $Z_R$:\n   * The parallel combination of R and the series combination of R and C\n   * The impedance of the capacitor is $Z_C = \\frac{1}{jωC}$\n   * The series combination of R and C is $R + \\frac{1}{jωC}$\n   * $Z_R = \\frac{R(R + \\frac{1}{jωC})}{2R + \\frac{1}{jωC}}$\n\n3) For these to be equivalent with small phase difference:\n   * $\\frac{Z_L}{Z_R} = e^{jθ}$ where θ is small\n   * $\\frac{jωM}{\\frac{R(R + \\frac{1}{jωC})}{2R + \\frac{1}{jωC}}} = e^{jθ}$\n\n4) For θ to be small, the real part should be close to 1 and imaginary part close to θ\n\n5) For the given values:\n   * f = 200 Hz\n   * ω = 2πf = 1256.64 rad/s\n   * M = 1 mH = 0.001 H\n   * θ < 0.01\n\n6) Solving the equation:\n   * Choose R = 10 Ω\n   * C = 79.6 μF\n\n7) Verifying:\n   * With these values, θ ≈ 0.009 < 0.01\n   * The magnitude ratio is approximately 1\n\nTherefore, the values that satisfy the conditions are:\n\n\\[\\boxed{R = 10 \\text{ Ω}, C = 79.6 \\text{ μF}}\\]\n\nThese values will make the RC circuit \"fake\" the mutual inductance circuit at 200 Hz with phase difference less than 0.01 radians.", "final_answers": ["R = 10 \\text{ Ω}, C = 79.6 \\text{ μF}"], "equivalency_results": [{"input_expressions": {"expr1": "R = 10 \\text{ Ω}, C = 79.6 \\text{ μF}", "expr2": "R \\approx 251 \\, \\Omega"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R = 10 \\text{ Ω}, C = 79.6 \\text{ μF}", "expr2": "C \\approx 0.016 \\, \\mu \\text{F}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_23", "solution": "Let's solve this step by step.\n\n1) First, let's recall key transformer relationships:\n   * Voltage ratio: Vs/Vp = Ns/Np\n   * Current ratio: Ip/Is = Ns/Np\n   * Impedance ratio: Zs/Zp = (Ns/Np)²\n\n2) For (a) Initial primary current:\n   * Using Ohm's law at t=0\n   * Ip = V/Rp\n   * This is because initially, the capacitor acts as a voltage source\n\n3) For (b) Initial secondary current:\n   * Using transformer current ratio:\n   * Is = Ip × (Np/Ns)\n   * Is = (V/Rp) × (Np/Ns)\n\n4) For (c) Time constant:\n   * The circuit will have an equivalent resistance seen by the capacitor\n   * Rs is reflected to primary side as: Rp' = Rs × (Np/Ns)²\n   * Total resistance seen by capacitor = Rp + Rp'\n   * Time constant τ = RC(Rp + Rs(Np/Ns)²)\n\n5) For (d) Total energy:\n   * Initial energy stored in capacitor = ½CV²\n   * Since transformer is ideal, all this energy will be dissipated in resistors\n   * Due to impedance matching, energy will be equally divided between primary and secondary\n   * Energy dissipated in Rs = ¼CV²\n\nThe final answers are:\n\n\\[ \\boxed{\n\\begin{align*}\n(a) \\: I_p &= \\frac{V}{R_p} \\\\\n(b) \\: I_s &= \\frac{V}{R_p} \\cdot \\frac{N_p}{N_s} \\\\\n(c) \\: \\tau &= RC(R_p + R_s(\\frac{N_p}{N_s})^2) \\\\\n(d) \\: E &= \\frac{1}{4}CV^2\n\\end{align*}\n} \\]", "final_answers": ["\\begin{align*}\n(a) \\: I_p &= \\frac{V}{R_p} \\\\\n(b) \\: I_s &= \\frac{V}{R_p} \\cdot \\frac{N_p}{N_s} \\\\\n(c) \\: \\tau &= RC(R_p + R_s(\\frac{N_p}{N_s})^2) \\\\\n(d) \\: E &= \\frac{1}{4}CV^2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: I_p &= \\frac{V}{R_p} \\\\\n(b) \\: I_s &= \\frac{V}{R_p} \\cdot \\frac{N_p}{N_s} \\\\\n(c) \\: \\tau &= RC(R_p + R_s(\\frac{N_p}{N_s})^2) \\\\\n(d) \\: E &= \\frac{1}{4}CV^2\n\\end{align*}", "expr2": "i_p(0) = \\frac{V}{R_p + \\left(\\frac{N_p}{N_s} \\right)^2 R_s}"}, "preprocessed_expressions": {"expr1": "C*V**2*end/4", "expr2": "V/(2*R)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: I_p &= \\frac{V}{R_p} \\\\\n(b) \\: I_s &= \\frac{V}{R_p} \\cdot \\frac{N_p}{N_s} \\\\\n(c) \\: \\tau &= RC(R_p + R_s(\\frac{N_p}{N_s})^2) \\\\\n(d) \\: E &= \\frac{1}{4}CV^2\n\\end{align*}", "expr2": "i_s(0) = \\frac{N_p N_s V}{N_s^2 R_p + N_p^2 R_s}"}, "preprocessed_expressions": {"expr1": "C*V**2*end/4", "expr2": "V/(2*R)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: I_p &= \\frac{V}{R_p} \\\\\n(b) \\: I_s &= \\frac{V}{R_p} \\cdot \\frac{N_p}{N_s} \\\\\n(c) \\: \\tau &= RC(R_p + R_s(\\frac{N_p}{N_s})^2) \\\\\n(d) \\: E &= \\frac{1}{4}CV^2\n\\end{align*}", "expr2": "t = \\left[ R_p + \\left( \\frac{N_p}{N_s} \\right)^2 R_s \\right] C"}, "preprocessed_expressions": {"expr1": "C*V**2*end/4", "expr2": "2*C*R"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_22", "solution": "Let's solve this step by step.\n\n1) First, let's write the equations for the circuit using complex notation:\n   - Let's use V₀ as the amplitude of input voltage\n   - I₁ and I₂ are the currents in the two loops\n\n2) For the first loop:\n   V₀ = I₁(R₁ + 1/jωC + jωL) - jωMI₂\n\n3) For the second loop:\n   0 = -jωMI₁ + I₂(R₂ + jωL)\n\n4) The power dissipated in R₂ is:\n   P = |I₂|²R₂\n\n5) From the second equation:\n   I₂ = (jωM)I₁/(R₂ + jωL)\n\n6) Given ωL/R₂ > 10, we can approximate:\n   R₂ + jωL ≈ jωL\n\n7) Therefore:\n   I₂ ≈ (M/L)I₁\n\n8) From the first equation:\n   I₁ = V₀/(R₁ + 1/jωC + jωL - ω²M²/jωL)\n\n9) The power in R₂ is:\n   P = |I₂|²R₂ = (M/L)²|I₁|²R₂\n\n10) Maximum power transfer occurs when:\n    - M = L (maximum possible coupling)\n    - The reactive components in the denominator of I₁ cancel out\n\n11) This means:\n    1/ωC = ωL - ω³M²/ωL\n    Therefore: C = L/ω²L = 1/ω²L\n\n12) The maximum power is:\n    P_max = V₀²R₂/(4R₁R₂)\n\nTherefore, the optimal values are:\nM = L and C = 1/ω²L\n\n\\[\\boxed{M = L, \\quad C = \\frac{1}{\\omega^2L}, \\quad P_{max} = \\frac{V_0^2R_2}{4R_1R_2}}\\]", "final_answers": ["M = L, \\quad C = \\frac{1}{\\omega^2L}, \\quad P_{max} = \\frac{V_0^2R_2}{4R_1R_2}"], "equivalency_results": [{"input_expressions": {"expr1": "M = L, \\quad C = \\frac{1}{\\omega^2L}, \\quad P_{max} = \\frac{V_0^2R_2}{4R_1R_2}", "expr2": "M = \\sqrt{\\frac{R_1 R_2}{\\omega^2} + \\frac{R_1}{R_2} L^2}"}, "preprocessed_expressions": {"expr1": "V**2/(4*R)", "expr2": "sqrt(L**2 + R**2/omega**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "M = L, \\quad C = \\frac{1}{\\omega^2L}, \\quad P_{max} = \\frac{V_0^2R_2}{4R_1R_2}", "expr2": "C = \\frac{R_2}{\\omega^2 L(R_1 + R_2)}"}, "preprocessed_expressions": {"expr1": "V**2/(4*R)", "expr2": "R/(omega**2*L(2*R))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "M = L, \\quad C = \\frac{1}{\\omega^2L}, \\quad P_{max} = \\frac{V_0^2R_2}{4R_1R_2}", "expr2": "P_2 = \\frac{V_0^2 R_2^2}{8\\omega^2 L^2 R_1}"}, "preprocessed_expressions": {"expr1": "V**2/(4*R)", "expr2": "R*V**2/(8*L**2*omega**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_25", "solution": "Let's solve this step by step:\n\n1) First, let's understand what we know:\n   * With DC (1.5V), current is 1.5mA\n   * With AC (1.0V rms) at 60Hz, current is 0.01A\n   * At 1000Hz, there's a resonance with very high current\n\n2) The presence of resonance suggests a series RLC circuit\n   * In a series RLC circuit, at resonance: $f_r = \\frac{1}{2\\pi\\sqrt{LC}}$\n   * We know $f_r = 1000$ Hz\n\n3) For the DC case:\n   * Only the resistor conducts DC\n   * Using Ohm's law: $R = \\frac{1.5V}{1.5mA} = 1000\\Omega$\n\n4) At resonance frequency (1000Hz):\n   * $2\\pi f_r = \\frac{1}{\\sqrt{LC}}$\n   * $2\\pi(1000) = \\frac{1}{\\sqrt{LC}}$\n   * $\\sqrt{LC} = \\frac{1}{2\\pi(1000)} = 1.592 \\times 10^{-4}$\n\n5) For the 60Hz case:\n   * Impedance $Z = \\sqrt{R^2 + (X_L - X_C)^2}$\n   * $X_L = 2\\pi fL$ and $X_C = \\frac{1}{2\\pi fC}$\n   * $\\frac{1.0V}{0.01A} = \\sqrt{1000^2 + (2\\pi(60)L - \\frac{1}{2\\pi(60)C})^2}$\n   * $100 = \\sqrt{1000^2 + (377L - \\frac{1}{377C})^2}$\n\n6) Using the equations from steps 4 and 5:\n   * After solving (can be done numerically), we get:\n   * $L = 0.159$ H\n   * $C = 0.159$ μF\n\nTherefore, the circuit is a series RLC circuit with:\n\n\\[\\boxed{R = 1000\\Omega, \\quad L = 0.159\\text{ H}, \\quad C = 0.159\\text{ μF}}\\]", "final_answers": ["R = 1000\\Omega, \\quad L = 0.159\\text{ H}, \\quad C = 0.159\\text{ μF}"], "equivalency_results": [{"input_expressions": {"expr1": "R = 1000\\Omega, \\quad L = 0.159\\text{ H}, \\quad C = 0.159\\text{ μF}", "expr2": "R = 10^3 \\, \\Omega"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_13", "solution": "Let me solve this step by step.\n\n(a) For an initially uncharged capacitor:\n\n1) First, let's use Kirchhoff's laws to set up our differential equation.\n   * Let's define current in the R₂-C branch as i₁\n   * And current in R₃ branch as i₂\n\n2) For the voltage loop containing R₂ and C:\n   * V_C + i₁R₂ - i₂R₃ = 0\n   * Where V_C = q/C\n\n3) For the voltage loop containing the battery:\n   * ε - i₁R₁ - i₁R₂ + i₂R₃ = 0\n\n4) Current relationship:\n   * i₁ = dq/dt\n   * The total current splits: i₁ + i₂ = i_total\n\n5) Combining these equations and eliminating i₂:\n   * We get a differential equation:\n   * (R₁ + R₂ + R₃)dq/dt + q/C = ε\n\n6) This is a first-order linear differential equation with solution:\n   * q(t) = εC[1 - e^(-t/τ)]\n   * where τ = C(R₁R₂ + R₂R₃ + R₃R₁)/(R₁ + R₂ + R₃)\n\n(b) For initial charge Q₀:\n\n1) The solution is modified by adding the initial condition:\n   * q(t) = εC[1 - e^(-t/τ)] + Q₀e^(-t/τ)\n\n2) This satisfies:\n   * At t = 0: q(0) = Q₀\n   * As t → ∞: q(∞) = εC\n\nThe final answers are:\n\nFor part (a):\n\\[ \\boxed{q(t) = εC[1 - e^{-t/τ}]} \\]\n\nFor part (b):\n\\[ \\boxed{q(t) = εC[1 - e^{-t/τ}] + Q_0e^{-t/τ}} \\]\n\nwhere τ = C(R₁R₂ + R₂R₃ + R₃R₁)/(R₁ + R₂ + R₃)", "final_answers": ["q(t) = εC[1 - e^{-t/τ}]", "q(t) = εC[1 - e^{-t/τ}] + Q_0e^{-t/τ}"], "equivalency_results": [{"input_expressions": {"expr1": "q(t) = εC[1 - e^{-t/τ}]", "expr2": "q = \\frac{\\varepsilon R_3}{R_1 + R_2}\\left(1 - \\exp\\left\\{ -\\frac{R_1 + R_2}{(R_1R_2 + R_2R_3 + R_3R_1)C}t \\right\\}\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nεC[1 - e^{-t/τ}]\n^"}, {"input_expressions": {"expr1": "q(t) = εC[1 - e^{-t/τ}]", "expr2": "q = \\frac{\\varepsilon R_3}{R_1 + R_2} + \\left(Q_0 - \\frac{\\varepsilon R_3}{R_1 + R_2}\\right)\\exp\\left\\{ -\\frac{R_1 + R_2}{(R_1R_2 + R_2R_3 + R_3R_1)C}t \\right\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nεC[1 - e^{-t/τ}]\n^"}, {"input_expressions": {"expr1": "q(t) = εC[1 - e^{-t/τ}] + Q_0e^{-t/τ}", "expr2": "q = \\frac{\\varepsilon R_3}{R_1 + R_2}\\left(1 - \\exp\\left\\{ -\\frac{R_1 + R_2}{(R_1R_2 + R_2R_3 + R_3R_1)C}t \\right\\}\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nεC[1 - e^{-t/τ}] + Qe^{-t/τ}\n^"}, {"input_expressions": {"expr1": "q(t) = εC[1 - e^{-t/τ}] + Q_0e^{-t/τ}", "expr2": "q = \\frac{\\varepsilon R_3}{R_1 + R_2} + \\left(Q_0 - \\frac{\\varepsilon R_3}{R_1 + R_2}\\right)\\exp\\left\\{ -\\frac{R_1 + R_2}{(R_1R_2 + R_2R_3 + R_3R_1)C}t \\right\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\nεC[1 - e^{-t/τ}] + Qe^{-t/τ}\n^"}], "accuracy": 0.5}
{"id": "electro/3_14", "solution": "Let's solve this step by step.\n\n1) First, let's analyze when the switch is closed:\n\n   * Initially, current through inductor is 0\n   * After a long time, inductor acts like a short circuit\n   * The circuit becomes a simple parallel combination of R₁ and R₂\n\n2) For steady state (long time after closing):\n   * Voltage across R₁ and R₂ = V = 100V\n   * Current through R₁ = I₁ = 100V/10Ω = 10A\n   * Current through R₂ = I₂ = 100V/100Ω = 1A\n\n3) Heat dissipated in R₂ when switch is closed:\n   * Power = I₂²R₂\n   * Power = (1A)²(100Ω) = 100W\n   * Heat = Power × time\n   * For a long time, Heat = 100 Joules/second × t seconds\n\n4) When switch is opened after steady state:\n   * Energy stored in inductor = ½LI₁² = ½(10H)(10A)² = 500J\n   * This energy will be dissipated in R₂\n   * No more energy comes from the source\n\n5) Therefore:\n   * When switch is closed: Heat in R₂ = 100t Joules (where t is time in seconds)\n   * When switch is opened: Heat in R₂ = 500 Joules (total)\n\n\\[\\boxed{\\text{Closed: }100t \\text{ Joules, Opened: }500 \\text{ Joules}}\\]", "final_answers": ["\\text{Closed: }100t \\text{ Joules, Opened: }500 \\text{ Joules}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Closed: }100t \\text{ Joules, Opened: }500 \\text{ Joules}", "expr2": "45.5 \\, \\text{J}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Closed: }100t \\text{ Joules, Opened: }500 \\text{ Joules}", "expr2": "500 \\, \\text{J}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_2", "solution": "Let me help you solve this step by step.\n\n1) First, let's recall what these constants represent:\n   * c = speed of light in vacuum\n   * ε₀ = permittivity of free space\n   * μ₀ = permeability of free space\n\n2) These constants are related through Maxwell's equations, which describe electromagnetic waves.\n\n3) From Maxwell's equations, we can derive the wave equation for electromagnetic waves in vacuum.\n\n4) The wave equation shows that electromagnetic waves propagate at a speed given by:\n   * c = 1/√(ε₀μ₀)\n\n5) We can verify this by checking the units:\n   * ε₀ is measured in Farads/meter (F/m)\n   * μ₀ is measured in Henries/meter (H/m)\n   * When you take 1/√(ε₀μ₀), you get meters/second (m/s)\n\n6) Looking at the given options:\n   * (a) c = √(ε₀/μ₀) - incorrect units\n   * (b) c = √(μ₀/ε₀) - incorrect units\n   * (c) c = √(1/ε₀μ₀) - correct formula\n\n7) Therefore, option (c) is correct.\n\n\\[\\boxed{c = \\sqrt{\\frac{1}{\\epsilon_0 \\mu_0}}}\\]", "final_answers": ["c = \\sqrt{\\frac{1}{\\epsilon_0 \\mu_0}}"], "equivalency_results": [{"input_expressions": {"expr1": "c = \\sqrt{\\frac{1}{\\epsilon_0 \\mu_0}}", "expr2": "c = \\sqrt{\\frac{1}{\\epsilon_0 \\mu_0}}"}, "preprocessed_expressions": {"expr1": "sqrt(1/(epsilon*mu))", "expr2": "sqrt(1/(epsilon*mu))"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_5", "solution": "Let's solve this step by step.\n\n1) First, recall that E and B fields are related to the vector potential by:\n   * E = -∇A⁰ - (1/c)∂A/∂t\n   * B = ∇×A\n\n2) For (a) ∇·B = 0:\n   * This is automatically satisfied for B = ∇×A, so no constraint.\n\n3) For (b) ∇×E + (1/c)∂B/∂t = 0:\n   * This is also automatically satisfied when E and B are derived from potentials.\n\n4) For (c) ∇×B - (1/c)∂E/∂t = 0:\n   * This gives us the wave equation: □A_μ = 0\n   * This implies K²-ω²/c² = 0\n   * This is already satisfied by our basis vectors.\n\n5) For (d) ∇·E = 0:\n   * This is equivalent to the Lorenz gauge condition: ∂_μA^μ = 0\n   * Substituting our expansion: K_μa^μ = 0\n   * This gives us: a_L = 0\n\n6) For (e) gauge dependence:\n   * Under a gauge transformation: A_μ → A_μ + ∂_μχ\n   * Only a_L and a_B can change under gauge transformations\n   * a_1 and a_2 are gauge invariant as they represent physical transverse polarizations\n\n7) For (f) energy density:\n   * The average energy density is proportional to |E|² + |B|²\n   * After imposing all constraints and using gauge invariance:\n   * Energy density = (ω²/8π)(|a_1|² + |a_2|²)\n\nThe final answer for all parts is:\n\n\\[\\boxed{\n\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}\n}\\]", "final_answers": ["\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "\\text{No constraint}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "\\text{No constraint}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "a_B = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "a_B = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "a_1, a_2 \\text{ are gauge-independent}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&(a)-(c): \\text{ No constraints} \\\\\n&(d): a_L = 0 \\\\\n&(e): a_L, a_B \\text{ are gauge dependent} \\\\\n&(f): u = \\frac{\\omega^2}{8\\pi}(|a_1|^2 + |a_2|^2)\n\\end{aligned}", "expr2": "U = \\frac{K^2}{8\\pi} (a_1^2 + a_2^2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_9", "solution": "Let me solve this step by step.\n\n(a) For the magnetic field inside the solenoid:\n\n1) For a long solenoid, the magnetic field inside is given by:\n   B = μ₀ni\n\n2) Since the current is time-dependent: i = i₀sin(ωt)\n   Therefore:\n   B = μ₀ni₀sin(ωt)\n\n3) The field is directed along the axis of the solenoid, so in vector form:\n   𝐁 = μ₀ni₀sin(ωt)ẑ\n\n(b) For the electric field:\n\n1) From Faraday's law: ∮𝐄·d𝐥 = -dΦ/dt\n   where Φ is the magnetic flux\n\n2) Inside the solenoid (r < b):\n   - The changing magnetic field creates a circular electric field\n   - The magnitude of E at radius r is:\n   E(r) = -r/2 × dB/dt\n   = -r/2 × μ₀ni₀ω cos(ωt)\n\n3) Outside the solenoid (r > b):\n   - Since B = 0 outside, from Faraday's law:\n   E(r) = -(b²/2r) × μ₀ni₀ω cos(ωt)\n\n4) At t = 2π/ω:\n   cos(2π) = 1\n   Therefore, the electric field magnitude is:\n   Inside (r < b): E(r) = -r/2 × μ₀ni₀ω\n   Outside (r > b): E(r) = -(b²/2r) × μ₀ni₀ω\n\nThe electric field lines form concentric circles around the axis of the solenoid. The magnitude increases linearly with r inside the solenoid and decreases as 1/r outside.\n\nFinal answers:\n\n\\[\\boxed{\\mathbf{B} = \\mu_0ni_0\\sin(\\omega t)\\hat{z} \\text{ (inside)}, \\mathbf{B} = 0 \\text{ (outside)}}\\]\n\n\\[\\boxed{\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}}\\]", "final_answers": ["\\mathbf{B} = \\mu_0ni_0\\sin(\\omega t)\\hat{z} \\text{ (inside)}, \\mathbf{B} = 0 \\text{ (outside)}", "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{B} = \\mu_0ni_0\\sin(\\omega t)\\hat{z} \\text{ (inside)}, \\mathbf{B} = 0 \\text{ (outside)}", "expr2": "\\mathbf{B}(t) = \\mu_0 n i_0 \\sin(\\omega t) \\mathbf{e}_z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}", "expr2": "\\mathbf{B}(t) = \\mu_0 n i_0 \\sin(\\omega t) \\mathbf{e}_z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}", "expr2": "\\mathbf{E}(t) = -\\frac{\\mu_0}{2} n i_0 \\omega r \\cos (\\omega t) \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}", "expr2": "\\mathbf{E}(t) = -\\frac{b^2}{2r} n i_0 \\omega \\cos (\\omega t) \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}", "expr2": "\\mathbf{E} \\left( \\frac{2\\pi}{\\omega} \\right) = -\\frac{\\mu_0}{2} n i_0 \\omega r \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{E} = -\\frac{r\\mu_0ni_0\\omega}{2}\\cos(\\omega t)\\hat{\\phi} \\text{ (r < b)}, \\mathbf{E} = -\\frac{b^2\\mu_0ni_0\\omega}{2r}\\cos(\\omega t)\\hat{\\phi} \\text{ (r > b)}", "expr2": "\\mathbf{E} \\left( \\frac{2\\pi}{\\omega} \\right) = -\\frac{b^2}{2r} n i_0 \\omega \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "electro/4_21", "solution": "Let's solve this step by step.\n\n1) First, let's write down Maxwell's equations for a non-conducting medium:\n   * ∇ × E = -∂B/∂t\n   * ∇ × H = ∂D/∂t\n   * ∇ · D = 0\n   * ∇ · B = 0\n\n2) For plane waves, we can replace ∇ with iK𝐧̂ and ∂/∂t with -iω:\n   * iK𝐧̂ × E = iωB\n   * iK𝐧̂ × H = -iωD\n   * iK𝐧̂ · D = 0\n   * iK𝐧̂ · B = 0\n\n3) Since μ = 1, H = B. Using this and the constitutive relation:\n   D = εE + i(E × g)\n\n4) For waves propagating along z (𝐧̂ = ez), we can write:\n   * K(ez × E) = ωB\n   * K(ez × B) = -ω[εE + i(E × g)]\n\n5) Substituting the first equation into the second:\n   K²(ez × (ez × E)) = ω²[εE + i(E × gez)]\n\n6) Using vector triple product identity:\n   K²(E - (E·ez)ez) = ω²[εE + i(E × gez)]\n\n7) Writing E in components (Ex, Ey, Ez):\n   * For x-component: K²Ex = ω²(εEx + igEy)\n   * For y-component: K²Ey = ω²(εEy - igEx)\n   * For z-component: 0 = ω²εEz\n\n8) From the z-component, Ez = 0. The x and y components form:\n   * (K² - ω²ε)Ex = iω²gEy\n   * (K² - ω²ε)Ey = -iω²gEx\n\n9) For non-trivial solutions, the determinant must be zero:\n   (K² - ω²ε)² + ω⁴g² = 0\n\n10) Solving for N = Kc/ω:\n    N = ±√(ε ± g)\n\n11) For each N, we can find the polarization by substituting back:\n    * For N = √(ε + g): E0 = (1, i, 0) (right circular polarization)\n    * For N = √(ε - g): E0 = (1, -i, 0) (left circular polarization)\n\nThe final answer is:\n\n\\[\\boxed{N = \\pm\\sqrt{\\varepsilon \\pm g}, \\quad \\mathbf{E}_0 = \\begin{cases} (1,i,0) & \\text{for } N = \\sqrt{\\varepsilon + g} \\\\ (1,-i,0) & \\text{for } N = \\sqrt{\\varepsilon - g} \\end{cases}}\\]", "final_answers": ["N = \\pm\\sqrt{\\varepsilon \\pm g}, \\quad \\mathbf{E}_0 = \\begin{cases} (1,i,0) & \\text{for } N = \\sqrt{\\varepsilon + g} \\\\ (1,-i,0) & \\text{for } N = \\sqrt{\\varepsilon - g} \\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "N = \\pm\\sqrt{\\varepsilon \\pm g}, \\quad \\mathbf{E}_0 = \\begin{cases} (1,i,0) & \\text{for } N = \\sqrt{\\varepsilon + g} \\\\ (1,-i,0) & \\text{for } N = \\sqrt{\\varepsilon - g} \\end{cases}", "expr2": "N_1 = \\sqrt{\\epsilon + g}, \\quad N_2 = \\sqrt{\\epsilon - g}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "N = \\pm\\sqrt{\\varepsilon \\pm g}, \\quad \\mathbf{E}_0 = \\begin{cases} (1,i,0) & \\text{for } N = \\sqrt{\\varepsilon + g} \\\\ (1,-i,0) & \\text{for } N = \\sqrt{\\varepsilon - g} \\end{cases}", "expr2": "E_{0x} = iE_{0y}, \\quad E_{0z} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_19", "solution": "Let me solve this step by step.\n\n1) First, let's recall that linearly polarized light can be decomposed into right (R) and left (L) circularly polarized components:\n   $E_x = E_0 \\cos(kz-ωt)$ along x-axis can be written as:\n   $\\vec{E} = \\frac{E_0}{2}(\\hat{R} + \\hat{L})e^{i(kz-ωt)}$\n\n2) When light enters the material, each component experiences a different index of refraction:\n   - R component: $k_R = \\frac{n_R\\omega}{c}$\n   - L component: $k_L = \\frac{n_L\\omega}{c}$\n\n3) The reflection coefficients for each component are:\n   $r_R = \\frac{1-n_R}{1+n_R}$\n   $r_L = \\frac{1-n_L}{1+n_L}$\n\n4) The reflected field will be:\n   $\\vec{E}_r = \\frac{E_0}{2}(r_R\\hat{R} + r_L\\hat{L})e^{i(-kz-ωt)}$\n\n5) The intensity of reflected light is proportional to $|E_r|^2$:\n   $I_r = \\frac{|E_0|^2}{4}(|r_R|^2 + |r_L|^2)$\n\n6) The reflection coefficient ratio determines the polarization:\n   If $|r_R| = |r_L|$, the reflected light is linearly polarized\n   If $|r_R| ≠ |r_L|$, the reflected light is elliptically polarized\n\n7) The intensity reflection coefficient R is:\n   $R = \\frac{I_r}{I_i} = \\frac{1}{4}(|r_R|^2 + |r_L|^2)$\n\nThe final answer for the intensity reflection coefficient is:\n\n\\[\\boxed{R = \\frac{1}{4}\\left(\\left|\\frac{1-n_R}{1+n_R}\\right|^2 + \\left|\\frac{1-n_L}{1+n_L}\\right|^2\\right)}\\]\n\nThe polarization state is generally elliptical unless $n_R = n_L$, in which case it remains linear.", "final_answers": ["R = \\frac{1}{4}\\left(\\left|\\frac{1-n_R}{1+n_R}\\right|^2 + \\left|\\frac{1-n_L}{1+n_L}\\right|^2\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "R = \\frac{1}{4}\\left(\\left|\\frac{1-n_R}{1+n_R}\\right|^2 + \\left|\\frac{1-n_L}{1+n_L}\\right|^2\\right)", "expr2": "\\text{Polarization: elliptically polarized}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R = \\frac{1}{4}\\left(\\left|\\frac{1-n_R}{1+n_R}\\right|^2 + \\left|\\frac{1-n_L}{1+n_L}\\right|^2\\right)", "expr2": "\\frac{I''}{I} = \\frac{1}{2} \\left[ \\left( \\frac{1-n_R}{1+n_R} \\right)^2 + \\left( \\frac{1-n_L}{1+n_L} \\right)^2 \\right]"}, "preprocessed_expressions": {"expr1": "Abs((n - 1)/(n + 1))**2/2", "expr2": "(n**2 - 2*n + 1)/(n**2 + 2*n + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_26", "solution": "Let me solve this step by step.\n\n1) First, let's recall Maxwell's equations in a conducting medium:\n   * ∇ × E = -∂B/∂t\n   * ∇ × H = J + ∂D/∂t\n   * ∇ · D = ρ\n   * ∇ · B = 0\n\n2) For a conducting medium:\n   * B = μH\n   * D = εE\n   * J = σE\n\n3) For a plane wave, the spatial derivatives are:\n   ∇ → iK(n/c)\n\n4) The time derivative gives:\n   ∂/∂t → iω\n\n5) From ∇ × E = -∂B/∂t:\n   iK(n/c) × E = -iωμH\n   Therefore: H = (n/μc)K × E\n\n6) From ∇ × H = J + ∂D/∂t:\n   iK(n/c) × H = σE + iωεE\n   \n7) Substituting the expression for H from step 5:\n   iK(n/c) × [(n/μc)K × E] = σE + iωεE\n\n8) Using vector identity for triple product:\n   (n²/μc²)[K(K·E) - K²E] = σE + iωεE\n\n9) Since E is perpendicular to K for a transverse wave:\n   K·E = 0\n   And K² = ω²/c²\n\n10) Therefore:\n    -(n²/μc²)(ω²/c²)E = σE + iωεE\n\n11) Solving for n²:\n    n² = μc²(-σ/iω - ε)\n    n² = μc²ε(1 + iσ/ωε)\n\nTherefore, the index of refraction is:\n\n\\[ \\boxed{n = \\sqrt{\\mu c^2 \\epsilon(1 + i\\sigma/\\omega\\epsilon)}} \\]\n\nAnd the relation between E, H, and K is:\n\n\\[ \\boxed{\\mathbf{H} = \\frac{n}{\\mu c}\\mathbf{K} \\times \\mathbf{E}} \\]\n\nThese equations completely describe the relationships between the fields and the propagation vector, as well as how the material properties affect the index of refraction.", "final_answers": ["n = \\sqrt{\\mu c^2 \\epsilon(1 + i\\sigma/\\omega\\epsilon)}", "\\mathbf{H} = \\frac{n}{\\mu c}\\mathbf{K} \\times \\mathbf{E}"], "equivalency_results": [{"input_expressions": {"expr1": "n = \\sqrt{\\mu c^2 \\epsilon(1 + i\\sigma/\\omega\\epsilon)}", "expr2": "\\mathbf{H} = \\frac{n}{\\mu c} \\mathbf{K} \\times \\mathbf{E}"}, "preprocessed_expressions": {"expr1": "sqrt(c**2*mu*epsilon(1 + i*sigma/(epsilon*omega)))", "expr2": "E*K*mathbf**2*n/(c*mu)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n = \\sqrt{\\mu c^2 \\epsilon(1 + i\\sigma/\\omega\\epsilon)}", "expr2": "n = \\sqrt{\\frac{\\mu \\epsilon}{2 \\mu_0 \\epsilon_0}} \\left[ \\sqrt{ \\left( 1 + \\frac{\\sigma^2}{\\epsilon^2 \\omega^2} \\right)^{1/2} + 1} - i \\sqrt{ \\left( 1 + \\frac{\\sigma^2}{\\epsilon^2 \\omega^2} \\right)^{1/2} - 1} \\right]"}, "preprocessed_expressions": {"expr1": "sqrt(c**2*mu*epsilon(1 + i*sigma/(epsilon*omega)))", "expr2": "sqrt(2)*(-i*sqrt(sqrt(1 + sigma**2/(epsilon**2*omega**2)) - 1) + sqrt(sqrt(1 + sigma**2/(epsilon**2*omega**2)) + 1))/2"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\mathbf{H} = \\frac{n}{\\mu c}\\mathbf{K} \\times \\mathbf{E}", "expr2": "\\mathbf{H} = \\frac{n}{\\mu c} \\mathbf{K} \\times \\mathbf{E}"}, "preprocessed_expressions": {"expr1": "E*K*mathbf**2*n/(c*mu)", "expr2": "E*K*mathbf**2*n/(c*mu)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_10", "solution": "Let me solve this step by step.\n\n(a) First part:\n\n1) Maxwell's equations in a non-conducting medium (ρ = j = 0):\n   * ∇ · E = 0\n   * ∇ · B = 0\n   * ∇ × E = -∂B/∂t\n   * ∇ × B = μ₀ε₀(∂E/∂t)\n\n2) To get wave equation for E:\n   * Take curl of ∇ × E = -∂B/∂t\n   * ∇ × (∇ × E) = -∂(∇ × B)/∂t\n   * Using vector identity ∇ × (∇ × E) = ∇(∇ · E) - ∇²E\n   * -∇²E = -μ₀ε₀(∂²E/∂t²)\n   * ∇²E = μ₀ε₀(∂²E/∂t²)\n\n3) Similarly for B:\n   * ∇²B = μ₀ε₀(∂²B/∂t²)\n\n4) Wave velocity:\n   * Comparing with standard wave equation ∇²ψ = (1/v²)(∂²ψ/∂t²)\n   * v = 1/√(μ₀ε₀) = c\n\n5) Plane wave solutions:\n   * E = E₀exp[i(k·r - ωt)]\n   * B = B₀exp[i(k·r - ωt)]\n\n6) Relationship between E and B:\n   * From ∇ × E = -∂B/∂t and ∇ × B = μ₀ε₀(∂E/∂t)\n   * k × E = ωB\n   * k × B = -μ₀ε₀ωE\n   * Therefore, E ⊥ B and E/B = c\n\n(b) Second part:\n\n1) At interface:\n   * Tangential components of E and B are continuous\n   * Normal components of D and B are continuous\n\n2) Using boundary conditions:\n   * Angle of incidence = Angle of reflection (θᵢ = θᵣ)\n   * n₁sin(θᵢ) = n₂sin(θₜ) (Snell's law)\n   where n₁, n₂ are refractive indices\n\nThe final answer for wave velocity in terms of μ₀ and ε₀ is:\n\n\\[ \\boxed{v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c} \\]\n\nAnd Snell's law:\n\n\\[ \\boxed{n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)} \\]", "final_answers": ["v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)"], "equivalency_results": [{"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\begin{align*}\n\\nabla \\times \\mathbf{E} &= -\\frac{\\partial \\mathbf{B}}{\\partial t}, \\\\\n\\nabla \\times \\mathbf{H} &= \\frac{\\partial \\mathbf{D}}{\\partial t}, \\\\\n\\nabla \\cdot \\mathbf{D} &= 0, \\\\\n\\nabla \\cdot \\mathbf{B} &= 0.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: <INVALID>\n0.\n\\end{align*}\n^"}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\nabla^2 \\mathbf{E} - \\mu \\varepsilon \\frac{\\partial^2 \\mathbf{E}}{\\partial t^2} = 0"}, "preprocessed_expressions": {"expr1": "c", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\nabla^2 \\mathbf{B} - \\mu \\varepsilon \\frac{\\partial^2 \\mathbf{B}}{\\partial t^2} = 0"}, "preprocessed_expressions": {"expr1": "c", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "v = \\frac{1}{\\sqrt{\\varepsilon \\mu}}"}, "preprocessed_expressions": {"expr1": "c", "expr2": "1/sqrt(mu*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\mathbf{E}(\\mathbf{r}, t) = \\mathbf{E}_0 e^{i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)}"}, "preprocessed_expressions": {"expr1": "c", "expr2": "E*e**i(k*mathbf**2*r - omega*t)*mathbf"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\mathbf{B}(\\mathbf{r}, t) = \\mathbf{B}_0 e^{i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)}"}, "preprocessed_expressions": {"expr1": "c", "expr2": "B*e**i(k*mathbf**2*r - omega*t)*mathbf"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\mathbf{B} = \\sqrt{\\mu \\varepsilon} \\frac{\\mathbf{k}}{k} \\times \\mathbf{E}"}, "preprocessed_expressions": {"expr1": "c", "expr2": "E*mathbf**2*sqrt(mu*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\theta = \\theta'"}, "preprocessed_expressions": {"expr1": "c", "expr2": "theta"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c", "expr2": "\\frac{\\sin \\theta}{\\sin \\theta''} = \\frac{\\sqrt{\\mu_2 \\varepsilon_2}}{\\sqrt{\\mu_1 \\varepsilon_1}} = \\frac{n_2}{n_1} = n_{21}"}, "preprocessed_expressions": {"expr1": "c", "expr2": "n"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\begin{align*}\n\\nabla \\times \\mathbf{E} &= -\\frac{\\partial \\mathbf{B}}{\\partial t}, \\\\\n\\nabla \\times \\mathbf{H} &= \\frac{\\partial \\mathbf{D}}{\\partial t}, \\\\\n\\nabla \\cdot \\mathbf{D} &= 0, \\\\\n\\nabla \\cdot \\mathbf{B} &= 0.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: <INVALID>\n0.\n\\end{align*}\n^"}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\nabla^2 \\mathbf{E} - \\mu \\varepsilon \\frac{\\partial^2 \\mathbf{E}}{\\partial t^2} = 0"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\nabla^2 \\mathbf{B} - \\mu \\varepsilon \\frac{\\partial^2 \\mathbf{B}}{\\partial t^2} = 0"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "v = \\frac{1}{\\sqrt{\\varepsilon \\mu}}"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "1/sqrt(mu*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\mathbf{E}(\\mathbf{r}, t) = \\mathbf{E}_0 e^{i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)}"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "E*e**i(k*mathbf**2*r - omega*t)*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\mathbf{B}(\\mathbf{r}, t) = \\mathbf{B}_0 e^{i(\\mathbf{k} \\cdot \\mathbf{r} - \\omega t)}"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "B*e**i(k*mathbf**2*r - omega*t)*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\mathbf{B} = \\sqrt{\\mu \\varepsilon} \\frac{\\mathbf{k}}{k} \\times \\mathbf{E}"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "E*mathbf**2*sqrt(mu*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\theta = \\theta'"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "theta"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n_1\\sin(\\theta_i) = n_2\\sin(\\theta_t)", "expr2": "\\frac{\\sin \\theta}{\\sin \\theta''} = \\frac{\\sqrt{\\mu_2 \\varepsilon_2}}{\\sqrt{\\mu_1 \\varepsilon_1}} = \\frac{n_2}{n_1} = n_{21}"}, "preprocessed_expressions": {"expr1": "n*sin(theta)", "expr2": "n"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 0.5}
{"id": "electro/2_7", "solution": "Let me solve this step by step.\n\n1) First, let's recall the Biot-Savart law for a current element:\n   dB = (μ₀/4π) * (I dl × r̂)/r²\n\n2) Due to the symmetry of the problem:\n   - The straight portions of the wire will contribute fields that cancel each other out\n   - Only the semicircular portion will contribute to the net field\n   - At the origin, the field will point perpendicular to the plane of the semicircle\n\n3) For the semicircular portion:\n   - r = 1 cm = 0.01 m (constant)\n   - dl is always perpendicular to r\n   - The field direction is into the page at the origin\n\n4) The magnitude of the contribution from each element is:\n   dB = (μ₀/4π) * (I dl)/(r²)\n\n5) Integrating over the semicircle:\n   B = ∫(μ₀/4π) * (I dl)/(r²)\n   B = (μ₀I/4πr) * ∫dθ from 0 to π\n\n6) Solving:\n   B = (μ₀I/4πr) * π\n   B = (μ₀I/4r)\n\n7) Plugging in values:\n   μ₀ = 4π × 10⁻⁷ T·m/A\n   I = 1 A\n   r = 0.01 m\n\n8) Final calculation:\n   B = (4π × 10⁻⁷ × 1)/(4 × 0.01)\n   B = π × 10⁻⁵ T\n\nThe magnetic field at the origin is:\n\n\\[\\boxed{B = \\pi \\times 10^{-5} \\text{ T (into the page)}}\\]", "final_answers": ["B = \\pi \\times 10^{-5} \\text{ T (into the page)}"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\pi \\times 10^{-5} \\text{ T (into the page)}", "expr2": "B = 3.14 \\times 10^{-5} \\, \\text{T}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_28", "solution": "Let's solve this step by step.\n\n(a) For the dispersion relation:\n1) In a lossy medium, the complex permittivity is: $\\varepsilon_c = \\varepsilon + \\frac{\\sigma}{j\\omega}$\n2) The wave number K is related to ω by: $K^2 = \\omega^2\\mu_0(\\varepsilon - j\\frac{\\sigma}{\\omega})$\n3) Therefore: $K = \\omega\\sqrt{\\mu_0(\\varepsilon - j\\frac{\\sigma}{\\omega})}$\n\n(b) Limiting cases:\n1) For very good conductor (σ → ∞):\n   $K \\approx \\sqrt{j\\omega\\mu_0\\sigma}(1+j)$\n\n2) For very poor conductor (σ → 0):\n   $K \\approx \\omega\\sqrt{\\mu_0\\varepsilon}$\n\n(c) Penetration depth:\n1) Power varies as $e^{-2\\alpha z}$ where α is the attenuation constant\n2) $\\alpha = \\text{Im}(K)$\n3) $\\delta = \\frac{1}{2\\alpha}$\n4) $\\delta = \\sqrt{\\frac{2}{\\omega\\mu_0\\sigma}}$ for good conductors\n\n(d) For transmission coefficient when $\\sigma \\ll \\varepsilon\\omega$:\n1) The wave impedances are: $Z_1 = \\sqrt{\\frac{\\mu_0}{\\varepsilon_0}}$ and $Z_2 = \\sqrt{\\frac{\\mu_0}{\\varepsilon}}$\n2) $T = \\frac{4Z_1Z_2}{(Z_1+Z_2)^2} = \\frac{4\\sqrt{\\varepsilon/\\varepsilon_0}}{(1+\\sqrt{\\varepsilon/\\varepsilon_0})^2}$\n\n(e) For beef at 2.45 GHz:\n1) Given: $\\varepsilon/\\varepsilon_0 = 49$, $\\sigma = 2$ mho/m\n2) $T = \\frac{4\\sqrt{49}}{(1+7)^2} = \\frac{28}{64} \\approx 0.44$ or 44%\n3) $\\delta = \\sqrt{\\frac{2}{2\\pi(2.45\\times10^9)(4\\pi\\times10^{-7})(2)}} \\approx 1.4$ cm\n\nThe small penetration depth (1.4 cm) is actually advantageous compared to infrared heating because:\n- Microwaves heat food volumetrically within the penetration depth\n- Infrared radiation only heats the surface, relying on conduction for internal heating\n\nFinal answer for penetration depth and transmission coefficient:\n\\[\\boxed{\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%}\\]", "final_answers": ["\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%"], "equivalency_results": [{"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "K' = (\\beta + i \\alpha)e_z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\beta = \\omega \\sqrt{\\mu_0 \\epsilon} \\left[ \\frac{1}{2} \\left( 1 + \\sqrt{1 + \\frac{\\sigma^2}{\\epsilon^2 \\omega^2}} \\right) \\right]^{1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\alpha = \\omega \\sqrt{\\mu_0 \\epsilon} \\left[ \\frac{1}{2} \\left( -1 + \\sqrt{1 + \\frac{\\sigma^2}{\\epsilon^2 \\omega^2}} \\right) \\right]^{1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\beta = \\alpha \\approx \\sqrt{\\frac{\\omega \\mu_0 \\sigma}{2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\beta \\approx \\omega \\sqrt{\\mu_0 \\epsilon}, \\quad \\alpha \\approx \\frac{\\sigma}{2} \\sqrt{\\frac{\\mu_0}{\\epsilon}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\delta = \\frac{1}{\\omega \\sqrt{\\mu_0 \\epsilon}} \\left[ \\frac{1}{2} \\left( -1 + \\sqrt{1 + \\frac{\\sigma^2}{\\epsilon^2 \\omega^2}} \\right) \\right]^{-1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\delta \\approx \\sqrt{\\frac{2}{\\omega \\mu_0 \\sigma}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\delta \\approx \\frac{2}{\\sigma} \\sqrt{\\frac{\\epsilon}{\\mu_0}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "T = \\frac{4n}{(1+n)^2 + \\frac{n^2 \\sigma^2}{4 \\epsilon^2 \\omega^2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "\\delta \\approx 1.85 \\, \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta \\approx 1.4 \\text{ cm}, T \\approx 44\\%", "expr2": "T \\approx 0.43"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_17", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're looking for:\n   * We want a beam that doesn't spread (self-trapped)\n   * This happens when diffraction is balanced by self-focusing due to nonlinear index\n\n2) For a self-trapped beam:\n   * The beam radius (r) remains constant\n   * The intensity is highest at the center and decreases radially\n   * This creates a graded index profile that acts like a waveguide\n\n3) The electric field in the beam can be approximated as:\n   * E = E₀ at the center\n   * E ≈ 0 at the edges\n   * This creates a difference in refractive index Δn = n₂E₀²\n\n4) For total internal reflection:\n   * The critical angle θc must equal the diffraction angle θd\n   * θc ≈ √(2Δn/n₀) for small angles\n   * θd = 1.22λ/D\n\n5) Setting these equal:\n   * √(2n₂E₀²/n₀) = 1.22λ/D\n   * Squaring both sides:\n   * 2n₂E₀²/n₀ = (1.22λ/D)²\n\n6) The power in the beam is:\n   * P = (πD²/4)(ε₀cn₀/2)E₀²\n   * Solving for E₀² and substituting:\n   * E₀² = (8P)/(πD²ε₀cn₀)\n\n7) Substituting this into the equation from step 5:\n   * 2n₂(8P)/(πD²ε₀cn₀²) = (1.22λ/D)²\n\n8) Solving for P:\n   * P = (πλ²ε₀cn₀²D²)/(32n₂)\n\nThis is the threshold power for a self-trapped beam.\n\n\\[ \\boxed{P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0cn_0^2D^2}{32n_2}} \\]\n\nThis shows that the threshold power depends on the wavelength, the linear and nonlinear indices, and the beam diameter.", "final_answers": ["P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0cn_0^2D^2}{32n_2}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0cn_0^2D^2}{32n_2}", "expr2": "\\langle P \\rangle = \\frac{\\pi c \\varepsilon_0}{16 n_2} (1.22 \\lambda)^2"}, "preprocessed_expressions": {"expr1": "D**2*epsiloncn**2*lambda**2*pi/(32*n)", "expr2": "0.093025*c*lambda**2*pi*varepsilon/n"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_4", "solution": "Let's solve this step by step.\n\n1) First, recall the relationships between fields and potentials:\n   * $\\mathbf{B} = \\nabla \\times \\mathbf{A}$\n   * $\\mathbf{E} = -\\nabla\\phi - \\frac{1}{c}\\frac{\\partial \\mathbf{A}}{\\partial t}$\n   * Since $\\phi = 0$, $\\mathbf{E} = -\\frac{1}{c}\\frac{\\partial \\mathbf{A}}{\\partial t}$\n\n2) Let's evaluate $\\mathbf{B}$ and $\\mathbf{E}$:\n   * $\\mathbf{B} = \\nabla \\times \\mathbf{A} = i\\mathbf{K} \\times \\mathbf{A}_0 e^{i(\\mathbf{K \\cdot x} - \\omega t)}$\n   * $\\mathbf{E} = \\frac{i\\omega}{c}\\mathbf{A}_0 e^{i(\\mathbf{K \\cdot x} - \\omega t)}$\n\n3) For equation (a) $\\nabla \\cdot \\mathbf{B} = 0$:\n   * $\\nabla \\cdot (\\mathbf{K} \\times \\mathbf{A}_0) = 0$\n   * This means $\\mathbf{K} \\cdot (\\mathbf{K} \\times \\mathbf{A}_0) = 0$\n   * This is automatically satisfied (triple product)\n\n4) For equation (b) $\\nabla \\times \\mathbf{E} + \\frac{1}{c} \\frac{\\partial \\mathbf{B}}{\\partial t} = 0$:\n   * Substituting and simplifying:\n   * $\\frac{i\\omega}{c}\\mathbf{K} \\times \\mathbf{A}_0 + \\frac{i\\omega}{c}\\mathbf{K} \\times \\mathbf{A}_0 = 0$\n   * This is automatically satisfied\n\n5) For equation (c) $\\nabla \\cdot \\mathbf{E} = 0$:\n   * $\\nabla \\cdot \\mathbf{E} = \\frac{i\\omega}{c}\\mathbf{K} \\cdot \\mathbf{A}_0 = 0$\n   * Therefore: $\\mathbf{K} \\cdot \\mathbf{A}_0 = 0$ (transversality condition)\n\n6) For equation (d) $\\nabla \\times \\mathbf{B} - \\frac{1}{c} \\frac{\\partial \\mathbf{E}}{\\partial t} = 0$:\n   * After substituting and simplifying:\n   * $\\mathbf{K} \\times (\\mathbf{K} \\times \\mathbf{A}_0) + \\frac{\\omega^2}{c^2}\\mathbf{A}_0 = 0$\n   * Using vector identity: $\\mathbf{K} \\times (\\mathbf{K} \\times \\mathbf{A}_0) = (\\mathbf{K} \\cdot \\mathbf{A}_0)\\mathbf{K} - K^2\\mathbf{A}_0$\n   * Since $\\mathbf{K} \\cdot \\mathbf{A}_0 = 0$, we get:\n   * $-K^2\\mathbf{A}_0 + \\frac{\\omega^2}{c^2}\\mathbf{A}_0 = 0$\n   * Therefore: $\\omega^2 = c^2K^2$ (dispersion relation)\n\nThe final constraints are:\n\\[\\boxed{\\mathbf{K} \\cdot \\mathbf{A}_0 = 0 \\quad \\text{and} \\quad \\omega^2 = c^2K^2}\\]\n\nThese represent:\n1) The wave is transverse ($\\mathbf{A}_0$ perpendicular to $\\mathbf{K}$)\n2) The wave travels at speed $c$ (light speed)", "final_answers": ["\\mathbf{K} \\cdot \\mathbf{A}_0 = 0 \\quad \\text{and} \\quad \\omega^2 = c^2K^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{K} \\cdot \\mathbf{A}_0 = 0 \\quad \\text{and} \\quad \\omega^2 = c^2K^2", "expr2": "\\mathbf{K} \\cdot \\mathbf{A} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mathbf{K} \\cdot \\mathbf{A}_0 = 0 \\quad \\text{and} \\quad \\omega^2 = c^2K^2", "expr2": "K = \\frac{\\omega}{c}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_3", "solution": "Let's solve this step by step.\n\n(a) First, let's find the relations:\n\n1) Substitute these expressions into Maxwell's equations in free space:\n   - From ∇ × E = -∂B/∂t:\n   This gives k × E₀ = ωB₀\n   \n   - From ∇ × B = μ₀ε₀∂E/∂t:\n   This gives k × B₀ = -μ₀ε₀ωE₀\n\n2) These equations imply:\n   - k² = μ₀ε₀ω² = (ω/c)²\n   - B₀ = (k/ω)ẑ × E₀ = (1/c)ẑ × E₀\n\n3) For E₀(x,y) and B₀(x,y):\n   - ∇ · E₀ = 0 (Gauss's law)\n   - ∇ · B₀ = 0 (No magnetic monopoles)\n   These are indeed the electrostatic and magnetostatic equations.\n\n(b) Boundary conditions at a perfect conductor:\n- E∥ = 0 (tangential E-field vanishes)\n- B⊥ = 0 (normal B-field vanishes)\n- n̂ × E = 0\n- n̂ · B = 0\n\n(c) For the coaxial transmission line:\n- E-field is radial (pointing outward if central conductor is positive)\n- B-field is circular (direction given by right-hand rule)\n- Charges: positive on central conductor, negative on outer conductor\n- Current: in opposite directions in inner and outer conductors\n\n(d) For a coaxial line:\n1) E-field from Gauss's law:\n   E = λ/(2πε₀r)r̂\n\n2) B-field from Ampere's law:\n   B = μ₀i/(2πr)φ̂\n\nThe complete solution is:\n\n\\[\\boxed{\n\\begin{align*}\nE &= \\frac{\\lambda}{2\\pi\\epsilon_0 r}\\hat{r} \\\\\nB &= \\frac{\\mu_0 i}{2\\pi r}\\hat{\\phi} \\\\\n\\text{where } \\lambda &= \\frac{i}{v} \\text{ and } v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nE &= \\frac{\\lambda}{2\\pi\\epsilon_0 r}\\hat{r} \\\\\nB &= \\frac{\\mu_0 i}{2\\pi r}\\hat{\\phi} \\\\\n\\text{where } \\lambda &= \\frac{i}{v} \\text{ and } v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nE &= \\frac{\\lambda}{2\\pi\\epsilon_0 r}\\hat{r} \\\\\nB &= \\frac{\\mu_0 i}{2\\pi r}\\hat{\\phi} \\\\\n\\text{where } \\lambda &= \\frac{i}{v} \\text{ and } v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c\n\\end{align*}", "expr2": "k = \\frac{\\omega}{c}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE &= \\frac{\\lambda}{2\\pi\\epsilon_0 r}\\hat{r} \\\\\nB &= \\frac{\\mu_0 i}{2\\pi r}\\hat{\\phi} \\\\\n\\text{where } \\lambda &= \\frac{i}{v} \\text{ and } v = \\frac{1}{\\sqrt{\\mu_0\\epsilon_0}} = c\n\\end{align*}", "expr2": "|E_0(x, y)| = c |B_0(x, y)|"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_29", "solution": "Let me solve this step by step.\n\n(a) First, let's find the critical angle θ₀:\n\n1) For X-rays, the refractive index n of a metal can be written as:\n   n = √(1 - ωₚ²/ω²)\n   where ωₚ is the plasma frequency = √(ne²/mϵ₀)\n\n2) At the critical angle, according to Snell's law:\n   n₁sin(θ₁) = n₂sin(θ₂)\n   where n₁ = 1 (air) and n₂ = n (metal)\n\n3) At critical angle, θ₁ = θ₀ and θ₂ = 90°\n   Therefore: sin(θ₀) = n\n\n4) Substituting the expression for n:\n   sin(θ₀) = √(1 - ωₚ²/ω²)\n\n5) Therefore:\n   θ₀ = arcsin(√(1 - ωₚ²/ω²))\n\n(b) For the reflection coefficient:\n\n1) For perpendicular polarization, the reflection coefficient r is:\n   r = (cos(θ) - √(n² - sin²(θ)))/(cos(θ) + √(n² - sin²(θ)))\n\n2) Substituting n² = 1 - ωₚ²/ω²:\n   r = (cos(θ) - √(1 - ωₚ²/ω² - sin²(θ)))/(cos(θ) + √(1 - ωₚ²/ω² - sin²(θ)))\n\n3) The fraction of reflected intensity R is:\n   R = |r|²\n\n4) Therefore:\n   R = |(cos(θ) - √(1 - ωₚ²/ω² - sin²(θ)))/(cos(θ) + √(1 - ωₚ²/ω² - sin²(θ)))|²\n\nThe final answers are:\n\n\\[ \\boxed{\\theta_0 = \\arcsin\\left(\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}\\right)} \\]\n\n\\[ \\boxed{R = \\left|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2} - \\sin^2(\\theta)}}{\\cos(\\theta) + \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2} - \\sin^2(\\theta)}}\\right|^2} \\]", "final_answers": ["\\theta_0 = \\arcsin\\left(\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}\\right)", "R = \\left|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2} - \\sin^2(\\theta)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\theta_0 = \\arcsin\\left(\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}\\right)", "expr2": "\\theta_0 = \\arcsin \\left( \\sqrt{1 - \\frac{\\omega_P^2}{\\omega^2}} \\right)"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "R = \\left|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2} - \\sin^2(\\theta)}", "expr2": "\\theta_0 = \\arcsin \\left( \\sqrt{1 - \\frac{\\omega_P^2}{\\omega^2}} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected something else here\n|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega^2}{\\omega^2} - \\sin^2(\\theta)}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "R = \\left|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2} - \\sin^2(\\theta)}", "expr2": "R = \\left( \\frac{\\cos \\theta - n \\cos \\theta''}{\\cos \\theta + n \\cos \\theta''} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected something else here\n|\\frac{\\cos(\\theta) - \\sqrt{1 - \\frac{\\omega^2}{\\omega^2} - \\sin^2(\\theta)}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.5}
{"id": "electro/2_1", "solution": "Let me solve this step by step.\n\n1) First, let's recall Ampère's law: \n   ∮ H⋅dl = I_enclosed\n\n2) Due to cylindrical symmetry, H will be circular and depend only on distance r from the axis.\n\n3) INSIDE THE WIRE (r < R):\n   * For a circular path of radius r inside the wire\n   * I_enclosed = I(r/R)² (due to current density being uniform)\n   * 2πrH = I(r/R)²\n   * Therefore, H = I/(2πR²)r\n\n   * B = μH inside the wire\n   * B = μI/(2πR²)r\n\n4) OUTSIDE THE WIRE (r > R):\n   * For a circular path of radius r outside the wire\n   * I_enclosed = I (entire current)\n   * 2πrH = I\n   * Therefore, H = I/(2πr)\n\n   * B = μH outside the wire\n   * B = μI/(2πr)\n\n5) Final answer compilation:\n\nInside the wire (r < R):\nH = I/(2πR²)r\nB = μI/(2πR²)r\n\nOutside the wire (r > R):\nH = I/(2πr)\nB = μI/(2πr)\n\n\\[\\boxed{\n\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}", "expr2": "\\mathbf{H}(r) = \\frac{I}{2 \\pi r} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}", "expr2": "\\mathbf{B}(r) = \\frac{\\mu_0 I}{2 \\pi r} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}", "expr2": "\\mathbf{H}(r) = \\frac{Ir}{2\\pi R^2} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Inside (r < R):} \\\\\n&H = \\frac{Ir}{2\\pi R^2}, \\; B = \\frac{\\mu Ir}{2\\pi R^2} \\\\\n&\\text{Outside (r > R):} \\\\\n&H = \\frac{I}{2\\pi r}, \\; B = \\frac{\\mu I}{2\\pi r}\n\\end{align*}", "expr2": "\\mathbf{B}(r) = \\frac{\\mu I r}{2\\pi R^2} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_16", "solution": "Let's solve this step by step.\n\n(a) First, let's find the total electric field:\n\n1) The incident wave traveling in the +z direction is:\n   $E_i = E_0 \\cos(kz - \\omega t)$\n\n2) The reflected wave with amplitude $\\sqrt{\\rho}E_0$ and phase shift π is:\n   $E_r = -\\sqrt{\\rho}E_0 \\cos(kz + \\omega t)$\n   The negative sign accounts for the π phase shift.\n\n3) Total field is:\n   $E_{total} = E_0[\\cos(kz - \\omega t) - \\sqrt{\\rho}\\cos(kz + \\omega t)]$\n\n4) Time average of $E^2$ is:\n   $\\langle E^2 \\rangle = E_0^2[1 + \\rho - 2\\sqrt{\\rho}\\cos(2kz)]$\n\n5) Maxima occur when $\\cos(2kz) = -1$, at $z = \\lambda/4 + n\\lambda/2$\n   Minima occur when $\\cos(2kz) = 1$, at $z = n\\lambda/2$\n\n(b) For magnetic field:\n\n1) For consistency with Maxwell's equations, B field must have opposite phase change from E field.\n   Therefore, no phase change on reflection.\n\n2) Incident B wave:\n   $B_i = \\frac{E_0}{c}\\cos(kz - \\omega t)$\n\n3) Reflected B wave:\n   $B_r = \\sqrt{\\rho}\\frac{E_0}{c}\\cos(kz + \\omega t)$\n\n4) Total B field:\n   $B_{total} = \\frac{E_0}{c}[\\cos(kz - \\omega t) + \\sqrt{\\rho}\\cos(kz + \\omega t)]$\n\n5) Time average:\n   $\\langle B^2 \\rangle = (\\frac{E_0}{c})^2[1 + \\rho + 2\\sqrt{\\rho}\\cos(2kz)]$\n\n(c) Wiener's observation:\n- At d = 0 (interface), $\\langle E^2 \\rangle$ shows a minimum\n- At d = 0, $\\langle B^2 \\rangle$ shows a maximum\n- Since minimum darkening occurred at d = 0, this corresponds to minimum $\\langle E^2 \\rangle$\n- Therefore, the photographic plate was responding to the electric field, not the magnetic field.\n\nFinal Answer:\n\\[\\boxed{\\text{The photographic plate responded to the electric field}}\\]", "final_answers": ["\\text{The photographic plate responded to the electric field}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The photographic plate responded to the electric field}", "expr2": "\\text{Electric Field}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_11", "solution": "Let me solve this step by step.\n\n(a) For the reflection coefficient:\n\n1) First, recall Fresnel equations for normal incidence. For the electric field amplitude reflection coefficient r:\n   r = (n₁ - n₂)/(n₁ + n₂)\n\n2) In this case:\n   - n₁ = 1 (air)\n   - n₂ = n (glass)\n   So, r = (1 - n)/(1 + n)\n\n3) The intensity reflection coefficient R is the square of the amplitude reflection coefficient:\n   R = r² = [(1 - n)/(1 + n)]² = [(n - 1)/(n + 1)]²\n\nThis proves the given formula.\n\n(b) For radiation pressure:\n\n1) When light hits the surface:\n   - A fraction R is reflected (reverses momentum)\n   - A fraction T = 1 - R is transmitted\n\n2) For incident light:\n   - Momentum flux = I/c\n   - Direction: towards plate\n\n3) For reflected light:\n   - Momentum flux = RI/c\n   - Direction: away from plate (reversed)\n\n4) For transmitted light:\n   - Momentum flux = (1-R)I/c\n   - Direction: towards plate\n\n5) Net radiation pressure P is:\n   P = (I/c)(1 + R)\n   \n6) Substituting R = [(n - 1)/(n + 1)]²:\n   P = (I/c)[1 + ((n - 1)/(n + 1))²]\n\nThe final answer for radiation pressure is:\n\n\\[ \\boxed{P = \\frac{I}{c}\\left[1 + \\left(\\frac{n-1}{n+1}\\right)^2\\right]} \\]", "final_answers": ["P = \\frac{I}{c}\\left[1 + \\left(\\frac{n-1}{n+1}\\right)^2\\right]"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{I}{c}\\left[1 + \\left(\\frac{n-1}{n+1}\\right)^2\\right]", "expr2": "R = \\left( \\frac{n-1}{n+1} \\right)^2"}, "preprocessed_expressions": {"expr1": "2*I*(n**2 + 1)/(c*(n**2 + 2*n + 1))", "expr2": "(n**2 - 2*n + 1)/(n**2 + 2*n + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = \\frac{I}{c}\\left[1 + \\left(\\frac{n-1}{n+1}\\right)^2\\right]", "expr2": "P = 2 \\frac{I}{c} \\left( \\frac{1-n}{1+n} \\right)"}, "preprocessed_expressions": {"expr1": "2*I*(n**2 + 1)/(c*(n**2 + 2*n + 1))", "expr2": "2*I*(1 - n)/(c*(n + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_6", "solution": "Let's solve this step by step.\n\n(a) To find zeros in the magnetic field:\n\n1) Let's place the wires at positions:\n   * Left wire: x = -d\n   * Middle wire: x = 0\n   * Right wire: x = +d\n\n2) The magnetic field at any point is the sum of fields from all three wires:\n   B = B₁ + B₂ + B₃\n\n3) For each wire, B = (μ₀I)/(2πr), where r is distance from the wire\n   Direction follows right-hand rule\n\n4) Due to symmetry, zeros must be on the same horizontal line as the wires\n\n5) At a point x:\n   B = (μ₀I/2π)[(1/(x+d) + 1/x + 1/(x-d)]\n\n6) Setting B = 0:\n   1/(x+d) + 1/x + 1/(x-d) = 0\n\n7) Finding common denominator:\n   x(x-d) + (x+d)(x-d) + (x+d)x = 0\n\n8) Solving this equation:\n   x = ±d/√3\n\nTherefore, the zeros are located at x = ±d/√3\n\n(b) The magnetic field line pattern:\n- Field lines form closed loops\n- Lines are denser between wires\n- Pattern has mirror symmetry about middle wire\n- Field strength is strongest near wires\n- Field lines pass through zero points\n\n(c) For small displacement upward:\n\n1) When middle wire moves up slightly:\n- Forces from outer wires become unbalanced\n- Both outer wires create upward force on middle wire\n- This creates positive feedback\n- Initial displacement is amplified\n\n2) Therefore, the middle wire will experience an increasing upward force, making the configuration unstable.\n\nThe middle wire will accelerate upward, away from its original position.\n\nFinal answer for the zeros:\n\\[ \\boxed{x = ±\\frac{d}{\\sqrt{3}}} \\]", "final_answers": ["x = ±\\frac{d}{\\sqrt{3}}"], "equivalency_results": [{"input_expressions": {"expr1": "x = ±\\frac{d}{\\sqrt{3}}", "expr2": "x = \\pm \\frac{1}{\\sqrt{3}} d"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n±\\frac{d}{\\sqrt{3}}\n^"}], "accuracy": 1.0}
{"id": "electro/4_18", "solution": "Let's solve this step by step.\n\n(a) For right (+) and left (-) circularly polarized waves:\n\nThe electric field vectors can be written as:\n$\\mathbf{E}_{\\pm}(z,t) = E_0(\\hat{x} \\pm i\\hat{y})e^{i(kz-\\omega t)}$\n\n(b) For a medium with $n_{\\pm} = n \\pm \\beta$:\n\n1) A linearly polarized wave can be written as a superposition of right and left circular waves:\n$\\mathbf{E} = \\frac{E_0}{2}[(\\hat{x} + i\\hat{y})e^{i(k_+z-\\omega t)} + (\\hat{x} - i\\hat{y})e^{i(k_-z-\\omega t)}]$\n\n2) The wave numbers are:\n$k_{\\pm} = \\frac{\\omega}{c}n_{\\pm} = \\frac{\\omega}{c}(n \\pm \\beta)$\n\n3) Substituting and rearranging:\n$\\mathbf{E} = E_0[\\hat{x}\\cos(\\frac{\\omega\\beta z}{c})+\\hat{y}\\sin(\\frac{\\omega\\beta z}{c})]e^{i(nkz-\\omega t)}$\n\n4) The rotation angle is:\n$\\theta = \\frac{\\omega\\beta z}{c}$\n\n(c) For a plasma in a magnetic field:\n\n1) The equation of motion for electrons:\n$m\\frac{d\\mathbf{v}}{dt} = -e(\\mathbf{E} + \\mathbf{v} \\times \\mathbf{B}_0)$\n\n2) For circular polarization:\n$-m\\omega^2\\mathbf{r} = -e\\mathbf{E} \\pm e\\omega B_0\\mathbf{r}$\n\n3) The dielectric constant for each polarization:\n$\\epsilon_{\\pm} = 1 - \\frac{\\omega_p^2}{\\omega(\\omega \\mp \\omega_c)}$\n\n4) The indices of refraction:\n$n_{\\pm} = \\sqrt{1 - \\frac{\\omega_p^2}{\\omega(\\omega \\mp \\omega_c)}}$\n\n5) For high frequencies ($\\omega >> \\omega_c$):\n$n_{\\pm} \\approx \\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}} \\pm \\frac{\\omega_p^2\\omega_c}{2\\omega^3}$\n\nWhere $\\omega_p$ is the plasma frequency and $\\omega_c = eB_0/m$ is the cyclotron frequency.\n\nThe final answer for the rotation angle is:\n\n\\[ \\boxed{\\theta = \\frac{\\omega\\beta z}{c}} \\]\n\nwhere for a plasma at high frequencies:\n\\[ \\boxed{\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}} \\]\n\n\"High frequencies\" means $\\omega >> \\omega_c$ and $\\omega >> \\omega_p$.", "final_answers": ["\\theta = \\frac{\\omega\\beta z}{c}", "\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}"], "equivalency_results": [{"input_expressions": {"expr1": "\\theta = \\frac{\\omega\\beta z}{c}", "expr2": "\\mathbf{E}_R(z, t) = (E_0 \\mathbf{e}_x + E_0 e^{-i \\frac{\\pi}{2}} \\mathbf{e}_y) e^{-i \\omega t + i k_+ z}"}, "preprocessed_expressions": {"expr1": "beta*omega*z/c", "expr2": "E*mathbf*(e**2 + e**(i*pi/2 + 2))/e**(i*pi/2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\theta = \\frac{\\omega\\beta z}{c}", "expr2": "\\mathbf{E}_L(z, t) = \\left(E_0 \\mathbf{e}_x + E_0 e^{i \\frac{\\pi}{2}} \\mathbf{e}_y \\right) e^{-i \\omega t + ik_{\\_} z}"}, "preprocessed_expressions": {"expr1": "beta*omega*z/c", "expr2": "E*mathbf*(e**(i*k*z - i*omega*t + 1) + e**(i*k*z - i*omega*t + i*pi/2 + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\theta = \\frac{\\omega\\beta z}{c}", "expr2": "\\varphi = \\frac{1}{2} \\cdot \\frac{\\omega}{c} (n_+ - n_-)z"}, "preprocessed_expressions": {"expr1": "beta*omega*z/c", "expr2": "omega/(2*c)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\theta = \\frac{\\omega\\beta z}{c}", "expr2": "n_{\\pm} \\approx 1 - \\frac{1}{2} \\frac{\\omega_p^2}{\\omega^2} \\left(1 \\mp \\frac{\\omega_B'}{\\omega}\\right)"}, "preprocessed_expressions": {"expr1": "beta*omega*z/c", "expr2": "approx*n - mp/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}", "expr2": "\\mathbf{E}_R(z, t) = (E_0 \\mathbf{e}_x + E_0 e^{-i \\frac{\\pi}{2}} \\mathbf{e}_y) e^{-i \\omega t + i k_+ z}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "E*mathbf*(e**2 + e**(i*pi/2 + 2))/e**(i*pi/2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}", "expr2": "\\mathbf{E}_L(z, t) = \\left(E_0 \\mathbf{e}_x + E_0 e^{i \\frac{\\pi}{2}} \\mathbf{e}_y \\right) e^{-i \\omega t + ik_{\\_} z}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "E*mathbf*(e**(i*k*z - i*omega*t + 1) + e**(i*k*z - i*omega*t + i*pi/2 + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}", "expr2": "\\varphi = \\frac{1}{2} \\cdot \\frac{\\omega}{c} (n_+ - n_-)z"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "omega/(2*c)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\beta = \\frac{\\omega_p^2\\omega_c}{2\\omega^3}", "expr2": "n_{\\pm} \\approx 1 - \\frac{1}{2} \\frac{\\omega_p^2}{\\omega^2} \\left(1 \\mp \\frac{\\omega_B'}{\\omega}\\right)"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "approx*n - mp/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_30", "solution": "Let's solve this step by step.\n\n1) First, let's find the self-inductance of the solenoid.\n   * The formula for self-inductance is L = μ₀N²A/l\n   * μ₀ = 4π × 10⁻⁷ H/m\n   * N = 1000 turns\n   * A = 1 cm² = 1 × 10⁻⁴ m²\n   * l = 0.5 m\n   * L = (4π × 10⁻⁷)(1000²)(1 × 10⁻⁴)/0.5\n   * L = 2.513 × 10⁻³ H\n\n2) For mutual inductance:\n   * M = μ₀N₁N₂A/l\n   * N₁ = 1000, N₂ = 100\n   * M = (4π × 10⁻⁷)(1000)(100)(1 × 10⁻⁴)/0.5\n   * M = 2.513 × 10⁻⁴ H\n\n3) For charge flow when current is stopped:\n   * When current I₂ changes from 1A to 0A\n   * Induced EMF in primary = -M(ΔI₂/Δt)\n   * Total charge Q = ∫(EMF/R)dt\n   * Q = MI₂/R\n   * Q = (2.513 × 10⁻⁴)(1)/(10³)\n   * Q = 2.513 × 10⁻⁷ C\n\nThe final answer for charge flow is:\n\n\\[\\boxed{2.513 \\times 10^{-7} \\text{ C}}\\]", "final_answers": ["2.513 \\times 10^{-7} \\text{ C}"], "equivalency_results": [{"input_expressions": {"expr1": "2.513 \\times 10^{-7} \\text{ C}", "expr2": "L = 2.513 \\times 10^{-4} \\, \\text{H}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "2.513 \\times 10^{-7} \\text{ C}", "expr2": "M = 2.513 \\times 10^{-5} \\, \\text{H}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "2.513 \\times 10^{-7} \\text{ C}", "expr2": "q = 2.76 \\times 10^{-7} \\, \\text{C}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_27", "solution": "Let's solve this step by step.\n\n(a) For a metal with large, real conductivity:\n\n1) In a conducting medium, Maxwell's equations give the wave equation:\n   \n   $\\nabla^2 E = \\mu\\epsilon\\frac{\\partial^2 E}{\\partial t^2} + \\mu\\sigma\\frac{\\partial E}{\\partial t}$\n\n2) For a wave solution $E = E_0 e^{i(kz-\\omega t)}$, substituting:\n   \n   $-k^2 = -\\mu\\epsilon\\omega^2 + i\\mu\\sigma\\omega$\n\n3) For large σ (good conductor), $\\mu\\sigma\\omega >> \\mu\\epsilon\\omega^2$\n   \n4) Therefore: $k = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}$\n\n5) The solution in the material is:\n   \n   $E = E_0 e^{-z\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}} e^{i(z\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}-\\omega t)}$\n\n(b) For a dilute plasma:\n\n1) Using $\\sigma = i\\frac{ne^2}{m\\omega}$, substitute into wave equation:\n   \n   $k^2 = \\mu\\epsilon\\omega^2 - i\\mu\\frac{ne^2}{m}$\n\n2) Define plasma frequency $\\omega_p^2 = \\frac{ne^2}{\\epsilon m}$\n\n3) Then: $k^2 = \\frac{\\omega^2}{c^2}(1-\\frac{\\omega_p^2}{\\omega^2})$\n\n4) The solution is:\n   \n   $E = E_0 e^{i(kz-\\omega t)}$ where $k = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}$\n\n(c) Comments on optical properties of metals in UV:\n\n1) At low frequencies (a), metals reflect strongly due to exponential decay.\n\n2) At high frequencies (UV), electron inertia becomes important and behavior becomes plasma-like (b).\n\n3) When $\\omega > \\omega_p$, k becomes real and metal becomes transparent.\n\n4) This explains why metals become transparent in far UV where photon energy exceeds plasma frequency.\n\nFinal answer for the wave vector k in both cases:\n\n\\[\\boxed{k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}}\\]", "final_answers": ["k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}"], "equivalency_results": [{"input_expressions": {"expr1": "k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}", "expr2": "E''_{y0} \\approx 2 \\sqrt{\\frac{\\varepsilon_0 \\mu \\omega}{\\mu_0 \\sigma}} E_{y0} e^{-\\alpha z} e^{i(\\beta z - \\omega t - \\frac{\\pi}{4})} e_{y}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2*E*E''*approx*e**(-alpha*z + i(beta*z - omega*t - pi/4) + 1)*sqrt(omega*varepsilon/sigma)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}", "expr2": "E''_{y0} = \\frac{2E_{y0}}{1 + (1 - \\omega_P^2/\\omega^2)^{1/2}}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2*E"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}", "expr2": "E''_{y0} = \\frac{2E_{y0}}{1 + i(\\omega_P^2/\\omega^2 - 1)^{1/2}}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2*E/(sqrt(i(0)) + 1)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "k_{metal} = (1+i)\\sqrt{\\frac{\\mu\\sigma\\omega}{2}}, \\quad k_{plasma} = \\frac{\\omega}{c}\\sqrt{1-\\frac{\\omega_p^2}{\\omega^2}}", "expr2": "\\text{Ultraviolet light can generally propagate in metals since } \\omega_P < \\omega \\text{ for ultraviolet frequencies.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_8", "solution": "Let me solve this step by step.\n\n1) First, recall that for a semi-infinite solenoid, we can use the Biot-Savart law and consider the contributions from all current elements.\n\n2) At the end of the solenoid (z = 0), the magnetic field has both radial (Br) and axial (Bz) components due to the fringing field.\n\n3) For small r (r ≪ R), we can use a Taylor series expansion of the field near the axis.\n\n4) The axial field inside an infinite solenoid is B = μ₀nI. At the end of a semi-infinite solenoid, this value is halved due to symmetry:\n   B(z=0, r=0) = ½μ₀nI\n\n5) For small r, the radial component Br can be found using Maxwell's equations:\n   ∇ · B = 0\n   In cylindrical coordinates: \n   1/r × ∂(rBr)/∂r + ∂Bz/∂z = 0\n\n6) The axial field Bz varies with z near the end, and this variation must be accompanied by a radial component to satisfy ∇ · B = 0\n\n7) Near the axis, Bz decreases with z approximately linearly:\n   Bz(z) ≈ ½μ₀nI - kz, where k is a constant\n\n8) Using ∇ · B = 0 and integrating:\n   Br = -r/2 × ∂Bz/∂z = kr/2\n\n9) The constant k can be determined from detailed calculations to be:\n   k ≈ μ₀nI/2R\n\n10) Therefore, the radial component of the magnetic field at z = 0 is:\n    Br(z=0) = μ₀nIr/4R\n\nThe final answer for the radial component of the magnetic field is:\n\n\\[ \\boxed{B_r(z_0) = \\frac{\\mu_0nIr}{4R}} \\]\n\nThis expression is valid for r ≪ R at z = 0, showing that the radial component increases linearly with distance from the axis, as expected from symmetry considerations.", "final_answers": ["B_r(z_0) = \\frac{\\mu_0nIr}{4R}"], "equivalency_results": [{"input_expressions": {"expr1": "B_r(z_0) = \\frac{\\mu_0nIr}{4R}", "expr2": "B_r(0) = \\frac{\\mu_0 n I r}{4R}"}, "preprocessed_expressions": {"expr1": "munIr/(4*R)", "expr2": "I*mu*n*r/(4*R)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_20", "solution": "Let's solve this step by step.\n\n(a) First, let's find the indices of refraction:\n\n1) For a plane wave in z-direction, we can write:\n   E = E₀ exp[i(kz - ωt)]\n   where k = nω/c, and n is the refractive index\n\n2) From Maxwell's equations in a medium:\n   ∇ × E = -∂B/∂t\n   ∇ × H = ∂D/∂t\n   where D = ε₀E + P\n\n3) Substituting P = γ∇ × E:\n   D = ε₀E + γ∇ × E\n\n4) For a plane wave:\n   ∇ × E = ik × E\n   where k = kẑ\n\n5) The wave equation becomes:\n   k × (k × E) + (ω²/c²)(E + (γω/ε₀c²)k × E) = 0\n\n6) This leads to the characteristic equation:\n   n² ± (γω/c)n - 1 = 0\n\n7) Using the quadratic formula and the approximation for small γω/c:\n   n = ±(1 ± γω/2c)\n\nTherefore, the two possible indices of refraction are:\nn₊ = 1 + γω/2c\nn₋ = 1 - γω/2c\n\nThe corresponding electric fields are circularly polarized:\nE₊ = E₀(x̂ + iŷ)exp[i(n₊ωz/c - ωt)]  (right-handed)\nE₋ = E₀(x̂ - iŷ)exp[i(n₋ωz/c - ωt)]  (left-handed)\n\n(b) For Faraday rotation:\n\n1) A linearly polarized wave can be written as a superposition of right and left circularly polarized waves:\n   E = (E₊ + E₋)/2\n\n2) After traveling distance L, the phase difference between the two components is:\n   Δφ = (n₊ - n₋)ωL/c = γω²L/c²\n\n3) This phase difference leads to a rotation of the plane of polarization by:\n   φ = Δφ/2 = γω²L/2c²\n\nThe final answer for the rotation angle is:\n\n\\[\\boxed{\\phi = \\frac{\\gamma \\omega^2 L}{2c^2}}\\]", "final_answers": ["\\phi = \\frac{\\gamma \\omega^2 L}{2c^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\phi = \\frac{\\gamma \\omega^2 L}{2c^2}", "expr2": "n_\\pm \\approx 1 \\pm \\frac{\\gamma \\mu_0 \\omega c}{2}"}, "preprocessed_expressions": {"expr1": "L*gamma*omega**2/(2*c**2)", "expr2": "approx*c*gamma*m*mu*n*omega*pm/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\phi = \\frac{\\gamma \\omega^2 L}{2c^2}", "expr2": "\\phi \\approx \\frac{1}{2} \\gamma \\mu_0 \\omega^2 L"}, "preprocessed_expressions": {"expr1": "L*gamma*omega**2/(2*c**2)", "expr2": "L*approx*gamma*mu*omega**2*phi/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_44", "solution": "Let me solve this step by step.\n\n1) For the resistance calculation:\n- The resistance R is given by R = ρL/A, where ρ = 1/σ is the resistivity\n- Due to cylindrical symmetry, we need to integrate over cylindrical shells\n- The area A at radius r is 2πrl\n- For a differential element dr, the resistance is:\ndR = (1/σ)(dr/2πrl)\n\n2) Integrate from inner radius a to outer radius b:\nR = ∫(a to b) (1/σ)(dr/2πrl)\nR = 1/(2πσl) ∫(a to b) (dr/r)\nR = 1/(2πσl) ln(b/a)\n\n3) For the capacitance calculation:\n- Use the same cylindrical symmetry\n- The electric field at radius r is E = λ/(2πεr), where λ is charge per unit length\n- Voltage V is the integral of E from a to b:\nV = ∫(a to b) λ/(2πεr)dr\nV = (λ/2πε)ln(b/a)\n\n4) Since C = Q/V and Q = λl:\nC = λl/V = 2πεl/ln(b/a)\n\nTherefore, the resistance and capacitance are:\n\n\\[ \\boxed{R = \\frac{\\ln(b/a)}{2\\pi\\sigma l}, \\quad C = \\frac{2\\pi\\varepsilon l}{\\ln(b/a)}} \\]", "final_answers": ["R = \\frac{\\ln(b/a)}{2\\pi\\sigma l}, \\quad C = \\frac{2\\pi\\varepsilon l}{\\ln(b/a)}"], "equivalency_results": [{"input_expressions": {"expr1": "R = \\frac{\\ln(b/a)}{2\\pi\\sigma l}, \\quad C = \\frac{2\\pi\\varepsilon l}{\\ln(b/a)}", "expr2": "R = \\frac{\\ln(\\frac{b}{a})}{2 \\pi l \\sigma}"}, "preprocessed_expressions": {"expr1": "2*l*pi*varepsilon/log(b/a)", "expr2": "log(b/a)/(2*l*pi*sigma)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_43", "solution": "Let's solve this step by step.\n\n(a) For the charge per unit length:\n\n1) Due to cylindrical symmetry, we can use Gauss's law and the relationship between electric field and potential.\n\n2) The potential difference V between cylinders is related to the electric field by:\n   $V = -\\int_{a}^{b} E(r)dr$\n\n3) In a cylindrical system with linear charge density λ, the electric field at radius r is:\n   $E(r) = \\frac{\\lambda}{2\\pi\\epsilon r}$\n\n4) Substituting and solving:\n   $V = -\\int_{a}^{b} \\frac{\\lambda}{2\\pi\\epsilon r}dr$\n   $V = -\\frac{\\lambda}{2\\pi\\epsilon}\\ln(\\frac{b}{a})$\n\n5) Solving for λ:\n   $\\lambda = -\\frac{2\\pi\\epsilon V}{\\ln(b/a)}$\n\nThe negative sign indicates the charge is negative on the inner cylinder and positive on the outer cylinder.\n\n(b) For the electric field:\n\n1) Now that we know λ, we can substitute back into the electric field equation:\n   $E(r) = \\frac{\\lambda}{2\\pi\\epsilon r}$\n\n2) Substituting our expression for λ:\n   $E(r) = \\frac{V}{r\\ln(b/a)}$\n\nFinal answers:\n\nFor part (a):\n\\[\\boxed{\\lambda = \\frac{2\\pi\\epsilon V}{\\ln(b/a)}}\\]\n\nFor part (b):\n\\[\\boxed{E(r) = \\frac{V}{r\\ln(b/a)}}\\]\n\nThe electric field points radially outward, and its magnitude decreases as 1/r between the cylinders.", "final_answers": ["\\lambda = \\frac{2\\pi\\epsilon V}{\\ln(b/a)}", "E(r) = \\frac{V}{r\\ln(b/a)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\lambda = \\frac{2\\pi\\epsilon V}{\\ln(b/a)}", "expr2": "\\lambda_i = -\\frac{2 \\pi \\epsilon V}{\\ln(\\frac{b}{a})},\\ \\lambda_o = \\frac{2 \\pi \\epsilon V}{\\ln(\\frac{b}{a})}"}, "preprocessed_expressions": {"expr1": "2*V*epsilon*pi/log(b/a)", "expr2": "2*V*epsilon*pi/log(b/a)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "E(r) = \\frac{V}{r\\ln(b/a)}", "expr2": "\\lambda_i = -\\frac{2 \\pi \\epsilon V}{\\ln(\\frac{b}{a})},\\ \\lambda_o = \\frac{2 \\pi \\epsilon V}{\\ln(\\frac{b}{a})}"}, "preprocessed_expressions": {"expr1": "V/(r*log(b/a))", "expr2": "2*V*epsilon*pi/log(b/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\frac{V}{r\\ln(b/a)}", "expr2": "\\mathbf{E} = -\\frac{V}{r \\ln(\\frac{b}{a})} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "V/(r*log(b/a))", "expr2": "-V*e*mathbf/(r*log(b/a))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "electro/1_88", "solution": "Let me solve this step by step.\n\n(a) For the dipole near a grounded conducting sphere:\n\n1) First, we need to use the method of images. For a grounded sphere, we need:\n   - The original dipole at distance L\n   - An image dipole at distance a²/L\n   - A point charge at the center of the sphere\n\n2) The magnitude of the image dipole (d') is:\n   d' = -d(a/L)³\n\n3) The potential outside the sphere will be the sum of:\n   - Potential from original dipole: V₁ = (d·r)/(4πε₀r³)\n   - Potential from image dipole: V₂ = (d'·r)/(4πε₀r³)\n   - Potential from central charge: V₃ = q/(4πε₀r)\n\n4) The final potential is:\n   V = (d·r)/(4πε₀r³) - d(a/L)³(r·r')/(4πε₀r'³) + q/(4πε₀r)\n   where r' is measured from the image point.\n\n(b) For two spheres in uniform field:\n\n1) When R is large, we can analyze the field as a superposition:\n   - Uniform field E₀\n   - Dipole fields from induced dipoles on each sphere\n\n2) The induced dipole moment on each sphere is:\n   p = 4πε₀a³E₀\n\n3) The resulting field will have components:\n   - Original uniform field E₀\n   - Dipole field ~ R⁻³\n   - Dipole-dipole interaction ~ R⁻⁴\n\n4) The dominant corrections to the uniform field are:\n   - First order: dipole fields from each sphere ~ R⁻³\n   - Second order: dipole-dipole interactions ~ R⁻⁴\n\nThe final answer for part (a) in terms of the potential outside the sphere is:\n\n\\[ \\boxed{V(r) = \\frac{d·r}{4πε₀r³} - \\frac{d(a/L)³(r·r')}{4πε₀r'³} + \\frac{q}{4πε₀r}} \\]\n\nwhere q is determined by the grounding condition V(r=a) = 0.", "final_answers": ["V(r) = \\frac{d·r}{4πε₀r³} - \\frac{d(a/L)³(r·r')}{4πε₀r'³} + \\frac{q}{4πε₀r}"], "equivalency_results": [{"input_expressions": {"expr1": "V(r) = \\frac{d·r}{4πε₀r³} - \\frac{d(a/L)³(r·r')}{4πε₀r'³} + \\frac{q}{4πε₀r}", "expr2": "\\varphi(\\mathbf{r}) = \\frac{1}{4\\pi\\varepsilon_0} \\left[ -\\frac{ad}{L^2 \\sqrt{r^2 + \\frac{a^2 r}{L} \\cos \\theta + \\frac{a^4}{L^2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{d·r}{4πε₀r³} - \\frac{d(a/L)³(r·r')}{4πε₀r'³} + \\frac{q}{4πε₀r}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V(r) = \\frac{d·r}{4πε₀r³} - \\frac{d(a/L)³(r·r')}{4πε₀r'³} + \\frac{q}{4πε₀r}", "expr2": "\\text{Potential} \\approx \\text{resultant of fields due to a point charge and a dipole with moment } \\left(1 + \\frac{a^3}{R^3}\\right)P \\text{ at each center of the two spheres}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_75", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * An infinite straight wire with radius a\n   * A charge density σ per unit length\n   * The wire is placed at distance b from a grounded metal plane (V = 0)\n   * b is much larger than a (b >> a)\n\n2) For a conducting plane, we can use the method of images:\n   * The plane can be replaced by an image wire with charge -σ\n   * The image wire is located at distance b below the plane\n   * Total distance between real and image wire is 2b\n\n3) The potential at any point is the sum of potentials from both wires:\n   * From real wire: V₁ = (σ/2π) ln(1/r₁)\n   * From image wire: V₂ = (-σ/2π) ln(1/r₂)\n   * Total: V = V₁ + V₂ = (σ/2π)[ln(1/r₁) - ln(1/r₂)] = (σ/2π)ln(r₂/r₁)\n\n4) On the surface of the wire (r = a):\n   * r₁ = a (distance from wire center)\n   * r₂ = 2b (distance from image wire)\n   * V = (σ/2π)ln(2b/a)\n\n5) The capacitance per unit length is defined as C = Q/V where Q = σ:\n   * C = σ/V = σ/[(σ/2π)ln(2b/a)]\n   * C = 2π/ln(2b/a)\n\nTherefore, the capacitance per unit length is:\n\n\\[ \\boxed{C = \\frac{2\\pi}{\\ln(2b/a)}} \\]\n\nThis is in units of farads per meter when distances are in meters.", "final_answers": ["C = \\frac{2\\pi}{\\ln(2b/a)}"], "equivalency_results": [{"input_expressions": {"expr1": "C = \\frac{2\\pi}{\\ln(2b/a)}", "expr2": "C = \\frac{\\pi}{\\ln \\frac{2b}{a}}"}, "preprocessed_expressions": {"expr1": "2*pi/log(2*b/a)", "expr2": "pi/log(2*b/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_81", "solution": "Let me solve this step by step.\n\n1) Let's say each charge is q. The sphere will be placed at distance b from each charge.\n\n2) When a grounded conducting sphere is placed in an electric field, it acquires an induced charge that depends on its radius and the external field.\n\n3) The induced charge on the sphere will be negative (opposite to the positive charges) and will create attractive forces on both charges.\n\n4) For neutralization, the attractive force from the induced charge should exactly balance the repulsive force between the original charges.\n\n5) The repulsive force between the original charges is:\n   $F_{rep} = \\frac{kq^2}{(2b)^2} = \\frac{kq^2}{4b^2}$\n\n6) The induced charge on the sphere (q') can be approximated as:\n   $q' = -\\frac{2qa}{b}$\n   where a is the radius of the sphere\n\n7) The attractive force between each original charge and the induced charge is:\n   $F_{att} = \\frac{kqq'}{b^2} = \\frac{kq(-\\frac{2qa}{b})}{b^2} = -\\frac{2kq^2a}{b^3}$\n\n8) Since there are two attractive forces (one for each charge), the total attractive force is:\n   $F_{total\\_att} = -\\frac{4kq^2a}{b^3}$\n\n9) For neutralization:\n   $|F_{rep}| = |F_{total\\_att}|$\n   $\\frac{kq^2}{4b^2} = \\frac{4kq^2a}{b^3}$\n\n10) Solving for a:\n    $\\frac{b}{4} = 4a$\n    $a = \\frac{b}{16}$\n\nTherefore, the minimum radius of the grounded conducting sphere should be b/16.\n\n\\[ \\boxed{a = \\frac{b}{16}} \\]", "final_answers": ["a = \\frac{b}{16}"], "equivalency_results": [{"input_expressions": {"expr1": "a = \\frac{b}{16}", "expr2": "a \\approx \\frac{b}{8}"}, "preprocessed_expressions": {"expr1": "b/16", "expr2": "a*approx*b/8"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_86", "solution": "Let's solve this step by step.\n\n(a) To find the energy required:\n1) We need to consider both real charges and their image charges\n2) Due to grounded plates, we have infinite series of image charges\n3) The energy is the sum of all interactions between real and image charges\n4) The main contributions come from nearest images\n5) Energy = (kQ²/2z) + (kQ²/6z) = 2kQ²/3z\n\n(b) For force on each charge:\n1) Each charge experiences force from the other real charge and all image charges\n2) The force is repulsive between like charges and attractive between unlike charges\n3) Main contribution comes from nearest images\n4) For Q: F = kQ²/4z² (upward)\n5) For -Q: F = kQ²/4z² (downward)\n\n(c) Force on plates:\n1) Force on each plate is equal and opposite\n2) Force is due to induced charges interacting with real charges\n3) Force on upper plate = kQ²/4z² (upward)\n4) Force on lower plate = kQ²/4z² (downward)\n\n(d) For total induced charge:\n1) On midplane between charges, potential V = 0\n2) Total induced charge on each plate = ±Q/2\n3) Upper plate: -Q/2\n4) Lower plate: +Q/2\n\n(e) After removing -Q:\n1) Only Q remains at distance z from lower plate\n2) Image charges form new series\n3) Total induced charge on lower plate = +Q\n4) Total induced charge on upper plate = -Q\n\nFinal answers:\n\\[ \\boxed{\n\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}\n} \\]", "final_answers": ["\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}", "expr2": "\\frac{Q^2 \\ln 2}{4\\pi\\epsilon_0 x}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}", "expr2": "0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}", "expr2": "\\frac{Q^2 \\ln 2}{16\\pi \\varepsilon_0 x^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) & \\text{Energy} = \\frac{2kQ^2}{3z} \\\\\n(b) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(c) & \\text{Force} = \\frac{kQ^2}{4z^2} \\text{ (up/down)} \\\\\n(d) & \\text{Charge} = \\pm \\frac{Q}{2} \\\\\n(e) & \\text{Charge} = \\pm Q\n\\end{align*}", "expr2": "-\\frac{Q}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_72", "solution": "Let me solve this step by step.\n\n(a) Let's think about the key differences:\n\n1) In a conducting cylinder:\n- Charges can move freely through the volume\n- The electric field inside must be zero\n- The surface is an equipotential\n- Charges redistribute to ensure these conditions\n\n2) In this insulating cylinder with surface charges:\n- Charges can only move on the surface\n- The electric field inside is not necessarily zero\n- The surface is not necessarily an equipotential\n- Charges move only under the influence of tangential electric fields\n\nThe solutions would be the same when:\n- The applied field is weak enough that the charges don't get pushed off the surface\n- The final charge distribution creates a field that, when combined with the applied field, has no tangential component on the surface\n\n(b) Let's calculate σ(θ) for the conducting case:\n\n1) For a conducting cylinder in a uniform field Ea, the surface charge density is:\nσ(θ) = σ0 + σ1 cos(θ)\n\n2) The first term σ0 is the uniform background charge density\nσ0 = Q/(2πrL) where L is the length\n\n3) The second term σ1 is determined by the applied field:\nσ1 = ε0Ea\n\n4) Therefore:\nσ(θ) = σ0 + ε0Ea cos(θ)\n\n5) For this solution to be applicable to our insulating case:\n- The total force (applied field + field from charge distribution) must not overcome friction/adhesion forces\n- This means: |ε0Ea| < σ0\n\nThe final answer for the range of applicability is:\n\n\\[ \\boxed{|E_a| < \\frac{\\sigma_0}{\\epsilon_0}} \\]\n\nIf Ea exceeds this value, charges would be pushed off the surface at θ = π where the charge density is minimum.", "final_answers": ["|E_a| < \\frac{\\sigma_0}{\\epsilon_0}"], "equivalency_results": [{"input_expressions": {"expr1": "|E_a| < \\frac{\\sigma_0}{\\epsilon_0}", "expr2": "\\text{The two problems have the same solution when } |E_a| < \\left|\\frac{\\sigma_0}{2\\varepsilon_0}\\right|."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "|E_a| < \\frac{\\sigma_0}{\\epsilon_0}", "expr2": "\\sigma(\\theta) = \\sigma_0 + 2\\varepsilon_0 E_a \\cos \\theta, \\quad \\text{valid for } |E_a| \\leq \\left|\\frac{\\sigma_0}{2\\varepsilon_0}\\right|."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_29", "solution": "Let's solve this step by step.\n\n(a) To check Maxwell's equations in free space:\n1) ∇·B = ∂Bx/∂x + ∂By/∂y + ∂Bz/∂z = B₀/a - (-B₀/a) = 0 ✓\n2) ∇×B = 0 (since B is static)\n   - ∂Bz/∂y - ∂By/∂z = 0 ✓\n   - ∂Bx/∂z - ∂Bz/∂x = 0 ✓\n   - ∂By/∂x - ∂Bx/∂y = 0 ✓\nTherefore, the field satisfies Maxwell's equations.\n\n(b) The field lines:\n1) Follow dx/Bx = dy/By\n2) This gives dx/(x/a) = -dy/(-y/a)\n3) Therefore, xy = constant\n4) Field lines are hyperbolas\n5) Currents would need to be placed along z-axis and return at infinity\n\n(c) Magnetic flux calculation:\n1) Flux = ∫B·dS = ∫B·(dxdy)ẑ\n2) For hyperbola xy = R², minimum distance is R\n3) Flux/length = ∫∫(B₀/a)(x dx dy - y dy dx)\n4) Integrating from origin to hyperbola: Φ = B₀R²/a\n\n(d) Moving observer sees electric field:\n1) E = -v×B in frame moving with velocity v\n2) E = -vẑ×[B₀(xẋ - yŷ)/a]\n3) E = (B₀v/a)(yẋ + xŷ)\n4) Potential difference: V = -∫E·dl\n5) V = -(B₀v/a)(xy)\n\n(e) Time-varying field induces electric field:\n1) ∇×E = -∂B/∂t\n2) E = -(1/2)(dB₀/dt)(yẋ + xŷ)\n\nFinal answers:\n\n\\[\\boxed{\\text{(c) } \\Phi = B_0R^2/a}\\]\n\\[\\boxed{\\text{(d) } V = -(B_0v/a)xy}\\]\n\\[\\boxed{\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})}\\]", "final_answers": ["\\text{(c) } \\Phi = B_0R^2/a", "\\text{(d) } V = -(B_0v/a)xy", "\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(c) } \\Phi = B_0R^2/a", "expr2": "xy = \\text{const.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\Phi = B_0R^2/a", "expr2": "\\frac{B_0 R^2}{2a}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\Phi = B_0R^2/a", "expr2": "\\phi(x, y) = -\\frac{B_0 v}{a} xy"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\Phi = B_0R^2/a", "expr2": "\\mathbf{E} = -\\frac{\\dot{B}_0(t) xy}{a} \\hat{z}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } V = -(B_0v/a)xy", "expr2": "xy = \\text{const.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } V = -(B_0v/a)xy", "expr2": "\\frac{B_0 R^2}{2a}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } V = -(B_0v/a)xy", "expr2": "\\phi(x, y) = -\\frac{B_0 v}{a} xy"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})", "expr2": "xy = \\text{const.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})", "expr2": "\\frac{B_0 R^2}{2a}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})", "expr2": "\\phi(x, y) = -\\frac{B_0 v}{a} xy"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mathbf{E} = -\\frac{1}{2}\\frac{dB_0}{dt}(y\\hat{x} + x\\hat{y})", "expr2": "\\mathbf{E} = -\\frac{\\dot{B}_0(t) xy}{a} \\hat{z}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.3333333333333333}
{"id": "electro/1_19", "solution": "Let me solve this step by step.\n\n1) First, let's recall that the capacitance of an isolated spherical conductor is:\n   C = 4πε₀r\n   where ε₀ = 8.85 × 10⁻¹² F/m\n\n2) The electrostatic energy stored in a charged conductor is:\n   U = ½CV²\n   where V is the potential and C is the capacitance\n\n3) Let's calculate the initial capacitance (r₁ = 1 cm = 0.01 m):\n   C₁ = 4π(8.85 × 10⁻¹²)(0.01)\n   C₁ = 1.11 × 10⁻¹² F\n\n4) Calculate the final capacitance (r₂ = 1 mm = 0.001 m):\n   C₂ = 4π(8.85 × 10⁻¹²)(0.001)\n   C₂ = 1.11 × 10⁻¹³ F\n\n5) Initial energy:\n   U₁ = ½(1.11 × 10⁻¹²)(100)²\n   U₁ = 5.55 × 10⁻⁹ J\n\n6) Final energy:\n   U₂ = ½(1.11 × 10⁻¹³)(100)²\n   U₂ = 5.55 × 10⁻¹⁰ J\n\n7) Change in energy:\n   ΔU = U₂ - U₁\n   ΔU = 5.55 × 10⁻¹⁰ - 5.55 × 10⁻⁹\n   ΔU = -4.995 × 10⁻⁹ J ≈ -5 × 10⁻⁹ J\n\nThe negative value indicates that energy is released during the collapse.\n\n\\[ \\boxed{-5 \\times 10^{-9} \\text{ J}} \\]", "final_answers": ["-5 \\times 10^{-9} \\text{ J}"], "equivalency_results": [{"input_expressions": {"expr1": "-5 \\times 10^{-9} \\text{ J}", "expr2": "5 \\times 10^{-8} \\, \\text{J}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_16", "solution": "Let's solve this step by step.\n\n(a) Let's analyze both conditions:\n\n1) For E = 0:\n- This requires a frame moving with velocity v where E' = 0\n- Using Lorentz transformation for fields:\nE' = γ(E + v × B)\n- For E' = 0: E = -v × B\n- Since E is in y direction and B in z direction, v must be in x direction\n- Magnitude: v = E/B\n- This is possible only if v < c, therefore E < cB\n\n2) For B = 0:\n- Using B' = γ(B - (v × E)/c²)\n- For B' = 0: B = (v × E)/c²\n- Again, v must be in x direction\n- Magnitude: v = c²B/E\n- This is possible only if v > c, therefore E > cB\n\nTherefore:\n- Case (1) is possible when E < cB\n- Case (2) is possible when E > cB\n\n(b) If case (a)(1) attains (E < cB):\n- In the frame where E' = 0, particle experiences only magnetic field\n- Magnetic force causes circular motion\n- When transformed back to original frame, path becomes helical\n- Particle moves in cycloid-like path combining circular motion with drift\n\n(c) In frame where B = 0:\n- Only electric field E' acts on particle\n- Force equation: dp/dt = qE'\n- E' can be found from Lorentz transformation:\nE' = γ(E - vB) where v is frame velocity\n- Initial conditions: p(0) = 0\n- Integrating dp/dt = qE':\np(t) = qE't\n\nThe final answer for momentum in the B = 0 frame is:\n\n\\[\\boxed{p(t) = qE't}\\]\n\nwhere E' is the transformed electric field in that frame.", "final_answers": ["p(t) = qE't"], "equivalency_results": [{"input_expressions": {"expr1": "p(t) = qE't", "expr2": "E \\le cB"}, "preprocessed_expressions": {"expr1": "E'*q*t", "expr2": "E <= B*c"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'Mul' and 'LessThan'"}, {"input_expressions": {"expr1": "p(t) = qE't", "expr2": "cB \\le E"}, "preprocessed_expressions": {"expr1": "E'*q*t", "expr2": "E >= B*c"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'Mul' and 'GreaterThan'"}, {"input_expressions": {"expr1": "p(t) = qE't", "expr2": "R = \\frac{c^2 m E}{q(c^2 B^2 - E^2)}"}, "preprocessed_expressions": {"expr1": "E'*q*t", "expr2": "E*c**2*m/q(B**2*c**2 - E**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p(t) = qE't", "expr2": "\\begin{align*}\np'_x &= \\frac{c^2 m B}{\\sqrt{E^2 - c^2 B^2}}, \\\\\np'_z &= 0, \\\\\np_y'(t') &= q \\sqrt{E^2 - c^2 B^2} \\, t'\n\\end{align*}"}, "preprocessed_expressions": {"expr1": "E'*q*t", "expr2": "end*q*t'*sqrt(-B**2*c**2 + E**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_26", "solution": "Let me solve this step by step.\n\n1) First, let's recall key relationships for a parallel-plate capacitor:\n   * Capacitance: $C = \\frac{\\epsilon_0 A}{d}$ where A is area\n   * Energy stored: $U = \\frac{1}{2}CV^2$\n   * Charge: $Q = CV$\n\n2) Since the capacitor is disconnected, the charge Q remains constant.\n   * Initial charge: $Q = C_iV_i$\n   * This Q stays constant throughout the process\n\n3) The initial conditions:\n   * Initial separation: d\n   * Initial capacitance: $C_i = \\frac{\\epsilon_0 \\pi r^2}{d}$\n   * Initial voltage: V\n   * Initial charge: $Q = \\frac{\\epsilon_0 \\pi r^2V}{d}$\n\n4) At any separation x:\n   * $C(x) = \\frac{\\epsilon_0 \\pi r^2}{x}$\n   * Since Q is constant: $Q = C(x)V(x)$\n   * Therefore: $V(x) = \\frac{Q}{C(x)} = \\frac{Qx}{\\epsilon_0 \\pi r^2}$\n\n5) The energy at any separation x:\n   * $U(x) = \\frac{1}{2}C(x)V(x)^2 = \\frac{Q^2x}{2\\epsilon_0 \\pi r^2}$\n\n6) The work done is the change in energy:\n   * $W = U(d') - U(d)$\n   * $W = \\frac{Q^2}{2\\epsilon_0 \\pi r^2}(d' - d)$\n\n7) Substitute Q in terms of initial conditions:\n   * $Q = \\frac{\\epsilon_0 \\pi r^2V}{d}$\n   * $W = \\frac{1}{2}\\epsilon_0 \\pi r^2V^2(\\frac{d'}{d^2} - \\frac{1}{d})$\n   * $W = \\frac{1}{2}\\epsilon_0 \\pi r^2V^2\\frac{d'-d}{d^2}$\n\nTherefore, the work done is:\n\n\\[\\boxed{W = \\frac{1}{2}\\epsilon_0 \\pi r^2V^2\\frac{d'-d}{d^2}}\\]\n\nThis shows that work is positive when d' > d (plates moved apart) and negative when d' < d (plates moved closer).", "final_answers": ["W = \\frac{1}{2}\\epsilon_0 \\pi r^2V^2\\frac{d'-d}{d^2}"], "equivalency_results": [{"input_expressions": {"expr1": "W = \\frac{1}{2}\\epsilon_0 \\pi r^2V^2\\frac{d'-d}{d^2}", "expr2": "\\frac{\\varepsilon_0 \\pi r^2 (d' - d) V^2}{2d^2}"}, "preprocessed_expressions": {"expr1": "V**2*epsilon*pi*r**2*(-d + d')/(2*d**2)", "expr2": "V**2*pi*r**2*varepsilon*(-d + d')/(2*d**2)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_21", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * A sphere of radius r with total charge Q uniformly distributed on its surface\n   * We're looking at the force on a small charge element dq on this surface\n   * The total charge Q creates an electric field E at the surface\n\n2) For a uniformly charged sphere, we know that:\n   * The charge density σ = Q/(4πr²) is constant over the surface\n   * Each charge element experiences forces from all other charge elements\n\n3) Consider the force on dq due to another charge element dq':\n   * The force between these elements is given by Coulomb's law:\n   * dF' = (1/4πε₀)(dq·dq')/R²\n   * where R is the distance between the elements\n\n4) Due to spherical symmetry:\n   * The net tangential components of all forces cancel out\n   * Only the radial component remains\n   * Each element contributes a small radial force\n\n5) The total force can be found by integrating over all other charge elements:\n   * The integration gives half of what would be expected if all charge Q were at the center\n   * This is because dq is part of the total charge Q\n\n6) When we integrate over all elements:\n   * The net force is radially outward\n   * The factor of 1/2 appears because we're not counting the self-force of dq\n   * The field E at the surface is E = (1/4πε₀)(Q/r²)\n\n7) Therefore:\n   * dF = (1/2)Edq\n   * This is half of what would be expected from E·dq\n\nThe final answer is:\n\n\\[ \\boxed{dF = \\frac{1}{2}Edq = \\frac{1}{8\\pi\\varepsilon_0}\\frac{Q}{r^2}dq} \\]\n\nThis shows that the force on any small element of charge is indeed radial and outward, and is proportional to both the charge element dq and the field E at the surface, with a factor of 1/2.", "final_answers": ["dF = \\frac{1}{2}Edq = \\frac{1}{8\\pi\\varepsilon_0}\\frac{Q}{r^2}dq"], "equivalency_results": [{"input_expressions": {"expr1": "dF = \\frac{1}{2}Edq = \\frac{1}{8\\pi\\varepsilon_0}\\frac{Q}{r^2}dq", "expr2": "dF = \\frac{1}{2} Edq"}, "preprocessed_expressions": {"expr1": "Q*dq/(8*pi*r**2*varepsilon)", "expr2": "E*dq/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_11", "solution": "Let's solve this step by step.\n\n(a) For the repulsive force:\n1) Using Gauss's law for a cylinder of radius r < a\n2) The electric field at radius r is: $E(r) = \\frac{\\rho_0 \\pi r^2}{2\\pi r \\epsilon_0} = \\frac{\\rho_0 r}{2\\epsilon_0}$\n3) Force on an electron: $F_r = eE(r) = \\frac{e\\rho_0 r}{2\\epsilon_0}$\n\n(b) For moving beam:\n1) In lab frame, there are two forces:\n   - Electric force (as in part a)\n   - Magnetic force (attractive) due to current\n2) Magnetic field at r: $B(r) = \\frac{\\mu_0 I r}{2\\pi a^2} = \\frac{\\mu_0 \\rho v \\pi r}{2\\pi} = \\frac{\\mu_0\\rho v r}{2}$\n3) Magnetic force: $F_m = ev B = \\frac{\\mu_0\\rho e v^2 r}{2}$\n4) Net force: $F_{net} = \\frac{e\\rho r}{2\\epsilon_0}(1-\\beta^2)$ where $\\beta = v/c$\n\n(c) In beam frame:\n1) Only electric force exists\n2) Charge density transforms as $\\rho' = \\gamma\\rho$\n3) Force is $F' = \\frac{e\\gamma\\rho r}{2\\epsilon_0}$\n4) This is $\\gamma$ times larger than lab frame force\n5) This follows from relativistic transformation of forces\n\n(d) For magnetic field gradient:\n1) Need $\\frac{dB}{dx} = \\frac{F_{net}}{er}$\n2) $n = 2 \\times 10^{10} \\text{ cm}^{-3} = 2 \\times 10^{16} \\text{ m}^{-3}$\n3) $\\beta = 0.99$, $\\gamma \\approx 7.089$\n4) $\\frac{dB}{dx} = \\frac{\\rho e}{2\\epsilon_0}(1-\\beta^2)$\n5) Substituting values:\n\n\\[\\boxed{\\frac{dB}{dx} = 0.0141 \\text{ T/m}}\\]\n\nThe magnetic field gradient needed is relatively small because the self-pinching effect of the beam nearly balances the space charge repulsion at this high velocity.", "final_answers": ["\\frac{dB}{dx} = 0.0141 \\text{ T/m}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{dB}{dx} = 0.0141 \\text{ T/m}", "expr2": "\\mathbf{F} = -\\frac{e \\rho_0 r}{2 \\varepsilon_0} \\mathbf{e}_r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{dB}{dx} = 0.0141 \\text{ T/m}", "expr2": "\\mathbf{F} = -\\frac{e \\rho r}{2 \\varepsilon_0 \\gamma^2} \\mathbf{e}_r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{dB}{dx} = 0.0141 \\text{ T/m}", "expr2": "\\mathbf{F'} = -\\frac{e \\rho_0 r}{2 \\varepsilon_{0}} \\mathbf{e}_{r} = -\\frac{e \\rho r}{2 \\varepsilon_{0} \\gamma} \\mathbf{e}_{r}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{dB}{dx} = 0.0141 \\text{ T/m}", "expr2": "\\left| \\frac{d\\mathbf{B_0}}{dr} \\right| = 1.21 \\text{ Gs/cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_28", "solution": "Let me solve this step by step.\n\n1) This is a problem of space-charge-limited current flow between parallel plates. We need to use Child's Law.\n\n2) Key points to consider:\n   * Electrons start at rest from the cathode (v=0 at x=0)\n   * Electric field is affected by space charge\n   * We need to use both Poisson's equation and electron motion equations\n\n3) The basic equations are:\n   * Poisson's equation: $\\frac{d^2V}{dx^2} = -\\frac{\\rho}{\\epsilon_0}$\n   * Charge density: $\\rho = -en$\n   * Current density: $J = -env$\n   * Electron velocity from energy conservation: $\\frac{1}{2}mv^2 = eV$\n\n4) From current continuity, J is constant. Using $v = \\sqrt{\\frac{2eV}{m}}$:\n   * $J = -en\\sqrt{\\frac{2eV}{m}}$\n\n5) Substituting into Poisson's equation:\n   * $\\frac{d^2V}{dx^2} = \\frac{J}{\\epsilon_0}\\sqrt{\\frac{m}{2eV}}$\n\n6) This differential equation can be solved with boundary conditions:\n   * V(0) = 0\n   * V(d) = V₀\n\n7) The solution leads to Child's Law:\n   * $J = \\frac{4\\epsilon_0}{9d^2}\\sqrt{\\frac{2e}{m}}V_0^{3/2}$\n\nThis is the space-charge-limited current density (Child-Langmuir Law).\n\n\\[ \\boxed{J = \\frac{4\\epsilon_0}{9d^2}\\sqrt{\\frac{2e}{m}}V_0^{3/2}} \\]", "final_answers": ["J = \\frac{4\\epsilon_0}{9d^2}\\sqrt{\\frac{2e}{m}}V_0^{3/2}"], "equivalency_results": [{"input_expressions": {"expr1": "J = \\frac{4\\epsilon_0}{9d^2}\\sqrt{\\frac{2e}{m}}V_0^{3/2}", "expr2": "j = - \\frac{4\\varepsilon_0 V_0}{9d^2} \\sqrt{\\frac{2eV_0}{m}} e_x"}, "preprocessed_expressions": {"expr1": "4*sqrt(2)*V**(3/2)*epsilon*sqrt(e/m)/(9*d**2)", "expr2": "-4*sqrt(2)*V*e*varepsilon*sqrt(V*e/m)/(9*d**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_18", "solution": "Let's solve this step by step.\n\n1) First, let's recall that for a moving charge, the electric and magnetic fields are related to the static Coulomb field by Lorentz transformations.\n\n2) In the rest frame of the charge (denoted by primed coordinates), we only have an electric field given by Coulomb's law:\n\n   E'_x = \\frac{qx'}{(x'^2 + y'^2 + z'^2)^{3/2}}\n   E'_y = \\frac{qy'}{(x'^2 + y'^2 + z'^2)^{3/2}}\n   E'_z = \\frac{qz'}{(x'^2 + y'^2 + z'^2)^{3/2}}\n   B' = 0\n\n3) The Lorentz transformation for coordinates is:\n   x' = γ(x - vt)\n   y' = y\n   z' = z\n\n4) The field transformations are:\n   E_x = E'_x\n   E_y = γ(E'_y - βB'_z)\n   E_z = γ(E'_z + βB'_y)\n   B_x = B'_x\n   B_y = γ(B'_y + βE'_z)\n   B_z = γ(B'_z - βE'_y)\n\n5) Substituting the primed coordinates into the Coulomb field:\n   E'_x = \\frac{qγ(x-vt)}{[γ^2(x-vt)^2 + y^2 + z^2]^{3/2}}\n   E'_y = \\frac{qy}{[γ^2(x-vt)^2 + y^2 + z^2]^{3/2}}\n   E'_z = \\frac{qz}{[γ^2(x-vt)^2 + y^2 + z^2]^{3/2}}\n\n6) Using the field transformations and noting that B' = 0:\n   E_x = \\frac{qγ(x-vt)}{χ}\n   E_y = γ\\frac{qy}{χ}\n   E_z = γ\\frac{qz}{χ}\n   B_x = 0\n   B_y = -βγ\\frac{qz}{χ}\n   B_z = βγ\\frac{qy}{χ}\n\n7) These expressions match exactly with the given equations.\n\n\\[\\boxed{\\text{The given expressions for } E \\text{ and } B \\text{ are verified}}\\]", "final_answers": ["\\text{The given expressions for } E \\text{ and } B \\text{ are verified}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "E_x = \\frac{q}{\\chi} \\gamma (x - vt)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "B_x = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "E_y = \\frac{q}{\\chi} \\gamma y"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "B_y = -\\frac{q}{\\chi} \\beta \\gamma z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "E_z = \\frac{q}{\\chi} \\gamma z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The given expressions for } E \\text{ and } B \\text{ are verified}", "expr2": "B_z = \\frac{q}{\\chi} \\beta \\gamma y"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_17", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we need to find:\n   * We need the total electrostatic energy of the system\n   * The potential at the center\n   * We have a grounded spherical shell (V=0 at r=R₂)\n   * Uniform charge density ρ inside radius R₁\n\n2) Let's find the electric field at different regions:\n   * For r < R₁ (inside the charged region):\n     * Using Gauss's law: E(r) = (ρr)/(3ε₀)\n   * For R₁ < r < R₂ (inside the shell):\n     * E(r) = (ρR₁³)/(3ε₀r²)\n   * For r > R₂:\n     * E(r) = 0 (as shell is grounded)\n\n3) To find potential at center, integrate E(r) from R₂ to 0:\n   * V(0) = -∫E(r)dr from R₂ to 0\n   * V(0) = -∫[(ρr)/(3ε₀)]dr from 0 to R₁ - ∫[(ρR₁³)/(3ε₀r²)]dr from R₁ to R₂\n   * V(0) = -(ρR₁²)/(6ε₀) + (ρR₁³)/(3ε₀)*(1/R₁ - 1/R₂)\n\n4) For electrostatic energy:\n   * W = ∫(ε₀E²/2)dV\n   * W = ∫₀^R₁ (ε₀/2)[(ρr)/(3ε₀)]²(4πr²)dr + ∫R₁^R₂ (ε₀/2)[(ρR₁³)/(3ε₀r²)]²(4πr²)dr\n   * After integration:\n   * W = (πρ²R₁⁵)/(45ε₀) + (2πρ²R₁⁶)/(27ε₀)*(1/R₁ - 1/R₂)\n\nThe potential at center:\n\\[ \\boxed{V(0) = -\\frac{\\rho R_1^2}{6\\epsilon_0} + \\frac{\\rho R_1^3}{3\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})} \\]\n\nThe total electrostatic energy:\n\\[ \\boxed{W = \\frac{\\pi\\rho^2R_1^5}{45\\epsilon_0} + \\frac{2\\pi\\rho^2R_1^6}{27\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})} \\]", "final_answers": ["V(0) = -\\frac{\\rho R_1^2}{6\\epsilon_0} + \\frac{\\rho R_1^3}{3\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})", "W = \\frac{\\pi\\rho^2R_1^5}{45\\epsilon_0} + \\frac{2\\pi\\rho^2R_1^6}{27\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})"], "equivalency_results": [{"input_expressions": {"expr1": "V(0) = -\\frac{\\rho R_1^2}{6\\epsilon_0} + \\frac{\\rho R_1^3}{3\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})", "expr2": "W = \\frac{2 \\rho^2 R_1^5}{45 \\epsilon_0}"}, "preprocessed_expressions": {"expr1": "-R**2*rho/(6*epsilon)", "expr2": "2*R**5*rho**2/(45*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V(0) = -\\frac{\\rho R_1^2}{6\\epsilon_0} + \\frac{\\rho R_1^3}{3\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})", "expr2": "\\varphi(0) = \\frac{\\rho R_1^2}{6 \\epsilon_0}"}, "preprocessed_expressions": {"expr1": "-R**2*rho/(6*epsilon)", "expr2": "R**2*rho/(6*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{\\pi\\rho^2R_1^5}{45\\epsilon_0} + \\frac{2\\pi\\rho^2R_1^6}{27\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})", "expr2": "W = \\frac{2 \\rho^2 R_1^5}{45 \\epsilon_0}"}, "preprocessed_expressions": {"expr1": "R**5*pi*rho**2/(45*epsilon)", "expr2": "2*R**5*rho**2/(45*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{\\pi\\rho^2R_1^5}{45\\epsilon_0} + \\frac{2\\pi\\rho^2R_1^6}{27\\epsilon_0}(\\frac{1}{R_1} - \\frac{1}{R_2})", "expr2": "\\varphi(0) = \\frac{\\rho R_1^2}{6 \\epsilon_0}"}, "preprocessed_expressions": {"expr1": "R**5*pi*rho**2/(45*epsilon)", "expr2": "R**2*rho/(6*epsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_27", "solution": "Let's solve this step by step.\n\n(a) First, let's find the canonical momentum p_φ:\n\n1) The canonical momentum is defined as p_φ = ∂L/∂φ̇\n\n2) In spherical coordinates:\n   v_φ = r sin θ φ̇\n   v² = v_r² + v_θ² + v_φ²\n   β = v/c\n\n3) The Lagrangian has two terms:\n   - Relativistic kinetic term: -mc²√(1 - β²)\n   - Electromagnetic term: (e/c)A·v\n\n4) For p_φ, we need only terms containing φ̇:\n   - From kinetic term: mc²β²/√(1 - β²) × (r sin θ)²φ̇\n   - From EM term: (e/c)(μ sin θ/r²)(r sin θ φ̇)\n\n5) Therefore:\np_φ = mr²sin²θ φ̇/√(1 - β²) + (eμ sin²θ)/(cr)\n\n\\[ \\boxed{p_\\phi = \\frac{mr^2\\sin^2\\theta \\dot{\\phi}}{\\sqrt{1-\\beta^2}} + \\frac{e\\mu \\sin^2\\theta}{cr}} \\]\n\n(b) To show p_φ is constant:\n\n1) The Lagrangian has no explicit φ dependence\n2) By Noether's theorem, when a coordinate is cyclic (doesn't appear explicitly), its conjugate momentum is conserved\n3) Therefore, p_φ is a constant of motion\n\n\\[ \\boxed{\\frac{d}{dt}p_\\phi = 0} \\]\n\n(c) For the gauge transformation:\n\n1) Under A → A + ∇χ:\n   The new term adds ∂χ/∂φ to A_φ\n\n2) The new canonical momentum becomes:\n   p'_φ = p_φ + (e/c)∂χ/∂φ\n\n3) This new momentum is still conserved if χ has no explicit time dependence because:\n   - The gauge transformation preserves the equations of motion\n   - If χ is time-independent, the new Lagrangian still has no explicit φ dependence\n\n\\[ \\boxed{p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}} \\]\n\nThe original expression from part (a) is no longer a constant of motion under this transformation, but p'_φ is the new conserved quantity.", "final_answers": ["p_\\phi = \\frac{mr^2\\sin^2\\theta \\dot{\\phi}}{\\sqrt{1-\\beta^2}} + \\frac{e\\mu \\sin^2\\theta}{cr}", "\\frac{d}{dt}p_\\phi = 0", "p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}"], "equivalency_results": [{"input_expressions": {"expr1": "p_\\phi = \\frac{mr^2\\sin^2\\theta \\dot{\\phi}}{\\sqrt{1-\\beta^2}} + \\frac{e\\mu \\sin^2\\theta}{cr}", "expr2": "p_{\\phi} = m \\gamma r^2 \\sin^2 \\theta \\, \\dot{\\phi} + \\frac{e}{c} \\frac{\\mu \\sin^2 \\theta}{r}"}, "preprocessed_expressions": {"expr1": "m*r**2*sin(dot*phi*theta)**2/sqrt(1 - beta**2) + e*mu*sin(theta)**2/(c*r)", "expr2": "gamma*m*r**2*sin(dot*phi*theta)**2 + e*mu*sin(theta)**2/(c*r)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\frac{d}{dt}p_\\phi = 0", "expr2": "p_{\\phi} = m \\gamma r^2 \\sin^2 \\theta \\, \\dot{\\phi} + \\frac{e}{c} \\frac{\\mu \\sin^2 \\theta}{r}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "gamma*m*r**2*sin(dot*phi*theta)**2 + e*mu*sin(theta)**2/(c*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d}{dt}p_\\phi = 0", "expr2": "\\dot{p}_{\\phi} = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}", "expr2": "p_{\\phi} = m \\gamma r^2 \\sin^2 \\theta \\, \\dot{\\phi} + \\frac{e}{c} \\frac{\\mu \\sin^2 \\theta}{r}"}, "preprocessed_expressions": {"expr1": "h*i*p", "expr2": "gamma*m*r**2*sin(dot*phi*theta)**2 + e*mu*sin(theta)**2/(c*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}", "expr2": "\\dot{p}_{\\phi} = 0"}, "preprocessed_expressions": {"expr1": "h*i*p", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}", "expr2": "p'_{\\phi} = m \\gamma r^2 \\sin^2 \\theta \\, \\dot{\\phi} + \\frac{e}{c} \\left( \\frac{\\mu \\sin^2 \\theta}{r} + \\frac{\\partial \\chi}{\\partial \\phi} \\right)"}, "preprocessed_expressions": {"expr1": "h*i*p", "expr2": "gamma*m*r**2*sin(dot*phi*theta)**2 + e*mu*sin(theta)**2/(c*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "p'_\\phi = p_\\phi + \\frac{e}{c}\\frac{\\partial\\chi}{\\partial\\phi}", "expr2": "p'_{\\phi} \\text{ is a constant of motion, but } p_{\\phi} \\text{ is not.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.6666666666666666}
{"id": "electro/2_30", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   - A large cylinder (radius 3a) with a hole (radius a)\n   - The hole's center is a distance 'a' from the main cylinder's center\n   - Current I flows uniformly through the solid part\n   - We need to find B-field in plane P and inside the hole\n\n2) For part (a), key points:\n   - By Ampère's law, for any point outside the conductor, the magnetic field depends only on the total current enclosed\n   - The field lines are circular around the current axis\n   - For points on plane P outside the conductor, B = μ₀I/(2πr)\n\n3) For part (b), important principle:\n   - Inside a hole in a conductor carrying uniform current density, the magnetic field is uniform\n   - This is because the field from a uniformly charged conductor varies linearly with radius inside\n   - The field in the hole is equivalent to that produced by a uniform current density in the missing region\n\n4) For the hole:\n   - The field will be uniform\n   - Its magnitude will be B = μ₀J×a = μ₀I×a/(2πA)\n   where A is the cross-sectional area of the conductor\n   - A = π(9a² - a²) = 8πa²\n   - Therefore, B = μ₀I/(16πa)\n\n5) The direction of the field in the hole:\n   - It will be perpendicular to the line joining the centers\n   - The direction is consistent with the right-hand rule for current flow\n\nThe final answer for the magnetic field in the hole is:\n\n\\[\\boxed{B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}}\\]\n\nThis uniform field points in the y-direction (perpendicular to the line joining the centers of the cylinders), with magnitude μ₀I/(16πa).\n\nFor points on plane P outside the conductor, the field follows the standard B = μ₀I/(2πr) pattern, where r is the distance from the center of the conductor.", "final_answers": ["B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}", "expr2": "H_y = \\frac{I}{16\\pi a}"}, "preprocessed_expressions": {"expr1": "hat*muI*y/(16*a*pi)", "expr2": "I/(16*a*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}", "expr2": "H_y = \\frac{I(x^2 - ax - a^2)}{16\\pi a^2(x - a)}"}, "preprocessed_expressions": {"expr1": "hat*muI*y/(16*a*pi)", "expr2": "I(-a**2 - a*x + x**2)/(16*a**2*pi*(-a + x))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}", "expr2": "H_y = \\frac{(8x - 9a)I}{16\\pi x(x-a)}"}, "preprocessed_expressions": {"expr1": "hat*muI*y/(16*a*pi)", "expr2": "I*(-9*a + 8*x)/(16*pi*x(-a + x))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = \\frac{\\mu_0I}{16\\pi a}\\hat{y}", "expr2": "H_y = \\frac{I}{16\\pi a}"}, "preprocessed_expressions": {"expr1": "hat*muI*y/(16*a*pi)", "expr2": "I/(16*a*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_20", "solution": "Let's solve this step by step.\n\n1) First, let's determine the distance R between points P and Q:\n   * R² = b² + (vt)²\n   * R = √(b² + v²t²)\n\n2) For (a) Scalar potential φ:\n   * For a moving charge, φ = e/R where R is the distance\n   * Therefore, φ = e/√(b² + v²t²)\n\n3) For (b) Vector potential A:\n   * For a moving charge, A = (ev)/c²R\n   * The direction is parallel to v (z-direction)\n   * Therefore, A = (ev/c²)/√(b² + v²t²) k̂\n   where k̂ is the unit vector in z-direction\n\n4) For (c) Electric field Ex:\n   * Ex = -∂φ/∂x - ∂Ax/∂t\n   * Since Ax = 0, we only need -∂φ/∂x\n   * ∂φ/∂x = -eb/(b² + v²t²)^(3/2)\n   * Therefore, Ex = eb/(b² + v²t²)^(3/2)\n\nThe final answers are:\n\n\\[ \\boxed{\\begin{align*}\n\\phi &= \\frac{e}{\\sqrt{b^2 + v^2t^2}} \\\\\nA &= \\frac{ev}{c^2\\sqrt{b^2 + v^2t^2}}\\hat{k} \\\\\nE_x &= \\frac{eb}{(b^2 + v^2t^2)^{3/2}}\n\\end{align*}} \\]", "final_answers": ["\\begin{align*}\n\\phi &= \\frac{e}{\\sqrt{b^2 + v^2t^2}} \\\\\nA &= \\frac{ev}{c^2\\sqrt{b^2 + v^2t^2}}\\hat{k} \\\\\nE_x &= \\frac{eb}{(b^2 + v^2t^2)^{3/2}}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\phi &= \\frac{e}{\\sqrt{b^2 + v^2t^2}} \\\\\nA &= \\frac{ev}{c^2\\sqrt{b^2 + v^2t^2}}\\hat{k} \\\\\nE_x &= \\frac{eb}{(b^2 + v^2t^2)^{3/2}}\n\\end{align*}", "expr2": "\\phi = \\frac{e}{4\\pi \\epsilon_0 \\sqrt{(1 - \\beta^2) b^2 + v^2 t^2}}"}, "preprocessed_expressions": {"expr1": "b*e*end/(b**2 + t**2*v**2)**(3/2)", "expr2": "e/(4*epsilon*pi*sqrt(-b**2*beta**2 + b**2 + t**2*v**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\phi &= \\frac{e}{\\sqrt{b^2 + v^2t^2}} \\\\\nA &= \\frac{ev}{c^2\\sqrt{b^2 + v^2t^2}}\\hat{k} \\\\\nE_x &= \\frac{eb}{(b^2 + v^2t^2)^{3/2}}\n\\end{align*}", "expr2": "\\mathbf{A} = \\frac{ev}{4\\pi \\epsilon_0 c^2 \\sqrt{(1 - \\beta^2) b^2 + v^2 t^2}} \\mathbf{e}_z"}, "preprocessed_expressions": {"expr1": "b*e*end/(b**2 + t**2*v**2)**(3/2)", "expr2": "e**2*mathbf*v/(4*c**2*epsilon*pi*sqrt(-b**2*beta**2 + b**2 + t**2*v**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\phi &= \\frac{e}{\\sqrt{b^2 + v^2t^2}} \\\\\nA &= \\frac{ev}{c^2\\sqrt{b^2 + v^2t^2}}\\hat{k} \\\\\nE_x &= \\frac{eb}{(b^2 + v^2t^2)^{3/2}}\n\\end{align*}", "expr2": "E_x = \\frac{e(1-\\beta^2)b}{4\\pi\\epsilon_0[(1-\\beta^2)b^2+v^2t^2]^{3/2}}"}, "preprocessed_expressions": {"expr1": "b*e*end/(b**2 + t**2*v**2)**(3/2)", "expr2": "b*e(1 - beta**2)/(4*epsilon*pi*(-b**2*beta**2 + b**2 + t**2*v**2)**(3/2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_73", "solution": "Let me explain the method of image charges for this configuration step by step:\n\n1) For each conducting plane, we need to place an image charge of opposite sign at the mirror position of the original charge.\n\n2) Since we have two conducting planes at 60°, we need to consider multiple reflections. The image charges from one plane will create their own images in the other plane.\n\n3) Due to the 60° angle, we will get a total of 6 charges (including the original charge) before the pattern repeats. This is because:\n   * 360° ÷ 60° = 6 positions\n   * Each reflection alternates between +q and -q\n\n4) The charges form a regular hexagonal pattern, with:\n   * The original +q charge\n   * Three -q image charges\n   * Two +q image charges\n\n5) All charges are equidistant from the vertex where the planes meet, and are spaced at 60° intervals.\n\nThe reasoning behind this is that each conducting plane requires an image charge to satisfy boundary conditions (zero potential on the conductor), and the 60° angle creates a pattern that closes after 6 reflections due to the geometric symmetry.\n\n\\[\\boxed{\\text{Total of 6 charges: Original +q and 5 image charges (3 of -q and 2 of +q)}}\\]", "final_answers": ["\\text{Total of 6 charges: Original +q and 5 image charges (3 of -q and 2 of +q)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Total of 6 charges: Original +q and 5 image charges (3 of -q and 2 of +q)}", "expr2": "\\text{Image charges symmetrically distributed on the two sides}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_87", "solution": "Let me solve this step by step.\n\n1) When a conducting sphere is influenced by an external point charge, the charge distribution on the sphere's surface becomes non-uniform due to electrostatic induction.\n\n2) The surface charge density at any point on the sphere is determined by:\n   - The charge Q given to the sphere\n   - The induced charge distribution due to the external charge q\n\n3) For a point charge q at distance r from the center of a grounded conducting sphere (Q=0), the surface charge density σ at angle θ is:\n   σ = -q·a/(4πr²)·[1 - (a/r)²]/[1 + (a/r)² - 2(a/r)cosθ]^(3/2)\n\n4) When the sphere has charge Q, we add a uniform charge density Q/(4πa²) to this.\n   σ = Q/(4πa²) - q·a/(4πr²)·[1 - (a/r)²]/[1 + (a/r)² - 2(a/r)cosθ]^(3/2)\n\n5) The minimum surface density occurs at θ = 0 (the point nearest to q) for positive q, and at θ = π (the farthest point) for negative q.\n\n6) For positive q:\n   At θ = 0, the denominator is minimum: [1 + (a/r)² - 2(a/r)]^(3/2)\n   For the density to be positive: Q/(4πa²) > q·a/(4πr²)·[1 - (a/r)²]/[1 - a/r]³\n\n7) For negative q:\n   At θ = π, the denominator is minimum: [1 + (a/r)² + 2(a/r)]^(3/2)\n   For the density to be positive: Q/(4πa²) > |q|·a/(4πr²)·[1 - (a/r)²]/[1 + a/r]³\n\n8) The minimum required Q is:\n   For +q: Q = qa²/r²·[1 - (a/r)²]/[1 - a/r]³\n   For -q: Q = qa²/r²·[1 - (a/r)²]/[1 + a/r]³\n\n9) Since r > a, the denominator [1 + a/r]³ is larger than [1 - a/r]³\n\nTherefore, the minimum positive charge required is:\n\n\\[\\boxed{Q = \\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}}\\]\n\nAnd this is larger for the case of +q than for -q.", "final_answers": ["Q = \\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}"], "equivalency_results": [{"input_expressions": {"expr1": "Q = \\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}", "expr2": "Q \\geq \\frac{a^2 (3r-a)}{r(r-a)^2} q"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}\n~~~~~~~~^"}, {"input_expressions": {"expr1": "Q = \\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}", "expr2": "Q \\geq \\frac{qa^2 (3r+a)}{r(r+a)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{qa²}{r²}\\frac{1-(a/r)²}{(1-a/r)³}\n~~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_80", "solution": "Let me solve this step by step.\n\n(a) For a grounded conducting sphere with a point charge:\n\n1) The solution involves the method of image charges. The image charge:\n   * Location: at distance $a^2/s$ from center along same direction as $q$\n   * Magnitude: $q' = -qa/s$\n\n2) The potential at any point $r$ outside the sphere will be the sum of:\n   * Potential due to original charge $q$\n   * Potential due to image charge $q'$\n\n3) Using Coulomb's law in vacuum ($\\varepsilon_0$ is permittivity of free space):\n   * $V(r) = \\frac{q}{4\\pi\\varepsilon_0}\\frac{1}{|r-s|} + \\frac{q'}{4\\pi\\varepsilon_0}\\frac{1}{|r-\\frac{a^2}{s}\\hat{s}|}$\n\n4) Substituting $q' = -qa/s$:\n   * $V(r) = \\frac{q}{4\\pi\\varepsilon_0}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})$\n\n(b) For a dielectric medium:\n\n1) The same method applies, but we need to replace $\\varepsilon_0$ with $\\varepsilon$\n\n2) The potential becomes:\n   * $V(r) = \\frac{q}{4\\pi\\varepsilon}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})$\n\nThe final answer for both cases can be combined into one expression:\n\n\\[ \\boxed{V(r) = \\frac{q}{4\\pi\\varepsilon}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})} \\]\n\nwhere $\\varepsilon = \\varepsilon_0$ for vacuum (case a) and $\\varepsilon$ is the dielectric constant for case (b).", "final_answers": ["V(r) = \\frac{q}{4\\pi\\varepsilon}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})"], "equivalency_results": [{"input_expressions": {"expr1": "V(r) = \\frac{q}{4\\pi\\varepsilon}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})", "expr2": "\\phi(r) = \\frac{q}{4\\pi \\varepsilon_0} \\left[ \\frac{1}{|r - s|} - \\frac{a/s}{|r - \\frac{a^2}{s}s|} \\right]"}, "preprocessed_expressions": {"expr1": "-a*q/(4*pi*s*varepsilon*Abs(a**2*hat - r)) + q/(4*pi*varepsilon*Abs(r - s))", "expr2": "-a*q/(4*pi*s*varepsilon*Abs(a**2 - r)) + q/(4*pi*varepsilon*Abs(r - s))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V(r) = \\frac{q}{4\\pi\\varepsilon}(\\frac{1}{|r-s|} - \\frac{a/s}{|r-\\frac{a^2}{s}\\hat{s}|})", "expr2": "\\phi(r) = \\frac{q}{4\\pi \\varepsilon} \\left[ \\frac{1}{|r - s|} - \\frac{a/s}{|r - \\frac{a^2}{s}s|} \\right]"}, "preprocessed_expressions": {"expr1": "-a*q/(4*pi*s*varepsilon*Abs(a**2*hat - r)) + q/(4*pi*varepsilon*Abs(r - s))", "expr2": "-a*q/(4*pi*s*varepsilon*Abs(a**2 - r)) + q/(4*pi*varepsilon*Abs(r - s))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_74", "solution": "Let me solve this step by step.\n\n1) When a charge is placed in front of a conducting metallic plane, it induces charges on the surface of the conductor.\n\n2) According to the method of images:\n   * The effect of the induced charges can be represented by an imaginary \"image charge\" located behind the conducting plane\n   * The image charge is equal in magnitude but opposite in sign to the original charge\n   * The distance of the image charge behind the plane equals the distance of the real charge in front of the plane\n\n3) The physics behind this:\n   * The conducting plane must remain an equipotential surface\n   * The induced charges redistribute themselves to maintain zero electric field inside the conductor\n   * This redistribution creates a field pattern identical to what would exist if there were an image charge\n\n4) The force between the real charge and its image charge:\n   * Since they are opposite charges, they attract each other\n   * This attraction is equivalent to the force between the real charge and the induced charges on the plane\n   * Therefore, the charge is attracted toward the conducting plane\n\n5) This is not repulsion (eliminating option a), and the charge definitely interacts with the plane (eliminating option b)\n\n6) The correct answer must be (c) as the charge is attracted to the plane, and this attraction can be calculated using the image charge method.\n\n\\[\\boxed{\\text{(c) is attracted to the plane by a mirror image of equal and opposite charge}}\\]", "final_answers": ["\\text{(c) is attracted to the plane by a mirror image of equal and opposite charge}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(c) is attracted to the plane by a mirror image of equal and opposite charge}", "expr2": "c"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_42", "solution": "Let's solve this step by step.\n\n(a) For the electric potential distribution:\n\n1) Due to the symmetry and boundary conditions, this problem is best solved in cylindrical coordinates.\n\n2) The potential must satisfy Laplace's equation: ∇²V = 0\n\n3) In cylindrical coordinates for this case (independent of z):\n   $\\frac{1}{r}\\frac{\\partial}{\\partial r}(r\\frac{\\partial V}{\\partial r}) + \\frac{1}{r^2}\\frac{\\partial^2 V}{\\partial \\phi^2} = 0$\n\n4) The boundary conditions are:\n   - V = V₀ at φ = 0 for r = a\n   - V = 0 at φ = π for r = a\n   - V must be finite at r = 0\n   - V → 0 as r → ∞\n\n5) The solution is:\n   $V(r,\\phi) = \\begin{cases}\n   \\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n   \\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n   \\end{cases}$\n\n(b) For r ≫ a:\n\n1) Use the potential for r > a\n2) Take the negative gradient of V to get E\n3) The dominant term will be (a/r)\n4) The electric field components are:\n   $E_r \\approx \\frac{V_0a}{\\pi r^2}sin\\phi$\n   $E_\\phi \\approx -\\frac{V_0a}{\\pi r^2}cos\\phi$\n\n(c) For r ≪ a:\n\n1) Use the potential for r < a\n2) Take the negative gradient of V\n3) The field components are:\n   $E_r \\approx \\frac{V_0}{\\pi a}sin\\phi$\n   $E_\\phi \\approx -\\frac{V_0}{\\pi a}cos\\phi$\n\n(d) The electric field lines:\n- Start perpendicular to the surface at V₀\n- End perpendicular to the surface at V = 0\n- Are more dense near the edges\n- Become radial at large distances\n- Form a dipole-like pattern\n\nThe final answer for the potential distribution is:\n\n\\[\\boxed{V(r,\\phi) = \\begin{cases}\n\\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}}\\]", "final_answers": ["V(r,\\phi) = \\begin{cases}\n\\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "V(r,\\phi) = \\begin{cases}\n\\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}", "expr2": "V = \\frac{V_0}{\\pi} \\left[ \\frac{\\pi}{2} + \\arctan \\frac{2ar \\sin \\theta}{|r^2 - a^2|} \\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{cases}\n\\frac{V}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "V(r,\\phi) = \\begin{cases}\n\\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}", "expr2": "E_r = \\frac{2V_0 a \\sin \\theta}{\\pi r^2}, \\quad E_\\theta = -\\frac{2V a}{\\pi r^2} \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{cases}\n\\frac{V}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "V(r,\\phi) = \\begin{cases}\n\\frac{V_0}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V_0}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}", "expr2": "E_r = -\\frac{2V_0 \\sin \\theta}{\\pi a}, \\quad E_\\theta = -\\frac{2V_0}{\\pi a} \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{cases}\n\\frac{V}{\\pi}[\\phi + (\\frac{r}{a})sin\\phi] & r < a \\\\\n\\frac{V}{\\pi}[\\phi + (\\frac{a}{r})sin\\phi] & r > a\n\\end{cases}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_89", "solution": "Let's solve this step by step.\n\n(a) First, let's consider the boundary conditions:\n\n1) For a perfect conductor:\n   * The electric field inside must be zero\n   * The electric field just outside must be perpendicular to the surface\n   * The tangential component of E must be continuous across the boundary\n   * Since it's a perfect conductor, any induced charges will redistribute instantaneously\n\n2) At r = a (sphere surface):\n   * E_tangential = 0\n   * E_normal is discontinuous by σ/ε₀, where σ is the induced surface charge density\n\n(b) For the force calculation:\n\n1) The dipole creates a field, which induces charges on the sphere. These induced charges then create a field that acts back on the dipole.\n\n2) Method of images can be used here:\n   * The field outside the sphere can be represented by the original dipole plus an image dipole\n   * The image dipole will be located at r' = a²/r from the center\n   * The image dipole moment will be P' = -(a³/r³)P\n\n3) The force on the dipole due to the field from the image dipole is:\n   F = (P·∇)E_image\n\n4) The field from a dipole at distance R is approximately:\n   E = [3(P·R̂)R̂ - P]/4πε₀R³\n\n5) In this case:\n   * R = r - r' = r - a²/r\n   * The force will be in the radial direction\n   * After calculations and keeping leading terms in a/r:\n\n6) The final force is:\n   F = -6P²a³/4πε₀r⁷\n\nThe negative sign indicates the force is attractive.\n\n\\[ \\boxed{F = -\\frac{6P^2a^3}{4\\pi\\epsilon_0r^7}} \\]\n\nThis shows that:\n- The force falls off as 1/r⁷\n- It's proportional to the cube of the sphere radius\n- It's proportional to the square of the dipole moment\n- The force is always attractive toward the sphere", "final_answers": ["F = -\\frac{6P^2a^3}{4\\pi\\epsilon_0r^7}"], "equivalency_results": [{"input_expressions": {"expr1": "F = -\\frac{6P^2a^3}{4\\pi\\epsilon_0r^7}", "expr2": "E_n = \\frac{\\sigma}{\\varepsilon_0}, \\quad E_t = 0"}, "preprocessed_expressions": {"expr1": "-3*P**2*a**3/(2*epsilonr**7*pi)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{6P^2a^3}{4\\pi\\epsilon_0r^7}", "expr2": "\\mathbf{F} = \\frac{6 a^3 P^2}{\\pi \\varepsilon_0 r^7}"}, "preprocessed_expressions": {"expr1": "-3*P**2*a**3/(2*epsilonr**7*pi)", "expr2": "6*P**2*a**3/(pi*r**7*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_45", "solution": "Let me solve this step by step.\n\n1) First, recall that for any two conductors, the ratio of capacitance (C) to conductance (G) depends only on the material properties:\n\n   C/G = ε/σ\n   where ε is the permittivity and σ is the conductivity\n\n2) The conductance G is the reciprocal of resistance R:\n   G = 1/R\n\n3) We can rearrange the first equation to solve for C:\n   C = (ε/σ) × G = (ε/σ) × (1/R)\n\n4) Let's plug in our known values:\n   * σ = 10^-4 Ω/m\n   * ε = 80ε₀\n   * R = 10^5 Ω\n   * ε₀ = 8.85 × 10^-12 F/m\n\n5) Substituting:\n   C = (80 × 8.85 × 10^-12) / (10^-4) × (1/10^5)\n   \n6) Simplify:\n   C = (80 × 8.85 × 10^-12) × (10^4) × (10^-5)\n   C = 80 × 8.85 × 10^-13\n   C = 7.08 × 10^-11 F\n   C = 70.8 pF\n\nTherefore, the capacitance between the two conductors is 70.8 picofarads.\n\n\\[ \\boxed{C = 70.8 \\text{ pF}} \\]", "final_answers": ["C = 70.8 \\text{ pF}"], "equivalency_results": [{"input_expressions": {"expr1": "C = 70.8 \\text{ pF}", "expr2": "C = 7.08 \\times 10^{-11} \\, \\text{F}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_11", "solution": "Let me solve this step by step:\n\n1) First, let's understand what we're dealing with:\n   * A cube with 5 sides at ground potential (φ = 0)\n   * One side at potential φ₀\n   * We need to find the potential at the center\n\n2) This is a case where we can use the principle of superposition and symmetry:\n   * The potential at any point is the average of the potentials of all sides, weighted by their solid angles\n\n3) For a cube:\n   * Each face subtends the same solid angle when viewed from the center\n   * The solid angle from the center to each face is equal\n   * Each face contributes equally to the potential at the center\n\n4) Since all faces contribute equally:\n   * 5 faces contribute 0 potential (grounded)\n   * 1 face contributes φ₀ potential\n   * Total contribution is divided by 6 (total number of faces)\n\n5) Therefore:\n   * Potential at center = (5 × 0 + 1 × φ₀) ÷ 6\n   * Potential at center = φ₀/6\n\n\\[ \\boxed{\\phi_{center} = \\frac{\\phi_0}{6}} \\]", "final_answers": ["\\phi_{center} = \\frac{\\phi_0}{6}"], "equivalency_results": [{"input_expressions": {"expr1": "\\phi_{center} = \\frac{\\phi_0}{6}", "expr2": "\\phi_c = \\frac{\\phi_0}{6}"}, "preprocessed_expressions": {"expr1": "phi/6", "expr2": "phi/6"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_21", "solution": "Let's solve this step by step.\n\n(a) For non-relativistic motion:\n1) The Larmor formula for power radiated per unit solid angle is:\n   $\\frac{dP}{d\\Omega} = \\frac{e^2}{16\\pi^2c^3}|\\mathbf{n}' × (\\mathbf{n}' × \\dot{\\boldsymbol{\\beta}})|^2$\n2) This can be rewritten as:\n   $\\frac{dP}{d\\Omega} = \\frac{e^2}{16\\pi^2c^3}|\\dot{\\boldsymbol{\\beta}}|^2\\sin^2\\theta$\nwhere θ is the angle between $\\mathbf{n}'$ and $\\dot{\\boldsymbol{\\beta}}$\n\n(b) For $z(t) = a\\cos(\\omega_0t)$:\n1) $\\beta_z = -\\frac{a\\omega_0}{c}\\sin(\\omega_0t)$\n2) $\\dot{\\beta_z} = -\\frac{a\\omega_0^2}{c}\\cos(\\omega_0t)$\n3) Substituting into the formula:\n   $\\frac{dP}{d\\Omega} = \\frac{e^2a^2\\omega_0^4}{16\\pi^2c^5}\\cos^2(\\omega_0t)\\sin^2\\theta$\n4) Time averaging $\\cos^2(\\omega_0t) = \\frac{1}{2}$:\n   $\\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta$\n\n(c) For circular motion:\n1) $\\beta_x = -\\frac{R\\omega_0}{c}\\sin(\\omega_0t)$\n2) $\\beta_y = \\frac{R\\omega_0}{c}\\cos(\\omega_0t)$\n3) After calculations and time averaging:\n   $\\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)$\n\n(d) Angular distributions:\n1) Linear oscillation: sin²θ pattern (figure-8 shape)\n2) Circular motion: (1 + cos²θ) pattern (donut shape)\n\n(e) Relativistic effects:\n1) Radiation becomes beamed in direction of motion\n2) Power concentrated in narrow cone of angle ~1/γ\n3) Frequency spectrum shifts higher (blue-shifted)\n4) Total power increases by factor of γ⁴\n\nThe final answer combining all parts:\n\n\\[\\boxed{\\begin{aligned}\n&\\text{Linear:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta \\\\\n&\\text{Circular:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)\n\\end{aligned}}\\]", "final_answers": ["\\begin{aligned}\n&\\text{Linear:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta \\\\\n&\\text{Circular:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{Linear:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta \\\\\n&\\text{Circular:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)\n\\end{aligned}", "expr2": "\\frac{e^2}{16\\pi^2 \\epsilon_0 c} |\\dot{\\beta}|^2 \\sin^2 \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{Linear:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta \\\\\n&\\text{Circular:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)\n\\end{aligned}", "expr2": "\\frac{e^2 a^2 \\omega_0^4}{32\\pi^2 \\varepsilon_0 c^3}\\sin^2 \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{Linear:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2a^2\\omega_0^4}{32\\pi^2c^5}\\sin^2\\theta \\\\\n&\\text{Circular:} \\left\\langle\\frac{dP}{d\\Omega}\\right\\rangle = \\frac{e^2R^2\\omega_0^4}{32\\pi^2c^5}(1 + \\cos^2\\theta)\n\\end{aligned}", "expr2": "\\frac{e^2 R^2 \\omega_0^4}{32\\pi^2 \\varepsilon_0 c^3} (1 + \\cos^2 \\theta)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_19", "solution": "Let's solve this step by step.\n\n(a) For positrons traveling in line:\n\nStep 1: Rest Frame Analysis\n- In the rest frame, we only have an electric field (no magnetic field)\n- Using Coulomb's law:\nE = kq/d² (in direction of separation)\nB = 0\nF = qE = kq²/d² (repulsive)\na = F/m = kq²/(md²)\n\nStep 2: Laboratory Frame Analysis\n- Need to consider relativistic transformations\n- Electric field perpendicular to motion is unchanged\n- Electric field parallel to motion is reduced by γ\n- Magnetic field is created due to motion: B = v×E/c²\n- For this case:\nE = (kq/d²)/γ\nB = βE/c (where β = v/c)\nF = q(E + v×B)\na = F/m = F/(γm) (additional γ factor due to relativistic mass)\n\nStep 3: Relativistic Factors Explanation\n- The 1/γ factor in E comes from length contraction\n- The magnetic force partially cancels the electric force\n- The additional γ in acceleration comes from relativistic mass increase\n\n(b) For side-by-side positrons:\n\nStep 1: Rest Frame\n- Same as before but direction is perpendicular\nE = kq/d²\nB = 0\nF = qE\na = F/m\n\nStep 2: Laboratory Frame\n- Electric field perpendicular to motion remains unchanged\n- Magnetic field is created but doesn't contribute to force (parallel to velocity)\nE = kq/d²\nB = βE/c\nF = qE (magnetic force is zero)\na = F/(γm)\n\nThe final expressions for acceleration in both cases are:\n\n\\[\\boxed{a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}}\\]\n\nThe inline case has an extra γ² factor reduction compared to the side-by-side case due to the combination of field transformation and partial cancellation of electric and magnetic forces.", "final_answers": ["a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}"], "equivalency_results": [{"input_expressions": {"expr1": "a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}", "expr2": "\\begin{align*}\n\\mathbf{E}' &= -\\frac{1}{4\\pi \\varepsilon_0} \\frac{e}{d^2} \\mathbf{e}_z, \\\\\n\\mathbf{B}' &= 0, \\\\\n\\mathbf{F}' &= -\\frac{1}{4\\pi \\varepsilon_0} \\frac{e^2}{d^2} \\mathbf{e}_z, \\\\\n\\mathbf{a}' &= -\\frac{1}{4\\pi \\varepsilon_0 m} \\frac{e^2}{d^2} \\mathbf{e}_z.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{kq^2}{γmd^2}\n~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}", "expr2": "\\begin{align*}\n\\mathbf{E} &= \\mathbf{E}' = - \\frac{1}{4\\pi \\varepsilon_0} \\frac{e}{d^2} \\mathbf{e}_z, \\\\\n\\mathbf{B} &= 0, \\\\\n\\mathbf{F} &= \\mathbf{F}' = - \\frac{1}{4\\pi \\varepsilon_0} \\frac{e^2}{d^2} \\mathbf{e}_z, \\\\\na &= \\frac{F}{m \\gamma^3} = \\frac{a'}{\\gamma^3}.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{kq^2}{γmd^2}\n~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}", "expr2": "\\begin{align*}\n\\mathbf{E}' &= - \\frac{e}{4 \\pi \\epsilon_0 d^2} \\mathbf{e}_z, \\\\\n\\mathbf{B}' &= 0, \\\\\n\\mathbf{F}' &= - \\frac{e^2}{4 \\pi \\epsilon_0 d^2} \\mathbf{e}_z, \\\\\n\\mathbf{a}' &= - \\frac{e^2}{4 \\pi \\epsilon_0 m d^2} \\mathbf{e}_z.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{kq^2}{γmd^2}\n~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "a_{inline} = \\frac{kq^2}{γ^3md^2}, \\quad a_{side} = \\frac{kq^2}{γmd^2}", "expr2": "\\begin{align*}\n\\mathbf{E} &= - \\frac{\\gamma e}{4 \\pi \\epsilon_0 d^2} \\mathbf{e}_z, \\\\\n\\mathbf{B} &= - \\frac{\\gamma v e}{4 \\pi \\epsilon_0 c^2 d^2} \\mathbf{e}_y, \\\\\n\\mathbf{F} &= - \\frac{e^2}{4 \\pi \\epsilon_0 d^2 \\gamma} \\mathbf{e}_x = \\frac{\\mathbf{F}'}{\\gamma}, \\\\\na &= \\frac{F}{m \\gamma^2} = \\frac{a'}{\\gamma^2}.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{kq^2}{γmd^2}\n~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_29", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we know:\n   * The rod has diameter d and length l\n   * l >> d (length is much greater than diameter)\n   * The electric field near surface (far from ends) is E₀\n   * We need to find field at r >> l on the axis\n\n2) For a uniformly charged cylinder, we can find the linear charge density λ:\n   * E₀ = λ/(2πε₀d/2) near the surface\n   * Therefore, λ = πε₀dE₀\n\n3) The total charge Q on the cylinder is:\n   * Q = λl = πε₀dE₀l\n\n4) At a distance r >> l, the cylinder appears as a point charge\n   * We can use the point charge formula: E = Q/(4πε₀r²)\n\n5) Substituting Q:\n   * E = (πε₀dE₀l)/(4πε₀r²)\n   * E = (dE₀l)/(4r²)\n\n6) Since r >> l, the field will be much smaller than E₀\n\nThe final answer is:\n\n\\[\\boxed{E = \\frac{dE_0l}{4r^2}}\\]\n\nThis shows that at large distances, the field falls off as 1/r², as expected for a point charge, with a magnitude proportional to the original surface field E₀, the diameter d, and the length l of the cylinder.", "final_answers": ["E = \\frac{dE_0l}{4r^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\frac{dE_0l}{4r^2}", "expr2": "E = \\frac{E_0 dl}{4r^2}"}, "preprocessed_expressions": {"expr1": "dE*l/(4*r**2)", "expr2": "E*dl/(4*r**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_26", "solution": "Let's solve this step by step.\n\n(a) For momentum:\n\n1) In a uniform electric field E, the force on the charged particle is F = eE\n2) This force equals the rate of change of relativistic momentum:\n   F = dp/dt = eE\n3) Integrating over time t:\n   ∫dp = ∫eE dt\n4) The final momentum p = eEt (assuming initial momentum = 0)\n\n(b) For velocity:\n\n1) Relativistic momentum is related to velocity by:\n   p = γmv = mv/√(1-v²/c²)\n2) From part (a), we know p = eEt\n3) Therefore: eEt = mv/√(1-v²/c²)\n4) Solving for v:\n   (eEt)² = m²v²/(1-v²/c²)\n   v²[m² + (eEt)²/c²] = (eEt)²\n   v = eEt/√(m² + (eEt)²/c²)\n\n(c) For lifetime:\n\n1) Time dilation formula relates proper time τ to observed time T:\n   T = γτ\n2) γ = 1/√(1-v²/c²)\n3) Substituting v from part (b):\n   γ = √(1 + (eEt)²/m²c²)\n4) Therefore, observed lifetime:\n   T = τ√(1 + (eEt)²/m²c²)\n\nFinal answers:\n\n\\[ \\boxed{\n\\begin{align*}\np &= eEt \\\\\nv &= \\frac{eEt}{\\sqrt{m^2 + (eEt)^2/c^2}} \\\\\nT &= \\tau\\sqrt{1 + \\frac{(eEt)^2}{m^2c^2}}\n\\end{align*}\n} \\]", "final_answers": ["\\begin{align*}\np &= eEt \\\\\nv &= \\frac{eEt}{\\sqrt{m^2 + (eEt)^2/c^2}} \\\\\nT &= \\tau\\sqrt{1 + \\frac{(eEt)^2}{m^2c^2}}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\np &= eEt \\\\\nv &= \\frac{eEt}{\\sqrt{m^2 + (eEt)^2/c^2}} \\\\\nT &= \\tau\\sqrt{1 + \\frac{(eEt)^2}{m^2c^2}}\n\\end{align*}", "expr2": "p = eEt"}, "preprocessed_expressions": {"expr1": "end*tau*sqrt(E**2*e**2*t**2/(c**2*m**2) + 1)", "expr2": "E*e*t"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\np &= eEt \\\\\nv &= \\frac{eEt}{\\sqrt{m^2 + (eEt)^2/c^2}} \\\\\nT &= \\tau\\sqrt{1 + \\frac{(eEt)^2}{m^2c^2}}\n\\end{align*}", "expr2": "v = \\frac{eEct}{\\sqrt{(eEt)^2 + (mc)^2}}"}, "preprocessed_expressions": {"expr1": "end*tau*sqrt(E**2*e**2*t**2/(c**2*m**2) + 1)", "expr2": "E*c*e*t/sqrt(E**2*e**2*t**2 + c**2*m**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\np &= eEt \\\\\nv &= \\frac{eEt}{\\sqrt{m^2 + (eEt)^2/c^2}} \\\\\nT &= \\tau\\sqrt{1 + \\frac{(eEt)^2}{m^2c^2}}\n\\end{align*}", "expr2": "T = \\tau \\sqrt{1 + \\left( \\frac{eEt}{mc} \\right)^2}"}, "preprocessed_expressions": {"expr1": "end*tau*sqrt(E**2*e**2*t**2/(c**2*m**2) + 1)", "expr2": "tau*sqrt(E**2*e**2*t**2/(c**2*m**2) + 1)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_16", "solution": "Let's solve this step by step.\n\n1) First, let's recall Gauss's law:\n   * ∮ E⋅dA = Q_enclosed/ε₀\n   * Due to spherical symmetry, E will be radial and uniform at any given radius\n\n2) For part (a) - Field outside outer sphere (r > r₃):\n   * All charge (+Q) is enclosed\n   * Field is radially outward\n   * Using Gauss's law: E(4πr²) = Q/ε₀\n   * Therefore: E = Q/(4πε₀r²) for r > r₃\n\n3) For part (b) - Field between spheres (r₂ < r < r₃):\n   * Only inner sphere's charge (+Q) is enclosed\n   * Conducting shell doesn't contribute (charge redistributes to outer surface)\n   * Using Gauss's law: E(4πr²) = Q/ε₀\n   * Therefore: E = Q/(4πε₀r²) for r₂ < r < r₃\n\n4) For part (c) - Potential of inner sphere:\n   * Potential is found by integrating -E from infinity to r₁\n   * V = -∫E⋅dr = -∫(Q/4πε₀r²)dr\n   * Integration limits: from ∞ to r₃, r₃ to r₂, and r₂ to r₁\n   * V = ∫∞r₃(Q/4πε₀r²)dr + ∫r₃r₂(Q/4πε₀r²)dr + ∫r₂r₁(Q/4πε₀r²)dr\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\n(a) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r > r_3 \\\\\n(b) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r_2 < r < r_3 \\\\\n(c) \\: V &= \\int_\\infty^{r_3}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_3}^{r_2}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_2}^{r_1}\\frac{Q}{4\\pi\\epsilon_0r^2}dr\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r > r_3 \\\\\n(b) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r_2 < r < r_3 \\\\\n(c) \\: V &= \\int_\\infty^{r_3}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_3}^{r_2}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_2}^{r_1}\\frac{Q}{4\\pi\\epsilon_0r^2}dr\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r > r_3 \\\\\n(b) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r_2 < r < r_3 \\\\\n(c) \\: V &= \\int_\\infty^{r_3}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_3}^{r_2}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_2}^{r_1}\\frac{Q}{4\\pi\\epsilon_0r^2}dr\n\\end{align*}", "expr2": "\\mathbf{E}(r) = \\frac{Q}{4 \\pi \\varepsilon_0 r^2} \\mathbf{e}_r \\quad (r > r_3)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r > r_3 \\\\\n(b) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r_2 < r < r_3 \\\\\n(c) \\: V &= \\int_\\infty^{r_3}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_3}^{r_2}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_2}^{r_1}\\frac{Q}{4\\pi\\epsilon_0r^2}dr\n\\end{align*}", "expr2": "\\mathbf{E}(r) = \\frac{Q}{4 \\pi \\varepsilon_0 r^2} \\mathbf{e}_r \\quad (r_2 > r > r_1)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r > r_3 \\\\\n(b) \\: E &= \\frac{Q}{4\\pi\\epsilon_0r^2} \\text{ for } r_2 < r < r_3 \\\\\n(c) \\: V &= \\int_\\infty^{r_3}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_3}^{r_2}\\frac{Q}{4\\pi\\epsilon_0r^2}dr + \\int_{r_2}^{r_1}\\frac{Q}{4\\pi\\epsilon_0r^2}dr\n\\end{align*}", "expr2": "\\varphi(r_1) = \\int_{r_1}^{r_2} \\frac{Q}{4\\pi\\varepsilon_0 r^2} dr + \\int_{r_3}^{\\infty} \\frac{Q}{4\\pi\\varepsilon_0 r^2} dr"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_10", "solution": "Let's solve this step by step using relativistic electromagnetism.\n\n1) First, let's consider what observer A sees:\n- Current i due to electron stream moving at velocity U\n- Zero charge density (equal numbers of electrons and ions)\n- Magnetic field B = μ₀i/(2πR) outside wire (from Ampère's law)\n- No electric field (E = 0) due to zero net charge\n\n2) For observer B moving at velocity v:\n(a) The electromagnetic field transforms according to relativistic field transformations:\n- E' = γ(E + v × B)\n- B' = γ(B - (v × E)/c²)\nwhere γ = 1/√(1-v²/c²)\n\nSince E = 0 and B = μ₀i/(2πR):\n- E' = γ(v × B) = γvB perpendicular to wire\n- B' = γB (since E = 0)\n\n3) (b) The charge density seen by B can be found using Gauss's law:\n∇·E' = ρ'/ε₀\nThe charge density is:\nρ' = ε₀∇·E' = -γρv/c²\n\n4) (c) For the velocities:\n- In A's frame: electrons move at U, ions stationary\n- In B's frame, velocities transform according to relativistic velocity addition:\nu' = (u-v)/(1-uv/c²)\n- For electrons: u'ₑ = (U-v)/(1-Uv/c²)\n- For ions: u'ᵢ = -v/(1-0) = -v\n\n5) (d) The appearance of charge density in B's frame is due to:\n- Length contraction of moving charges\n- Different relativistic transformations for positive and negative charges\n- The Lorentz contraction affects the spacing between charges\n\nThe charge density appears because the relativistic transformation of lengths and times affects the apparent density of moving charges differently for positive and negative charges.\n\nThe final answer for the charge density seen by observer B is:\n\n\\[ \\boxed{\\rho' = -\\frac{\\gamma i v}{c^2}} \\]\n\nwhere:\n- ρ' is the charge density seen by observer B\n- γ is the Lorentz factor\n- i is the current\n- v is B's velocity\n- c is the speed of light", "final_answers": ["\\rho' = -\\frac{\\gamma i v}{c^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\rho' = -\\frac{\\gamma i v}{c^2}", "expr2": "\\begin{aligned}\n\\mathbf{E}' & =\n\\begin{cases} \n-\\frac{\\mu_0 \\gamma iv r}{2 \\pi r_0^2} e_r, & (r < r_0) \\\\\n-\\frac{\\mu_0 \\gamma iv}{2 \\pi r} e_r, & (r > r_0)\n\\end{cases} \\\\\n\\mathbf{B}' & =\n\\begin{cases} \n\\frac{\\mu_0 i\\gamma  r}{2 \\pi r_0^2} e_\\varphi, & (r < r_0) \\\\\n\\frac{\\mu_0 i\\gamma }{2 \\pi r} e_\\varphi, & (r > r_0)\n\\end{cases}\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "-gamma*i*v/c**2", "expr2": "a**2*begin*c*e**2*gamma*h*i**2*mu*p*s**2/(2*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho' = -\\frac{\\gamma i v}{c^2}", "expr2": "\\rho' = -\\frac{v i \\gamma}{\\pi r_0^2 c^2}"}, "preprocessed_expressions": {"expr1": "-gamma*i*v/c**2", "expr2": "-gamma*i*v/(c**2*pi*r**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho' = -\\frac{\\gamma i v}{c^2}", "expr2": "\\begin{aligned}\nv'_e & = -\\frac{v + U}{1 + \\frac{vU}{c^2}} e_x, \\\\\nv'_i & = -v e_x\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "-gamma*i*v/c**2", "expr2": "-a*d*e**2*end*g*i*l*n*v"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho' = -\\frac{\\gamma i v}{c^2}", "expr2": "\\begin{aligned}\n\\rho'_e & = -\\frac{i \\gamma}{\\pi r_0^2 U} - \\frac{vi \\gamma}{\\pi r_0^2 c^2}, \\\\\n\\rho'_i & = \\frac{i \\gamma}{\\pi r_0^2 U}\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "-gamma*i*v/c**2", "expr2": "a*d*e*end*g*gamma*i**2*l*n/(U*pi*r**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_18", "solution": "Let me solve this step by step.\n\n1) First, let's recall that current density J is related to conductivity σ and electric field E:\n   J = σE = (KE)E = KE²\n\n2) Due to spherical symmetry, the electric field at any radius r (where a ≤ r ≤ b) points radially outward and depends only on r.\n\n3) The current I through any spherical surface of radius r must be the same (conservation of charge):\n   I = J × Area = J × 4πr²\n\n4) Therefore:\n   I = KE² × 4πr²\n\n5) The electric field E at radius r is related to the potential difference:\n   E = -dV/dr\n\n6) Due to spherical symmetry:\n   E = C/r², where C is a constant to be determined\n\n7) Substituting this into the current equation:\n   I = K(C/r²)² × 4πr² = 4πKC²\n\n8) To find C, we can use the potential difference V between spheres:\n   V = ∫E dr = ∫(C/r²)dr from r=a to r=b\n   V = C(-1/r)|[a to b] = C(1/a - 1/b)\n\n9) Therefore:\n   C = V/(1/a - 1/b) = Vab/(b-a)\n\n10) Finally, substituting this back:\n    I = 4πK(Vab/(b-a))²\n\nTherefore, the current between the spheres is:\n\n\\[ \\boxed{I = 4πK\\left(\\frac{Vab}{b-a}\\right)^2} \\]\n\nThis shows that the current depends quadratically on the applied voltage, unlike in ohmic conductors where the relationship is linear. This is because the conductivity itself is proportional to the electric field.", "final_answers": ["I = 4πK\\left(\\frac{Vab}{b-a}\\right)^2"], "equivalency_results": [{"input_expressions": {"expr1": "I = 4πK\\left(\\frac{Vab}{b-a}\\right)^2", "expr2": "I = \\frac{4 \\pi K V^2}{\\ln(b/a)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n4πK(\\frac{Vab}{b-a})^2\n~^"}], "accuracy": 0.0}
{"id": "electro/5_28", "solution": "Let's solve this step by step.\n\n(a) First, let's find B analytically:\n\n1) For a relativistic particle in circular motion:\n   * The radius R is related to momentum p by: R = p/(eB)\n   * Energy E is related to momentum by: E² = p²c² + m²c⁴\n   * For E ≫ mc², we can approximate: E ≈ pc\n\n2) Combining these:\n   * R = E/(eBc)\n   * Therefore, B = E/(eRc)\n\n3) For numerical calculation, we need:\n   * e = 4.8 × 10⁻¹⁰ esu\n   * c = 3 × 10¹⁰ cm/s\n   * 1 eV = 1.6 × 10⁻¹² erg\n   * E = 2.5 × 10⁹ eV = 4 × 10⁻³ erg\n   * R = 3000 cm\n\n4) Plugging in:\n   * B = (4 × 10⁻³)/(4.8 × 10⁻¹⁰ × 3000 × 3 × 10¹⁰)\n   * B = 9.26 Gauss\n\n(b) For radiation loss:\n\n1) The energy loss per revolution is given by:\n   * ΔE = (8π/3)(e²/c³)(E/mc²)⁴(e²B²/m²c²)R\n\n2) Using B = E/(eRc) from part (a):\n   * ΔE/E = (8π/3)(e²/c³)(E/mc²)⁴(E²/e²R²c²)/m²c²\n   * ΔE/E = (8π/3)(e²/mc²)³(E/R)²\n\n3) For numerical calculation:\n   * e²/mc² = 2.82 × 10⁻¹³ cm (classical electron radius)\n   * E = 2.5 × 10⁹ eV\n   * R = 3000 cm\n\n4) Plugging in:\n   * ΔE/E ≈ 1.2 × 10⁻⁵\n\nThe final answers are:\n\n\\[ \\boxed{B = 9.26 \\text{ Gauss}, \\frac{\\Delta E}{E} = 1.2 \\times 10^{-5}} \\]", "final_answers": ["B = 9.26 \\text{ Gauss}, \\frac{\\Delta E}{E} = 1.2 \\times 10^{-5}"], "equivalency_results": [{"input_expressions": {"expr1": "B = 9.26 \\text{ Gauss}, \\frac{\\Delta E}{E} = 1.2 \\times 10^{-5}", "expr2": "B \\approx \\frac{E}{eR} \\approx 0.28 \\times 10^4 \\, \\text{Gs}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = 9.26 \\text{ Gauss}, \\frac{\\Delta E}{E} = 1.2 \\times 10^{-5}", "expr2": "\\frac{\\Delta E}{E} \\approx 5 \\times 10^{-4}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_27", "solution": "Let me solve this step by step.\n\n1) First, let's recall key principles:\n   * When disconnected from battery, charge Q remains constant\n   * Initial capacitance C₁ = ε₀A/d₁\n   * Final capacitance C₂ = ε₀A/d₂\n   * Energy stored in capacitor = ½CV²\n   * Work done = change in energy\n\n2) Calculate initial capacitance:\n   * C₁ = (8.9×10⁻¹² × 0.2)/(0.01)\n   * C₁ = 1.78×10⁻¹⁰ F\n\n3) Calculate initial charge (which remains constant):\n   * Q = C₁V₁\n   * Q = (1.78×10⁻¹⁰)(1000)\n   * Q = 1.78×10⁻⁷ C\n\n4) Calculate final capacitance (when d doubles):\n   * d₂ = 2d₁\n   * C₂ = C₁/2\n   * C₂ = 8.9×10⁻¹¹ F\n\n5) Calculate final voltage:\n   * V₂ = Q/C₂\n   * V₂ = (1.78×10⁻⁷)/(8.9×10⁻¹¹)\n   * V₂ = 2000 V\n\n6) Calculate work done:\n   * W = ΔE = ½C₂V₂² - ½C₁V₁²\n   * W = ½(8.9×10⁻¹¹)(2000)² - ½(1.78×10⁻¹⁰)(1000)²\n   * W = 0.178 - 0.089\n   * W = 0.089 J\n\nThe final answer for both work and voltage is:\n\n\\[\\boxed{W = 0.089 \\text{ J}, V_2 = 2000 \\text{ V}}\\]", "final_answers": ["W = 0.089 \\text{ J}, V_2 = 2000 \\text{ V}"], "equivalency_results": [{"input_expressions": {"expr1": "W = 0.089 \\text{ J}, V_2 = 2000 \\text{ V}", "expr2": "8.9 \\times 10^{-5} \\text{ J}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = 0.089 \\text{ J}, V_2 = 2000 \\text{ V}", "expr2": "2000 \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_17", "solution": "Let's solve this step by step.\n\n(a) To show that $A_x = 0$:\n\n1) In vacuum with no sources and scalar potential = 0, the vector potential must satisfy:\n   - The Lorenz gauge condition: $\\nabla \\cdot \\mathbf{A} + \\frac{1}{c}\\frac{\\partial \\phi}{\\partial t} = 0$\n   - Since $\\phi = 0$, we have $\\nabla \\cdot \\mathbf{A} = 0$\n\n2) For a plane wave in x-direction, $\\mathbf{A}$ is a function of $(x-ct)$ only:\n   $\\nabla \\cdot \\mathbf{A} = \\frac{\\partial A_x}{\\partial x} + \\frac{\\partial A_y}{\\partial y} + \\frac{\\partial A_z}{\\partial z} = \\frac{\\partial A_x}{\\partial x} = 0$\n\n3) Since $A_x$ is only a function of $(x-ct)$, $\\frac{\\partial A_x}{\\partial x} = \\frac{dA_x}{d(x-ct)}$\n\n4) For this to be zero everywhere and $A_x$ to vanish at large distances, $A_x$ must be identically zero.\n\n(b) To show that $\\mathbf{p}_\\perp = -e \\mathbf{A}$:\n\n1) In relativistic mechanics, the canonical momentum is:\n   $\\mathbf{p} = \\mathbf{P} + e\\mathbf{A}$\n   where $\\mathbf{P}$ is the mechanical momentum.\n\n2) For a particle initially at rest, the initial canonical momentum is zero.\n\n3) Due to the conservation of canonical momentum (since the Hamiltonian has no explicit time dependence), the canonical momentum remains zero throughout the motion:\n   $\\mathbf{p} = \\mathbf{P} + e\\mathbf{A} = 0$\n\n4) Therefore: $\\mathbf{P} = -e\\mathbf{A}$\n\n5) Since $A_x = 0$ (from part a), this equation in the perpendicular components gives:\n   $\\mathbf{p}_\\perp = -e\\mathbf{A}$\n\nThe final answer for both parts can be written as:\n\n\\[\\boxed{(a) \\, A_x = 0 \\quad \\text{and} \\quad (b) \\, \\mathbf{p}_\\perp = -e\\mathbf{A}}\\]", "final_answers": ["(a) \\, A_x = 0 \\quad \\text{and} \\quad (b) \\, \\mathbf{p}_\\perp = -e\\mathbf{A}"], "equivalency_results": [{"input_expressions": {"expr1": "(a) \\, A_x = 0 \\quad \\text{and} \\quad (b) \\, \\mathbf{p}_\\perp = -e\\mathbf{A}", "expr2": "A_x = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(a) \\, A_x = 0 \\quad \\text{and} \\quad (b) \\, \\mathbf{p}_\\perp = -e\\mathbf{A}", "expr2": "\\mathbf{p}_\\perp = -e \\mathbf{A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_63", "solution": "Let me solve this step by step.\n\n1) This is a boundary value problem where we need to find the electric potential both inside and outside the sphere.\n\n2) Due to the symmetry of the problem, we can use spherical coordinates where the potential will be of the form:\n   - Inside sphere (r < R): $\\Phi_{in}(r,\\theta)$\n   - Outside sphere (r > R): $\\phi_{out}(r,\\theta)$\n\n3) The potential must satisfy Laplace's equation in both regions:\n   $\\nabla^2\\Phi = 0$\n\n4) General solution in spherical coordinates:\n   $\\Phi(r,\\theta) = \\sum_{l=0}^{\\infty} (A_lr^l + B_lr^{-(l+1)})P_l(\\cos\\theta)$\n\n5) Boundary conditions:\n   - At r → ∞: $\\Phi_{out} \\rightarrow -E_0z = -E_0r\\cos\\theta$\n   - At r = 0: $\\Phi_{in}$ must be finite\n   - At r = R: $\\Phi_{in} = \\Phi_{out}$\n   - At r = R: $\\varepsilon\\frac{\\partial\\Phi_{in}}{\\partial r} = \\frac{\\partial\\Phi_{out}}{\\partial r}$\n\n6) Due to the boundary condition at infinity, we only need l = 1 terms:\n   $\\Phi_{in} = Ar\\cos\\theta$\n   $\\Phi_{out} = (-E_0r + \\frac{B}{r^2})\\cos\\theta$\n\n7) Applying boundary conditions at r = R:\n   $AR\\cos\\theta = (-E_0R + \\frac{B}{R^2})\\cos\\theta$\n   $\\varepsilon A = -E_0 + \\frac{2B}{R^3}$\n\n8) Solving for A and B:\n   $A = \\frac{3E_0}{\\varepsilon + 2}$\n   $B = \\frac{(\\varepsilon - 1)E_0R^3}{\\varepsilon + 2}$\n\n9) The electric field is given by $\\vec{E} = -\\nabla\\Phi$\n\nTherefore, the final electric fields are:\n\nInside the sphere (r < R):\n\\[ \\boxed{\\vec{E}_{in} = \\frac{3E_0}{\\varepsilon + 2}\\hat{z}} \\]\n\nOutside the sphere (r > R):\n\\[ \\boxed{\\vec{E}_{out} = E_0\\hat{z} + \\frac{(\\varepsilon - 1)R^3}{(\\varepsilon + 2)r^3}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})} \\]", "final_answers": ["\\vec{E}_{in} = \\frac{3E_0}{\\varepsilon + 2}\\hat{z}", "\\vec{E}_{out} = E_0\\hat{z} + \\frac{(\\varepsilon - 1)R^3}{(\\varepsilon + 2)r^3}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})"], "equivalency_results": [{"input_expressions": {"expr1": "\\vec{E}_{in} = \\frac{3E_0}{\\varepsilon + 2}\\hat{z}", "expr2": "\\mathbf{E}_1 = \\frac{3\\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} \\mathbf{E}_0"}, "preprocessed_expressions": {"expr1": "3*E*hat*z/(varepsilon + 2)", "expr2": "E*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\vec{E}_{in} = \\frac{3E_0}{\\varepsilon + 2}\\hat{z}", "expr2": "\\mathbf{E}_2 = \\mathbf{E}_0 + \\frac{\\varepsilon - \\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} R^3 \\left[ \\frac{3(\\mathbf{E}_0 \\cdot \\mathbf{r}) \\mathbf{r}}{r^5} - \\frac{\\mathbf{E}_0}{r^3} \\right]"}, "preprocessed_expressions": {"expr1": "3*E*hat*z/(varepsilon + 2)", "expr2": "E*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\vec{E}_{out} = E_0\\hat{z} + \\frac{(\\varepsilon - 1)R^3}{(\\varepsilon + 2)r^3}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})", "expr2": "\\mathbf{E}_1 = \\frac{3\\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} \\mathbf{E}_0"}, "preprocessed_expressions": {"expr1": "(E*hat*r**3*z*(varepsilon + 2) + R**3*varepsilon*sin(hat*theta**2) + 2*R**3*varepsilon*cos(hat*r*theta) - R**3*sin(hat*theta**2) - 2*R**3*cos(hat*r*theta))/(r**3*(varepsilon + 2))", "expr2": "E*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\vec{E}_{out} = E_0\\hat{z} + \\frac{(\\varepsilon - 1)R^3}{(\\varepsilon + 2)r^3}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})", "expr2": "\\mathbf{E}_2 = \\mathbf{E}_0 + \\frac{\\varepsilon - \\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} R^3 \\left[ \\frac{3(\\mathbf{E}_0 \\cdot \\mathbf{r}) \\mathbf{r}}{r^5} - \\frac{\\mathbf{E}_0}{r^3} \\right]"}, "preprocessed_expressions": {"expr1": "(E*hat*r**3*z*(varepsilon + 2) + R**3*varepsilon*sin(hat*theta**2) + 2*R**3*varepsilon*cos(hat*r*theta) - R**3*sin(hat*theta**2) - 2*R**3*cos(hat*r*theta))/(r**3*(varepsilon + 2))", "expr2": "E*mathbf"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_64", "solution": "Let me solve this step by step.\n\n1) First, let's verify the surface charge density formula:\n   * Inside a dielectric sphere in a uniform field, the field is uniform and given by:\n   * $E_{in} = \\frac{3\\varepsilon_0}{\\varepsilon + 2\\varepsilon_0}E_0$\n   * The polarization is $\\vec{P} = (\\varepsilon - \\varepsilon_0)\\vec{E}_{in}$\n   * Surface charge density is $\\sigma = \\vec{P} \\cdot \\hat{n} = P\\cos\\theta$\n   * Substituting $P = (\\varepsilon - \\varepsilon_0)E_{in}$\n   * We get $\\sigma(\\theta) = \\frac{\\varepsilon - \\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} 3\\varepsilon_0 E_0 \\cos \\theta$\n\n2) Now, for the magnetic field question:\n   * When the sphere rotates about the direction of $E_0$:\n   * The surface charge distribution remains unchanged\n   * At any point, $\\cos\\theta$ remains constant during rotation\n   * Therefore, $\\sigma(\\theta)$ remains constant at each point\n   * No charge is actually moving in the lab frame\n\n3) Since:\n   * Magnetic fields are produced by moving charges\n   * The charge distribution is stationary in the lab frame\n   * The rotation doesn't change the charge distribution\n   * There is no actual charge motion\n\n4) Conclusion:\n   * No magnetic field will be produced\n   * The static charge distribution rotating about its symmetry axis\n   * Maintains the same spatial configuration\n   * Therefore, there's no charge current to generate a magnetic field\n\nThe final answer is:\n\n\\[\\boxed{\\text{No magnetic field is produced because the charge distribution remains static in the lab frame despite rotation}}\\]", "final_answers": ["\\text{No magnetic field is produced because the charge distribution remains static in the lab frame despite rotation}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{No magnetic field is produced because the charge distribution remains static in the lab frame despite rotation}", "expr2": "\\sigma(\\theta) = \\frac{\\varepsilon - \\varepsilon_0}{\\varepsilon + 2\\varepsilon_0} 3\\varepsilon_0 E_0 \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{No magnetic field is produced because the charge distribution remains static in the lab frame despite rotation}", "expr2": "\\text{No magnetic field is produced because the polarization and thus the dipole moment do not change.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_90", "solution": "Let's solve this step by step.\n\n1) First, let's understand what changes in the potential:\n   * Standard Coulomb potential: V(r) = q₁q₂/r\n   * Modified potential: V(r) = q₁q₂e^(-Kr)/r\n\n2) Poisson's equation in standard electrostatics is:\n   * ∇²V = -ρ/ε₀\n   * This comes from ∇·E = ρ/ε₀ and E = -∇V\n\n3) To find the new Poisson's equation:\n   * Start with the modified potential\n   * Take the Laplacian ∇² of the new potential\n   * For a central potential V(r), ∇²V = (1/r²)(d/dr)(r²dV/dr)\n\n4) Calculating ∇² of the modified potential:\n   * First derivative: dV/dr = q₁q₂(-Ke^(-Kr)/r - e^(-Kr)/r²)\n   * After full calculation: ∇²V = q₁q₂e^(-Kr)(K²/r - 2K/r² + 2/r³)\n   * Therefore, the modified Poisson's equation is:\n   * ∇²V = -ρ/ε₀ + K²V + 2K∇V·r̂/r\n\n5) Null experiment design:\n   * Principle: If K ≠ 0, there would be a deviation from perfect cancellation of fields inside a conductor\n   * Setup:\n     - Use a hollow spherical conductor\n     - Place a charge at the center\n     - In standard electrostatics, the field inside the conductor (except at the charge) should be exactly zero\n\n6) Theoretical basis:\n   * With K = 0, the induced charges on the conductor exactly cancel the field everywhere inside\n   * With K ≠ 0, the exponential term prevents perfect cancellation\n   * The deviation would be proportional to K for small K\n   * This would create a measurable field inside the conductor\n\nThe final modified Poisson's equation is:\n\n\\[ \\boxed{\\nabla^2V = -\\frac{\\rho}{\\varepsilon_0} + K^2V + \\frac{2K}{r}\\nabla V\\cdot\\hat{r}} \\]", "final_answers": ["\\nabla^2V = -\\frac{\\rho}{\\varepsilon_0} + K^2V + \\frac{2K}{r}\\nabla V\\cdot\\hat{r}"], "equivalency_results": [{"input_expressions": {"expr1": "\\nabla^2V = -\\frac{\\rho}{\\varepsilon_0} + K^2V + \\frac{2K}{r}\\nabla V\\cdot\\hat{r}", "expr2": "\\nabla^2 \\phi + K^2 \\phi = -4 \\pi \\rho"}, "preprocessed_expressions": {"expr1": "(K*V*varepsilon*(K + 2*hat*nabla) - rho)/varepsilon", "expr2": "-4*pi*rho"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_52", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when a dielectric is placed in a capacitor:\n   * The dielectric becomes polarized\n   * The electric field causes the molecules to align\n   * This creates bound charges on the surface of the dielectric\n\n2) For an isolated (disconnected) capacitor:\n   * The charge Q on the plates remains constant\n   * The voltage between plates decreases\n   * The electric field within the dielectric decreases\n   * The energy stored in the capacitor decreases\n\n3) Consider the energy of the system:\n   * When the dielectric moves further in, the capacitance increases\n   * For constant charge Q, the energy U = Q²/2C\n   * As C increases, the energy decreases\n\n4) According to the principle of minimum energy:\n   * Systems naturally move toward their lowest energy state\n   * The dielectric will move in a direction that decreases the system's energy\n   * Since energy decreases as the dielectric moves in, it will be pulled inward\n\n5) The force can also be understood in terms of the fringing fields:\n   * The non-uniform field at the edge of the capacitor\n   * Creates a net force pulling the dielectric toward the region of stronger field\n\nTherefore, the dielectric will experience a force pulling it in.\n\n\\[\\boxed{\\text{The answer is (c): pulling it in}}\\]", "final_answers": ["\\text{The answer is (c): pulling it in}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The answer is (c): pulling it in}", "expr2": "(c)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_5", "solution": "Let me solve this step by step.\n\n(a) First, let's write down the conservation equations:\n\n1) For initial state:\n- Photon: Energy = hf, momentum = hf/c\n- Electron: Energy = mc², momentum = 0 (stationary)\n\n2) For final state:\n- Scattered photon: Energy = hf', momentum = hf'/c\n- Recoiling electron: Energy = γmc², momentum = γmv\n\nConservation of Energy:\nhf + mc² = hf' + γmc²\n\nConservation of Momentum (x and y components):\nhf/c = (hf'/c)cosθ + γmv cosφ\n0 = (hf'/c)sinθ - γmv sinφ\n\n(b) For 180° backscattering:\n1) θ = 180°, so cosθ = -1\n2) Given that electron moves at approximately c, v ≈ c and γ >> 1\n\nFrom momentum conservation (x-direction only since θ = 180°):\nhf/c = -hf'/c + γmc\n\nFrom energy conservation:\nhf + mc² = hf' + γmc²\n\nSince v ≈ c, γmc² >> mc²\nAnd γmc = γmv (since v ≈ c)\n\nSubstituting the momentum equation into energy:\nhf + mc² = hf' + c(hf/c + hf'/c)\nhf + mc² = hf' + hf + hf'\n\nSolving for f':\nmc² = 2hf'\nf' = mc²/2h\n\nTherefore, the scattered photon's energy is:\n\n\\[ \\boxed{E' = hf' = \\frac{mc^2}{2}} \\]", "final_answers": ["E' = hf' = \\frac{mc^2}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "E' = hf' = \\frac{mc^2}{2}", "expr2": "\\frac{h\\nu}{c} = \\frac{h\\nu'}{c} \\, \\cos \\, \\theta + \\gamma m v \\, \\cos \\, \\varphi"}, "preprocessed_expressions": {"expr1": "c**2*m/2", "expr2": "gamma*m*v*cos(varphi) + h*nu*cos(theta)/c"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E' = hf' = \\frac{mc^2}{2}", "expr2": "\\frac{h\\nu'}{c} \\, \\sin \\, \\theta = \\gamma m v \\, \\sin \\, \\varphi"}, "preprocessed_expressions": {"expr1": "c**2*m/2", "expr2": "gamma*m*v*sin(varphi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E' = hf' = \\frac{mc^2}{2}", "expr2": "h\\nu + mc^2 = h\\nu' + \\gamma mc^2"}, "preprocessed_expressions": {"expr1": "c**2*m/2", "expr2": "c**2*gamma*m + h*nu"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E' = hf' = \\frac{mc^2}{2}", "expr2": "h\\nu' = \\frac{h\\nu}{\\frac{2h\\nu}{mc^2} + 1}"}, "preprocessed_expressions": {"expr1": "c**2*m/2", "expr2": "c**2*h*m*nu/(c**2*m + 2*h*nu)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_2", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have an EM wave incident normally on a moving medium\n   * The medium moves with velocity v in +z direction\n   * We need to find the frequency of the reflected wave\n\n2) This is a problem involving relativistic Doppler effect, as we need to:\n   * Consider how the wave appears in the medium's frame\n   * Consider how the reflected wave appears back in the observer's frame\n\n3) In the medium's frame:\n   * The incident frequency will appear different due to relativistic Doppler effect\n   * For a wave approaching a moving observer, the frequency transformation is:\n   * $\\omega' = \\gamma\\omega(1 + \\beta)$\n   where $\\beta = v/c$ and $\\gamma = 1/\\sqrt{1-\\beta^2}$\n\n4) In the medium's frame:\n   * The wave reflects with the same frequency $\\omega'$\n   * But now it's traveling in the opposite direction\n\n5) Going back to the observer's frame:\n   * We need to apply the Doppler effect again\n   * For a wave moving away from a moving source:\n   * $\\omega_{reflected} = \\gamma\\omega'(1 - \\beta)$\n\n6) Substituting the expression for $\\omega'$:\n   * $\\omega_{reflected} = \\gamma[\\gamma\\omega(1 + \\beta)](1 - \\beta)$\n   * $\\omega_{reflected} = \\gamma^2\\omega(1 + \\beta)(1 - \\beta)$\n   * $\\omega_{reflected} = \\gamma^2\\omega(1 - \\beta^2)$\n   * $\\omega_{reflected} = \\omega\\frac{1}{1-\\beta^2}(1 - \\beta^2)$\n   * $\\omega_{reflected} = \\omega$\n\nTherefore, the frequency of the reflected wave is equal to the frequency of the incident wave.\n\n\\[ \\boxed{\\omega_{reflected} = \\omega} \\]\n\nThis is a remarkable result showing that for normal incidence, the frequency of the reflected wave is the same as the incident wave, despite the motion of the reflecting surface. This is because the two Doppler shifts (one for incoming and one for outgoing wave) exactly cancel each other.", "final_answers": ["\\omega_{reflected} = \\omega"], "equivalency_results": [{"input_expressions": {"expr1": "\\omega_{reflected} = \\omega", "expr2": "\\omega_2 = \\left( \\frac{1 - \\beta}{1 + \\beta} \\right) \\omega"}, "preprocessed_expressions": {"expr1": "omega", "expr2": "omega*(1 - beta)/(beta + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_55", "solution": "Let's solve this step by step.\n\n(a) First, let's find the components of E and D:\n\n1) Due to the uniform charge distribution and neglecting edge effects, the electric field E must be horizontal (parallel to the plates). Its magnitude is:\n   E = Q_F/(ε₀A)\n\n2) The components of E are:\n   Ex = E (horizontal)\n   Ey = 0 (vertical)\n\n3) To find D, we need to use the permittivity tensor in the rotated coordinate system. The relationship between D and E in the principal axis system is:\n   D₁ = ε₁E₁\n   D₂ = ε₂E₂\n   D₃ = ε₃E₃\n\n4) We need to transform the horizontal E field into components along the principal axes:\n   E₁ = E cos(θ)\n   E₂ = E sin(θ)\n   E₃ = 0\n\n5) This gives us D components in the principal axis system:\n   D₁ = ε₁E cos(θ)\n   D₂ = ε₂E sin(θ)\n   D₃ = 0\n\n6) Transform back to horizontal and vertical components:\n   Dx = D₁cos(θ) + D₂cos(π/2-θ)\n      = ε₁E cos²(θ) + ε₂E sin²(θ)\n   Dy = D₁sin(θ) - D₂cos(θ)\n      = (ε₁-ε₂)E sin(θ)cos(θ)\n\n(b) For the capacitance:\n\n1) The capacitance is given by C = Q_F/V, where V is the potential difference.\n\n2) The potential difference is:\n   V = Ed = Q_F d/(ε₀A)\n\n3) Therefore:\n   C = Q_F/(Ed) = ε₀A/d × (ε₁cos²(θ) + ε₂sin²(θ))\n\nThe final answer for the capacitance is:\n\n\\[\\boxed{C = \\frac{\\varepsilon_0 A}{d}(\\varepsilon_1\\cos^2\\theta + \\varepsilon_2\\sin^2\\theta)}\\]", "final_answers": ["C = \\frac{\\varepsilon_0 A}{d}(\\varepsilon_1\\cos^2\\theta + \\varepsilon_2\\sin^2\\theta)"], "equivalency_results": [{"input_expressions": {"expr1": "C = \\frac{\\varepsilon_0 A}{d}(\\varepsilon_1\\cos^2\\theta + \\varepsilon_2\\sin^2\\theta)", "expr2": "E_n = \\frac{Q_F}{A(\\epsilon_1 \\cos^2 \\theta + \\epsilon_2 \\sin^2 \\theta)}, \\quad E_t = 0"}, "preprocessed_expressions": {"expr1": "A*varepsilon**2/d", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{\\varepsilon_0 A}{d}(\\varepsilon_1\\cos^2\\theta + \\varepsilon_2\\sin^2\\theta)", "expr2": "D_n = \\frac{Q_F}{A}, \\quad D_t = \\frac{Q_F (\\epsilon_1 - \\epsilon_2) \\sin \\theta \\cos \\theta}{A(\\epsilon_1 \\cos^2 \\theta + \\epsilon_2 \\sin^2 \\theta)}"}, "preprocessed_expressions": {"expr1": "A*varepsilon**2/d", "expr2": "Q(0)*sin(2*theta)/(2*A(epsilon))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{\\varepsilon_0 A}{d}(\\varepsilon_1\\cos^2\\theta + \\varepsilon_2\\sin^2\\theta)", "expr2": "C = \\frac{A(\\epsilon_1 \\cos^2 \\theta + \\epsilon_2 \\sin^2 \\theta)}{d}"}, "preprocessed_expressions": {"expr1": "A*varepsilon**2/d", "expr2": "A(epsilon)/d"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_26", "solution": "Let me solve this step by step.\n\n1) First, let's convert units:\n   * 100 gauss = 0.01 tesla (B)\n   * μr = 3000 (relative permeability of Fe)\n   * μ0 = 4π × 10^-7 H/m (permeability of free space)\n\n2) For the magnetic circuit:\n   * Mean path length in iron (l_Fe) ≈ 2(20 + 9) = 58 cm = 0.58 m\n   * Air gap length (l_g) = 2 cm = 0.02 m\n\n3) Using Ampere's law:\n   * NI = Hl_Fe + Hgl_g\n   where:\n   * H = magnetic field intensity in iron\n   * Hg = magnetic field intensity in gap\n\n4) In the air gap:\n   * B = μ0Hg\n   * Hg = B/μ0 = 0.01/(4π × 10^-7) = 7,958 A/m\n\n5) In the iron:\n   * B = μ0μrH\n   * H = B/(μ0μr) = 0.01/(4π × 10^-7 × 3000) = 2.65 A/m\n\n6) Now we can solve for NI:\n   * NI = 2.65 × 0.58 + 7,958 × 0.02\n   * NI = 1.54 + 159.16\n   * NI = 160.7\n\n7) Since I = 1 amp, N = 160.7\n\n8) Rounding to the nearest practical number:\n\n\\[\\boxed{N = 161 \\text{ turns}}\\]", "final_answers": ["N = 161 \\text{ turns}"], "equivalency_results": [{"input_expressions": {"expr1": "N = 161 \\text{ turns}", "expr2": "161 \\text{ turns}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_19", "solution": "Let's solve this step by step.\n\n(a) For the magnetic field inside the cylinder:\n\n1) The rotating charged cylinder creates a current density J = σv = σωr = σktr\n2) Using Ampère's law for a circular path of radius r inside the cylinder:\n   ∮B⋅dl = μ₀I_enclosed = μ₀(πr²J)\n3) B(2πr) = μ₀πr²(σktr/r)\n4) Therefore, B = ½μ₀σktr\n\nThe magnetic field varies linearly with r and t inside the cylinder.\n\n(b) For the electric field inside the cylinder:\n\n1) Due to the cylindrical symmetry and uniform surface charge density:\n2) Using Gauss's law, the electric field at radius r is:\n   E = σr/(ϵ₀a)\n3) This is valid for r < a\n\n(c) For the energy calculations:\n\n1) Magnetic field energy density is uₘ = B²/(2μ₀)\n2) Total magnetic energy inside cylinder:\n   Uₘ = ∫uₘdV = ∫(B²/2μ₀)(2πr)(l)dr from 0 to a\n   = ∫(μ₀σ²k²t²r²/8)(2πr)(l)dr\n   = (πlμ₀σ²k²t²a⁴)/16\n\n3) Electric field energy density is uₑ = ½ϵ₀E²\n4) Total electric energy inside cylinder:\n   Uₑ = ∫uₑdV = ∫(½ϵ₀)(σ²r²/ϵ₀²a²)(2πr)(l)dr from 0 to a\n   = (πlσ²a²)/(4ϵ₀)\n\nThe final answer for all parts:\n\n\\[\\boxed{\n\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}", "expr2": "\\mathbf{B}(\\rho) = \\mu_0 \\sigma \\omega a \\, e_z, \\quad (\\rho < a)"}, "preprocessed_expressions": {"expr1": "a**2*end*l*pi*sigma**2/(4*epsilon)", "expr2": "a*e*mu*omega*sigma"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}", "expr2": "\\mathbf{E}(\\rho) = -\\frac{\\mu_0 \\sigma a k \\rho}{2} \\, e_{\\varphi}, \\quad (\\rho < a)"}, "preprocessed_expressions": {"expr1": "a**2*end*l*pi*sigma**2/(4*epsilon)", "expr2": "-a*e*k*mu*rho*sigma/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}", "expr2": "U_E = \\frac{\\pi \\varepsilon_0 \\mu_0^2 \\sigma^2 k^2 a^6 l}{16}"}, "preprocessed_expressions": {"expr1": "a**2*end*l*pi*sigma**2/(4*epsilon)", "expr2": "a**6*k**2*l*mu**2*pi*sigma**2*varepsilon/16"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nB(r,t) &= \\frac{1}{2}\\mu_0\\sigma ktr \\\\\nE(r) &= \\frac{\\sigma r}{\\epsilon_0 a} \\\\\nU_m &= \\frac{\\pi l\\mu_0\\sigma^2k^2t^2a^4}{16} \\\\\nU_e &= \\frac{\\pi l\\sigma^2a^2}{4\\epsilon_0}\n\\end{align*}", "expr2": "U_B = \\frac{\\pi \\mu_0 \\sigma^2 a^4 k^2 l t^2}{2}"}, "preprocessed_expressions": {"expr1": "a**2*end*l*pi*sigma**2/(4*epsilon)", "expr2": "a**4*k**2*l*mu*pi*sigma**2*t**2/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_7", "solution": "Let me solve this step by step.\n\n(a) For the infinite network:\n\n1) Let's call the input resistance (equivalent resistance) Req\n2) Looking at the network after the first R₁ and R₂, we again see Req\n3) This gives us:\n   Req = R₁ + (R₂ || Req)\n   where || denotes parallel combination\n\n4) Using parallel resistance formula:\n   Req = R₁ + (R₂·Req)/(R₂ + Req)\n\n5) Multiply both sides by (R₂ + Req):\n   Req(R₂ + Req) = R₁(R₂ + Req) + R₂·Req\n\n6) Expand:\n   R₂·Req + Req² = R₁R₂ + R₁Req + R₂·Req\n\n7) Simplify:\n   Req² - R₁Req - R₁R₂ = 0\n\n8) Using quadratic formula:\n   Req = (R₁ ± √(R₁² + 4R₁R₂))/2\n\n9) Since resistance must be positive, we take the positive root:\n   Req = (R₁ + √(R₁² + 4R₁R₂))/2\n\n(b) For the parallel circuit:\n\n1) Let's write power dissipation:\n   P = I₁²R₁ + I₂²R₂\n\n2) With constraint I₀ = I₁ + I₂, we can write:\n   I₂ = I₀ - I₁\n\n3) Substitute:\n   P = I₁²R₁ + (I₀ - I₁)²R₂\n\n4) For minimum power, dP/dI₁ = 0:\n   2I₁R₁ - 2(I₀ - I₁)R₂ = 0\n\n5) Solve:\n   I₁R₁ = (I₀ - I₁)R₂\n   I₁(R₁ + R₂) = I₀R₂\n   I₁ = I₀R₂/(R₁ + R₂)\n\nThis is the same result we get from standard circuit analysis.\n\nFor part (a), the final answer is:\n\\[\\boxed{R_{eq} = \\frac{R_1 + \\sqrt{R_1^2 + 4R_1R_2}}{2}}\\]", "final_answers": ["R_{eq} = \\frac{R_1 + \\sqrt{R_1^2 + 4R_1R_2}}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "R_{eq} = \\frac{R_1 + \\sqrt{R_1^2 + 4R_1R_2}}{2}", "expr2": "R = \\frac{R_1}{2} + \\frac{\\sqrt{R_1^2 + 4 R_1 R_2}}{2}"}, "preprocessed_expressions": {"expr1": "R/2 + sqrt(5)*sqrt(R**2)/2", "expr2": "R/2 + sqrt(5)*sqrt(R**2)/2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_21", "solution": "Let's solve this step by step.\n\n(a) First, let's find the electric field:\n\n1) Due to the permanent polarization P = ar, there will be a volume charge density ρb = -∇⋅P\n   In cylindrical coordinates: ρb = -(1/r)∂(r²a)/∂r = -2a\n\n2) Using Gauss's law for a cylinder of radius r:\n   Inside (r < R): E(r) = -ar/ε₀\n   Outside (r > R): E(r) = -aR²/(ε₀r)\n\n(b) For the magnetic field:\n\n1) When the cylinder rotates, the polarization creates a current density J = ρb × ωr\n   J = -2a × ωr (azimuthal direction)\n\n2) Using Ampère's law:\n   Inside (r < R): B(r) = -μ₀aωr²/2\n   Outside (r > R): B(r) = -μ₀aωR²/2r\n\n(c) Let's calculate the energy:\n\n(i) Before spinning:\n1) Only electric field energy exists: U = ∫(ε₀E²/2)dV\n2) Integrating from 0 to R and per unit length:\n   U₁ = πa²R⁴/(4ε₀)\n\n(ii) While spinning:\n1) Total energy includes both electric and magnetic contributions:\n   U = ∫(ε₀E²/2 + B²/(2μ₀))dV\n\n2) Integrating both terms:\n   U₂ = πa²R⁴/(4ε₀) + πa²ω²R⁶/12\n\n3) The extra energy (U₂ - U₁) = πa²ω²R⁶/12 came from the mechanical work done to spin up the cylinder.\n\nThe final answer for the total energy difference per unit length is:\n\n\\[\\boxed{\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}}\\]\n\nThis represents the additional electromagnetic energy stored in the system due to rotation, which came from the mechanical work done to overcome electromagnetic forces during the spin-up process.", "final_answers": ["\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}", "expr2": "\\mathbf{E} = \n\\begin{cases} \n-\\frac{ar}{\\epsilon_0} \\mathbf{e}_r, & r < R, \\\\\n0, & r > R.\n\\end{cases}"}, "preprocessed_expressions": {"expr1": "R**6*a**2*omega**2*pi/12", "expr2": "a*e*(begin*c*epsilon*s**2 - mathbf*r)/epsilon"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}", "expr2": "\\mathbf{B} = \n\\begin{cases} \n\\mu_0 a \\omega r^2 \\mathbf{e}_z, & r < R, \\\\\n0, & r > R.\n\\end{cases}"}, "preprocessed_expressions": {"expr1": "R**6*a**2*omega**2*pi/12", "expr2": "a**2*begin*c*e**2*mathbf*mu*omega*r**2*s**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}", "expr2": "\\frac{\\pi a^2 R^4}{4 \\varepsilon_0}"}, "preprocessed_expressions": {"expr1": "R**6*a**2*omega**2*pi/12", "expr2": "R**4*a**2*pi/(4*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta U = \\frac{\\pi a^2 \\omega^2 R^6}{12}", "expr2": "\\frac{\\pi a^2 R^4}{4 \\varepsilon_0} \\left[ 1 + \\frac{2 \\omega^2 R^2}{3c^2} \\right]"}, "preprocessed_expressions": {"expr1": "R**6*a**2*omega**2*pi/12", "expr2": "R**4*a**2*pi*(2*R**2*omega**2 + 3*c**2)/(12*c**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_39", "solution": "Let me solve this step by step.\n\n1) When a charged conducting sphere is cut into half, the charge distributes equally on each half due to symmetry. So each half has charge Q/2.\n\n2) The force between the halves can be calculated using Coulomb's law, but we need to consider:\n   - The charge distribution is not point-like\n   - The halves are in contact, so distance is very small\n   - We need to integrate over the surface charge distribution\n\n3) For a conducting sphere:\n   - The charge resides on the surface\n   - The charge distribution is uniform\n   - Each half-sphere has surface charge density σ = Q/(4πR²)\n\n4) The force between differential elements of charge can be written as:\n   F = k(dq₁)(dq₂)/r²\n   where k is Coulomb's constant (1/4πε₀)\n\n5) After integration over both surfaces, the force comes out to be:\n   F = kQ²/16R²\n   where R is the radius of the sphere\n\n6) This is the force needed to hold the halves together, as the same charge on each half creates repulsion.\n\nThe final answer is:\n\n\\[ \\boxed{ F = \\frac{kQ^2}{16R^2} } \\]\n\nwhere k is Coulomb's constant, Q is the total initial charge, and R is the radius of the sphere.", "final_answers": ["F = \\frac{kQ^2}{16R^2}"], "equivalency_results": [{"input_expressions": {"expr1": "F = \\frac{kQ^2}{16R^2}", "expr2": "\\frac{Q^2}{32\\pi \\epsilon_0 R^2}"}, "preprocessed_expressions": {"expr1": "Q**2*k/(16*R**2)", "expr2": "Q**2/(32*R**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_30", "solution": "Let me solve this step by step.\n\n1) For a coaxial cable, we can use the following key formulas:\n   * Charge per unit length: λ = 2πε₀V/ln(b/a)\n   * Electric field at radius r: E(r) = λ/(2πε₀r)\n   where:\n   * a = radius of inner conductor = 0.25 cm = 0.0025 m\n   * b = radius of outer conductor = 0.75 cm = 0.0075 m\n   * V = potential difference = 8000 V\n   * ε₀ = 8.85 × 10⁻¹² C²/N·m²\n\n2) For part (a), let's calculate λ:\n   * λ = 2π(8.85 × 10⁻¹²)(8000)/ln(0.0075/0.0025)\n   * λ = (5.56 × 10⁻⁷)(8000)/ln(3)\n   * λ = 4.45 × 10⁻⁶/1.0986\n   * λ = 4.05 × 10⁻⁷ C/m\n\n3) For part (b), at r = 1 cm = 0.01 m:\n   * E(r) = λ/(2πε₀r)\n   * E(r) = (4.05 × 10⁻⁷)/(2π(8.85 × 10⁻¹²)(0.01))\n   * E(r) = (4.05 × 10⁻⁷)/(5.56 × 10⁻¹³)\n   * E(r) = 7.28 × 10⁵ V/m\n\nTherefore:\n\n\\[ \\boxed{\\text{(a) } \\lambda = 4.05 \\times 10^{-7} \\text{ C/m}, \\text{ (b) } E = 7.28 \\times 10^5 \\text{ V/m}} \\]", "final_answers": ["\\text{(a) } \\lambda = 4.05 \\times 10^{-7} \\text{ C/m}, \\text{ (b) } E = 7.28 \\times 10^5 \\text{ V/m}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\lambda = 4.05 \\times 10^{-7} \\text{ C/m}, \\text{ (b) } E = 7.28 \\times 10^5 \\text{ V/m}", "expr2": "\\lambda = 4.05 \\times 10^{-7} \\, \\text{C/m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\lambda = 4.05 \\times 10^{-7} \\text{ C/m}, \\text{ (b) } E = 7.28 \\times 10^5 \\text{ V/m}", "expr2": "E = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_17", "solution": "Let me solve this step by step.\n\n1) First, let's recall the key equations and principles in magnetostatics:\n   * Maxwell's equations in magnetostatics\n   * $\\nabla \\cdot \\mathbf{B} = 0$ (No magnetic monopoles)\n   * $\\nabla \\times \\mathbf{H} = \\mathbf{J}$ (Ampère's law)\n   * Relationship: $\\mathbf{B} = \\mu\\mathbf{H}$\n\n2) At boundaries between different media, we need to consider:\n   * Continuity conditions\n   * The relationship between $\\mathbf{B}$ and $\\mathbf{H}$ in different materials\n   * The physical meaning of these fields\n\n3) For the normal component:\n   * From $\\nabla \\cdot \\mathbf{B} = 0$\n   * This implies that the normal component of $\\mathbf{B}$ must be continuous\n   * Therefore, $B_{n1} = B_{n2}$ across the boundary\n\n4) For the parallel component:\n   * From $\\nabla \\times \\mathbf{H}$\n   * The parallel component of $\\mathbf{H}$ is continuous (in absence of surface currents)\n   * But $\\mathbf{B} = \\mu\\mathbf{H}$, so $\\mathbf{B}$ parallel is not continuous due to different permeabilities\n\n5) Regarding $\\mathbf{H}$ normal component:\n   * Since $\\mathbf{B} = \\mu\\mathbf{H}$\n   * And $B_{n1} = B_{n2}$\n   * Then $\\mu_1H_{n1} = \\mu_2H_{n2}$\n   * Therefore, $H_n$ is not continuous across the boundary\n\n6) Looking at the options:\n   * Option (a) states $\\mathbf{B}$ normal is continuous - This is correct\n   * Option (b) states $\\mathbf{H}$ normal is continuous - This is incorrect\n   * Option (c) states $\\mathbf{B}$ parallel is continuous - This is incorrect\n\nTherefore, the correct answer is option (a).\n\n\\[\\boxed{\\text{(a) The component of }\\mathbf{B}\\text{ normal to the surface has the same value}}\\]", "final_answers": ["\\text{(a) The component of }\\mathbf{B}\\text{ normal to the surface has the same value}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) The component of }\\mathbf{B}\\text{ normal to the surface has the same value}", "expr2": "(a)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_28", "solution": "Let me solve this step by step.\n\n1) First, let's convert units:\n   * 10,000 gauss = 1 tesla (T)\n   * Gap length (l) = 0.1 m\n   * Area (A) = 1m × 2m = 2 m²\n   * Resistivity (ρ) = 2 × 10^-8 Ω⋅m\n   * Density (d) = 8000 kg/m³\n   * Max current density (J) = 10^7 A/m²\n\n2) For an electromagnet with high permeability iron, using Ampere's law:\n   * H × l = NI (where N = number of turns, I = current)\n   * B = μ₀H (in air gap)\n   * Therefore: B × l = μ₀NI\n   * NI = (B × l)/μ₀\n   * NI = (1 × 0.1)/(4π × 10^-7) = 79,577.47 ampere-turns\n\n3) Mean length of one turn (L):\n   * Assuming rectangular path around gap\n   * L ≈ 2(1 + 2) + 0.2 = 6.2 m\n\n4) Cross-sectional area of copper (a):\n   * I = J × a\n   * a = I/J = I/(10^7)\n\n5) Total volume of copper (V):\n   * V = NLa = (NI)L/(10^7)\n   * V = 79,577.47 × 6.2/(10^7) = 0.0493 m³\n\n6) Mass of copper:\n   * Mass = density × volume\n   * Mass = 8000 × 0.0493 = 394.4 kg\n\n7) Power required:\n   * R = ρL/a = (2 × 10^-8 × 6.2)/(I/10^7)\n   * P = I²R = 2 × 10^-8 × 6.2 × 10^7 × I\n   * P = 124 × I kW\n\n8) Force between poles:\n   * F = (B²A)/(2μ₀)\n   * F = (1² × 2)/(2 × 4π × 10^-7)\n   * F = 796,178 N ≈ 796 kN\n\nThe force of attraction between the poles is:\n\n\\[\\boxed{796 \\text{ kN}}\\]", "final_answers": ["796 \\text{ kN}"], "equivalency_results": [{"input_expressions": {"expr1": "796 \\text{ kN}", "expr2": "P = 9.5 \\times 10^4 \\ \\text{W}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "796 \\text{ kN}", "expr2": "\\text{Weight} = 3.8 \\ \\text{kg}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "796 \\text{ kN}", "expr2": "F = 8 \\times 10^5 \\ \\text{N}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_10", "solution": "Let me solve this step by step.\n\n1) For a magnetic dipole (current loop), the magnetic field along the axis at a distance r from the center is given by:\n   $B = \\frac{\\mu_0}{2\\pi} \\frac{m}{r^3}$\n   where m is the magnetic moment.\n\n2) Near the pole, r = R (radius of Earth)\n   And B = 0.8 gauss = 0.8 × 10^-4 tesla (converting to SI units)\n\n3) Substituting these values into the equation:\n   $0.8 \\times 10^{-4} = \\frac{4\\pi \\times 10^{-7}}{2\\pi} \\frac{m}{(6 \\times 10^6)^3}$\n\n4) Simplify the right side:\n   $0.8 \\times 10^{-4} = \\frac{2 \\times 10^{-7}m}{216 \\times 10^{18}}$\n   $0.8 \\times 10^{-4} = \\frac{2 \\times 10^{-7}m}{2.16 \\times 10^{20}}$\n\n5) Solve for m:\n   $m = \\frac{0.8 \\times 10^{-4} \\times 2.16 \\times 10^{20}}{2 \\times 10^{-7}}$\n   $m = \\frac{1.728 \\times 10^{16}}{2 \\times 10^{-7}}$\n   $m = 8.64 \\times 10^{22} \\, \\text{A}\\cdot\\text{m}^2$\n\nTherefore, the magnetic moment of the equivalent current loop is 8.64 × 10²² A⋅m².\n\n\\[ \\boxed{m = 8.64 \\times 10^{22} \\, \\text{A}\\cdot\\text{m}^2} \\]", "final_answers": ["m = 8.64 \\times 10^{22} \\, \\text{A}\\cdot\\text{m}^2"], "equivalency_results": [{"input_expressions": {"expr1": "m = 8.64 \\times 10^{22} \\, \\text{A}\\cdot\\text{m}^2", "expr2": "m \\approx 8.64 \\times 10^{-26} \\, \\text{Am}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_37", "solution": "Let me solve this step by step.\n\n1) First, let's recall the key formulas:\n   * The potential difference between two spherical conductors: V = Q/(4πε₀) * (1/b - 1/a)\n   * The capacitance of a spherical capacitor: C = 4πε₀ab/(a-b)\n   * The energy stored in a capacitor: U = Q²/(2C)\n\n2) The work done will be equal to the change in electrostatic energy:\n   W = U₂ - U₁\n   where U₁ is the initial energy and U₂ is the final energy\n\n3) Let's find U₁:\n   * C₁ = 4πε₀ab/(a-b)\n   * U₁ = Q²/(2C₁) = Q²(a-b)/(8πε₀ab)\n\n4) Similarly for U₂:\n   * C₂ = 4πε₀ab/(a'-b)\n   * U₂ = Q²(a'-b)/(8πε₀ab)\n\n5) The work done is:\n   W = U₂ - U₁\n   = Q²(a'-b)/(8πε₀ab) - Q²(a-b)/(8πε₀ab)\n   = Q²/(8πε₀ab) * (a'-b - a+b)\n   = Q²/(8πε₀ab) * (a'-a)\n\n6) Simplify:\n   W = Q²(a'-a)/(8πε₀ab)\n\nTherefore, the work done by the electric force during the contraction is:\n\n\\[ \\boxed{W = \\frac{Q^2(a'-a)}{8\\pi\\epsilon_0ab}} \\]\n\nNote: The work is negative if a' < a (contraction), indicating that work is done against the electric force.", "final_answers": ["W = \\frac{Q^2(a'-a)}{8\\pi\\epsilon_0ab}"], "equivalency_results": [{"input_expressions": {"expr1": "W = \\frac{Q^2(a'-a)}{8\\pi\\epsilon_0ab}", "expr2": "\\frac{Q^2 (a - a')}{8 \\pi \\varepsilon_0 a a'}"}, "preprocessed_expressions": {"expr1": "Q**2*(-a + a')/(8*epsilonab*pi)", "expr2": "Q**2*(a - a')/(8*a*a'*pi*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_9", "solution": "Let me solve this step by step.\n\n1) This is an RC circuit (Resistor-Capacitor) where:\n   * C = 1 μF\n   * R = 1 kΩ\n   * Input is a square voltage pulse at point A\n\n2) For an RC circuit:\n   * The time constant τ = RC = (1 kΩ)(1 μF) = 1 ms\n   * The circuit acts as a high-pass filter\n   * The capacitor blocks DC but passes AC components\n\n3) When a square pulse is applied:\n   * The capacitor differentiates the input signal\n   * At rising edge: produces a positive spike\n   * At falling edge: produces a negative spike\n   * Each spike decays exponentially with time constant τ\n\n4) The output at point B will show:\n   * A positive spike when the square wave rises\n   * Exponential decay following e^(-t/τ)\n   * A negative spike when the square wave falls\n   * Another exponential decay back to zero\n\n5) The amplitude of the spikes depends on:\n   * The input voltage amplitude (V)\n   * The circuit time constant\n   * Peak voltage will be V·(R/(R+R_source))\n\nThe final answer showing the output signal shape is:\n\n\\[\\boxed{\\text{Bipolar exponentially decaying spikes: positive at rising edge, negative at falling edge}}\\]", "final_answers": ["\\text{Bipolar exponentially decaying spikes: positive at rising edge, negative at falling edge}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Bipolar exponentially decaying spikes: positive at rising edge, negative at falling edge}", "expr2": "V_B = 5e^{-t}u(t) - 5e^{-(t-1)}u(t - 1)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_3", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We need to use relativistic kinematics\n   * The proper acceleration (acceleration in instantaneous rest frame) is constant = g\n   * Initial conditions: x(0) = 0, v(0) = 0\n   * We need to find x when velocity is v\n\n2) In relativistic mechanics, proper acceleration (g) is related to acceleration in the fixed frame (a) by:\n   * g = γ³a\n   * where γ = 1/√(1-v²/c²) is the Lorentz factor\n\n3) Since g is constant:\n   * g = γ³(dv/dt)\n   * g = γ³(dv/dt) = (1-v²/c²)^(-3/2)(dv/dt)\n\n4) We can separate variables and integrate:\n   * g dt = (1-v²/c²)^(-3/2)dv\n   * Integrating from t=0 to t and v=0 to v:\n   * gt = c[γ(v) - 1]\n   * where γ(v) = 1/√(1-v²/c²)\n\n5) For position, we can use:\n   * dx/dt = v\n   * dx = v dt = (v/g)(1-v²/c²)^(3/2)dv\n\n6) Integrating from x=0 to x and v=0 to v:\n   * x = (c²/g)[γ(v) - 1]\n\n7) This is our final answer. The distance traveled when reaching velocity v is:\n   * x = (c²/g)[1/√(1-v²/c²) - 1]\n\n\\[ \\boxed{x = \\frac{c^2}{g}\\left(\\frac{1}{\\sqrt{1-v^2/c^2}} - 1\\right)} \\]\n\nThis is a fundamental result in relativistic kinematics with constant proper acceleration, often called hyperbolic motion.", "final_answers": ["x = \\frac{c^2}{g}\\left(\\frac{1}{\\sqrt{1-v^2/c^2}} - 1\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "x = \\frac{c^2}{g}\\left(\\frac{1}{\\sqrt{1-v^2/c^2}} - 1\\right)", "expr2": "x = \\frac{c^2}{g} \\left( \\frac{1}{\\sqrt{1 - \\frac{v^2}{c^2}}"}, "preprocessed_expressions": {"expr1": "-c**2/g + c**2/(g*sqrt(1 - v**2/c**2))", "expr2": "c**2/g"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_54", "solution": "Let's solve this step by step.\n\n(a) To find the potential between the plates:\n\n1) The plates are not parallel, but we can treat the separation as varying linearly with x.\n2) At any position x, the separation is: s(x) = d + (ax/b)\n3) In a capacitor, the electric field is perpendicular to the plates and its magnitude is E = V/s(x)\n4) The potential varies linearly between the plates at any fixed x\n5) Therefore, at any point (x,y) between the plates:\n   V(x,y) = V(y/s(x))\n\n\\[ \\boxed{V(x,y) = V\\frac{y}{d + (ax/b)}} \\]\n\n(b) For the capacitance calculation:\n\n1) The capacitance can be found using C = Q/V = εA/d for differential elements\n2) For a strip of width dx at position x:\n   dC = ε(w dx)/(d + ax/b)\n3) Total capacitance is the integral:\n   C = εw∫₀ᵇ dx/(d + ax/b)\n4) This is a standard integral form:\n   C = (εwb/a)ln(1 + a/d)\n\n\\[ \\boxed{C = \\frac{εwb}{a}\\ln(1 + \\frac{a}{d})} \\]", "final_answers": ["V(x,y) = V\\frac{y}{d + (ax/b)}", "C = \\frac{εwb}{a}\\ln(1 + \\frac{a}{d})"], "equivalency_results": [{"input_expressions": {"expr1": "V(x,y) = V\\frac{y}{d + (ax/b)}", "expr2": "\\varphi(x,y) = \\frac{V \\arctan \\left[ \\frac{y}{x + \\frac{bd}{a}} \\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '}'\n\\frac{V \\arctan [ \\frac{y}{x + \\frac{bd}{a}} ]\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "V(x,y) = V\\frac{y}{d + (ax/b)}", "expr2": "C = \\frac{\\varepsilon w}{\\arctan \\frac{a}{b}} \\ln\\left( \\frac{d + a}{d} \\right)"}, "preprocessed_expressions": {"expr1": "V*b*y/(a*x + b*d)", "expr2": "varepsilon*w*log((a + d)/d)/atan(a/b)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{εwb}{a}\\ln(1 + \\frac{a}{d})", "expr2": "\\varphi(x,y) = \\frac{V \\arctan \\left[ \\frac{y}{x + \\frac{bd}{a}} \\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{εwb}{a}\\ln(1 + \\frac{a}{d})\n~~~~~~^"}, {"input_expressions": {"expr1": "C = \\frac{εwb}{a}\\ln(1 + \\frac{a}{d})", "expr2": "C = \\frac{\\varepsilon w}{\\arctan \\frac{a}{b}} \\ln\\left( \\frac{d + a}{d} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\frac{εwb}{a}\\ln(1 + \\frac{a}{d})\n~~~~~~^"}], "accuracy": 0.5}
{"id": "electro/1_53", "solution": "Let's solve this step by step.\n\n(a) Finding the electric field:\n\n1) Due to cylindrical symmetry and neglecting end effects, we can use Gauss's law with a cylindrical Gaussian surface.\n\n2) The electric field will be radially outward and only depend on r.\n\n3) From Gauss's law: ∮ E⋅dA = Q_enclosed/ε\n   For a cylinder of radius r: 2πrLE = Q/ε\n\n4) Therefore: E(r) = Q/(2πεLr)\n\n(b) Finding the capacitance:\n\n1) The potential difference is found by integrating E from a to b:\n   V = ∫(Q/2πεLr)dr from a to b\n   V = (Q/2πεL)ln(b/a)\n\n2) Capacitance is C = Q/V\n   C = 2πεL/ln(b/a)\n\n(c) Finding the force:\n\n1) Let x be the length of dielectric still inside the capacitor.\n   The capacitance is now: C(x) = 2πεx/ln(b/a)\n\n2) The energy stored in the capacitor is:\n   U = ½CV² = πεV²x/ln(b/a)\n\n3) The force is the negative derivative of energy with respect to x:\n   F = -dU/dx = -πεV²/ln(b/a)\n\n4) The negative sign indicates the force is in the negative x direction, meaning:\n   - The force must be applied outward to hold the dielectric in place\n   - If released, the dielectric would be pulled back into the capacitor\n\nThe final answers are:\n\n\\[ \\boxed{E(r) = \\frac{Q}{2\\pi\\varepsilon Lr}} \\]\n\\[ \\boxed{C = \\frac{2\\pi\\varepsilon L}{\\ln(b/a)}} \\]\n\\[ \\boxed{F = -\\frac{\\pi\\varepsilon V^2}{\\ln(b/a)}} \\]\n\nThe force must be applied outward (in the direction of pulling the dielectric out) to maintain equilibrium.", "final_answers": ["E(r) = \\frac{Q}{2\\pi\\varepsilon Lr}", "C = \\frac{2\\pi\\varepsilon L}{\\ln(b/a)}", "F = -\\frac{\\pi\\varepsilon V^2}{\\ln(b/a)}"], "equivalency_results": [{"input_expressions": {"expr1": "E(r) = \\frac{Q}{2\\pi\\varepsilon Lr}", "expr2": "\\mathbf{E} = \\frac{-Q}{2\\pi \\varepsilon Lr} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "Q/(2*L*pi*r*varepsilon)", "expr2": "-Q*e*mathbf/(2*L*pi*r*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\frac{Q}{2\\pi\\varepsilon Lr}", "expr2": "C = \\frac{2\\pi \\varepsilon L}{\\ln \\left(\\frac{b}{a}\\right)}"}, "preprocessed_expressions": {"expr1": "Q/(2*L*pi*r*varepsilon)", "expr2": "2*L*pi*varepsilon/log(b/a)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\frac{Q}{2\\pi\\varepsilon Lr}", "expr2": "F = \\frac{\\pi \\varepsilon_0 V^2}{\\ln(\\frac{b}{a})} \\left( 1 - \\frac{\\varepsilon}{\\varepsilon_0} \\right)"}, "preprocessed_expressions": {"expr1": "Q/(2*L*pi*r*varepsilon)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{2\\pi\\varepsilon L}{\\ln(b/a)}", "expr2": "\\mathbf{E} = \\frac{-Q}{2\\pi \\varepsilon Lr} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "2*L*pi*varepsilon/log(b/a)", "expr2": "-Q*e*mathbf/(2*L*pi*r*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{2\\pi\\varepsilon L}{\\ln(b/a)}", "expr2": "C = \\frac{2\\pi \\varepsilon L}{\\ln \\left(\\frac{b}{a}\\right)}"}, "preprocessed_expressions": {"expr1": "2*L*pi*varepsilon/log(b/a)", "expr2": "2*L*pi*varepsilon/log(b/a)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\pi\\varepsilon V^2}{\\ln(b/a)}", "expr2": "\\mathbf{E} = \\frac{-Q}{2\\pi \\varepsilon Lr} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-V**2*pi*varepsilon/log(b/a)", "expr2": "-Q*e*mathbf/(2*L*pi*r*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\pi\\varepsilon V^2}{\\ln(b/a)}", "expr2": "C = \\frac{2\\pi \\varepsilon L}{\\ln \\left(\\frac{b}{a}\\right)}"}, "preprocessed_expressions": {"expr1": "-V**2*pi*varepsilon/log(b/a)", "expr2": "2*L*pi*varepsilon/log(b/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = -\\frac{\\pi\\varepsilon V^2}{\\ln(b/a)}", "expr2": "F = \\frac{\\pi \\varepsilon_0 V^2}{\\ln(\\frac{b}{a})} \\left( 1 - \\frac{\\varepsilon}{\\varepsilon_0} \\right)"}, "preprocessed_expressions": {"expr1": "-V**2*pi*varepsilon/log(b/a)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.3333333333333333}
{"id": "electro/5_4", "solution": "Let's solve this step by step.\n\n(a) First, let's find the angle at which the package must be aimed:\n\n1) We need to use the relativistic velocity addition formula for two dimensions. Let's define:\n- v₁ = c/2 (velocity of ship 1)\n- v₂ = -c/2 (velocity of ship 2)\n- v = 3c/4 (velocity of package in S frame)\n- θ is the angle we're looking for in ship 1's frame\n- θ' is the angle in S frame\n\n2) For the package to reach ship 2, in frame S:\n- The horizontal component must cover distance d\n- The vertical component must cover the distance ship 2 travels\n\n3) In frame S, if t is the time taken:\n- Horizontal: d = (3c/4)cos(θ')t\n- Vertical: (-c/2)t = (3c/4)sin(θ')t\n\n4) From these equations:\n- -2/3 = sin(θ')\n- θ' = -41.8°\n\n5) Using relativistic velocity transformation:\ntan(θ) = γ(v₁)[sin(θ')/cos(θ')] / [(1 + v₁v'cos(θ')/c²)]\nwhere γ(v₁) = 1/√(1 - v₁²/c²) = 2/√3\n\n6) Plugging in values:\nθ = -60°\n\n(b) For the speed in ship 1's frame:\n\n1) Using relativistic velocity addition formula:\nv'² = [(v - v₁)² + (v₁v/c)²sin²(θ')] / [1 - 2v₁v cos(θ')/c² + v₁²/c²]\n\n2) Plugging in values:\nv' = c/2\n\nThe final answers are:\n\n\\[ \\boxed{\\text{(a) } \\theta = -60° \\text{ and (b) } v' = c/2} \\]", "final_answers": ["\\text{(a) } \\theta = -60° \\text{ and (b) } v' = c/2"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\theta = -60° \\text{ and (b) } v' = c/2", "expr2": "\\alpha' = \\arctan \\left( \\frac{8}{\\sqrt{15}} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\theta = -60° \\text{ and (b) } v' = c/2", "expr2": "\\frac{\\sqrt{79}}{10} \\, c"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_65", "solution": "Let me solve this step by step.\n\n(a) For the surface charge density:\n\n1) In a uniform electric field E₀ pointing in the z-direction, the potential outside a conducting sphere of radius R can be written as:\n   - V = -E₀z + (E₀R³/2r²)cosθ for r ≥ R\n   - The first term is from the uniform field\n   - The second term is from the induced charge distribution\n\n2) The surface charge density σ can be found using:\n   σ = ε₀E_r|_{r=R}\n   where E_r is the radial component of the electric field at the surface\n\n3) The radial electric field is:\n   E_r = -∂V/∂r = -E₀cosθ(R³/r³) for r ≥ R\n\n4) At r = R:\n   σ = 3ε₀E₀cosθ\n\nTherefore, the surface charge density varies as cosθ, with maximum magnitude at θ = 0° and 180°.\n\n(b) For the induced dipole moment:\n\n1) The dipole moment can be calculated by integrating over the surface charge:\n   p = ∫σ(θ)r dA\n\n2) dA = 2πR²sinθ dθ\n\n3) r = R(cosθ ẑ + sinθ ρ̂)\n\n4) Integrating:\n   p = ∫₀ᵖ (3ε₀E₀cosθ)(R)(2πR²sinθ)(cosθ) dθ\n   Only the z-component survives due to azimuthal symmetry\n\n5) After integration:\n   p = 4πε₀R³E₀\n\nThe final answers are:\n\n\\[ \\boxed{\\text{(a) } \\sigma = 3\\varepsilon_0E_0\\cos\\theta} \\]\n\\[ \\boxed{\\text{(b) } p = 4\\pi\\varepsilon_0R^3E_0} \\]", "final_answers": ["\\text{(a) } \\sigma = 3\\varepsilon_0E_0\\cos\\theta", "\\text{(b) } p = 4\\pi\\varepsilon_0R^3E_0"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\sigma = 3\\varepsilon_0E_0\\cos\\theta", "expr2": "\\sigma = 3 \\varepsilon_0 E_0 \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } p = 4\\pi\\varepsilon_0R^3E_0", "expr2": "\\sigma = 3 \\varepsilon_0 E_0 \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } p = 4\\pi\\varepsilon_0R^3E_0", "expr2": "\\mathbf{P} = 4\\pi\\varepsilon_0 a^3 \\mathbf{E}_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_62", "solution": "Let me solve this step by step.\n\n1) This is a boundary value problem where we need to find the electric field both inside and outside the sphere.\n\n2) Due to the uniform external field, we can use spherical coordinates and assume azimuthal symmetry.\n\n3) The potential must satisfy Laplace's equation ∇²Φ = 0 in both regions.\n\n4) For the external field along z-direction:\n   - Original potential: Φ₀ = -Ez = -Er cos θ\n\n5) General solution form:\n   Inside sphere (r < a):\n   - Φᵢₙ = Ar cos θ\n   Outside sphere (r > a):\n   - Φₒᵤₜ = (-Er + Br⁻²) cos θ\n\n6) Boundary conditions at r = a:\n   - Φᵢₙ = Φₒᵤₜ (potential continuity)\n   - ε₁(∂Φᵢₙ/∂r) = ε₂(∂Φₒᵤₜ/∂r) (normal D field continuity)\n\n7) Applying first boundary condition:\n   Aa cos θ = (-Ea + Ba⁻²) cos θ\n\n8) Applying second boundary condition:\n   ε₁A = ε₂(-E + -2Ba⁻³)\n\n9) Solving these equations:\n   A = 3ε₂E/(ε₁ + 2ε₂)\n   B = a³(ε₁ - ε₂)E/(ε₁ + 2ε₂)\n\n10) Therefore:\n    Inside field (r < a):\n    Eᵢₙ = -∇Φᵢₙ = (3ε₂/(ε₁ + 2ε₂))E\n    \n    Outside field (r > a):\n    Eₒᵤₜ = E + [3(ε₁ - ε₂)/(ε₁ + 2ε₂)](a³/r⁴)(2cos θ r̂ + sin θ θ̂)\n\nThe final answer for the fields is:\n\n\\[\\boxed{\n\\begin{align*}\n\\mathbf{E}_{in} &= \\frac{3\\varepsilon_2}{\\varepsilon_1 + 2\\varepsilon_2}\\mathbf{E} \\\\\n\\mathbf{E}_{out} &= \\mathbf{E} + \\frac{3(\\varepsilon_1 - \\varepsilon_2)}{\\varepsilon_1 + 2\\varepsilon_2}\\frac{a^3}{r^4}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n\\mathbf{E}_{in} &= \\frac{3\\varepsilon_2}{\\varepsilon_1 + 2\\varepsilon_2}\\mathbf{E} \\\\\n\\mathbf{E}_{out} &= \\mathbf{E} + \\frac{3(\\varepsilon_1 - \\varepsilon_2)}{\\varepsilon_1 + 2\\varepsilon_2}\\frac{a^3}{r^4}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\mathbf{E}_{in} &= \\frac{3\\varepsilon_2}{\\varepsilon_1 + 2\\varepsilon_2}\\mathbf{E} \\\\\n\\mathbf{E}_{out} &= \\mathbf{E} + \\frac{3(\\varepsilon_1 - \\varepsilon_2)}{\\varepsilon_1 + 2\\varepsilon_2}\\frac{a^3}{r^4}(2\\cos\\theta\\hat{r} + \\sin\\theta\\hat{\\theta})\n\\end{align*}", "expr2": "\\mathbf{E}_1 = \\frac{3\\varepsilon_2}{\\varepsilon_1 + 2\\varepsilon_2} \\mathbf{E}, \\quad (r < a)"}, "preprocessed_expressions": {"expr1": "E*mathbf", "expr2": "E*mathbf"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_36", "solution": "Let's solve this step by step:\n\n1) First, let's understand what happens when charges are placed in cavities:\n- Each cavity will have induced charges on its walls\n- The inner surface of cavity B will have -qb\n- The inner surface of cavity C will have -qc\n- The outer surface of conductor A will have +(qb + qc)\n\n2) Forces on qb:\n- It experiences force from -qb on cavity wall (zero net force due to symmetry)\n- It experiences force from qc and its induced charges\n- It experiences force from qd\n- The forces from qc and qd are partially screened by the conductor\n\n3) Forces on qc:\n- Similar to qb, zero net force from its own induced charge\n- Forces from qb and qd (partially screened)\n\n4) Forces on qd:\n- Experiences force from the net charge distribution of conductor A\n- When r is very large, sees approximately point charge +(qb + qc) at center of A\n- Force approximately = k(qd(qb + qc))/r²\n\n5) Forces on conductor A:\n- Net external force from qd\n- Internal forces cancel due to symmetry\n\n6) When r is not large:\n- Charge distributions on cavity walls are not uniform\n- Outer surface charge distribution is not uniform\n- Approximation of treating A as a point charge breaks down\n\nThe answers depending on r being large:\n- The force on qd\n- The assumption of uniform charge distributions\n\n\\[\\boxed{\\text{Forces: } F_{qd} = \\frac{kq_d(q_b + q_c)}{r^2} \\text{ (when r is large)} \\\\ \\text{Internal charges experience screened forces} \\\\ \\text{Conductor A experiences net force from }q_d}\\]", "final_answers": ["\\text{Forces: } F_{qd} = \\frac{kq_d(q_b + q_c)}{r^2} \\text{ (when r is large)} \\\\ \\text{Internal charges experience screened forces} \\\\ \\text{Conductor A experiences net force from }q_d"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Forces: } F_{qd} = \\frac{kq_d(q_b + q_c)}{r^2} \\text{ (when r is large)} \\\\ \\text{Internal charges experience screened forces} \\\\ \\text{Conductor A experiences net force from }q_d", "expr2": "F = \\frac{q_d(q_b + q_c)}{4\\pi \\varepsilon_0 r^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_11", "solution": "Let's solve this step by step.\n\n1) First, recall that the Poynting vector S⃗ = (1/μ₀)E⃗ × B⃗ represents the energy flux density of the electromagnetic field.\n\n2) In a capacitor:\n- The electric field E⃗ is uniform between plates, pointing in the z-direction\n- The magnetic field B⃗ forms concentric circles around the current in the wire\n- By Ampère's law, B = μ₀i/(2πρ) where ρ is the radial distance from the wire\n\n3) At any point between the plates:\n- E⃗ = Ez k̂\n- B⃗ = Bφ φ̂ = (μ₀i/(2πρ))φ̂\n- The Poynting vector points radially inward: S⃗ = (Ez·i)/(2πρ)ρ̂\n\n4) The total power input is the integral of S⃗·n̂ over a cylindrical surface of radius r:\nP = ∮S⃗·n̂ dA = (Ez·i)/(2π)∮(1/ρ)ρdφdz = Ez·i·d\n\n5) Since Ez = V/d where V is the potential difference:\nP = iV\n\n6) For a parallel plate capacitor:\n- V = Q/C where C = ε₀πr²/d\n- The stored energy is U = ½CV² = ½Q²/C\n- The rate of change of stored energy is:\ndU/dt = (Q/C)dQ/dt = iV\n\n7) Therefore:\n- The power input calculated from Poynting vector (iV)\n- Equals the rate of change of stored energy (dU/dt)\n- Both equal iV\n\nThe final answer is:\n\n\\[\\boxed{P = iV = \\frac{d}{dt}(\\frac{1}{2}CV^2)}\\]\n\nThis shows that the rate at which electromagnetic energy flows into the capacitor (calculated using the Poynting vector) exactly equals both the power delivered by the source (iV) and the rate of increase of stored electrostatic energy.", "final_answers": ["P = iV = \\frac{d}{dt}(\\frac{1}{2}CV^2)"], "equivalency_results": [{"input_expressions": {"expr1": "P = iV = \\frac{d}{dt}(\\frac{1}{2}CV^2)", "expr2": "P = \\frac{dW_e}{dt} = \\frac{iQ}{\\pi r^2 \\varepsilon_0} d"}, "preprocessed_expressions": {"expr1": "0", "expr2": "Q*d*i/(pi*r**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = iV = \\frac{d}{dt}(\\frac{1}{2}CV^2)", "expr2": "P = iV"}, "preprocessed_expressions": {"expr1": "0", "expr2": "V*i"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_8", "solution": "Let's solve this step by step.\n\n1) First, let's recall what a low-pass RC filter does:\n   * It attenuates high frequencies\n   * Has a -20 dB/decade roll-off after the cutoff frequency\n   * Phase shift approaches -90° at high frequencies\n\n2) Let's analyze each option:\n\n   a) An infinite series of RC filters:\n      * Would increase the roll-off rate (-40 dB/decade, -60 dB/decade, etc.)\n      * Cannot compensate the original filter's response\n\n   b) LC filters:\n      * Can provide both positive and negative phase shifts\n      * Can boost or attenuate frequencies\n      * Can be designed to compensate the RC filter's response\n      * Used in practice for compensation\n\n   c) A single high-pass RC filter:\n      * Has opposite characteristics to low-pass filter\n      * +20 dB/decade roll-off after cutoff frequency\n      * Phase shift approaches +90° at high frequencies\n      * When combined with low-pass filter of same cutoff frequency:\n         - Magnitude response becomes flat\n         - Phase shifts cancel out\n         - Results in all-pass filter\n\n3) Analyzing the perfect compensation:\n   * Option (a) is incorrect as infinite series would worsen the attenuation\n   * Option (b) is possible but not the only solution\n   * Option (c) provides exact compensation when cutoff frequencies match\n\n4) Therefore, a single high-pass RC filter can exactly compensate a low-pass RC filter, making option (c) correct.\n\n\\[\\boxed{c}\\]\n\nThe answer is (c) because a single high-pass RC filter with matching cutoff frequency can perfectly compensate the frequency response of a low-pass RC filter, resulting in an all-pass network with unity gain and zero phase shift.", "final_answers": ["c"], "equivalency_results": [{"input_expressions": {"expr1": "c", "expr2": "(c)"}, "preprocessed_expressions": {"expr1": "c", "expr2": "c"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_16", "solution": "Let me solve this step by step.\n\n1) The average random speed of electrons in a conductor is related to their thermal motion and can be calculated using the Maxwell-Boltzmann distribution.\n\n2) The formula for average speed is:\n   v = √(3kT/m)\n   where:\n   - k is Boltzmann's constant (1.38 × 10⁻²³ J/K)\n   - T is temperature (typically room temperature, 300 K)\n   - m is mass of electron (9.1 × 10⁻³¹ kg)\n\n3) Let's calculate:\n   v = √(3 × 1.38 × 10⁻²³ × 300 / 9.1 × 10⁻³¹)\n   v ≈ 10⁷ cm/s\n\n4) Looking at the given options:\n   - 10² cm/s (too slow)\n   - 10⁴ cm/s (too slow)\n   - 10⁶ cm/s (close but still too slow)\n   - 10⁸ cm/s (closest to our calculated value)\n\n5) The average random speed of electrons in a conductor is approximately 10⁷ cm/s, which is closest to 10⁸ cm/s among the given options.\n\n\\[\\boxed{10^8 \\text{ cm/sec}}\\]", "final_answers": ["10^8 \\text{ cm/sec}"], "equivalency_results": [{"input_expressions": {"expr1": "10^8 \\text{ cm/sec}", "expr2": "10^{6} \\text{ cm/sec}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_31", "solution": "Let's solve this step by step.\n\n(a) For the electric field:\n\n1) Due to cylindrical symmetry, we can use Gauss's law\n2) The electric field will be radially outward and only depend on r\n3) For a cylinder of radius r and length L:\n   $\\oint \\vec{E} \\cdot d\\vec{A} = \\frac{Q_{enc}}{\\epsilon_0}$\n4) $E(r)(2\\pi rL) = \\frac{Q}{\\epsilon_0}$\n5) From the potential difference between r₁ and r₂:\n   $V_0 = -\\int_{r_1}^{r_2} E(r)dr$\n6) Solving for E(r):\n   $E(r) = \\frac{V_0}{r\\ln(r_2/r_1)}$\n\n(b) For the potential at r:\n\n1) $V(r) = -\\int_{r_2}^r E(r)dr$\n2) $V(r) = -\\int_{r_2}^r \\frac{V_0}{r\\ln(r_2/r_1)}dr$\n3) $V(r) = \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}$\n\n(c) For the charge change:\n\n1) When Q moves from r to r₁, it gains potential energy\n2) The work done is: $W = -Q[V(r_1) - V(r)]$\n3) This work comes from the change in electrostatic energy\n4) If ΔQ is the change in charge on inner conductor:\n   $\\frac{1}{2}(\\Delta Q)V_0 = -Q[V_0 - \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}]$\n5) Solving for ΔQ:\n   $\\Delta Q = 2Q$\n\nThe final answers are:\n\n\\[ \\boxed{E(r) = \\frac{V_0}{r\\ln(r_2/r_1)}} \\]\n\\[ \\boxed{V(r) = \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}} \\]\n\\[ \\boxed{\\Delta Q = 2Q} \\]", "final_answers": ["E(r) = \\frac{V_0}{r\\ln(r_2/r_1)}", "V(r) = \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}", "\\Delta Q = 2Q"], "equivalency_results": [{"input_expressions": {"expr1": "E(r) = \\frac{V_0}{r\\ln(r_2/r_1)}", "expr2": "E(r) = \\frac{V_0}{\\ln(r_2/r_1)} \\frac{1}{r}"}, "preprocessed_expressions": {"expr1": "zoo*V", "expr2": "zoo*V/r"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "V(r) = \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}", "expr2": "E(r) = \\frac{V_0}{\\ln(r_2/r_1)} \\frac{1}{r}"}, "preprocessed_expressions": {"expr1": "nan", "expr2": "zoo*V/r"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V(r) = \\frac{V_0\\ln(r_2/r)}{\\ln(r_2/r_1)}", "expr2": "V(r) = \\frac{V_0 \\ln(r_2/r)}{\\ln(r_2/r_1)}"}, "preprocessed_expressions": {"expr1": "nan", "expr2": "nan"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\Delta Q = 2Q", "expr2": "E(r) = \\frac{V_0}{\\ln(r_2/r_1)} \\frac{1}{r}"}, "preprocessed_expressions": {"expr1": "2*Q", "expr2": "zoo*V/r"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta Q = 2Q", "expr2": "V(r) = \\frac{V_0 \\ln(r_2/r)}{\\ln(r_2/r_1)}"}, "preprocessed_expressions": {"expr1": "2*Q", "expr2": "nan"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta Q = 2Q", "expr2": "\\Delta Q = \\frac{Q \\ln(r/r_1)}{\\ln(r_2/r_1)}"}, "preprocessed_expressions": {"expr1": "2*Q", "expr2": "nan"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_29", "solution": "Let me solve this step by step.\n\n1) First, let's recall Ampère's law for a magnetic circuit:\n   * $\\oint H \\cdot dl = NI$\n   * Where H is the magnetic field intensity and NI is the magnetomotive force (MMF)\n\n2) For a magnetic circuit, we can split this into two parts:\n   * $H_{iron}L_{iron} + H_{gap}s = NI$\n   * Where $L_{iron} = 2πR - s ≈ 2πR$ (since $s \\ll R$)\n\n3) We know that:\n   * In iron: $B_{iron} = μ_0μ_rH_{iron}$\n   * In gap: $B_{gap} = μ_0H_{gap}$\n   * Due to flux conservation: $B_{iron} = B_{gap} = B$ (since $s \\ll d$)\n\n4) Therefore:\n   * $B/μ_0μ_r \\cdot 2πR + B/μ_0 \\cdot s = NI$\n\n5) Solve for B:\n   * $B(2πR/μ_0μ_r + s/μ_0) = NI$\n   * $B = \\frac{μ_0NI}{2πR/μ_r + s}$\n\n6) Since $s \\ll R$ and typically $μ_r \\gg 1$ for soft iron:\n   * The denominator is dominated by the gap term $s$\n   * Therefore:\n   * $B ≈ \\frac{μ_0NI}{s}$\n\nThe final answer is:\n\n\\[ \\boxed{B = \\frac{μ_0NI}{s}} \\]\n\nThis is a classic result for magnetic circuits with an air gap, showing that the magnetic field in the gap is primarily determined by the number of turns, current, and gap spacing, rather than the properties of the iron core (assuming high permeability).", "final_answers": ["B = \\frac{μ_0NI}{s}"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\frac{μ_0NI}{s}", "expr2": "B = \\frac{\\mu_r \\mu_0 NI}{2\\pi R + (\\mu_r - 1)s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{μNI}{s}\n~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/2_20", "solution": "Let's solve this step by step.\n\n(a) First, let's find the charge density:\n\n1) For a polarized dielectric, the bound charge density is given by:\n   ρb = -∇⋅P\n\n2) In cylindrical coordinates, for P = (1/2)P₀r êᵣ:\n   ∇⋅P = (1/r)∂(rPᵣ)/∂r = (1/r)∂(r²P₀/2)/∂r\n\n3) ∂(r²P₀/2)/∂r = P₀r\n\n4) Therefore:\n   ρb = -∇⋅P = -(1/r)(P₀r) = -P₀\n\n5) The charge density is constant and negative throughout the cylinder.\n\n(b) For the magnetic field:\n\n1) When the cylinder rotates, the polarization charge creates a current density:\n   J = ρb(ω × r) = -P₀(ω × r)\n\n2) This creates circular current loops that contribute to the magnetic field.\n\n3) For a point on the axis, by symmetry, the magnetic field must be along the axis.\n\n4) Using the Biot-Savart law and integrating over the cylinder:\n   dB = (μ₀/4π) J × r'/r'³ dV\n\n5) After integration, considering an infinite cylinder:\n   B = (μ₀P₀ωa²/4) êz\n\nThe final answer for both parts is:\n\n\\[ \\boxed{\\text{(a) } \\rho_b = -P_0 \\\\ \\text{(b) } B = \\frac{\\mu_0P_0\\omega a^2}{4} \\hat{z}} \\]\n\nNote: For part (b), this result is valid for points not too near the ends of the cylinder, where end effects can be neglected.", "final_answers": ["\\text{(a) } \\rho_b = -P_0 \\\\ \\text{(b) } B = \\frac{\\mu_0P_0\\omega a^2}{4} \\hat{z}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\rho_b = -P_0 \\\\ \\text{(b) } B = \\frac{\\mu_0P_0\\omega a^2}{4} \\hat{z}", "expr2": "\\rho = -P_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\rho_b = -P_0 \\\\ \\text{(b) } B = \\frac{\\mu_0P_0\\omega a^2}{4} \\hat{z}", "expr2": "\\mathbf{B} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_6", "solution": "Let me solve this step by step.\n\n(a) For the capacitance of parallel plate capacitor:\n\n1) The formula for capacitance of a parallel plate capacitor is:\n   C = ε₀A/d\n   where:\n   - ε₀ is the permittivity of free space\n   - A is the area of the plates\n   - d is the separation distance\n\n2) Given that the plates are square with length L:\n   Area A = L²\n\n3) Therefore, the capacitance is:\n   C = ε₀L²/d\n\n\\[ \\boxed{C = \\frac{\\varepsilon_0L^2}{d}} \\]\n\n(b) For energy dissipation:\n\n1) Initially, the energy stored in the capacitor is:\n   E = ½CV²\n\n2) When the switch closes, the voltage across the capacitor follows:\n   V(t) = V₀e^(-t/RC)\n\n3) The current through the resistor is:\n   I(t) = (V₀/R)e^(-t/RC)\n\n4) Power dissipated in the resistor:\n   P(t) = I²R = (V₀²/R)e^(-2t/RC)\n\n5) Total energy dissipated is the integral of power:\n   E_dissipated = ∫₀^∞ P(t)dt = ½CV₀²\n\n6) This equals the initial stored energy, proving all energy is dissipated in R.\n\n\\[ \\boxed{E_{dissipated} = \\frac{1}{2}CV_0^2 = E_{initial}} \\]", "final_answers": ["C = \\frac{\\varepsilon_0L^2}{d}", "E_{dissipated} = \\frac{1}{2}CV_0^2 = E_{initial}"], "equivalency_results": [{"input_expressions": {"expr1": "C = \\frac{\\varepsilon_0L^2}{d}", "expr2": "C = \\frac{\\varepsilon_0 L^2}{d}"}, "preprocessed_expressions": {"expr1": "varepsilonL**2/d", "expr2": "L**2*varepsilon/d"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "E_{dissipated} = \\frac{1}{2}CV_0^2 = E_{initial}", "expr2": "C = \\frac{\\varepsilon_0 L^2}{d}"}, "preprocessed_expressions": {"expr1": "E", "expr2": "L**2*varepsilon/d"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{dissipated} = \\frac{1}{2}CV_0^2 = E_{initial}", "expr2": "W_R = W_C"}, "preprocessed_expressions": {"expr1": "E", "expr2": "W"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "electro/1_38", "solution": "Let's solve this step by step.\n\n(a) For a sphere's capacitance:\n1. The potential at radius r ≥ b is V = Q/(4πε₀r)\n2. At r = b, V = Q/(4πε₀b)\n3. Capacitance C = Q/V = 4πε₀b\n\n(b) For energy density:\n1. Electric field at distance r: E = Q/(4πε₀r²)\n2. Energy density u = ½ε₀E²\n3. Substituting: u = Q²/(32π²ε₀r⁴)\n\n(c) Total field energy:\n1. Integrate energy density over all space outside sphere\n2. W = ∫ u dV = ∫ (Q²/32π²ε₀r⁴)(4πr²dr)\n3. W = Q²/(8πε₀b)\n\n(d) Work to charge sphere:\n1. For each incremental charge dq brought from infinity\n2. Work = V dq = (q/4πε₀b)dq\n3. Total work = ∫₀Q (q/4πε₀b)dq = Q²/(8πε₀b)\n4. This equals the field energy, as expected\n\n(e) For concentric spheres:\n1. Electric field at r = a: E = V/(a ln(b/a))\n2. Take derivative dE/da = 0 and solve\n3. Result: a = b/e, where e is Euler's number\n\nFinal answers:\n\n(a) \\[\\boxed{C = 4\\pi\\epsilon_0b}\\]\n(b) \\[\\boxed{u = \\frac{Q^2}{32\\pi^2\\epsilon_0r^4}}\\]\n(c) \\[\\boxed{W = \\frac{Q^2}{8\\pi\\epsilon_0b}}\\]\n(d) \\[\\boxed{W = \\frac{Q^2}{8\\pi\\epsilon_0b}}\\]\n(e) \\[\\boxed{a = \\frac{b}{e}}\\]", "final_answers": ["C = 4\\pi\\epsilon_0b", "u = \\frac{Q^2}{32\\pi^2\\epsilon_0r^4}", "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "a = \\frac{b}{e}"], "equivalency_results": [{"input_expressions": {"expr1": "C = 4\\pi\\epsilon_0b", "expr2": "C = 4 \\pi \\varepsilon_0 b"}, "preprocessed_expressions": {"expr1": "4*epsilonb*pi", "expr2": "4*b*pi*varepsilon"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "u = \\frac{Q^2}{32\\pi^2\\epsilon_0r^4}", "expr2": "C = 4 \\pi \\varepsilon_0 b"}, "preprocessed_expressions": {"expr1": "Q**2/(32*epsilonr**4*pi**2)", "expr2": "4*b*pi*varepsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "u = \\frac{Q^2}{32\\pi^2\\epsilon_0r^4}", "expr2": "w_e(r) = \\frac{Q^2}{32 \\pi^2 \\varepsilon_0 r^4}"}, "preprocessed_expressions": {"expr1": "Q**2/(32*epsilonr**4*pi**2)", "expr2": "Q**2/(32*pi**2*r**4*varepsilon)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "C = 4 \\pi \\varepsilon_0 b"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "4*b*pi*varepsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "w_e(r) = \\frac{Q^2}{32 \\pi^2 \\varepsilon_0 r^4}"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "Q**2/(32*pi**2*r**4*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "W_e = \\frac{Q^2}{8 \\pi \\varepsilon_0 b}"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "Q**2/(8*b*pi*varepsilon)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "C = 4 \\pi \\varepsilon_0 b"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "4*b*pi*varepsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "w_e(r) = \\frac{Q^2}{32 \\pi^2 \\varepsilon_0 r^4}"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "Q**2/(32*pi**2*r**4*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W = \\frac{Q^2}{8\\pi\\epsilon_0b}", "expr2": "W_e = \\frac{Q^2}{8 \\pi \\varepsilon_0 b}"}, "preprocessed_expressions": {"expr1": "Q**2/(8*epsilonb*pi)", "expr2": "Q**2/(8*b*pi*varepsilon)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "C = 4 \\pi \\varepsilon_0 b"}, "preprocessed_expressions": {"expr1": "b/e", "expr2": "4*b*pi*varepsilon"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "w_e(r) = \\frac{Q^2}{32 \\pi^2 \\varepsilon_0 r^4}"}, "preprocessed_expressions": {"expr1": "b/e", "expr2": "Q**2/(32*pi**2*r**4*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "W_e = \\frac{Q^2}{8 \\pi \\varepsilon_0 b}"}, "preprocessed_expressions": {"expr1": "b/e", "expr2": "Q**2/(8*b*pi*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "W = \\frac{Q^2}{8 \\pi \\varepsilon_0 b}"}, "preprocessed_expressions": {"expr1": "b/e", "expr2": "Q**2/(8*b*pi*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "a = \\frac{b}{2}"}, "preprocessed_expressions": {"expr1": "b/e", "expr2": "b/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "a = \\frac{b}{e}", "expr2": "E_{\\text{min}}(a) = \\frac{4V}{b}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.8}
{"id": "electro/3_1", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're looking at:\n   * This is a resistive network with three inputs V₁, V₂, V₃\n   * Each input is connected through a 2R resistor\n   * There are R resistors between nodes\n   * The output Vout is taken from the first node\n   * A 2R resistor connects Vout to ground\n\n2) This is a voltage divider network. We can use superposition principle:\n   * Each input contributes to Vout independently\n   * The total Vout is the sum of individual contributions\n\n3) For any input Vi that is 1:\n   * Its contribution to Vout is (1)(R_equivalent)/(2R + R_equivalent)\n   * Where R_equivalent is the parallel combination of the path to ground\n\n4) Let's calculate for each combination:\n   * (0,0,0): Vout = 0\n   * (1,0,0): Vout = 1/3\n   * (0,1,0): Vout = 1/3\n   * (0,0,1): Vout = 1/3\n   * (1,1,0): Vout = 2/3\n   * (1,0,1): Vout = 2/3\n   * (0,1,1): Vout = 2/3\n   * (1,1,1): Vout = 1\n\n5) The pattern shows:\n   * 0 inputs ON = 0\n   * 1 input ON = 1/3\n   * 2 inputs ON = 2/3\n   * 3 inputs ON = 1\n\n\\[\\boxed{V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}}\\]", "final_answers": ["V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(0, 0, 0) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(0, 0, 1) = \\frac{1}{12}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(0, 1, 0) = \\frac{1}{6}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(0, 1, 1) = \\frac{1}{4}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(1, 0, 0) = \\frac{1}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(1, 0, 1) = \\frac{5}{12}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(1, 1, 0) = \\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_{out} = \\begin{cases} \n0 & \\text{for (0,0,0)} \\\\\n1/3 & \\text{for (1,0,0), (0,1,0), (0,0,1)} \\\\\n2/3 & \\text{for (1,1,0), (1,0,1), (0,1,1)} \\\\\n1 & \\text{for (1,1,1)}\n\\end{cases}", "expr2": "V_{\\text{out}}(1, 1, 1) = \\frac{7}{12}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_30", "solution": "Let's solve this step by step.\n\n(a) For circular motion in a magnetic field:\n- The magnetic force provides the centripetal force\n- $qvB = \\frac{mv^2}{R}$\n- Since $p = mv$ and $v = p/m$\n- Substituting: $qB\\frac{p}{m} = \\frac{p^2}{mR}$\n- Therefore: $p = qBR$\n\n(b) For electrons to remain at radius R:\n- Initial condition: $p = qB_0R$\n- After change: $p + Δp = q(B_0 + ΔB_0)R$\n- The magnetic flux change induces an EMF that accelerates electrons\n- EMF = -dΨ/dt = -πR²(dB_av/dt)\n- For constant radius: ΔB_av/B_av = ΔB_0/B_0 = 2\n- Therefore: ΔB_av = 2ΔB_0\n\n(c) For small oscillations:\n- Vertical motion (z-direction):\n  * Force = -qvB_r = -qv(dB_z/dr)z\n  * Equation: d²z/dt² + (qB_0/m)²(n/2)z = 0\n\n- Radial motion (r-direction):\n  * Small displacement x from R\n  * Equation: d²x/dt² + (qB_0/m)²(1-n)x = 0\n\n(d) For stability:\n- Vertical stability requires n > 0\n- Radial stability requires 1-n > 0\n- Therefore n < 1\n- Combining: 0 < n < 1\n\nThe final answer for the stable range of n is:\n\n\\[\\boxed{0 < n < 1}\\]\n\nThis is known as the \"weak focusing\" condition in accelerator physics.", "final_answers": ["0 < n < 1"], "equivalency_results": [{"input_expressions": {"expr1": "0 < n < 1", "expr2": "p = -eBR"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "Can only compare inequalities with Expr"}, {"input_expressions": {"expr1": "0 < n < 1", "expr2": "\\Delta B_0 = \\frac{1}{2} \\Delta B_{\\text{av}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "0 < n < 1", "expr2": "\\ddot{r}_1 + (1-n)\\omega_0^2 r_1 = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "Can only compare inequalities with Expr"}, {"input_expressions": {"expr1": "0 < n < 1", "expr2": "m\\ddot{z} + m\\omega_0^2 nz = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "Can only compare inequalities with Expr"}, {"input_expressions": {"expr1": "0 < n < 1", "expr2": "0 < n < 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "Can only compare inequalities with Expr"}], "accuracy": 1.0}
{"id": "electro/2_27", "solution": "Let's solve this step by step:\n\n1) First, let's use Ampère's law: ∮H⋅dl = Ienc\n   The enclosed current is Ni (N turns × current i)\n\n2) For this C-shaped electromagnet, we can break the path integral into three parts:\n   - Through the iron (length 2l)\n   - Across the air gap (length d)\n\n3) In the iron (μ ≫ μ₀):\n   H₁l₁ = H₁(2l), where H₁ is the H-field in iron\n\n4) In the air gap:\n   H₂d, where H₂ is the H-field in the gap\n\n5) Ampère's law becomes:\n   2lH₁ + dH₂ = Ni\n\n6) We know that:\n   B = μH in iron (B₁ = μH₁)\n   B = μ₀H in air gap (B₂ = μ₀H₂)\n\n7) Due to flux conservation:\n   B₁A = B₂A\n   Therefore, B₁ = B₂ = B\n\n8) This means:\n   B/μ(2l) + B/μ₀(d) = Ni\n\n9) Since μ ≫ μ₀, the first term becomes negligible\n\n10) Therefore:\n    B/μ₀(d) ≈ Ni\n\n11) Solving for B:\n    B = μ₀Ni/d\n\nThe final answer is:\n\\[\\boxed{B = \\frac{\\mu_0Ni}{d}}\\]", "final_answers": ["B = \\frac{\\mu_0Ni}{d}"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\frac{\\mu_0Ni}{d}", "expr2": "B = \\frac{NI\\mu_0 \\mu}{d(\\mu - \\mu_0) + 4l\\mu_0}"}, "preprocessed_expressions": {"expr1": "muNi/d", "expr2": "I*N*mu**2/(4*l*mu + d(0))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_18", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * Two circular conductors with radius b\n   * Centers separated by distance 2a\n   * Left conductor: current density J into page (negative z)\n   * Right conductor: current density J out of page (positive z)\n   * We need to find B field in the lens-shaped vacuum region\n\n2) Due to the symmetry of the problem:\n   * The magnetic field will only have a y-component\n   * B = B(x,y)ŷ\n   * The field will be zero along the x-axis\n\n3) For a current distribution, we can use Ampère's law:\n   * ∇ × B = μ₀J\n\n4) In the vacuum region:\n   * ∇ × B = 0\n   * ∇ · B = 0\n\n5) These conditions mean that B must be:\n   * Curl-free\n   * Divergence-free\n   * Therefore, B must satisfy Laplace's equation: ∇²B = 0\n\n6) Given the geometry and boundary conditions:\n   * The solution must be linear in the vacuum region\n   * The field must vary linearly with x in the gap\n\n7) The magnetic field in the vacuum region must be:\n   * B = μ₀J(x/a)ŷ\n   * Where x is measured from the center point between the conductors\n\n8) This solution:\n   * Satisfies Laplace's equation\n   * Matches the boundary conditions\n   * Has the correct symmetry\n   * Gives the expected field direction\n\nTherefore, the magnetic field at any point (x,y) in the vacuum region is:\n\n\\[\\boxed{B = \\mu_0J\\frac{x}{a}\\hat{y}}\\]\n\nwhere:\n- μ₀ is the permeability of free space\n- J is the magnitude of the current density\n- x is measured from the midpoint between the conductors\n- a is half the distance between the centers", "final_answers": ["B = \\mu_0J\\frac{x}{a}\\hat{y}"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\mu_0J\\frac{x}{a}\\hat{y}", "expr2": "\\mathbf{B} = -\\mu_0 aJ \\mathbf{e}_y"}, "preprocessed_expressions": {"expr1": "hat*muJ*x*y/a", "expr2": "-J*a*e*mathbf*mu"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_11", "solution": "Let's solve this step by step:\n\n1) First, let's understand how the circuit works:\n   * We have a square wave input at point a oscillating between +V and -V\n   * The signal passes through a capacitor to point b\n   * From b, we have a path to ground through a diode and another path to point c through a diode\n   * At point c, there's a capacitor to ground\n\n2) For the DC analysis:\n   * The capacitors block DC\n   * The diodes only conduct when forward biased\n   * When forward biased, ideal diodes have zero voltage drop\n\n3) Let's analyze what happens at point b:\n   * The first capacitor will center the waveform around 0V\n   * The diode to ground will clip any negative voltages\n   * Therefore, point b will show only the positive half of the centered waveform\n   * Maximum value will be V/2\n   * Minimum value will be 0V\n\n4) For point c:\n   * The diode between b and c will only conduct when b is positive\n   * The capacitor at c will hold the peak voltage\n   * Therefore, point c will maintain a steady DC voltage of V/2\n\n5) The waveforms will look like:\n   * Point a: Square wave between +V and -V\n   * Point b: Half-wave rectified signal between 0 and V/2\n   * Point c: Steady DC at V/2\n\nThe final voltage levels are:\n\n\\[\\boxed{\\begin{align*}\n\\text{Point b: } & 0\\text{ to }V/2 \\\\\n\\text{Point c: } & V/2\n\\end{align*}}\\]", "final_answers": ["\\begin{align*}\n\\text{Point b: } & 0\\text{ to }V/2 \\\\\n\\text{Point c: } & V/2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\text{Point b: } & 0\\text{ to }V/2 \\\\\n\\text{Point c: } & V/2\n\\end{align*}", "expr2": "V_b = \\begin{cases} \n0 & \\text{when } V_a = V \\\\ \n-2V & \\text{when } V_a = -V \n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\text{Point b: } & 0\\text{ to }V/2 \\\\\n\\text{Point c: } & V/2\n\\end{align*}", "expr2": "V_c = -2V \\text{ at all times.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_16", "solution": "Let's solve this step by step:\n\n(a) When switch is in position A for a long time:\n1) In steady state, inductor acts like a short circuit\n2) Only ε₁ = 5V is connected in the circuit\n3) R₁ and R₂ are in series\n4) Total resistance = R₁ + R₂ = 10⁴ + 10⁴ = 2 × 10⁴ Ω\n5) Current = 5V/(2 × 10⁴) = 0.25 mA\n6) This current flows through ε₁, R₁, R₂, and L in clockwise direction\n\n(b) Just after switching to position B:\n1) Due to inductance, current cannot change instantaneously\n2) Current through L and R₂ remains 0.25 mA clockwise\n3) Current through ε₂ and R₁ will be 0.25 mA clockwise\n4) ε₂ is now providing 10V in opposite direction to current flow\n\n(c) After long time in position B:\n1) Circuit reaches new steady state\n2) Inductor acts as short circuit again\n3) Only ε₂ = 10V is connected\n4) Current = 10V/(2 × 10⁴) = 0.5 mA\n5) Current flows counterclockwise through ε₂, R₁, R₂, and L\n\nFinal answers:\n\\[\\boxed{\n\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_2} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_1} = 0.5 \\, \\text{mA, leftward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{\\varepsilon_1} = 0.5 \\, \\text{mA, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_L = 0.5 \\, \\text{mA, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_1} = 0.25 \\, \\text{mA, rightward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_2} = 0.75 \\, \\text{mA, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{e_2} = 0.25 \\, \\text{mA, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_L = 0.5 \\, \\text{mA, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_1} = 1 \\, \\text{mA, rightward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{R_2} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_L = 1 \\, \\text{mA, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): i = 0.25 \\text{ mA clockwise} \\\\\n&(b): i = 0.25 \\text{ mA clockwise} \\\\\n&(c): i = 0.5 \\text{ mA counterclockwise}\n\\end{align*}", "expr2": "I_{e_2} = 1 \\, \\text{mA, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_29", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when the magnetic field is turned on:\n   * The changing magnetic field creates an EMF in the loop (Faraday's law)\n   * This EMF drives a current in the loop\n   * The current flows until the magnetic field reaches its final value\n\n2) According to Faraday's law, the induced EMF is:\n   * ε = -dΦ/dt\n   * where Φ is the magnetic flux through the loop\n\n3) The magnetic flux through the loop is:\n   * Φ = BA\n   * where A = πa² is the area of the loop\n   * Φ = Bπa²\n\n4) The circuit equation for the loop is:\n   * L(di/dt) + Ri = -dΦ/dt\n   * L(di/dt) + Ri = -d(Bπa²)/dt\n\n5) The total charge q that flows past any point is:\n   * q = ∫i dt\n   * where i is the current and we integrate over all time\n\n6) When the field reaches its final value B₀:\n   * Initial flux: Φᵢ = 0\n   * Final flux: Φf = B₀πa²\n   * Total change in flux: ΔΦ = B₀πa²\n\n7) From the definition of current:\n   * i = dq/dt\n\n8) Integrating the circuit equation over all time:\n   * L∫(di/dt)dt + R∫idt = -ΔΦ\n   * Li + Rq = -B₀πa²\n   * where i = 0 at t = ∞\n\n9) Therefore:\n   * Rq = -B₀πa²\n   * q = -B₀πa²/R\n\nThe negative sign indicates the direction of the charge flow.\n\n\\[ \\boxed{q = -\\frac{B_0\\pi a^2}{R}} \\]", "final_answers": ["q = -\\frac{B_0\\pi a^2}{R}"], "equivalency_results": [{"input_expressions": {"expr1": "q = -\\frac{B_0\\pi a^2}{R}", "expr2": "q = \\frac{B \\pi a^2}{R}"}, "preprocessed_expressions": {"expr1": "-B*a**2*pi/R", "expr2": "B*a**2*pi/R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_20", "solution": "Let's solve this step by step.\n\n(a) For very small ω (low frequency):\n1) At low frequencies, inductors act like short circuits (XL = ωL → 0)\n2) Capacitors act like open circuits (XC = 1/ωC → ∞)\n3) Therefore, the current flows through L1 and L2, bypassing C1 and C2\n4) The voltage across A-B will be approximately zero\n\n\\[ \\boxed{V ≈ 0 \\text{ for } \\omega \\to 0} \\]\n\n(b) For very large ω (high frequency):\n1) At high frequencies, inductors act like open circuits (XL = ωL → ∞)\n2) Capacitors act like short circuits (XC = 1/ωC → 0)\n3) The current flows through C1 and C2\n4) Again, the voltage across A-B will approach zero\n\n\\[ \\boxed{V ≈ 0 \\text{ for } \\omega \\to \\infty} \\]\n\n(c) The curve will show:\n1) Two resonant peaks corresponding to two natural frequencies\n2) Zero voltage at very low and very high frequencies\n3) The lower resonant frequency occurs when L1C1 resonates\n4) The higher resonant frequency occurs when L2C2 resonates\n5) Since L2C2 > L1C1, the second peak occurs at a lower frequency than the first\n\n(d) For the complete expression:\n1) The impedance of each branch can be written as:\n   Branch 1: Z1 = jωL1 + 1/jωC1\n   Branch 2: Z2 = jωL2 + 1/jωC2\n\n2) The voltage across A-B is:\n\\[ V = i_0 \\sin(\\omega t) \\cdot \\left|\\frac{Z_1Z_2}{Z_1 + Z_2}\\right| \\]\n\n3) After simplification:\n\\[ \\boxed{V = i_0 \\left|\\frac{\\omega^2(L_1L_2C_1C_2)(\\omega^2 - \\frac{1}{L_1C_1})(\\omega^2 - \\frac{1}{L_2C_2})}{(\\omega^2L_1C_1 - 1)(\\omega^2L_2C_2 - 1)}\\right|} \\]\n\nThis expression shows resonant peaks at ω = 1/√(L1C1) and ω = 1/√(L2C2), and approaches zero at both ω → 0 and ω → ∞.", "final_answers": ["V ≈ 0 \\text{ for } \\omega \\to 0", "V ≈ 0 \\text{ for } \\omega \\to \\infty", "V = i_0 \\left|\\frac{\\omega^2(L_1L_2C_1C_2)(\\omega^2 - \\frac{1}{L_1C_1})(\\omega^2 - \\frac{1}{L_2C_2})}{(\\omega^2L_1C_1 - 1)(\\omega^2L_2C_2 - 1)}\\right|"], "equivalency_results": [{"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to 0", "expr2": "V_{\\text{meter}} = \\frac{1}{\\sqrt{2}} i_0 \\omega L_1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to 0", "expr2": "V_{\\text{meter}} = \\frac{i_0}{\\sqrt{2} \\omega C_1}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to 0", "expr2": "V_{BA} = \\frac{i_0}{\\sqrt{2} \\left| \\frac{1}{\\omega L_1} - \\omega C_1 + \\frac{1}{\\omega L_2 - \\frac{1}{\\omega C_2}} \\right|"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to \\infty", "expr2": "V_{\\text{meter}} = \\frac{1}{\\sqrt{2}} i_0 \\omega L_1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to \\infty", "expr2": "V_{\\text{meter}} = \\frac{i_0}{\\sqrt{2} \\omega C_1}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V ≈ 0 \\text{ for } \\omega \\to \\infty", "expr2": "V_{BA} = \\frac{i_0}{\\sqrt{2} \\left| \\frac{1}{\\omega L_1} - \\omega C_1 + \\frac{1}{\\omega L_2 - \\frac{1}{\\omega C_2}} \\right|"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "V = i_0 \\left|\\frac{\\omega^2(L_1L_2C_1C_2)(\\omega^2 - \\frac{1}{L_1C_1})(\\omega^2 - \\frac{1}{L_2C_2})}{(\\omega^2L_1C_1 - 1)(\\omega^2L_2C_2 - 1)}\\right|", "expr2": "V_{\\text{meter}} = \\frac{1}{\\sqrt{2}} i_0 \\omega L_1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = i_0 \\left|\\frac{\\omega^2(L_1L_2C_1C_2)(\\omega^2 - \\frac{1}{L_1C_1})(\\omega^2 - \\frac{1}{L_2C_2})}{(\\omega^2L_1C_1 - 1)(\\omega^2L_2C_2 - 1)}\\right|", "expr2": "V_{\\text{meter}} = \\frac{i_0}{\\sqrt{2} \\omega C_1}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = i_0 \\left|\\frac{\\omega^2(L_1L_2C_1C_2)(\\omega^2 - \\frac{1}{L_1C_1})(\\omega^2 - \\frac{1}{L_2C_2})}{(\\omega^2L_1C_1 - 1)(\\omega^2L_2C_2 - 1)}\\right|", "expr2": "V_{BA} = \\frac{i_0}{\\sqrt{2} \\left| \\frac{1}{\\omega L_1} - \\omega C_1 + \\frac{1}{\\omega L_2 - \\frac{1}{\\omega C_2}} \\right|"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '}' at '<EOF>'\n\\frac{i}{\\sqrt{2} | \\frac{1}{\\omega L} - \\omega C + \\frac{1}{\\omega L - \\frac{1}{\\omega C}} |\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.3333333333333333}
{"id": "electro/3_27", "solution": "Let me solve this step by step.\n\n1) The inductance (L) of a solenoid is given by the formula:\n   L = (μ₀N²A)/l\n   where:\n   - μ₀ is the permeability of free space\n   - N is the number of turns\n   - A is the cross-sectional area\n   - l is the length of the solenoid\n\n2) Given values:\n   - N = 100 turns\n   - Diameter = 2 cm = 0.02 m\n   - Length = 10 cm = 0.1 m\n   - μ₀ = 4π × 10⁻⁷ T⋅m/A\n\n3) Calculate the cross-sectional area (A):\n   A = πr² = π(0.01)² = 3.14159 × 10⁻⁴ m²\n\n4) Now substitute all values into the inductance formula:\n   L = (4π × 10⁻⁷)(100)²(3.14159 × 10⁻⁴)/0.1\n\n5) Simplify:\n   L = (4π × 10⁻⁷)(10000)(3.14159 × 10⁻⁴)/0.1\n   L = (4π × 3.14159 × 10⁻³)/0.1\n   L = 39.48 × 10⁻⁶ H\n   L = 39.48 μH\n\nTherefore, the inductance of the solenoid is approximately 39.48 microhenries.\n\n\\[\\boxed{39.48 \\, \\mu\\text{H}}\\]", "final_answers": ["39.48 \\, \\mu\\text{H}"], "equivalency_results": [{"input_expressions": {"expr1": "39.48 \\, \\mu\\text{H}", "expr2": "L = 3.95 \\times 10^{-5} \\, \\text{H}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_30", "solution": "Let's solve this step by step.\n\n(a) To find the magnetic fields, we can use Maxwell's equation: B = -i/ω × ∇×E\n\n1) For incident wave:\nH^I = (k₀/ωμ₀)(-cos θ x̂ - sin θ ẑ)A exp[i(k₀x sin θ + k₀z cos θ - ωt)]\n\n2) For reflected wave:\nH^R = (k₀/ωμ₀)(cos θ x̂ - sin θ ẑ)R exp[i(k₀x sin θ - k₀z cos θ - ωt)]\n\n3) For transmitted wave:\nH^T = (k'/ωμ₀)(-cos γ x̂ - sin γ ẑ)E(z) exp[i(k'x sin γ - ωt)]\n\n(b) At z = 0, boundary conditions require:\n\n1) Continuity of E_y:\nA + R = E(0)\n\n2) Continuity of H_x:\n-A cos θ + R cos θ = -E(0) cos γ\n\n3) From Snell's law:\nk₀ sin θ = k' sin γ\n\n(c) For the wave equation:\n\n1) From Maxwell's equations:\n∇×H = ∂D/∂t = -iωD\n∇×E = -∂B/∂t = iωB\n\n2) Substituting the given constitutive relations:\n∇×∇×E = ω²/c² [1 + 4πχ(z) + 4πiσ(z)/ω]E\n\n3) For the transmitted wave, this becomes:\nd²E/dz² + [k'² - k₀²(1 + 4πχ(z) + 4πiσ(z)/ω)]E = 0\n\nThe final wave equation for E^T_y is:\n\n\\[\\boxed{\\frac{d^2E}{dz^2} + k_0^2\\left[1 + 4\\pi\\chi_\\infty(1-e^{-\\lambda z}) + \\frac{4\\pi i\\sigma_\\infty}{\\omega}(1-e^{-\\lambda z}) - \\sin^2\\theta\\right]E = 0}\\]\n\nThis is a second-order differential equation that determines E(z) in the transmitted region.", "final_answers": ["\\frac{d^2E}{dz^2} + k_0^2\\left[1 + 4\\pi\\chi_\\infty(1-e^{-\\lambda z}) + \\frac{4\\pi i\\sigma_\\infty}{\\omega}(1-e^{-\\lambda z}) - \\sin^2\\theta\\right]E = 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d^2E}{dz^2} + k_0^2\\left[1 + 4\\pi\\chi_\\infty(1-e^{-\\lambda z}) + \\frac{4\\pi i\\sigma_\\infty}{\\omega}(1-e^{-\\lambda z}) - \\sin^2\\theta\\right]E = 0", "expr2": "\\begin{align*}\n\\mathbf{B}^I &= (-\\mathbf{e}_x \\cos \\theta + \\mathbf{e}_z \\sin \\theta) A \\exp \\left[i(x k_0 \\sin \\theta + z k_0 \\cos \\theta - \\omega t)\\right], \\\\\n\\mathbf{B}^R &= (\\mathbf{e}_x \\cos \\theta + \\mathbf{e}_z \\sin \\theta) R \\exp \\left[i(x k_0 \\sin \\theta - z k_0 \\cos \\theta - \\omega t) \\right], \\\\\n\\mathbf{B}^T &= \\frac{c}{i \\omega} \\left[ \\mathbf{e}_z E(z) (i k' \\sin \\gamma) - \\mathbf{e}_x \\frac{\\partial E(z)}{\\partial z} \\right] \\exp \\left[i(k' x \\sin \\gamma - \\omega t)\\right].\n\\end{align*}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "c*e*mathbf*(i*k'*E(z)*sin(gamma) - Derivative(E(z), z))*exp(i(k'*x*sin(gamma) - omega*t))/(i*omega)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d^2E}{dz^2} + k_0^2\\left[1 + 4\\pi\\chi_\\infty(1-e^{-\\lambda z}) + \\frac{4\\pi i\\sigma_\\infty}{\\omega}(1-e^{-\\lambda z}) - \\sin^2\\theta\\right]E = 0", "expr2": "\\begin{align*}\nA + R &= E(0), \\\\\nk_0(R - A) \\cos \\theta &= i \\left( \\frac{\\partial E(z)}{\\partial z} \\right)_{z=0}.\n\\end{align*}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "i(Derivative(E(z), z))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d^2E}{dz^2} + k_0^2\\left[1 + 4\\pi\\chi_\\infty(1-e^{-\\lambda z}) + \\frac{4\\pi i\\sigma_\\infty}{\\omega}(1-e^{-\\lambda z}) - \\sin^2\\theta\\right]E = 0", "expr2": "\\frac{\\partial^2 E(z)}{\\partial z^2} + \\frac{\\omega^2}{c^2} \\left[1 + 4 \\pi \\left(\\chi_{\\infty} + \\frac{i \\sigma_{\\infty}}{\\omega} \\right)(1 - e^{-\\lambda z}) \\right] E(z) - k'^2 \\sin^2 \\gamma \\, E(z) = 0."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: <INVALID>\n0.\n~~^"}], "accuracy": 0.0}
{"id": "electro/3_18", "solution": "Let's solve this step by step:\n\n1) First, let's recall that for an RC circuit, the time constant τ = RC\n   This determines how quickly the capacitor charges and discharges.\n\n2) Calculate time constants for each resistance value:\n   * For R = 10³ Ω: τ = (10³)(100×10⁻¹²) = 10⁻⁷ seconds\n   * For R = 10⁴ Ω: τ = (10⁴)(100×10⁻¹²) = 10⁻⁶ seconds\n   * For R = 10⁵ Ω: τ = (10⁵)(100×10⁻¹²) = 10⁻⁵ seconds\n\n3) Compare these with pulse duration (10⁻⁶ seconds):\n   * When R = 10³ Ω: τ = 0.1×pulse_duration\n   * When R = 10⁴ Ω: τ = 1×pulse_duration\n   * When R = 10⁵ Ω: τ = 10×pulse_duration\n\n4) Expected waveforms:\n   * For R = 10³ Ω: The circuit will respond quickly, closely following the input pulse\n   * For R = 10⁴ Ω: The output will show noticeable charging/discharging effects\n   * For R = 10⁵ Ω: The capacitor won't have time to fully charge during the pulse\n\nThe waveforms will show:\n- R = 10³ Ω: Nearly square pulse\n- R = 10⁴ Ω: Rounded edges, reaching about 63% of max\n- R = 10⁵ Ω: Small amplitude triangular-like pulse\n\n\\[\\boxed{\\text{As R increases, the output becomes more rounded and attenuated}}\\]", "final_answers": ["\\text{As R increases, the output becomes more rounded and attenuated}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{As R increases, the output becomes more rounded and attenuated}", "expr2": "v_0 = u(t)e^{-10t} - u(t - 1)e^{-10(t-1)} \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{As R increases, the output becomes more rounded and attenuated}", "expr2": "v_0 = u(t)e^{-t} - u(t-1)e^{-t+1} \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{As R increases, the output becomes more rounded and attenuated}", "expr2": "v_0 = u(t)e^{-0.1t} - u(t-1)e^{-0.1(t-1)} \\, \\text{V}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_26", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * The box is a linear circuit with unknown internal configuration\n   * We can model it as a Thévenin equivalent circuit with voltage V₀ and resistance R₀\n\n2) From the given data:\n   * For R = 10Ω, P = 2.5W\n   * For R = 90Ω, P = 0.9W\n\n3) Using P = V²/R where V is voltage across R:\n   * 2.5 = V₁²/10  → V₁² = 25\n   * 0.9 = V₂²/90  → V₂² = 81\n\n4) Using voltage divider formula:\n   * V₁ = V₀R/(R + R₀)\n   * For R = 10Ω: 5 = V₀(10)/(10 + R₀)\n   * For R = 90Ω: 9 = V₀(90)/(90 + R₀)\n\n5) Solving these equations:\n   * V₀ = 10V\n   * R₀ = 10Ω\n\n6) For part (a), with R = 30Ω:\n   * P = V²/R = (10 × 30/(30 + 10))²/30 = 1.875W\n\n7) For part (b), with R₁ = 10Ω and 5V source:\n   * Total voltage = 10V ± 5V (depending on polarity)\n   * If voltage adds: V = 15V\n   * If voltage subtracts: V = 5V\n   * P = V²/R₁ = 225/10 = 2.25W or 25/10 = 2.5W\n\n8) For part (c):\n   * The answer is not unique because the 5V source can be connected in two ways\n   * This gives two different power values\n\nFinal answers:\n\\[\\boxed{\n\\begin{align*}\n(a) \\: & P = 1.875 \\text{ watts} \\\\\n(b) \\: & P = 2.25 \\text{ watts or } 2.5 \\text{ watts} \\\\\n(c) \\: & \\text{Not unique due to polarity options}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) \\: & P = 1.875 \\text{ watts} \\\\\n(b) \\: & P = 2.25 \\text{ watts or } 2.5 \\text{ watts} \\\\\n(c) \\: & \\text{Not unique due to polarity options}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: & P = 1.875 \\text{ watts} \\\\\n(b) \\: & P = 2.25 \\text{ watts or } 2.5 \\text{ watts} \\\\\n(c) \\: & \\text{Not unique due to polarity options}\n\\end{align*}", "expr2": "1.875 \\, \\text{W}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_19", "solution": "Let's solve this step by step.\n\n(a) When switch S is in position A:\n- The circuit forms a simple series-parallel combination\n- Current through R₁ splits between R₂ and R₃, then recombines\n- Using voltage divider and parallel resistance:\n- Total resistance = 3Ω + (2Ω || 2Ω) = 4Ω\n- Total current = 2V/4Ω = 0.5A (down through R₁)\n- Current splits equally between R₂ and R₃\n- I₂ = I₃ = 0.25A (down)\n\n(b) Just after switch moves to B:\n- Due to inductors' property to maintain current\n- I₁ = 0A (circuit broken)\n- I₂ and I₃ maintain their previous values momentarily\n- I₂ = I₃ = 0.25A (down)\n\n(c) After 0.5 seconds:\n- Currents decay exponentially\n- With 5H inductors and 2Ω resistors, τ = L/R = 2.5s\n- After 0.5s = 0.2τ, current ≈ 0.82 of initial\n- I₂ = I₃ ≈ 0.205A (down)\n\n(d) When switch moves to C:\n- New circuit configuration forms\n- Voltage source connects to R₄, L₂, R₅ series-parallel\n- Total resistance = 2Ω + (2Ω || 2Ω) = 3Ω\n- I₄ = 2V/3Ω ≈ 0.67A (down)\n- I₅ = I₂ = 0.33A (down)\n- I₃ = 0A (disconnected)\n\nFinal answer for all parts:\n\\[\\boxed{\n\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_1(t) = 0.59 - 0.19e^{-0.34t} \\, \\text{A, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_2(t) = 0.12 + 0.28e^{-0.34t} \\, \\text{A, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_3(t) = 0.47(1 - e^{-0.34t}) \\, \\text{A, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_3(0) = 0.47 \\, \\text{A, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_1(0) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n0.67A↓\n\\end{align*}\n~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_2(0) = 0.47 \\, \\text{A, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_1(0.5) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n0.67A↓\n\\end{align*}\n~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_2(0.5) = 0.37 \\, \\text{A, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_3(0.5) = 0.37 \\, \\text{A, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_3(1+) = 0.29\\, \\text{A, downward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_5(1+) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n0.67A↓\n\\end{align*}\n~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_2(1+) = 0.145 \\, \\text{A, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a): I_1 = 0.5A↓, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(b): I_1 = 0A, \\, I_2 = I_3 = 0.25A↓ \\\\\n&(c): I_1 = 0A, \\, I_2 = I_3 = 0.205A↓ \\\\\n&(d): I_2 = I_5 = 0.33A↓, \\, I_3 = 0A, \\, I_4 = 0.67A↓\n\\end{align*}", "expr2": "i_4(1+) = 0.145 \\, \\text{A, upward}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_21", "solution": "Let's solve this step by step.\n\n1) First, let's note that with unity coupling coefficient (k=1):\n   M = √(L₁L₂) where M is the mutual inductance\n\n2) For the primary circuit:\n   V₀cos(ωt) = Ri₁ + L₁(di₁/dt) + M(di₂/dt)\n\n3) For the secondary circuit:\n   0 = L₂(di₂/dt) + M(di₁/dt) + (1/C)∫i₂dt\n\n4) Given sinusoidal excitation, assume:\n   i₁ = I₁cos(ωt + φ₁)\n   i₂ = I₂cos(ωt + φ₂)\n\n5) For part (a), using phasor analysis:\n   V₀ = RI₁ + jωL₁I₁ + jωMI₂\n   0 = jωL₂I₂ + jωMI₁ + I₂/(jωC)\n\n6) Solving these equations:\n   I₁ = V₀[1/(R + jωL₁(1 - ω²M²/(ω²L₂² + 1/(ωC)²)))]\n\n7) For part (b), average power:\n   P = (V₀²/2)Real{1/(R + jωL₁(1 - ω²M²/(ω²L₂² + 1/(ωC)²)))}\n\n8) For part (c), at resonance:\n   ω₀ = 1/√(L₂C)\n   I₁ = V₀/R\n\n9) For part (d), as ω approaches ω₀:\n   Phase angle φ → 0\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}", "expr2": "i_1(t) = \\frac{V_0}{\\sqrt{R^2 + \\left( \\frac{\\omega L}{1 - \\omega^2 LC} \\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}", "expr2": "P = \\frac{RV_0^2 / 2}{R^2 + \\left( \\frac{\\omega L}{1 - \\omega^2 LC} \\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}", "expr2": "i_1(t) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: i(t) = \\frac{V_0\\cos(\\omega t)}{R + j\\omega L_1(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})} \\\\\n&(b) \\: P = \\frac{V_0^2}{2R}[1 + (\\frac{\\omega L_1}{R})^2(1 - \\frac{\\omega^2M^2}{\\omega^2L_2^2 + 1/(\\omega C)^2})^2]^{-1} \\\\\n&(c) \\: I_1 = \\frac{V_0}{R} \\text{ at } \\omega = \\frac{1}{\\sqrt{L_2C}} \\\\\n&(d) \\: \\phi = 0°\n\\end{align*}", "expr2": "\\varphi = \\frac{\\pi}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_17", "solution": "Let's solve this step by step.\n\n1) First, let's understand the initial conditions:\n- Switch was in position A for a long time, meaning steady state\n- With 1V source and 1Ω resistor, initial current was I₀ = 1A\n- Due to inductor property, current cannot change instantaneously\n\n2) For part (a):\n- At t = 0⁺, immediately after switching to B\n- Current through inductor must be same as before switching\n- Therefore, I(0⁺) = 1A\n\n3) For part (b):\n- After switching, we have L-R circuit with no source\n- Using V = L(dI/dt) = -IR\n- dI/dt = -IR/L = -(1A)(10⁴Ω)/(1H) = -10⁴ A/s\n\n4) For part (c):\n- Potential at B is determined by IR drop across R\n- V_B = I(0⁺)R = (1A)(10⁴Ω) = 10⁴ V\n\n5) For part (d):\n- V_L = L(dI/dt)\n- dV_L/dt = L(d²I/dt²)\n- From exponential decay: d²I/dt² = (R/L)²I\n- Therefore, dV_L/dt = L(R/L)²I = R²I/L = (10⁴)²(1)/1 = 10⁸ V/s\n\n6) For part (e):\n- Energy dissipated = ∫(I²R)dt from 0 to 0.1s\n- Current follows I(t) = I₀e^(-Rt/L)\n- Energy = R∫(I₀²e^(-2Rt/L))dt from 0 to 0.1s\n- Energy = (10⁴)(1)²(L/2R)(1-e^(-2(0.1)R/L))\n- Substituting values: Energy = 0.5 J\n\nFinal answers:\n\\[\\boxed{\n\\begin{align*}\n(a) \\: & 1 \\text{ A} \\\\\n(b) \\: & -10^4 \\text{ A/s} \\\\\n(c) \\: & 10^4 \\text{ V} \\\\\n(d) \\: & 10^8 \\text{ V/s} \\\\\n(e) \\: & 0.5 \\text{ J}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) \\: & 1 \\text{ A} \\\\\n(b) \\: & -10^4 \\text{ A/s} \\\\\n(c) \\: & 10^4 \\text{ V} \\\\\n(d) \\: & 10^8 \\text{ V/s} \\\\\n(e) \\: & 0.5 \\text{ J}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: & 1 \\text{ A} \\\\\n(b) \\: & -10^4 \\text{ A/s} \\\\\n(c) \\: & 10^4 \\text{ V} \\\\\n(d) \\: & 10^8 \\text{ V/s} \\\\\n(e) \\: & 0.5 \\text{ J}\n\\end{align*}", "expr2": "i_L(0) = 1 \\, \\text{A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/3_28", "solution": "Let's solve this step by step.\n\n1) For an LR circuit, the time constant τ is given by:\n   τ = L/R\n   where L is the inductance and R is the resistance\n\n2) We need to find the inductance L of the toroidal solenoid first.\n   For a toroidal solenoid:\n   L = (μ₀μᵣN²A)/(2πr)\n   where:\n   - μ₀ = 4π × 10⁻⁷ H/m\n   - μᵣ = 1000 (relative permeability of iron)\n   - N = 10⁴ turns\n   - A = 5 cm² = 5 × 10⁻⁴ m²\n   - r = 20 cm = 0.2 m\n\n3) Let's substitute these values:\n   L = (4π × 10⁻⁷ × 1000 × (10⁴)² × 5 × 10⁻⁴)/(2π × 0.2)\n   = (4π × 10⁻⁷ × 1000 × 10⁸ × 5 × 10⁻⁴)/(2π × 0.2)\n   = (2 × 10⁻² × 10⁸)/(0.2)\n   = 10 H\n\n4) Now we can find the time constant τ:\n   τ = L/R\n   τ = 10/10\n   τ = 1 second\n\n5) The time constant τ is exactly the time taken for the current to decay to e⁻¹ of its initial value.\n\nTherefore, the time taken for the current to decay to e⁻¹ of its initial value is 1 second.\n\n\\[\\boxed{1 \\text{ second}}\\]", "final_answers": ["1 \\text{ second}"], "equivalency_results": [{"input_expressions": {"expr1": "1 \\text{ second}", "expr2": "5 \\, \\text{s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/3_10", "solution": "Let me help you solve this step by step.\n\n1) First, let's analyze what we know:\n   * We have a 3 μF capacitor\n   * From the figure, we need to find the voltage across this capacitor to calculate energy\n\n2) The energy stored in a capacitor is given by:\n   E = ½CV²\n   where C is capacitance and V is voltage across the capacitor\n\n3) Looking at the circuit:\n   * The voltage source is 12V\n   * The 3 μF capacitor is in parallel with the 6 μF capacitor\n   * When capacitors are in parallel, they have the same voltage\n   * Therefore, the voltage across the 3 μF capacitor is 12V\n\n4) Now we can calculate the energy:\n   E = ½CV²\n   E = ½ × (3 × 10⁻⁶) × (12)²\n   E = ½ × 3 × 10⁻⁶ × 144\n   E = 216 × 10⁻⁶ Joules\n   E = 216 μJ\n\nTherefore, the energy stored in the 3 μF capacitor is 216 microjoules.\n\n\\[\\boxed{216 \\text{ μJ}}\\]", "final_answers": ["216 \\text{ μJ}"], "equivalency_results": [{"input_expressions": {"expr1": "216 \\text{ μJ}", "expr2": "E = 0.42 \\times 10^{-6} \\, J"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_25", "solution": "Let me solve this step by step.\n\n1) For a good conductor, the attenuation distance (also called skin depth) is the distance over which the amplitude of the wave decreases by a factor of 1/e.\n\n2) In a conductor, the wave number k is complex and can be written as:\n   k = α + iβ\n   where α is the attenuation constant and β is the phase constant\n\n3) For a good conductor (where σ >> ωε):\n   α = β = √(ωμσ/2)\n\n4) The attenuation distance (δ) is defined as:\n   δ = 1/α\n\n5) Therefore:\n   δ = 1/√(ωμσ/2)\n\n6) Simplifying:\n   δ = √(2/ωμσ)\n\nThis is the attenuation distance or skin depth in a good conductor.\n\n\\[ \\boxed{ \\delta = \\sqrt{\\frac{2}{\\omega\\mu\\sigma}} } \\]", "final_answers": ["\\delta = \\sqrt{\\frac{2}{\\omega\\mu\\sigma}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\delta = \\sqrt{\\frac{2}{\\omega\\mu\\sigma}}", "expr2": "\\delta = \\sqrt{\\frac{2}{\\omega \\mu \\sigma}}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*sqrt(1/(mu*omega*sigma))", "expr2": "sqrt(2)*sqrt(1/(mu*omega*sigma))"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_22", "solution": "Let's solve this step by step.\n\n(a) For the reflected wave from an infinitely thick slab:\n\n1) First, let's understand what happens when the wave hits the surface:\n   * The incident wave can be decomposed into x and y components of equal amplitude (since it's at 45°)\n   * Each component will experience different reflection coefficients due to different refractive indices\n\n2) The reflection coefficient for normal incidence is:\n   * For x-polarization: $r_x = \\frac{1-n_x}{1+n_x}$\n   * For y-polarization: $r_y = \\frac{1-n_y}{1+n_y}$\n\n3) Since $n_x \\neq n_y$, the reflection coefficients will be different:\n   * The reflected x and y components will have different amplitudes\n   * This means the reflected wave will be elliptically polarized\n\n(b) For a slab of thickness d:\n\n1) For each polarization, we need to consider multiple reflections:\n   * Transmission coefficient at first interface: $t_1 = \\frac{2}{1+n}$\n   * Transmission coefficient at second interface: $t_2 = \\frac{2n}{n+1}$\n   * Internal reflection coefficient: $r = \\frac{n-1}{n+1}$\n\n2) Phase accumulation through the slab:\n   * For x-polarization: $\\phi_x = \\frac{n_x\\omega d}{c}$\n   * For y-polarization: $\\phi_y = \\frac{n_y\\omega d}{c}$\n\n3) Total transmission amplitude for each polarization:\n   * $T_x = \\frac{t_{1x}t_{2x}e^{i\\phi_x}}{1-r_x^2e^{2i\\phi_x}}$\n   * $T_y = \\frac{t_{1y}t_{2y}e^{i\\phi_y}}{1-r_y^2e^{2i\\phi_y}}$\n\n4) The relative amplitude and phase between x and y components:\n   * $\\frac{E_x}{E_y} = \\frac{T_x}{T_y} = \\frac{n_y(n_x^2+1)}{n_x(n_y^2+1)}e^{i(\\phi_x-\\phi_y)}$\n\nThe final answer for part (a) is:\n\\[\\boxed{\\text{The reflected wave is elliptically polarized}}\\]\n\nThe final answer for part (b) is:\n\\[\\boxed{\\frac{E_x}{E_y} = \\frac{n_y(n_x^2+1)}{n_x(n_y^2+1)}e^{i\\frac{(n_x-n_y)\\omega d}{c}}}\\]", "final_answers": ["\\text{The reflected wave is elliptically polarized}", "\\frac{E_x}{E_y} = \\frac{n_y(n_x^2+1)}{n_x(n_y^2+1)}e^{i\\frac{(n_x-n_y)\\omega d}{c}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The reflected wave is elliptically polarized}", "expr2": "\\begin{aligned}\nE_x' &= \\left( \\frac{n_z - n_x^2}{n_z + n_x^2} \\right) E_x, \\\\\nE_y' &= \\left( \\frac{n_z - n_y^2}{n_z + n_y^2} \\right) E_y.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The reflected wave is elliptically polarized}", "expr2": "\\begin{aligned}\nE_{1x}'' &= \\frac{2n_z}{n_x^2 + n_z} E_x \\cdot e^{i K_1 d} \\cdot \\text{coefficients determined by solving the system}, \\\\\nE_{1y}'' &= \\frac{2n_z}{n_y^2 + n_z} E_y \\cdot e^{i K_1 d} \\cdot \\text{coefficients determined by solving the system}.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{E_x}{E_y} = \\frac{n_y(n_x^2+1)}{n_x(n_y^2+1)}e^{i\\frac{(n_x-n_y)\\omega d}{c}}", "expr2": "\\begin{aligned}\nE_x' &= \\left( \\frac{n_z - n_x^2}{n_z + n_x^2} \\right) E_x, \\\\\nE_y' &= \\left( \\frac{n_z - n_y^2}{n_z + n_y^2} \\right) E_y.\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "1", "expr2": "E*(1 - n)/(n + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{E_x}{E_y} = \\frac{n_y(n_x^2+1)}{n_x(n_y^2+1)}e^{i\\frac{(n_x-n_y)\\omega d}{c}}", "expr2": "\\begin{aligned}\nE_{1x}'' &= \\frac{2n_z}{n_x^2 + n_z} E_x \\cdot e^{i K_1 d} \\cdot \\text{coefficients determined by solving the system}, \\\\\nE_{1y}'' &= \\frac{2n_z}{n_y^2 + n_z} E_y \\cdot e^{i K_1 d} \\cdot \\text{coefficients determined by solving the system}.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_3", "solution": "Let me solve this step by step.\n\n1) First, let's recall Ampère's right-hand rule for a straight current-carrying wire:\n   * Point your right thumb in the direction of the current\n   * Your fingers naturally curl around the wire\n   * The direction your fingers point shows the direction of the magnetic field\n\n2) Key characteristics of magnetic field around a straight wire:\n   * The field forms concentric circles around the wire\n   * The field lines are perpendicular to the wire\n   * The strength decreases with distance from the wire (1/r relationship)\n\n3) Analysis of given options:\n   * Option (a): If the field were in the direction of current, it would be parallel to the wire - incorrect\n   * Option (b): If the field were radially outward, it would point straight out from the wire - incorrect\n   * Option (c): The field forms circles around the wire - this matches the right-hand rule\n\n4) Verification:\n   * This circular pattern is confirmed by experimental evidence (iron filings around a current-carrying wire)\n   * It follows from Ampère's law and has been extensively verified\n\nTherefore, the magnetic field of a long straight wire carrying a current follows circular paths around the wire.\n\n\\[\\boxed{\\text{(c) along lines circling the current}}\\]", "final_answers": ["\\text{(c) along lines circling the current}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(c) along lines circling the current}", "expr2": "(c)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_14", "solution": "Let me solve this step by step.\n\n1) When an electromagnetic wave is reflected from a conductor, the phase change depends on the refractive indices of both media.\n\n2) For normal incidence, the reflection coefficient r is given by:\n   $r = \\frac{n_2 - n_1}{n_2 + n_1}$\n\n3) Here:\n   * n₁ = n (dielectric medium)\n   * n₂ = n(1 + ip) (conductor)\n\n4) Substituting these values:\n   $r = \\frac{n(1 + ip) - n}{n(1 + ip) + n}$\n   $r = \\frac{1 + ip - 1}{1 + ip + 1}$\n   $r = \\frac{ip}{2 + ip}$\n\n5) Multiply numerator and denominator by complex conjugate of denominator:\n   $r = \\frac{ip(2 - ip)}{(2 + ip)(2 - ip)}$\n   $r = \\frac{2ip + p^2}{4 + p^2}$\n\n6) The reflection coefficient can be written in polar form:\n   $r = |r|e^{iφ}$\n\n7) The phase change φ is given by:\n   $φ = \\tan^{-1}(\\frac{2p}{p^2})$\n   $φ = \\tan^{-1}(\\frac{2}{p})$\n\n8) For good conductors, p is large, so:\n   $φ ≈ π - \\tan^{-1}(\\frac{2}{p})$\n\nTherefore, the phase change is approximately π radians or 180 degrees.\n\n\\[ \\boxed{\\phi = \\pi \\text{ radians} = 180°} \\]", "final_answers": ["\\phi = \\pi \\text{ radians} = 180°"], "equivalency_results": [{"input_expressions": {"expr1": "\\phi = \\pi \\text{ radians} = 180°", "expr2": "\\varphi = \\arctan \\left( \\frac{2}{\\rho} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_13", "solution": "Let me solve this step by step.\n\n1) The reflection coefficient (r) for normal incidence is given by:\n   r = (Z₂ - Z₁)/(Z₂ + Z₁)\n   where Z₁ is the impedance of medium 1 (vacuum) and Z₂ is the impedance of medium 2 (insulator)\n\n2) For vacuum (medium 1):\n   - Z₁ = √(μ₀/ε₀) = Z₀ ≈ 377 Ω\n   where Z₀ is the impedance of free space\n\n3) For the insulator (medium 2):\n   - μᵣ = 1 (given)\n   - εᵣ = ε (given)\n   - Z₂ = √(μ₀/ε₀ε) = Z₀/√ε\n\n4) Substituting into the reflection coefficient formula:\n   r = (Z₀/√ε - Z₀)/(Z₀/√ε + Z₀)\n\n5) Simplifying:\n   r = (1/√ε - 1)/(1/√ε + 1)\n   \n6) Multiply numerator and denominator by √ε:\n   r = (1 - √ε)/(1 + √ε)\n\nThis is the reflection coefficient for normal incidence from vacuum to an insulator.\n\n\\[ \\boxed{r = \\frac{1 - \\sqrt{\\varepsilon}}{1 + \\sqrt{\\varepsilon}}} \\]", "final_answers": ["r = \\frac{1 - \\sqrt{\\varepsilon}}{1 + \\sqrt{\\varepsilon}}"], "equivalency_results": [{"input_expressions": {"expr1": "r = \\frac{1 - \\sqrt{\\varepsilon}}{1 + \\sqrt{\\varepsilon}}", "expr2": "R = \\left( \\frac{1 - \\sqrt{\\varepsilon}}{1 + \\sqrt{\\varepsilon}} \\right)^2"}, "preprocessed_expressions": {"expr1": "(1 - sqrt(varepsilon))/(sqrt(varepsilon) + 1)", "expr2": "(-2*sqrt(varepsilon) + varepsilon + 1)/(2*sqrt(varepsilon) + varepsilon + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/2_4", "solution": "Let me solve this step by step.\n\n1) For a long straight wire carrying current, the magnetic field B at a distance r from the wire is given by the formula:\n   B = (μ₀ × I)/(2π × r)\n\n2) Where:\n   - μ₀ is the permeability of free space = 4π × 10⁻⁷ T⋅m/A\n   - I is the current = 30,000 A\n   - r is the distance = 1 m\n\n3) Let's substitute these values:\n   B = (4π × 10⁻⁷ × 30,000)/(2π × 1)\n   \n4) Simplify:\n   B = (4π × 30,000 × 10⁻⁷)/(2π)\n   B = (2 × 30,000 × 10⁻⁷)\n   B = 60,000 × 10⁻⁷\n   B = 6 × 10⁻³ Tesla\n\n5) Looking at the given options:\n   (a) 3 × 10⁻³ Tesla\n   (b) 6 × 10⁻³ Tesla ✓\n   (c) 0.6 Tesla\n\nThe calculated value matches option (b).\n\n\\[ \\boxed{6 \\times 10^{-3} \\text{ Tesla}} \\]", "final_answers": ["6 \\times 10^{-3} \\text{ Tesla}"], "equivalency_results": [{"input_expressions": {"expr1": "6 \\times 10^{-3} \\text{ Tesla}", "expr2": "6 \\times 10^{-3} \\, \\text{Tesla}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_6", "solution": "Let's solve this step by step.\n\n(a) First, let's use Maxwell's equations for a plane wave:\n\n1) For a plane wave, E, D, H ∝ exp[i(K·r - ωt)]\n2) From Maxwell's equations:\n   * K × E = ωμH = ωH (since μ = 1)\n   * K × H = -ωD\n\n3) From K × H = -ωD:\n   * H is perpendicular to both K and D\n   * D is perpendicular to K (transverse)\n\n4) From K × E = ωH:\n   * H is perpendicular to both K and E\n   * However, E is not necessarily perpendicular to K (not transverse)\n\n5) Since H is perpendicular to both K and D, and D is not parallel to K, H must be perpendicular to E.\n\n(b) Let's solve this part:\n\n1) For a plane wave:\n   * E, D, H ∝ exp[i(K·r - ωt)]\n   * K = Kŝ where ŝ is unit vector\n\n2) From Maxwell's equations:\n   * K × (K × E) = -K²E + K(K·E) = ω²D\n   * In component form: -K²Ej + KSj(ΣSiEi) = ω²εjEj\n\n3) Rearranging:\n   * Sj(ΣSiEi) + (V²/Vj² - 1)Ej = 0\n   where V = ω/K and Vj = c/√εj\n\n4) For non-trivial solutions, determinant must be zero:\n   * |SjSi + (V²/Vi² - 1)δij| = 0\n\n5) This gives a quadratic equation in V²:\n   * Σ(Si²/(1 - V²/Vi²)) = 1\n\nThe equation for phase velocity is:\n   * Σ(Si²/(1 - V²/Vi²)) = 1\n\nThis is a quadratic equation in V² and will have two positive roots, corresponding to two different modes of propagation.\n\nThe final answer for the phase velocity equation is:\n\n\\[\\boxed{\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1}\\]\n\nThis equation has two distinct positive roots for V², representing two different modes of wave propagation in the anisotropic medium.", "final_answers": ["\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1"], "equivalency_results": [{"input_expressions": {"expr1": "\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1", "expr2": "\\mathbf{H} \\cdot \\mathbf{E} = \\mathbf{H} \\cdot \\mathbf{D} = \\mathbf{H} \\cdot \\mathbf{K} = \\mathbf{D} \\cdot \\mathbf{K} = 0"}, "preprocessed_expressions": {"expr1": "1", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1", "expr2": "\\mathbf{D} \\times \\mathbf{H} \\neq \\mathbf{0}"}, "preprocessed_expressions": {"expr1": "1", "expr2": "Ne(D*H*mathbf**2, 0)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'One' and 'Unequality'"}, {"input_expressions": {"expr1": "\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1", "expr2": "S_j \\sum_{i=1}^{3} S_i E_i + \\left( \\frac{V^2}{V_j^2} - 1 \\right) E_j = 0"}, "preprocessed_expressions": {"expr1": "1", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sum_{i=1}^{3} \\frac{S_i^2}{1 - V^2/V_i^2} = 1", "expr2": "V^4 \\left[ \\frac{1}{V_1^2 V_2^2 V_3^2} \\right] \n+ V^2 \\left[ (S_1^2 - 1) \\frac{1}{V_2^2 V_3^2} + (S_2^2 - 1) \\frac{1}{V_1^2 V_3^2} \\right.\n+ \\left. (S_3^2 - 1) \\frac{1}{V_1^2 V_2^2} \\right]\n+ \\left( \\frac{S_1^2}{V_1^2} + \\frac{S_2^2}{V_2^2} + \\frac{S_3^2}{V_3^2} \\right) = 0"}, "preprocessed_expressions": {"expr1": "1", "expr2": "0"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_1", "solution": "Let me solve this step by step.\n\n(a) For frequency:\n1) Looking at the wave equation, the frequency appears in the time-dependent term: $2π × 10^8 t$\n2) In general form, this term is $ωt = 2πft$\n3) Therefore: $2π × 10^8 = 2πf$\n4) Solving for f: $f = 10^8$ Hz or 100 MHz\n\n(b) For wavelength:\n1) Looking at the space-dependent term: $\\frac{2π}{3}x$\n2) In general form, this term is $kx = \\frac{2π}{\\lambda}x$\n3) Therefore: $\\frac{2π}{3} = \\frac{2π}{\\lambda}$\n4) Solving for λ: $λ = 3$ meters\n\n(c) For direction of propagation:\n1) The wave equation is in the form $\\cos(ωt - kx)$\n2) This indicates the wave is traveling in the +x direction\n3) If it were $\\cos(ωt + kx)$, it would be traveling in the -x direction\n\n(d) For direction of magnetic field:\n1) For an electromagnetic wave in vacuum:\n   - E, B, and direction of propagation are mutually perpendicular\n   - They form a right-handed system\n2) We know:\n   - E is in the +y direction\n   - Wave propagates in +x direction\n3) Using the right-hand rule:\n   - B must be in the -z direction\n\nThe final answer is:\n\\[\\boxed{\n\\begin{align*}\n&(a) \\: f = 10^8 \\text{ Hz} \\\\\n&(b) \\: λ = 3 \\text{ m} \\\\\n&(c) \\: +x \\text{ direction} \\\\\n&(d) \\: -z \\text{ direction}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a) \\: f = 10^8 \\text{ Hz} \\\\\n&(b) \\: λ = 3 \\text{ m} \\\\\n&(c) \\: +x \\text{ direction} \\\\\n&(d) \\: -z \\text{ direction}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: f = 10^8 \\text{ Hz} \\\\\n&(b) \\: λ = 3 \\text{ m} \\\\\n&(c) \\: +x \\text{ direction} \\\\\n&(d) \\: -z \\text{ direction}\n\\end{align*}", "expr2": "f = 10^8 \\, \\text{Hz}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_8", "solution": "Let's solve this step by step:\n\n(a) Using SI units (meters, seconds, coulombs, etc.):\nMaxwell's equations in vacuum are:\n1) Gauss's Law: ∇⋅E = ρ/ε₀\n2) Gauss's Law for Magnetism: ∇⋅B = 0\n3) Faraday's Law: ∇×E = -∂B/∂t\n4) Ampère-Maxwell Law: ∇×B = μ₀j + μ₀ε₀∂E/∂t\n\n(b) When all source charges are reversed:\n- ρ → -ρ\n- j → -j (since current is moving charge)\n- From Gauss's law, E → -E\n- From Ampère's law, B → -B\nThe negative signs maintain consistency in Maxwell's equations.\n\n(c) Under space inversion (r → -r):\n- Scalar quantities (ρ) are unchanged: ρ(r) → ρ(-r)\n- Vector quantities (j) change sign: j(r) → -j(-r)\n- E is a vector (polar vector): E(r) → -E(-r)\n- B is a pseudovector (axial vector): B(r) → B(-r)\nThis maintains the parity symmetry of Maxwell's equations.\n\n(d) Under time reversal (t → -t):\n- ρ is unchanged as it's a scalar: ρ(t) → ρ(-t)\n- j changes sign as it involves velocity: j(t) → -j(-t)\n- E is unchanged: E(t) → E(-t)\n- B changes sign: B(t) → -B(-t)\nThis preserves time-reversal symmetry of Maxwell's equations.\n\nThe final answer summarizing transformations:\n\n\\[\\boxed{\n\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}", "expr2": "\\begin{aligned}\n\\nabla \\cdot \\mathbf{E} &= \\frac{\\rho}{\\epsilon_0}, \\\\\n\\nabla \\times \\mathbf{E} &= -\\frac{\\partial \\mathbf{B}}{\\partial t}, \\\\\n\\nabla \\cdot \\mathbf{B} &= 0, \\\\\n\\nabla \\times \\mathbf{B} &= \\mu_0 \\mathbf{j} + \\frac{1}{c^2} \\frac{\\partial \\mathbf{E}}{\\partial t}.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}", "expr2": "\\begin{aligned}\n\\mathbf{E}'(\\mathbf{r}, t) &= -\\mathbf{E}(\\mathbf{r}, t), \\\\\n\\mathbf{B}'(\\mathbf{r}, t) &= -\\mathbf{B}(\\mathbf{r}, t).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}", "expr2": "\\begin{aligned}\n\\rho'(\\mathbf{r}, t) &= \\rho(\\mathbf{r}, t), \\\\\n\\mathbf{j}'(\\mathbf{r}, t) &= -\\mathbf{j}(\\mathbf{r}, t), \\\\\n\\mathbf{E}'(\\mathbf{r}, t) &= -\\mathbf{E}(\\mathbf{r}, t), \\\\\n\\mathbf{B}'(\\mathbf{r}, t) &= \\mathbf{B}(\\mathbf{r}, t).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Charge reversal: } E \\to -E, B \\to -B \\\\\n&\\text{Space inversion: } E \\to -E, B \\to B \\\\\n&\\text{Time reversal: } E \\to E, B \\to -B\n\\end{align*}", "expr2": "\\begin{aligned}\n\\rho'(\\mathbf{r}, t) &= \\rho(\\mathbf{r}, t), \\\\\n\\mathbf{j}'(\\mathbf{r}, t) &= -\\mathbf{j}(\\mathbf{r}, t), \\\\\n\\mathbf{E}'(\\mathbf{r}, t) &= \\mathbf{E}(\\mathbf{r}, t), \\\\\n\\mathbf{B}'(\\mathbf{r}, t) &= -\\mathbf{B}(\\mathbf{r}, t).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_12", "solution": "Let's solve this step by step.\n\n(a) For normal incidence:\n\n1) At the boundary between air and dielectric, the tangential components of E and H must be continuous.\n\n2) For normal incidence, let's denote:\n   - Ei = incident wave amplitude\n   - Er = reflected wave amplitude\n   - Et = transmitted wave amplitude\n\n3) From boundary conditions:\n   Ei + Er = Et (continuity of E)\n   n(Ei - Er) = Et (continuity of H, including the refractive index)\n\n4) Solving these equations:\n   From first equation: Et = Ei + Er\n   From second equation: Et = n(Ei - Er)\n   Therefore: Ei + Er = n(Ei - Er)\n   \n5) Solving for Er/Ei:\n   Ei + Er = nEi - nEr\n   Er(1 + n) = Ei(n - 1)\n   Er/Ei = (n - 1)/(n + 1)\n\n6) The reflecting power R is the ratio of reflected to incident intensity:\n   R = |Er/Ei|² = [(n - 1)/(n + 1)]² = (n - 1)²/(n + 1)²\n\n(b) For oblique incidence with polarization in plane of incidence:\n\n1) Fresnel's formula for this case is:\n   r = [tan(θ₁ - θ₃)]/[tan(θ₁ + θ₃)]\n   where θ₃ is the angle of refraction\n\n2) From Snell's law:\n   sin θ₁ = n sin θ₃\n\n3) When tan θ₁ = n:\n   sin θ₁ = n/√(1 + n²)\n   cos θ₁ = 1/√(1 + n²)\n\n4) Using Snell's law:\n   sin θ₃ = sin θ₁/n = 1/√(1 + n²)\n   cos θ₃ = n/√(1 + n²)\n\n5) When these values are substituted into the Fresnel formula, r = 0, meaning no reflection.\n\nThe final answer for part (a) is:\n\\[\\boxed{R = \\frac{(n-1)^2}{(n+1)^2}}\\]\n\nFor part (b), the condition for no reflection is:\n\\[\\boxed{\\tan \\theta_1 = n}\\]", "final_answers": ["R = \\frac{(n-1)^2}{(n+1)^2}", "\\tan \\theta_1 = n"], "equivalency_results": [{"input_expressions": {"expr1": "R = \\frac{(n-1)^2}{(n+1)^2}", "expr2": "R = \\frac{(n-1)^2}{(n+1)^2}"}, "preprocessed_expressions": {"expr1": "(n**2 - 2*n + 1)/(n**2 + 2*n + 1)", "expr2": "(n**2 - 2*n + 1)/(n**2 + 2*n + 1)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\tan \\theta_1 = n", "expr2": "R = \\frac{(n-1)^2}{(n+1)^2}"}, "preprocessed_expressions": {"expr1": "n", "expr2": "(n**2 - 2*n + 1)/(n**2 + 2*n + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tan \\theta_1 = n", "expr2": "\\theta_1 = \\arctan n"}, "preprocessed_expressions": {"expr1": "n", "expr2": "atan(n)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_5", "solution": "Let me solve this step by step.\n\n1) First, recall the Biot-Savart law for a current element idl:\n   dB = (μ₀/4π) * (idl × r̂)/r²\n\n2) In this case:\n   * The current element idl is at origin pointing in z direction: idl = idl k̂\n   * The position vector r from the current element to point P is: r = xi + yj + zk\n   * r = √(x² + y² + z²)\n   * r̂ = (xi + yj + zk)/√(x² + y² + z²)\n\n3) We need to find the cross product idl × r̂:\n   idl × r̂ = idl k̂ × (xi + yj + zk)/r\n   = idl/r * (k̂ × xi + k̂ × yj + k̂ × zk)\n   = idl/r * (-yi + xj + 0k)\n\n4) Therefore:\n   dB = (μ₀/4π) * idl * (-yi + xj + 0k)/(r³)\n\n5) The x-component of dB is:\n   dBₓ = -(μ₀/4π) * idl * y/(r³)\n   = -idl * y/(x² + y² + z²)^(3/2)\n\n6) Looking at the given options and comparing with our result:\n   The answer matches option (b)\n\n\\[\\boxed{-\\frac{iydl}{(x^2 + y^2 + z^2)^{3/2}}}\\]", "final_answers": ["-\\frac{iydl}{(x^2 + y^2 + z^2)^{3/2}}"], "equivalency_results": [{"input_expressions": {"expr1": "-\\frac{iydl}{(x^2 + y^2 + z^2)^{3/2}}", "expr2": "-\\frac{iydl}{(x^2 + y^2 + z^2)^{3/2}}"}, "preprocessed_expressions": {"expr1": "-dl*i*y/(x**2 + y**2 + z**2)**(3/2)", "expr2": "-dl*i*y/(x**2 + y**2 + z**2)**(3/2)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/2_2", "solution": "Let me solve this step by step using Ampère's law.\n\n1) First, let's understand what we know:\n   * Current I flows through a hollow cylindrical conductor\n   * Inner radius = a\n   * Outer radius = b\n   * Current density (J) is uniform in the conductor\n\n2) For a cylindrically symmetric system, Ampère's law states:\n   * B(r) × 2πr = μ₀ × Ienclosed\n\n3) Let's find the current density J:\n   * Area of conductor = π(b² - a²)\n   * J = I/[π(b² - a²)]\n\n4) Now let's solve for each region:\n\n(a) For r < a (inside hollow space):\n   * No current is enclosed\n   * Ienclosed = 0\n   * Therefore, B(r) = 0\n\n(b) For a < r < b (within conductor):\n   * Ienclosed = J × π(r² - a²)\n   * Ienclosed = I(r² - a²)/(b² - a²)\n   * B(r) = (μ₀I/2πr) × (r² - a²)/(b² - a²)\n\n(c) For r > b (outside conductor):\n   * All current is enclosed\n   * Ienclosed = I\n   * B(r) = μ₀I/2πr\n\nThe complete solution can be written as:\n\n\\[ \\boxed{B(r) = \\begin{cases} \n0 & \\text{for } r < a \\\\\n\\frac{\\mu_0 I}{2\\pi r} \\frac{r^2-a^2}{b^2-a^2} & \\text{for } a < r < b \\\\\n\\frac{\\mu_0 I}{2\\pi r} & \\text{for } r > b\n\\end{cases}} \\]", "final_answers": ["B(r) = \\begin{cases} \n0 & \\text{for } r < a \\\\\n\\frac{\\mu_0 I}{2\\pi r} \\frac{r^2-a^2}{b^2-a^2} & \\text{for } a < r < b \\\\\n\\frac{\\mu_0 I}{2\\pi r} & \\text{for } r > b\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "B(r) = \\begin{cases} \n0 & \\text{for } r < a \\\\\n\\frac{\\mu_0 I}{2\\pi r} \\frac{r^2-a^2}{b^2-a^2} & \\text{for } a < r < b \\\\\n\\frac{\\mu_0 I}{2\\pi r} & \\text{for } r > b\n\\end{cases}", "expr2": "\\mathbf{B} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B(r) = \\begin{cases} \n0 & \\text{for } r < a \\\\\n\\frac{\\mu_0 I}{2\\pi r} \\frac{r^2-a^2}{b^2-a^2} & \\text{for } a < r < b \\\\\n\\frac{\\mu_0 I}{2\\pi r} & \\text{for } r > b\n\\end{cases}", "expr2": "\\mathbf{B}(r) = \\frac{\\mu_0 I}{2\\pi r} \\cdot \\frac{r^2 - a^2}{b^2 - a^2} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B(r) = \\begin{cases} \n0 & \\text{for } r < a \\\\\n\\frac{\\mu_0 I}{2\\pi r} \\frac{r^2-a^2}{b^2-a^2} & \\text{for } a < r < b \\\\\n\\frac{\\mu_0 I}{2\\pi r} & \\text{for } r > b\n\\end{cases}", "expr2": "\\mathbf{B}(r) = \\frac{\\mu_0 I}{2\\pi r} \\mathbf{e}_\\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_15", "solution": "Let's solve this step by step.\n\n(a) To find E, we'll use Maxwell's equations in vacuum. In Gaussian units:\n\n1) From Faraday's law: $\\nabla \\times \\mathbf{E} = -\\frac{1}{c}\\frac{\\partial \\mathbf{B}}{\\partial t}$\n\n2) The magnetic field is:\n$\\mathbf{B} = B_0 e^{ax} \\sin(ky - \\omega t) \\mathbf{\\hat{e}}_z$\n\n3) Taking the time derivative:\n$\\frac{\\partial \\mathbf{B}}{\\partial t} = B_0 e^{ax} (-\\omega) \\cos(ky - \\omega t) \\mathbf{\\hat{e}}_z$\n\n4) From Faraday's law, integrating:\n$\\mathbf{E} = \\frac{B_0\\omega}{kc} e^{ax} \\sin(ky - \\omega t) \\mathbf{\\hat{e}}_x$\n\n(b) For the speed of propagation:\n\n1) The wave equation must be satisfied:\n$\\nabla^2\\mathbf{B} = \\frac{1}{c^2}\\frac{\\partial^2\\mathbf{B}}{\\partial t^2}$\n\n2) Taking derivatives:\n$\\frac{\\partial^2\\mathbf{B}}{\\partial x^2} = a^2B_0 e^{ax} \\sin(ky - \\omega t) \\mathbf{\\hat{e}}_z$\n$\\frac{\\partial^2\\mathbf{B}}{\\partial y^2} = -k^2B_0 e^{ax} \\sin(ky - \\omega t) \\mathbf{\\hat{e}}_z$\n$\\frac{\\partial^2\\mathbf{B}}{\\partial t^2} = -\\omega^2B_0 e^{ax} \\sin(ky - \\omega t) \\mathbf{\\hat{e}}_z$\n\n3) Substituting into wave equation:\n$(a^2 - k^2)B_0 e^{ax} \\sin(ky - \\omega t) = -\\frac{\\omega^2}{c^2}B_0 e^{ax} \\sin(ky - \\omega t)$\n\n4) The speed of propagation is:\n$v = \\frac{\\omega}{k}$\n\n(c) This field is not physically realizable because:\n\n1) The amplitude grows exponentially with x (violating energy conservation)\n2) The wave equation gives us: $a^2 - k^2 = -\\frac{\\omega^2}{c^2}$\n   This means $a$ must be imaginary for real $k$ and $\\omega$\n\nThe final answer for the speed of propagation is:\n\n\\[\\boxed{v = \\frac{\\omega}{k}}\\]\n\nNote: While we can calculate E and v mathematically, this field configuration is not physically realizable due to the exponential growth in space and the constraints from Maxwell's equations.", "final_answers": ["v = \\frac{\\omega}{k}"], "equivalency_results": [{"input_expressions": {"expr1": "v = \\frac{\\omega}{k}", "expr2": "\\mathbf{E} = -B_0 e^{ax} \\sin w \\, \\mathbf{\\hat{e}}_x - \\frac{ac}{\\omega} B_0 e^{ax} \\cos w \\, \\mathbf{\\hat{e}}_y"}, "preprocessed_expressions": {"expr1": "omega/k", "expr2": "-B*e**(a*x)*(a*c*cos(e*hat*mathbf*w) + omega*sin(e*hat*mathbf*w))/omega"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{\\omega}{k}", "expr2": "v = c"}, "preprocessed_expressions": {"expr1": "omega/k", "expr2": "c"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "v = \\frac{\\omega}{k}", "expr2": "B''_z = B''_0 \\exp \\left( -\\frac{\\omega}{c} \\sqrt{n^2 \\sin^2 \\theta - 1} x \\right) \\exp \\left[ i \\left( \\frac{\\omega}{c} n \\sin \\theta y - \\omega t \\right) \\right]"}, "preprocessed_expressions": {"expr1": "omega/k", "expr2": "B''*exp(i(omega*(-t + n*sin(theta*y)/c)) - omega*x*sqrt(n**2*sin(theta)**2 - 1)/c)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_23", "solution": "Let's solve this step by step.\n\n(a) To find the current density:\n\n1) For free electrons in an EM field, the equation of motion is:\n   $m\\frac{d\\vec{v}}{dt} = -e\\vec{E}$\n\n2) For a wave with angular frequency ω, $\\vec{E} = \\vec{E_0}e^{-i\\omega t}$\n\n3) The velocity will have the same time dependence:\n   $\\vec{v} = \\vec{v_0}e^{-i\\omega t}$\n\n4) Substituting:\n   $-im\\omega\\vec{v_0} = -e\\vec{E_0}$\n   $\\vec{v_0} = \\frac{e}{im\\omega}\\vec{E_0}$\n\n5) Current density is:\n   $\\vec{J} = -n_e e\\vec{v} = \\frac{n_e e^2}{im\\omega}\\vec{E}$\n\n(b) Maxwell's equations for waves:\n\n1) $\\nabla \\times \\vec{E} = -\\frac{\\partial \\vec{B}}{\\partial t} = i\\omega\\vec{B}$\n\n2) $\\nabla \\times \\vec{B} = \\mu_0\\vec{J} + \\mu_0\\epsilon_0\\frac{\\partial \\vec{E}}{\\partial t}$\n\n3) Substituting $\\vec{J}$ from part (a):\n   $\\nabla \\times \\vec{B} = \\mu_0\\frac{n_e e^2}{im\\omega}\\vec{E} - i\\omega\\mu_0\\epsilon_0\\vec{E}$\n\n4) Taking curl of first equation and using second:\n   $\\nabla^2\\vec{E} + \\omega^2\\mu_0\\epsilon_0\\vec{E} - \\frac{\\mu_0n_e e^2}{m}\\vec{E} = 0$\n\n(c) For wave propagation:\n\n1) Let $\\vec{E} = \\vec{E_0}e^{ikx}$\n\n2) Substituting in the wave equation:\n   $-k^2 + \\omega^2\\mu_0\\epsilon_0 - \\frac{\\mu_0n_e e^2}{m} = 0$\n\n3) For real k (propagating waves), we need:\n   $\\omega^2\\mu_0\\epsilon_0 > \\frac{\\mu_0n_e e^2}{m}$\n\n4) Define plasma frequency $\\omega_p^2 = \\frac{n_e e^2}{m\\epsilon_0}$\n\n5) The condition becomes:\n   $\\omega > \\omega_p$\n\nThe final answer for the propagation condition is:\n\n\\[\\boxed{\\omega > \\omega_p = \\sqrt{\\frac{n_e e^2}{m\\epsilon_0}}}\\]", "final_answers": ["\\omega > \\omega_p = \\sqrt{\\frac{n_e e^2}{m\\epsilon_0}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\omega > \\omega_p = \\sqrt{\\frac{n_e e^2}{m\\epsilon_0}}", "expr2": "\\mathbf{j} = i \\frac{n_e e^2 \\mathbf{E}}{m_e \\omega}"}, "preprocessed_expressions": {"expr1": "sqrt(e**2*n/(epsilon*m))", "expr2": "E*e**2*i*mathbf*n/(m*omega)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega > \\omega_p = \\sqrt{\\frac{n_e e^2}{m\\epsilon_0}}", "expr2": "\\nabla^2 \\mathbf{E_0} + \\frac{\\omega^2}{c^2} \\left(1 - \\frac{\\omega_P^2}{\\omega^2}\\right) \\mathbf{E_0} = 0"}, "preprocessed_expressions": {"expr1": "sqrt(e**2*n/(epsilon*m))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega > \\omega_p = \\sqrt{\\frac{n_e e^2}{m\\epsilon_0}}", "expr2": "\\omega^2 > \\omega_P^2"}, "preprocessed_expressions": {"expr1": "sqrt(e**2*n/(epsilon*m))", "expr2": "False"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "BooleanAtom not allowed in this context."}], "accuracy": 1.0}
{"id": "electro/4_24", "solution": "Let's solve this step by step.\n\n(a) First, let's write down Maxwell's equations in the medium:\n\n1) Gauss's Law: ∇⋅E = ρ/ε₀\n2) Gauss's Law for Magnetism: ∇⋅B = 0\n3) Faraday's Law: ∇×E = -∂B/∂t\n4) Ampère's Law: ∇×B = μ₀J + μ₀ε₀∂E/∂t\n\nThe current density J is related to the electron motion by J = -nev, where v is the electron velocity.\n\n(b) Let's solve this step by step:\n\n1) For the given E field, electrons will oscillate in y-direction. Neglecting magnetic force:\n   m(dv/dt) = -eE\n\n2) With E = E₀e^(i(Kz-ωt)), the velocity will be:\n   v = (-ieE₀/mω)e^(i(Kz-ωt))\n\n3) Current density:\n   J = -nev = (ine²E₀/mω)e^(i(Kz-ωt))\n\n4) Substituting into Ampère's Law:\n   ∇×B = μ₀(ine²E₀/mω)e^(i(Kz-ωt)) + μ₀ε₀(-iωE₀)e^(i(Kz-ωt))\n\n5) For wave propagation, we need:\n   K² = μ₀ε₀ω² - μ₀ne²/m\n\n6) For real K (propagating wave), we need:\n   ω² > ne²/mε₀\n\n(c) For the magnetic field:\n\n1) From Faraday's law, B must be in x-direction:\n   B_x = (K/ω)E₀e^(i(Kz-ωt))\n\n2) The wavelength λ = 2π/K where:\n   K = (ω/c)√(1 - ωₚ²/ω²)\n   where ωₚ = √(ne²/mε₀) is the plasma frequency\n\nThe final answer for wavelength is:\n\n\\[\\boxed{\\lambda = \\frac{2\\pi c}{\\omega\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}}}\\]\n\nAnd for magnetic field:\n\n\\[\\boxed{B_x = \\frac{E_0}{c}\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}e^{i(Kz-\\omega t)}}\\]", "final_answers": ["\\lambda = \\frac{2\\pi c}{\\omega\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}", "B_x = \\frac{E_0}{c}\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}e^{i(Kz-\\omega t)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\lambda = \\frac{2\\pi c}{\\omega\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}", "expr2": "\\mathbf{B} = -\\frac{K}{\\omega} E_0 e^{i(Kz-\\omega t)} \\mathbf{e}_x"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '}' at '<EOF>'\n\\frac{2\\pi c}{\\omega\\sqrt{1 - \\frac{ne^2}{m\\varepsilon\\omega^2}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "B_x = \\frac{E_0}{c}\\sqrt{1 - \\frac{ne^2}{m\\varepsilon_0\\omega^2}}e^{i(Kz-\\omega t)}", "expr2": "\\mathbf{B} = -\\frac{K}{\\omega} E_0 e^{i(Kz-\\omega t)} \\mathbf{e}_x"}, "preprocessed_expressions": {"expr1": "E*e**i(K*z - omega*t)*sqrt(-e**2*n/(m*omega**2*varepsilon) + 1)/c", "expr2": "-E*K*e**(i(K*z - omega*t) + 1)*mathbf/omega"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/4_9", "solution": "Let's solve this step by step.\n\n1) First, let's recall that the law of charge-current conservation in real space and time is:\n   ∂ρ/∂t + ∇⋅J = 0\n   \n   Taking the Fourier transform:\n   -iωρ_ω + ∇⋅J_ω = 0\n\n2) For the far zone (r → ∞), we can use the approximation:\n   |r - r'| ≈ r - r'⋅r̂\n   where r̂ is the unit vector in the direction of r.\n\n3) The exponential term becomes:\n   e^(iK|r-r'|) ≈ e^(iKr)e^(-iKr'⋅r̂)\n\n4) For the fields, we use:\n   B_ω = ∇ × A_ω\n   E_ω = iωA_ω - ∇φ_ω\n\n5) In the far zone:\n   B_ω(r) ≈ iK(r̂ × A_ω)\n   E_ω(r) ≈ iωA_ω\n\n6) For the given current density J_ω(r) = rf(r):\n   Due to spherical symmetry, the vector potential will be in the same direction.\n   \n7) Substituting into the vector potential formula:\n   A_ω(r) = (μ₀/4π)e^(iKr)/r ∫ r'f(r')e^(-iKr'⋅r̂)d³r'\n\n8) The far-zone fields become:\n   B_ω(r) = (iKμ₀/4π)(r̂ × ∫ r'f(r')e^(-iKr'⋅r̂)d³r')(e^(iKr)/r)\n   E_ω(r) = (iωμ₀/4π)(∫ r'f(r')e^(-iKr'⋅r̂)d³r')(e^(iKr)/r)\n\nThe final answer for the charge-current conservation and far-zone fields is:\n\n\\[\\boxed{\n\\begin{align*}\n&-i\\omega\\rho_\\omega + \\nabla\\cdot\\mathbf{J}_\\omega = 0 \\\\\n&\\mathbf{B}_\\omega(\\mathbf{r}) = \\frac{iK\\mu_0}{4\\pi}\\hat{\\mathbf{r}} \\times \\int \\mathbf{J}_\\omega(\\mathbf{r'})e^{-iK\\hat{\\mathbf{r}}\\cdot\\mathbf{r'}}\\,d^3\\mathbf{r'} \\frac{e^{iKr}}{r} \\\\\n&\\mathbf{E}_\\omega(\\mathbf{r}) = \\frac{i\\omega\\mu_0}{4\\pi}\\int \\mathbf{J}_\\omega(\\mathbf{r'})e^{-iK\\hat{\\mathbf{r}}\\cdot\\mathbf{r'}}\\,d^3\\mathbf{r'} \\frac{e^{iKr}}{r}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&-i\\omega\\rho_\\omega + \\nabla\\cdot\\mathbf{J}_\\omega = 0 \\\\\n&\\mathbf{B}_\\omega(\\mathbf{r}) = \\frac{iK\\mu_0}{4\\pi}\\hat{\\mathbf{r}} \\times \\int \\mathbf{J}_\\omega(\\mathbf{r'})e^{-iK\\hat{\\mathbf{r}}\\cdot\\mathbf{r'}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&-i\\omega\\rho_\\omega + \\nabla\\cdot\\mathbf{J}_\\omega = 0 \\\\\n&\\mathbf{B}_\\omega(\\mathbf{r}) = \\frac{iK\\mu_0}{4\\pi}\\hat{\\mathbf{r}} \\times \\int \\mathbf{J}_\\omega(\\mathbf{r'})e^{-iK\\hat{\\mathbf{r}}\\cdot\\mathbf{r'}", "expr2": "\\nabla \\cdot \\mathbf{J}_\\omega - i\\omega \\rho_\\omega = 0"}, "preprocessed_expressions": {"expr1": "J*K*e**2*g*hat*i*m*mathbf**2*mu*r*x*a(mathbf*r')/(4*pi)", "expr2": "0"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/4_7", "solution": "Let's solve this step by step by analyzing the phase relationships and interference patterns.\n\n1) First, let's understand the setup:\n   * Sources A, B, C, D are coherent and identical\n   * Sources are separated by λ/2\n   * R₁ and R₂ are at equal and large distances from B\n\n2) For part (a) - All sources active:\n   * For R₁: Waves from A and C are in phase (path difference = λ)\n   * For R₁: B and D are in phase (path difference = λ)\n   * For R₂: A and C are in phase\n   * For R₂: B and D are in phase\n   * Due to symmetry, both receivers get equal signals\n\n3) For part (b) - Source B off:\n   * For R₁: A and C remain in phase\n   * For R₁: Only D contributes separately\n   * For R₂: Similar situation\n   * Due to symmetry, signals are equal\n\n4) For part (c) - Source D off:\n   * For R₁: A and C are in phase\n   * For R₁: B contributes separately\n   * For R₂: Similar situation\n   * Due to symmetry, signals are equal\n\n5) For part (d):\n   * When either B or D is turned off, the intensity changes\n   * Due to the symmetrical arrangement, both receivers see the same change\n   * Neither receiver can distinguish which source was turned off\n\nThe final answer is:\n\\[\\boxed{\n\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}", "expr2": "R_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}", "expr2": "I_1 = I_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}", "expr2": "R_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&(a)\\text{ Equal signals} \\\\\n&(b)\\text{ Equal signals} \\\\\n&(c)\\text{ Equal signals} \\\\\n&(d)\\text{ Neither receiver}\n\\end{align*}", "expr2": "R_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_22", "solution": "Let me solve this step by step.\n\n(a) For the electric field:\n\n1) Due to the spherical symmetry of a uniformly charged sphere, the electric field from a complete sphere at its center would be zero.\n\n2) Therefore, we only need to consider the contribution from the missing charge in the hollow region, as this breaks the symmetry.\n\n3) The hollow region can be treated as a sphere of charge density -ρ (negative because it represents missing charge).\n\n4) For a uniformly charged sphere, the field at a point distance r from its center is:\n   E = (1/4πε₀)(ρV/r²), where V is the volume of the sphere\n\n5) The volume of the hollow region is V = (4/3)πR₂³\n\n6) Therefore, the field at the center of the hollow (which is distance a from the center of the main sphere) is:\n   E = (1/4πε₀)(-ρ)(4/3)πR₂³/a²\n\n7) Simplifying:\n   E = -ρR₂³/3ε₀a²\n\nThe field points toward the hollow region.\n\n\\[ \\boxed{E = \\frac{\\rho R_2^3}{3\\epsilon_0 a^2}} \\]\n\n(b) For the potential:\n\n1) The potential can be found by integrating the field:\n   φ = -∫E·dr\n\n2) For a uniformly charged sphere, the potential at a point distance r from its center is:\n   φ = (1/4πε₀)(ρV/r)\n\n3) Again, we only consider the contribution from the missing charge:\n   φ = (1/4πε₀)(-ρ)(4/3)πR₂³/a\n\n4) Simplifying:\n   φ = -ρR₂³/3ε₀a\n\n\\[ \\boxed{\\phi = -\\frac{\\rho R_2^3}{3\\epsilon_0 a}} \\]\n\nNote: The direction of E is toward the hollow region because the missing positive charge creates an effective negative charge, attracting positive test charges toward it.", "final_answers": ["E = \\frac{\\rho R_2^3}{3\\epsilon_0 a^2}", "\\phi = -\\frac{\\rho R_2^3}{3\\epsilon_0 a}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\frac{\\rho R_2^3}{3\\epsilon_0 a^2}", "expr2": "\\frac{\\rho}{3 \\varepsilon_0} \\mathbf{a}"}, "preprocessed_expressions": {"expr1": "R**3*rho/(3*a**2*epsilon)", "expr2": "a*mathbf*rho/(3*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{\\rho R_2^3}{3\\epsilon_0 a^2}", "expr2": "\\frac{\\rho}{6\\varepsilon_0} [3(R_1^2 - R_2^2) - a^2]"}, "preprocessed_expressions": {"expr1": "R**3*rho/(3*a**2*epsilon)", "expr2": "-a**2*rho/(6*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\phi = -\\frac{\\rho R_2^3}{3\\epsilon_0 a}", "expr2": "\\frac{\\rho}{3 \\varepsilon_0} \\mathbf{a}"}, "preprocessed_expressions": {"expr1": "-R**3*rho/(3*a*epsilon)", "expr2": "a*mathbf*rho/(3*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\phi = -\\frac{\\rho R_2^3}{3\\epsilon_0 a}", "expr2": "\\frac{\\rho}{6\\varepsilon_0} [3(R_1^2 - R_2^2) - a^2]"}, "preprocessed_expressions": {"expr1": "-R**3*rho/(3*a*epsilon)", "expr2": "-a**2*rho/(6*varepsilon)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_12", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have an infinite beam with uniform charge density\n   * The charge per unit length is q\n   * We're looking at a point at radius r < R\n   * All ions move with velocity v\n\n2) Due to the symmetry of the problem, we can use Gauss's law.\n   * The electric field at radius r only depends on the charge enclosed within radius r\n   * The force will be purely radial due to symmetry\n\n3) Let's find the charge density ρ:\n   * Total charge per unit length = q = ρπR²\n   * Therefore, ρ = q/(πR²)\n\n4) Using Gauss's law to find the electric field at radius r:\n   * E(r) = (λenclosed)/(2πε₀r)\n   * λenclosed = ρπr² = q(r/R)²\n\n5) Therefore, the electric field is:\n   * E(r) = [q(r/R)²]/(2πε₀r)\n   * E(r) = qr/(2πε₀R²)\n\n6) The force on a single ion with charge e is:\n   * F = eE(r)\n   * F = eqr/(2πε₀R²)\n\n7) However, we need to consider the magnetic force:\n   * Moving charges create magnetic fields\n   * The magnetic force partially cancels the electric force\n   * The magnetic force factor is v²/c²\n\n8) The net force is:\n   * Fnet = F(1 - v²/c²)\n   * Fnet = [eqr/(2πε₀R²)](1 - v²/c²)\n\nTherefore, the final answer is:\n\n\\[ \\boxed{F = \\frac{eqr}{2\\pi\\epsilon_0R^2}(1-\\frac{v^2}{c^2})} \\]\n\nwhere:\n- e is the charge of a single ion\n- q is the charge per unit length\n- r is the radial position\n- R is the beam radius\n- v is the ion velocity\n- c is the speed of light\n- ε₀ is the permittivity of free space", "final_answers": ["F = \\frac{eqr}{2\\pi\\epsilon_0R^2}(1-\\frac{v^2}{c^2})"], "equivalency_results": [{"input_expressions": {"expr1": "F = \\frac{eqr}{2\\pi\\epsilon_0R^2}(1-\\frac{v^2}{c^2})", "expr2": "F = \\frac{Qqr}{2\\pi \\epsilon_0 R^2 \\gamma^2} e_r"}, "preprocessed_expressions": {"expr1": "e*q*r*(c**2 - v**2)/(2*c**2*epsilonR**2*pi)", "expr2": "Q*e*q*r/(2*R**2*epsilon*gamma**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_15", "solution": "Let me solve this step by step.\n\n1) When a conducting sphere moves through a magnetic field, the free charges in the conductor experience a Lorentz force. This causes charge separation until the resulting electric field balances the magnetic force.\n\n2) For a conductor moving with velocity v in a magnetic field B, the charges experience an effective electric field:\n   $\\mathbf{E}' = \\mathbf{E} + \\mathbf{v} × \\mathbf{B}$\n\n3) In the conductor's rest frame, the total effective electric field must be zero (since it's a perfect conductor):\n   $\\mathbf{E} + \\mathbf{v} × \\mathbf{B} = 0$\n\n4) Therefore:\n   $\\mathbf{E} = -\\mathbf{v} × \\mathbf{B}$\n\n5) Given:\n   $\\mathbf{v} = v\\mathbf{e}_x$\n   $\\mathbf{B} = B\\mathbf{e}_y$\n\n6) Computing the cross product:\n   $\\mathbf{v} × \\mathbf{B} = v B\\mathbf{e}_z$\n\n7) Therefore:\n   $\\mathbf{E} = -vB\\mathbf{e}_z$\n\n8) This electric field must be produced by surface charges on the sphere. For a conducting sphere, the surface charge density σ is related to the external electric field by:\n   $\\sigma = \\epsilon_0 E_n = \\epsilon_0 E \\cos\\theta$\n\n9) Where θ is the angle from the z-axis, and $E_n$ is the normal component of the electric field.\n\n10) Therefore:\n    $\\sigma = -\\epsilon_0 vB \\cos\\theta$\n\nThis is the surface charge density to lowest order in v/c.\n\nThe final answer in boxed form:\n\n\\[\\boxed{\\sigma = -\\epsilon_0 vB \\cos\\theta}\\]\n\nThis shows that the charge density varies as cosθ, being positive on one hemisphere and negative on the other, with maximum magnitude at the poles (θ = 0, π) and zero at the equator (θ = π/2).", "final_answers": ["\\sigma = -\\epsilon_0 vB \\cos\\theta"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma = -\\epsilon_0 vB \\cos\\theta", "expr2": "\\sigma = 3\\varepsilon_0 v B \\cos \\theta"}, "preprocessed_expressions": {"expr1": "-B*epsilon*v*cos(theta)", "expr2": "3*B*v*varepsilon*cos(theta)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_25", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we have:\n   * Two capacitors in series with a movable center section\n   * Total separation distance = a\n   * Center section length = b\n   * Area of plates = A\n\n2) For a parallel plate capacitor, C = εA/d where d is the separation distance.\n   Let's call the upper and lower gaps x and (a-b-x) respectively.\n\n3) For the upper capacitor:\n   C₁ = εA/x\n\n4) For the lower capacitor:\n   C₂ = εA/(a-b-x)\n\n5) For capacitors in series:\n   1/C = 1/C₁ + 1/C₂\n\n6) Substituting:\n   1/C = x/(εA) + (a-b-x)/(εA)\n   1/C = [x + (a-b-x)]/(εA)\n   1/C = (a-b)/(εA)\n   C = εA/(a-b)\n\n7) Note that x cancels out, showing the total capacitance is independent of the center section's position.\n\n8) For energy change:\n   * Initial energy: E₁ = ½CV₀² = ½[εA/(a-b)]V₀²\n   * Final energy (center removed): E₂ = ½[εA/a]V₀²\n   * Change in energy: ΔE = E₂ - E₁\n   * ΔE = ½εAV₀²[1/a - 1/(a-b)]\n   * ΔE = ½εAV₀²[(a-b-a)/a(a-b)]\n   * ΔE = -½εAV₀²[b/a(a-b)]\n\n\\[\\boxed{\\Delta E = -\\frac{\\epsilon A V_0^2 b}{2a(a-b)}}\\]", "final_answers": ["\\Delta E = -\\frac{\\epsilon A V_0^2 b}{2a(a-b)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\frac{\\epsilon A V_0^2 b}{2a(a-b)}", "expr2": "C = \\frac{A \\varepsilon_0}{a-b}"}, "preprocessed_expressions": {"expr1": "-A*V**2*b*epsilon/(2*a(a - b))", "expr2": "A*varepsilon/(a - b)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E = -\\frac{\\epsilon A V_0^2 b}{2a(a-b)}", "expr2": "W - W' = \\frac{A\\varepsilon_0V_0^2}{2(a-b)} \\frac{b}{a}"}, "preprocessed_expressions": {"expr1": "-A*V**2*b*epsilon/(2*a(a - b))", "expr2": "A*b*varepsilonV**2/(2*a*(a - b))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_23", "solution": "Let's solve this step by step.\n\n(a) For guided plane waves independent of y:\n\n1) The wave equation in the waveguide must satisfy boundary conditions at z=0 and z=a.\n2) The general solution will have the form:\n   E = E₀sin(mπz/a)exp[i(kx-ωt)]\n   where m is an integer (mode number)\n\n3) The dispersion relation is:\n   k² + (mπ/a)² = n²ω²/c²\n\n4) For a given wavelength λ:\n   k = 2π/λ\n\n5) Therefore:\n   ω = (c/n)√[(2π/λ)² + (mπ/a)²]\n\n6) Phase velocity:\n   vₚ = ω/k = c/n√[1 + (mλ/2a)²]\n\n7) Group velocity:\n   vg = dω/dk = (c/n)/√[1 + (mλ/2a)²]\n\n(b) For Čerenkov radiation:\n\n1) The charged wire moving with velocity v > c/n creates a shock wave.\n2) The electric field varies sinusoidally with time.\n3) The principal frequency is:\n   f₀ = v/a\n4) The spectrum consists of harmonics of f₀.\n\n(c) For the principal frequency:\n\n1) The wavelength λ is related to v by:\n   λ = v/f₀ = a\n\n2) This corresponds to the m=1 mode in part (a).\n3) The phase velocity matches the particle velocity v.\n\nThe final answer for the principal frequency is:\n\\[\\boxed{f_0 = \\frac{v}{a}}\\]\n\nThis mode represents the fundamental Čerenkov radiation in the waveguide, where the wavelength equals the guide width and the phase velocity matches the particle velocity.", "final_answers": ["f_0 = \\frac{v}{a}"], "equivalency_results": [{"input_expressions": {"expr1": "f_0 = \\frac{v}{a}", "expr2": "\\omega_m = \\frac{c}{n} \\sqrt{\\left( \\frac{2\\pi}{\\lambda} \\right)^2 + \\left( \\frac{m \\pi}{a} \\right)^2 }"}, "preprocessed_expressions": {"expr1": "v/a", "expr2": "c*sqrt(pi**2*(4/lambda**2 + m**2/a**2))/n"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f_0 = \\frac{v}{a}", "expr2": "v_p = \\frac{\\omega_m}{k_x} = \\frac{c}{n} \\left[ 1 + \\left( \\frac{m \\lambda}{2a} \\right)^2 \\right]^{1/2}"}, "preprocessed_expressions": {"expr1": "v/a", "expr2": "c*sqrt(4 + lambda**2*m**2/a**2)/(2*n)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f_0 = \\frac{v}{a}", "expr2": "v_g = \\frac{d\\omega_m}{dk_x} = \\frac{c}{n} \\left[ 1 + \\left( \\frac{m \\lambda}{2a} \\right)^2 \\right]^{-1/2}"}, "preprocessed_expressions": {"expr1": "v/a", "expr2": "2*c/(n*sqrt(4 + lambda**2*m**2/a**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f_0 = \\frac{v}{a}", "expr2": "E(t) = \\frac{A}{t}"}, "preprocessed_expressions": {"expr1": "v/a", "expr2": "A/t"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f_0 = \\frac{v}{a}", "expr2": "\\omega_m = \\frac{m \\pi}{a} \\left( \\frac{n^2}{c^2} - \\frac{1}{v^2} \\right)^{-1/2}"}, "preprocessed_expressions": {"expr1": "v/a", "expr2": "m*pi/(a*sqrt(-1/v**2 + n**2/c**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_13", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * Spherical volume with radius R\n   * Total charge Q distributed uniformly\n   * Need to find E and V for r < R and r > R\n\n2) The charge density ρ is uniform and can be calculated:\n   * ρ = Q/(4/3)πR³\n\n3) For r > R (outside the sphere):\n   * By Gauss's law, the field is same as if all charge were concentrated at center\n   * E(r) = kQ/r² (pointing radially outward)\n   * V(r) = kQ/r\n\n4) For r < R (inside the sphere):\n   * Using Gauss's law, only charge within radius r contributes\n   * Enclosed charge = ρ(4/3)πr³ = Q(r³/R³)\n   * E(r) = kQ(r/R³)\n   * V(r) = kQ(3R² - r²)/2R³\n\n5) The complete solution is:\n\nElectric field:\nE(r) = kQ(r/R³) for r ≤ R\nE(r) = kQ/r² for r > R\n\nPotential:\nV(r) = kQ(3R² - r²)/2R³ for r ≤ R\nV(r) = kQ/r for r > R\n\nThe final answer in boxed format:\n\n\\[\\boxed{E(r) = \\begin{cases} \n\\frac{kQr}{R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r^2} & \\text{for } r > R\n\\end{cases}, \\quad\nV(r) = \\begin{cases}\n\\frac{kQ(3R^2 - r^2)}{2R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r} & \\text{for } r > R\n\\end{cases}}\\]", "final_answers": ["E(r) = \\begin{cases} \n\\frac{kQr}{R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r^2} & \\text{for } r > R\n\\end{cases}, \\quad\nV(r) = \\begin{cases}\n\\frac{kQ(3R^2 - r^2)}{2R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r} & \\text{for } r > R\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kQr}{R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r^2} & \\text{for } r > R\n\\end{cases}, \\quad\nV(r) = \\begin{cases}\n\\frac{kQ(3R^2 - r^2)}{2R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r} & \\text{for } r > R\n\\end{cases}", "expr2": "\\mathbf{E}_1 = \\frac{Qr}{4 \\pi \\epsilon_0 R^3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kQr}{R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r^2} & \\text{for } r > R\n\\end{cases}, \\quad\nV(r) = \\begin{cases}\n\\frac{kQ(3R^2 - r^2)}{2R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r} & \\text{for } r > R\n\\end{cases}", "expr2": "\\mathbf{E}_2 = \\frac{Q}{4 \\pi \\epsilon_0 r^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kQr}{R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r^2} & \\text{for } r > R\n\\end{cases}, \\quad\nV(r) = \\begin{cases}\n\\frac{kQ(3R^2 - r^2)}{2R^3} & \\text{for } r \\leq R \\\\\n\\frac{kQ}{r} & \\text{for } r > R\n\\end{cases}", "expr2": "\\varphi_1(r) = \\frac{Q}{8 \\pi \\epsilon_0 R} \\left(3 - \\frac{r^2}{R^2}\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_14", "solution": "Let's solve this step by step.\n\n(a) Finding Electric Field $\\mathbf{E}$:\n\n1) Using Gauss's law: $\\oint \\mathbf{E} \\cdot d\\mathbf{A} = \\frac{Q_{enclosed}}{\\epsilon_0}$\n\n2) Due to spherical symmetry, $\\mathbf{E}$ points radially outward and has constant magnitude on any spherical surface.\n\n3) For r > R (outside sphere):\n   * $Q_{enclosed} = \\frac{4}{3}\\pi R^3\\rho$ (total charge)\n   * $\\mathbf{E} \\cdot d\\mathbf{A} = E(r) \\cdot 4\\pi r^2$\n   * Therefore: $E(r) = \\frac{1}{4\\pi\\epsilon_0}\\frac{4\\pi R^3\\rho}{3r^2} = \\frac{R^3\\rho}{3\\epsilon_0r^2}$\n\n4) For r ≤ R (inside sphere):\n   * $Q_{enclosed} = \\frac{4}{3}\\pi r^3\\rho$ (charge up to radius r)\n   * $\\mathbf{E} \\cdot d\\mathbf{A} = E(r) \\cdot 4\\pi r^2$\n   * Therefore: $E(r) = \\frac{1}{4\\pi\\epsilon_0}\\frac{4\\pi r^3\\rho}{3r^2} = \\frac{\\rho r}{3\\epsilon_0}$\n\n(b) Finding Electric Potential $\\phi$:\n\n1) Using $\\mathbf{E} = -\\nabla\\phi$ and $E_r = -\\frac{d\\phi}{dr}$\n\n2) For r > R:\n   * $\\frac{d\\phi}{dr} = -\\frac{R^3\\rho}{3\\epsilon_0r^2}$\n   * Integrating: $\\phi(r) = \\frac{R^3\\rho}{3\\epsilon_0r} + C$\n   * Using $\\phi(\\infty) = 0$: $C = 0$\n\n3) For r ≤ R:\n   * $\\frac{d\\phi}{dr} = -\\frac{\\rho r}{3\\epsilon_0}$\n   * Integrating: $\\phi(r) = -\\frac{\\rho r^2}{6\\epsilon_0} + D$\n   * At r = R, both expressions must match:\n   * $\\frac{R^3\\rho}{3\\epsilon_0R} = -\\frac{\\rho R^2}{6\\epsilon_0} + D$\n   * Therefore: $D = \\frac{\\rho R^2}{2\\epsilon_0}$\n\nFinal Answer:\n\\[\\boxed{\n\\begin{aligned}\n\\mathbf{E}(r) &= \\begin{cases}\n\\frac{\\rho r}{3\\epsilon_0}\\hat{r} & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r^2}\\hat{r} & \\text{for } r > R\n\\end{cases} \\\\\n\\phi(r) &= \\begin{cases}\n\\frac{\\rho}{2\\epsilon_0}(R^2 - \\frac{r^2}{3}) & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r} & \\text{for } r > R\n\\end{cases}\n\\end{aligned}\n}\\]", "final_answers": ["\\begin{aligned}\n\\mathbf{E}(r) &= \\begin{cases}\n\\frac{\\rho r}{3\\epsilon_0}\\hat{r} & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r^2}\\hat{r} & \\text{for } r > R\n\\end{cases} \\\\\n\\phi(r) &= \\begin{cases}\n\\frac{\\rho}{2\\epsilon_0}(R^2 - \\frac{r^2}{3}) & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r} & \\text{for } r > R\n\\end{cases}\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\n\\mathbf{E}(r) &= \\begin{cases}\n\\frac{\\rho r}{3\\epsilon_0}\\hat{r} & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r^2}\\hat{r} & \\text{for } r > R\n\\end{cases} \\\\\n\\phi(r) &= \\begin{cases}\n\\frac{\\rho}{2\\epsilon_0}(R^2 - \\frac{r^2}{3}) & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r} & \\text{for } r > R\n\\end{cases}\n\\end{aligned}", "expr2": "\\text{(a) Refer to Problem 1013 for the electric field vector } \\mathbf{E}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n\\mathbf{E}(r) &= \\begin{cases}\n\\frac{\\rho r}{3\\epsilon_0}\\hat{r} & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r^2}\\hat{r} & \\text{for } r > R\n\\end{cases} \\\\\n\\phi(r) &= \\begin{cases}\n\\frac{\\rho}{2\\epsilon_0}(R^2 - \\frac{r^2}{3}) & \\text{for } r \\leq R \\\\\n\\frac{R^3\\rho}{3\\epsilon_0r} & \\text{for } r > R\n\\end{cases}\n\\end{aligned}", "expr2": "\\text{(b) For } r > R, \\, \\phi = \\frac{R^3 \\rho}{3 \\epsilon_0 r}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_24", "solution": "Let me solve this step by step.\n\n1) First, let's recall that according to classical electrodynamics, an accelerating charged particle radiates energy. In circular motion, the particle is constantly accelerating (centripetal acceleration), so it will lose energy and spiral inward.\n\n2) The power radiated by an accelerating charge is given by Larmor's formula:\n   P = (2/3)(q²/c³)a²\n   where a is the acceleration.\n\n3) For circular motion:\n   a = v²/r\n   where v is the velocity and r is the radius.\n\n4) In a Coulomb field, the centripetal force provides the acceleration:\n   mv²/r = kq²/r²\n   where k is Coulomb's constant.\n\n5) Solving for v:\n   v = √(kq²/mr)\n\n6) Substituting this into the acceleration:\n   a = kq²/mr²\n\n7) The power radiated is then:\n   P = (2/3)(q²/c³)(kq²/mr²)²\n\n8) The energy of the orbit is:\n   E = -kq²/2r\n\n9) The rate of energy loss equals the power radiated:\n   dE/dt = P\n\n10) This gives us:\n    d/dt(-kq²/2r) = (2/3)(q²/c³)(kq²/mr²)²\n\n11) Solving for dr/dt:\n    dr/dt = -(2/3)(kq⁴/m²c³r²)\n\n12) Integrating from R to R/2:\n    ∫(r²dr) = -(2/3)(kq⁴/m²c³)∫dt\n\n13) [r³/3]ᴿᴿ/₂ = -(2/3)(kq⁴/m²c³)t\n\n14) The final time is:\n    t = (m²c³R³/kq⁴)\n\nThe final answer is:\n\n\\[ \\boxed{t = \\frac{m^2c^3R^3}{kq^4}} \\]\n\nThis is the time it takes for the particle to spiral from radius R to R/2.", "final_answers": ["t = \\frac{m^2c^3R^3}{kq^4}"], "equivalency_results": [{"input_expressions": {"expr1": "t = \\frac{m^2c^3R^3}{kq^4}", "expr2": "\\tau = \\frac{7\\pi^2 \\varepsilon_0^2 c^3 m^2 R^3}{2q^4}"}, "preprocessed_expressions": {"expr1": "R**3*c**3*m**2/(k*q**4)", "expr2": "7*R**3*c**3*m**2*pi**2*varepsilon**2/(2*q**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_40", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when we bring the charge q from infinity to the center:\n   * Initially, the conducting shell is neutral\n   * When we bring the charge q, it will induce charges on the shell\n   * The inner surface will have -q charge\n   * The outer surface will have +q charge\n\n2) The work done will be equal to the change in electrostatic potential energy:\n   * W = qV(0) - qV(∞)\n   * Where V(0) is the potential at the center and V(∞) = 0\n\n3) To find V(0), we need to consider:\n   * The potential due to the induced charge on the inner surface (-q)\n   * The potential due to the induced charge on the outer surface (+q)\n\n4) For a spherical shell:\n   * Inside the shell (r < R): V_inner = -q/(4πε₀R)\n   * Outside the shell (r > R): V_outer = +q/(4πε₀r)\n\n5) At the center (r = 0):\n   * Total potential = V_inner + V_outer\n   * V(0) = -q/(4πε₀R) + q/(4πε₀R)\n   * V(0) = 0\n\n6) Therefore:\n   * W = q[V(0) - V(∞)]\n   * W = q[0 - 0]\n   * W = 0\n\nThe work required is zero because the induced charges on the shell create a potential that exactly cancels out the work needed to bring the charge from infinity.\n\n\\[ \\boxed{W = 0} \\]", "final_answers": ["W = 0"], "equivalency_results": [{"input_expressions": {"expr1": "W = 0", "expr2": "\\frac{q^2}{8 \\pi \\varepsilon_0} \\left( \\frac{1}{R} - \\frac{1}{R+t} \\right)"}, "preprocessed_expressions": {"expr1": "0", "expr2": "q**2*t/(8*R*pi*varepsilon*(R + t))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_47", "solution": "Let me solve this step by step.\n\n1) This problem can be solved using the method of image charges. When a point charge is placed near a dielectric interface, it induces polarization in the dielectric medium.\n\n2) The effect of this polarization can be represented by an image charge inside the dielectric.\n\n3) For a dielectric-vacuum interface, the image charge q' is given by:\n   q' = q(K-1)/(K+1)\n   where q is the original charge and K is the dielectric constant\n\n4) The image charge is located at a distance x on the other side of the interface.\n\n5) The potential energy U is given by:\n   U = (1/4πε₀)(qq'/2x)\n   where ε₀ is the permittivity of free space\n\n6) Substituting the expression for q':\n   U = (1/4πε₀)(q²(K-1)/2x(K+1))\n\n7) This represents the potential energy of the point charge due to its interaction with the induced polarization in the dielectric medium.\n\nThe final answer is:\n\n\\[ \\boxed{U = \\frac{q^2(K-1)}{8\\pi\\epsilon_0x(K+1)}} \\]", "final_answers": ["U = \\frac{q^2(K-1)}{8\\pi\\epsilon_0x(K+1)}"], "equivalency_results": [{"input_expressions": {"expr1": "U = \\frac{q^2(K-1)}{8\\pi\\epsilon_0x(K+1)}", "expr2": "W = \\frac{(1-K)q^2}{16 \\pi (1 + K) \\epsilon_0 x}"}, "preprocessed_expressions": {"expr1": "q**2*(K - 1)/(8*pi*epsilonx(K + 1))", "expr2": "q**2*(1 - K)/(16*epsilon*x*pi(K + 1))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_78", "solution": "Let me solve this step by step.\n\n1) This is a problem involving image charges at a dielectric boundary. Due to the presence of the dielectric interface, we need to consider the effect of image charges.\n\n2) For a point charge near a dielectric boundary, the image charge method gives us:\n   * For the charge in medium 1 (z > 0), its image in medium 2 has a magnitude of q' = q(ε₁-ε₂)/(ε₁+ε₂)\n   * For the charge in medium 2 (z < 0), its image in medium 1 has a magnitude of q' = q(ε₂-ε₁)/(ε₁+ε₂)\n\n3) In our case:\n   * The -q charge at (0,0,a) is in medium 1 (z > 0)\n   * The +q charge at (0,0,-a) is in medium 2 (z < 0)\n\n4) The force on -q will be due to:\n   * The real +q charge at (0,0,-a)\n   * The image of the +q charge, which appears at (0,0,a)\n   * The image of -q itself, which appears at (0,0,-a)\n\n5) Let's calculate each force component:\n   * Force from real +q: F₁ = -kq²/(4a)² (upward)\n   * Force from image of +q: F₂ = -kq²(ε₂-ε₁)/(ε₁+ε₂)/(4a)² (upward)\n   * Force from image of -q: F₃ = kq²(ε₁-ε₂)/(ε₁+ε₂)/(4a)² (downward)\n\n6) The total force is:\n   F_total = F₁ + F₂ + F₃\n   = -kq²/(4a)² - kq²(ε₂-ε₁)/(ε₁+ε₂)/(4a)² - kq²(ε₁-ε₂)/(ε₁+ε₂)/(4a)²\n   = -kq²/(4a)²\n\n7) To keep the charge at rest, we must apply a force equal and opposite to this.\n\nThe final answer is:\n\n\\[\\boxed{F = \\frac{kq^2}{16a^2}\\hat{z}}\\]\n\nNote: The force is in the positive z direction (upward) to counteract the net downward force from the charge configuration.", "final_answers": ["F = \\frac{kq^2}{16a^2}\\hat{z}"], "equivalency_results": [{"input_expressions": {"expr1": "F = \\frac{kq^2}{16a^2}\\hat{z}", "expr2": "-\\frac{q^2}{4\\varepsilon_1 a^2}"}, "preprocessed_expressions": {"expr1": "hat*k*q**2*z/(16*a**2)", "expr2": "-q**2/(4*a**2*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_85", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens:\n   * When a point charge Q is placed between conducting plates, it induces charges on both plates\n   * Due to the wire connection, the plates form a single conductor at the same potential\n   * The induced charges will distribute in a way to maintain this equipotential condition\n\n2) The charge distribution on the plates can be found using the method of images:\n   * The actual charge Q at height D/2\n   * An image charge -Q at height -D/2 (below the lower plate)\n   * An image charge -Q at height 3D/2 (above the upper plate)\n   * This series continues infinitely\n\n3) The surface charge density at any point on the lower plate is given by:\n   * σ(x) = -ε₀ Ez at z = 0\n   * Where Ez is the vertical component of the electric field at the surface\n\n4) The electric field at any point on the lower plate is the sum of contributions from:\n   * The original charge Q\n   * All image charges\n\n5) For a point at distance x from the center on the lower plate:\n   * Ez from the real charge Q at (0, D/2): Ez = QD/(4πε₀(x² + D²/4)^(3/2))\n   * The infinite series of image charges gives similar terms\n\n6) After summing the infinite series, the surface charge density is:\n\n\\[\\boxed{\\sigma(x) = -\\frac{QD}{2\\pi(x^2 + D^2/4)^{3/2}}}\\]\n\nThis expression gives the surface charge density on the lower plate as a function of distance x from the center, the plate separation D, and the point charge Q.", "final_answers": ["\\sigma(x) = -\\frac{QD}{2\\pi(x^2 + D^2/4)^{3/2}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma(x) = -\\frac{QD}{2\\pi(x^2 + D^2/4)^{3/2}}", "expr2": "\\sigma(x) = -\\frac{QD}{4\\pi} \\sum_{n=0}^{\\infty} \\frac{(-1)^n (2n+1)}{[(n+\\frac{1}{2})^2 D^2 + x^2]^{3/2}}"}, "preprocessed_expressions": {"expr1": "-D*Q/(2*pi(D**2/4 + x**2)**(3/2))", "expr2": "-D*Q/(4*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_71", "solution": "Let's solve this step by step.\n\n(a) First, let's understand what we're looking for:\n1) We need to find the equation for the outer sphere relative to the center of the inner sphere\n2) The outer sphere's center is displaced by distance c from the inner sphere's center\n\nUsing the law of cosines for a triangle formed by:\n- The center of inner sphere (origin)\n- A point on the outer sphere (r,θ)\n- The center of outer sphere (c,0)\n\nThe equation is:\nr² = b² + c² - 2rc cos(π-θ)\nr² = b² + c² + 2rc cos(θ)\n\nSince c is small:\n- We can ignore c²\n- We can write r = b + δr where δr is small\n- Substitute and keep only first-order terms:\n(b + δr)² ≈ b² + 2bδr = b² + 2bc cos(θ)\n\nTherefore:\nδr = c cos(θ)\nr(θ) = b + c cos(θ)\n\n(b) For the potential between spheres:\n1) The general solution will be of form:\nV(r,θ) = A₀/r + B₀ + (A₁r + B₁/r²)cos(θ)\n\n2) Boundary conditions:\n- At r = a: V = Q/(4πε₀a)\n- At r = b + c cos(θ): V = 0\n\n3) Expanding the second boundary condition to first order:\nV(b + c cos(θ)) ≈ V(b) + c cos(θ)∂V/∂r|ᵣ₌ᵦ = 0\n\n4) Solving the system of equations:\nA₀ = Qb/(4πε₀(b-a))\nB₀ = -Qa/(4πε₀(b-a))\nA₁ = -Qc/(4πε₀b²)\nB₁ = Qbc/(4πε₀b²)\n\nTherefore, the potential to first order in c is:\n\n\\[\\boxed{V(r,θ) = \\frac{Q}{4πε₀}\\left(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ)\\right)}\\]", "final_answers": ["V(r,θ) = \\frac{Q}{4πε₀}\\left(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ)\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "V(r,θ) = \\frac{Q}{4πε₀}\\left(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ)\\right)", "expr2": "r(\\theta) = b + c \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{Q}{4πε₀}(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ))\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "V(r,θ) = \\frac{Q}{4πε₀}\\left(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ)\\right)", "expr2": "\\Phi = \\frac{Q}{4\\pi\\epsilon_0} \\left\\{ \\frac{1}{r} - \\frac{1}{b} + \\frac{cr}{b^3-a^3} \\left[ 1 - \\left(\\frac{a}{r}\\right)^3 \\right] \\cos \\theta \\right\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\frac{Q}{4πε₀}(\\frac{b}{b-a}\\frac{1}{r} - \\frac{a}{b-a} - \\frac{c}{b²}(r - \\frac{b²}{r²})\\cos(θ))\n~~~~~~~~~~^"}], "accuracy": 1.0}
{"id": "electro/1_76", "solution": "Let me solve this step by step.\n\n1) First, let's recall the method of images:\n   * For a point charge near a grounded conducting plane, we can replace the plane with an image charge -q at the same distance on the opposite side of the plane.\n   * The image charge will be -2 μC at 10 cm on the other side of the plane.\n\n2) For part (a), the total induced charge:\n   * The induced charge on the conducting plane is equal to the negative of the image charge\n   * Therefore, the induced charge is equal to -(-2 μC) = +2 μC\n   * This makes sense as it neutralizes the effect of the original charge\n\n3) For part (b), the force:\n   * Using Coulomb's law: F = kq₁q₂/r²\n   * k = 9 × 10⁹ N⋅m²/C²\n   * q₁ = 2 × 10⁻⁶ C, q₂ = -2 × 10⁻⁶ C\n   * r = 2a = 0.2 m (distance between real and image charge)\n   * F = (9 × 10⁹)(2 × 10⁻⁶)(-2 × 10⁻⁶)/(0.2)²\n   * F = -0.9 N (attractive force towards the plane)\n\n4) For part (c), work required:\n   * Work = ∫F⋅dr from a to ∞\n   * W = ∫(kq²/4r²)dr from a to ∞\n   * W = -kq²/4r|ₐ^∞\n   * W = kq²/4a\n   * W = (9 × 10⁹)(4 × 10⁻¹²)/(4 × 0.1)\n   * W = 0.09 Joules\n\nFinal answers:\n\\[\\boxed{\n\\begin{align*}\n\\text{(a) } Q_{induced} &= +2 \\, \\mu C \\\\\n\\text{(b) } F &= -0.9 \\, N \\\\\n\\text{(c) } W &= 0.09 \\, J\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n\\text{(a) } Q_{induced} &= +2 \\, \\mu C \\\\\n\\text{(b) } F &= -0.9 \\, N \\\\\n\\text{(c) } W &= 0.09 \\, J\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\text{(a) } Q_{induced} &= +2 \\, \\mu C \\\\\n\\text{(b) } F &= -0.9 \\, N \\\\\n\\text{(c) } W &= 0.09 \\, J\n\\end{align*}", "expr2": "-2 \\, \\mu C"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\text{(a) } Q_{induced} &= +2 \\, \\mu C \\\\\n\\text{(b) } F &= -0.9 \\, N \\\\\n\\text{(c) } W &= 0.09 \\, J\n\\end{align*}", "expr2": "0.9 \\, \\text{N}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\text{(a) } Q_{induced} &= +2 \\, \\mu C \\\\\n\\text{(b) } F &= -0.9 \\, N \\\\\n\\text{(c) } W &= 0.09 \\, J\n\\end{align*}", "expr2": "0.09 \\, \\text{J}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_82", "solution": "Let's solve this step by step.\n\n(a) First part:\n\n1) The force on each charge is the sum of:\n   * Direct repulsion from the other charge\n   * Attraction to the image charge induced in the sphere\n\n2) For a grounded conducting sphere of radius R, when a charge q is placed at distance r from its center, the image charge q' is:\n   q' = -q(R/r)\n   Located at distance R²/r from the center in the direction of q\n\n3) In our case:\n   * Each +Q charge is at distance d from the sphere's center\n   * Each charge creates an image charge in the sphere\n   * The image charge is: q' = -Q(R/d)\n   * Image charges are at distance R²/d from center\n\n4) For zero total force:\n   * Repulsion from real charge = Attraction to both image charges\n   * kQ²/(2d)² = kQ|q'|/d² + kQ|q'|/d²\n   * kQ²/(4d²) = 2kQ²(R/d)/d²\n\n5) Solving:\n   * Q²/(4d²) = 2Q²R/(d³)\n   * R = d/8\n\n\\[ \\boxed{R = d/8} \\]\n\n(b) Second part:\n\n1) When the sphere has potential V:\n   * It acts like it has a charge Q_sphere = 4πε₀RV\n   * This creates additional repulsive force\n\n2) Total force now includes:\n   * Repulsion from other charge: kQ²/(2d)²\n   * Attraction to image charges: -2kQ²R/(d³)\n   * Repulsion from sphere charge: kQ(4πε₀RV)/d²\n\n3) Substituting R = d/8:\n   * F = kQ²/(4d²) - 2kQ²(d/8)/(d³) + kQ(4πε₀(d/8)V)/d²\n   * F = kQ²/(4d²) - kQ²/(4d²) + kπε₀QV/2d\n\n4) Simplifying:\n   * F = kπε₀QV/2d\n\n\\[ \\boxed{F = kπε₀QV/2d} \\]", "final_answers": ["R = d/8", "F = kπε₀QV/2d"], "equivalency_results": [{"input_expressions": {"expr1": "R = d/8", "expr2": "r_0 = \\frac{d}{8}"}, "preprocessed_expressions": {"expr1": "d/8", "expr2": "d/8"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "F = kπε₀QV/2d", "expr2": "r_0 = \\frac{d}{8}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nkπε₀QV/2d\n~^"}, {"input_expressions": {"expr1": "F = kπε₀QV/2d", "expr2": "F = \\frac{QV}{8d}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nkπε₀QV/2d\n~^"}], "accuracy": 0.5}
{"id": "electro/1_49", "solution": "Let's solve this step by step.\n\n(a) To find the electric fields:\n\n1) In steady state, the current density J must be continuous across the interface:\n   J₁ = J₂ = J\n   σ₁E₁ = σ₂E₂\n\n2) The voltage across the capacitor is the sum of voltages across each layer:\n   V = E₁d₁ + E₂d₂\n\n3) From these equations:\n   E₂ = (σ₁/σ₂)E₁\n   V = E₁d₁ + (σ₁/σ₂)E₁d₂\n   E₁ = V/(d₁ + (σ₁/σ₂)d₂)\n   E₂ = V/(d₂ + (σ₂/σ₁)d₁)\n\n(b) The current can be found using either layer:\n   J = σ₁E₁ = σ₂E₂\n   I = JA = σ₁VA/(d₁ + (σ₁/σ₂)d₂)\n\n(c) The total surface charge density at the interface is:\n   ρₜ = ε₂E₂ - ε₁E₁\n   ρₜ = V(ε₂/d₂ + (σ₂/σ₁)d₁) - ε₁/(d₁ + (σ₁/σ₂)d₂))\n\n(d) The free surface charge density is:\n   ρf = σₜ = 0 (in steady state)\n   This is because in steady state, there can be no accumulation of free charge at the interface.\n\nFinal answers:\n\n\\[\\boxed{E_1 = \\frac{V}{d_1 + (\\sigma_1/\\sigma_2)d_2}, E_2 = \\frac{V}{d_2 + (\\sigma_2/\\sigma_1)d_1}}\\]\n\n\\[\\boxed{I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}}\\]\n\n\\[\\boxed{\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)}\\]\n\n\\[\\boxed{\\rho_f = 0}\\]", "final_answers": ["E_1 = \\frac{V}{d_1 + (\\sigma_1/\\sigma_2)d_2}, E_2 = \\frac{V}{d_2 + (\\sigma_2/\\sigma_1)d_1}", "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "\\rho_f = 0"], "equivalency_results": [{"input_expressions": {"expr1": "E_1 = \\frac{V}{d_1 + (\\sigma_1/\\sigma_2)d_2}, E_2 = \\frac{V}{d_2 + (\\sigma_2/\\sigma_1)d_1}", "expr2": "E_1 = \\frac{V \\sigma_2}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V/(2*d)", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "expr2": "E_1 = \\frac{V \\sigma_2}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "sigmaVA/(2*d)", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "expr2": "E_2 = \\frac{V \\sigma_1}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "sigmaVA/(2*d)", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "expr2": "J = \\frac{\\sigma_1 \\sigma_2 V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "sigmaVA/(2*d)", "expr2": "V*sigma**2/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "expr2": "\\sigma_t = \\frac{\\varepsilon_0 (\\sigma_1 - \\sigma_2) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "sigmaVA/(2*d)", "expr2": "V*varepsilon(0)/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\sigma_1VA}{d_1 + (\\sigma_1/\\sigma_2)d_2}", "expr2": "\\sigma_f = \\frac{(\\sigma_1 \\epsilon_2 - \\sigma_2 \\epsilon_1) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "sigmaVA/(2*d)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "expr2": "E_1 = \\frac{V \\sigma_2}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V(0)", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "expr2": "E_2 = \\frac{V \\sigma_1}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V(0)", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "expr2": "J = \\frac{\\sigma_1 \\sigma_2 V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V(0)", "expr2": "V*sigma**2/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "expr2": "\\sigma_t = \\frac{\\varepsilon_0 (\\sigma_1 - \\sigma_2) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V(0)", "expr2": "V*varepsilon(0)/(2*dsigma)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_t = V\\left(\\frac{\\varepsilon_2}{d_2 + (\\sigma_2/\\sigma_1)d_1} - \\frac{\\varepsilon_1}{d_1 + (\\sigma_1/\\sigma_2)d_2}\\right)", "expr2": "\\sigma_f = \\frac{(\\sigma_1 \\epsilon_2 - \\sigma_2 \\epsilon_1) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "V(0)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_f = 0", "expr2": "E_1 = \\frac{V \\sigma_2}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_f = 0", "expr2": "E_2 = \\frac{V \\sigma_1}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "V*sigma/(2*dsigma)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_f = 0", "expr2": "J = \\frac{\\sigma_1 \\sigma_2 V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "V*sigma**2/(2*dsigma)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_f = 0", "expr2": "\\sigma_t = \\frac{\\varepsilon_0 (\\sigma_1 - \\sigma_2) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "V*varepsilon(0)/(2*dsigma)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\rho_f = 0", "expr2": "\\sigma_f = \\frac{(\\sigma_1 \\epsilon_2 - \\sigma_2 \\epsilon_1) V}{d_1 \\sigma_2 + d_2 \\sigma_1}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 0.5}
{"id": "electro/5_25", "solution": "Let me solve this step by step.\n\n1) First, let's recall key relationships:\n   * Initial radius = Bohr radius (a₀)\n   * Initial energy = -13.6 eV\n   * Classical electron radiates energy as it spirals inward\n\n2) The power radiated by an accelerating charge (Larmor formula) is:\n   P = (2/3)(e²/c³)a²\n   where 'a' is the acceleration\n\n3) For circular motion:\n   * a = v²/r\n   * v = √(ke²/mr) from centripetal force balance\n\n4) Substituting for v in acceleration:\n   a = ke²/mr²\n\n5) Therefore, power radiated is:\n   P = (2/3)(e²/c³)(ke²/mr²)²\n\n6) The total energy E at any radius r is:\n   E = ½mv² - ke²/r = -ke²/2r\n\n7) Since energy loss per revolution is small:\n   dE/dt = P\n   \n8) This gives:\n   d/dt(-ke²/2r) = -(2/3)(e²/c³)(ke²/mr²)²\n\n9) Rearranging and integrating from t=0 to t=T, and r=a₀ to r=0:\n   ∫(r²dr) = -(ke²/3mc³)∫dt\n\n10) Solving:\n    r³/3|ₐ₀⁰ = -(ke²/3mc³)t|ᵀ₀\n\n11) Therefore:\n    -a₀³/3 = -(ke²/3mc³)T\n\n12) Final expression:\n    T = (mc³a₀³)/(ke²)\n\nTherefore, the time taken for the electron to spiral into the nucleus is:\n\n\\[ \\boxed{T = \\frac{mc³a₀³}{ke²}} \\]\n\nwhere m is electron mass, c is speed of light, a₀ is Bohr radius, k is Coulomb constant, and e is electron charge.", "final_answers": ["T = \\frac{mc³a₀³}{ke²}"], "equivalency_results": [{"input_expressions": {"expr1": "T = \\frac{mc³a₀³}{ke²}", "expr2": "\\frac{m^2 c^3 a_0^3}{4e^4}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{mc³a₀³}{ke²}\n~~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_15", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we have:\n   * A conducting shell with inner radius a and outer radius b\n   * A point charge q at the center (r = 0)\n   * A uniform surface charge density σ on the outer surface (r = b)\n   * We need to find E(r) for all r and the charge on inner surface\n\n2) Let's call the charge on the inner surface Q_in. This is one of our unknowns.\n\n3) The charge on the outer surface Q_out = 4πb²σ (given surface charge density σ)\n\n4) Due to Gauss's law, we can find E(r) in different regions:\n\n   Region 1 (0 < r < a):\n   * Only the central charge q contributes\n   * E₁(r) = kq/r²\n\n   Region 2 (a < r < b):\n   * Due to conductor properties, E = 0 inside conductor\n   * E₂(r) = 0\n\n   Region 3 (r > b):\n   * All charges contribute (q + Q_in + Q_out)\n   * E₃(r) = k(q + Q_in + Q_out)/r²\n\n5) Due to conductor properties, the net field inside must be zero in Region 2.\n   At r = a⁺:\n   k(q + Q_in)/a² = 0\n   Therefore: Q_in = -q\n\n6) Now we can write the complete field solution:\n\nE(r) = {\n   kq/r²         for 0 < r < a\n   0             for a < r < b\n   k(q - q + 4πb²σ)/r²  for r > b\n}\n\n7) Simplifying the field for r > b:\n   E(r) = 4πkb²σ/r²\n\nTherefore, the charge on the inner surface is -q, and the complete electric field is:\n\n\\[ \\boxed{E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q} \\]", "final_answers": ["E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q"], "equivalency_results": [{"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q", "expr2": "\\mathbf{E}(r) = \\frac{q}{4 \\pi \\epsilon_0 r^2} \\mathbf{e_r}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q", "expr2": "\\mathbf{E} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q", "expr2": "\\mathbf{E}(r) = \\frac{\\sigma b^2}{\\epsilon_0 r^2} \\mathbf{e_r}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \n\\frac{kq}{r^2} & \\text{for } 0 < r < a \\\\\n0 & \\text{for } a < r < b \\\\\n\\frac{4\\pi kb^2\\sigma}{r^2} & \\text{for } r > b\n\\end{cases}, \\quad Q_{in} = -q", "expr2": "-q"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_12", "solution": "Let me solve this step by step.\n\n1) First, let's use Gauss's law, which states that the electric flux through a closed surface equals the enclosed charge divided by ε₀:\n   ∮ E⃗·dA⃗ = Q_enclosed/ε₀\n\n2) Due to spherical symmetry, the electric field will be radially outward and will have the same magnitude at all points equidistant from the center.\n\n3) For points OUTSIDE the sphere (r > R):\n   - All charge Q acts as if it were concentrated at the center\n   - The field follows Coulomb's law:\n   E(r) = kQ/r² = Q/(4πε₀r²) for r > R\n\n4) For points INSIDE the sphere (r < R):\n   - Only the charge within radius r contributes to the field\n   - The enclosed charge is proportional to the volume:\n   Q_enclosed = Q(r³/R³)\n   - Using Gauss's law:\n   E(r)·4πr² = Q_enclosed/ε₀\n   - Substituting Q_enclosed:\n   E(r) = Q/(4πε₀R³)·r for r < R\n\n5) The complete solution is:\n   E(r) = {\n   Q/(4πε₀R³)·r  for r < R\n   Q/(4πε₀r²)    for r > R\n\n\\[ \\boxed{E(r) = \\begin{cases} \\frac{Q}{4\\pi\\epsilon_0R^3}r & \\text{for } r < R \\\\ \\frac{Q}{4\\pi\\epsilon_0r^2} & \\text{for } r > R \\end{cases}} \\]", "final_answers": ["E(r) = \\begin{cases} \\frac{Q}{4\\pi\\epsilon_0R^3}r & \\text{for } r < R \\\\ \\frac{Q}{4\\pi\\epsilon_0r^2} & \\text{for } r > R \\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "E(r) = \\begin{cases} \\frac{Q}{4\\pi\\epsilon_0R^3}r & \\text{for } r < R \\\\ \\frac{Q}{4\\pi\\epsilon_0r^2} & \\text{for } r > R \\end{cases}", "expr2": "\\mathbf{E} = \\frac{Q}{4 \\pi \\epsilon_0 r^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(r) = \\begin{cases} \\frac{Q}{4\\pi\\epsilon_0R^3}r & \\text{for } r < R \\\\ \\frac{Q}{4\\pi\\epsilon_0r^2} & \\text{for } r > R \\end{cases}", "expr2": "\\mathbf{E} = \\frac{Qr}{4 \\pi \\epsilon_0 R^3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_22", "solution": "Let's solve this step by step.\n\n(a) To derive the relationship between β, n, and θ:\n\n1) Consider a particle moving distance vt while light travels distance ct/n\n2) These form a triangle where θ is the angle between v and c\n3) Using trigonometry: cos(θ) = (ct/n)/(vt) = 1/(nβ)\n4) Therefore: cos(θ) = 1/(nβ)\n\n\\[ \\boxed{\\cos(\\theta) = \\frac{1}{n\\beta}} \\]\n\n(b) For minimum kinetic energy:\n\n1) At threshold, θ = 0, so cos(θ) = 1\n2) Therefore: 1 = 1/(nβ)\n3) This means: β = 1/n\n4) Given n = 1 + 1.35 × 10⁻⁴\n5) β = 1/(1 + 1.35 × 10⁻⁴) ≈ 0.99987\n6) Using γ = 1/√(1-β²)\n7) γ = 1/√(1-0.99987²) ≈ 61.1\n8) KE = (γ-1)mc² = (61.1-1)(0.511) = 30.7 MeV\n\n\\[ \\boxed{30.7 \\text{ MeV}} \\]\n\n(c) For the fractional error:\n\n1) From cos(θ) = 1/(nβ)\n2) For ultra-relativistic particles, β ≈ 1\n3) θ ≈ √(2(1-1/n))\n4) p = γmv ≈ γmc = 100 GeV/c\n5) γ = p/(m₀c)\n6) Using error propagation and differentiating:\n7) δm₀/m₀ = θδθ ≈ (10⁻³)(10⁻³) = 10⁻⁶\n\n\\[ \\boxed{\\frac{\\delta m_0}{m_0} = 10^{-6}} \\]", "final_answers": ["\\cos(\\theta) = \\frac{1}{n\\beta}", "30.7 \\text{ MeV}", "\\frac{\\delta m_0}{m_0} = 10^{-6}"], "equivalency_results": [{"input_expressions": {"expr1": "\\cos(\\theta) = \\frac{1}{n\\beta}", "expr2": "\\cos \\theta = \\frac{1}{\\beta n}"}, "preprocessed_expressions": {"expr1": "1/(beta*n)", "expr2": "1/(beta*n)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "30.7 \\text{ MeV}", "expr2": "\\cos \\theta = \\frac{1}{\\beta n}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "30.7 \\text{ MeV}", "expr2": "29.93 \\, \\text{MeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "30.7 \\text{ MeV}", "expr2": "0.13"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{\\delta m_0}{m_0} = 10^{-6}", "expr2": "\\cos \\theta = \\frac{1}{\\beta n}"}, "preprocessed_expressions": {"expr1": "1/1000000", "expr2": "1/(beta*n)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{\\delta m_0}{m_0} = 10^{-6}", "expr2": "29.93 \\, \\text{MeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{\\delta m_0}{m_0} = 10^{-6}", "expr2": "0.13"}, "preprocessed_expressions": {"expr1": "1/1000000", "expr2": "0.130000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.3333333333333333}
{"id": "electro/1_24", "solution": "Let me solve this step by step.\n\n1) First, let's recall the key principles:\n   * Charge is conserved when the plates are separated\n   * The relationship between charge, capacitance, and voltage is Q = CV\n\n2) Initial conditions:\n   * Initial charge = Q\n   * Initial capacitance = C₁\n   * Initial voltage = V₁\n   * Therefore: Q = C₁V₁\n\n3) Final conditions:\n   * Final charge = Q (charge is conserved as the plate is insulated)\n   * Final capacitance = C₂\n   * Final voltage = V₂\n   * Therefore: Q = C₂V₂\n\n4) Since the charge Q is the same in both cases:\n   * C₁V₁ = C₂V₂\n\n5) Solving for V₂:\n   * V₂ = (C₁/C₂)V₁\n   * Since C₂ < C₁, V₂ > V₁\n\n6) This makes physical sense because:\n   * When the plates are separated, the capacitance decreases\n   * Since the charge is constant, the voltage must increase to maintain Q = CV\n\nThe final answer for V₂ in terms of V₁ is:\n\n\\[ \\boxed{V_2 = \\frac{C_1}{C_2}V_1} \\]", "final_answers": ["V_2 = \\frac{C_1}{C_2}V_1"], "equivalency_results": [{"input_expressions": {"expr1": "V_2 = \\frac{C_1}{C_2}V_1", "expr2": "V_2 = \\frac{C_1}{C_2} V_1"}, "preprocessed_expressions": {"expr1": "V", "expr2": "V"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/5_14", "solution": "Let me solve this step by step.\n\n1) First, let's identify the forces involved:\n   * Electric force due to the charge distribution\n   * Magnetic force due to the current created by moving charges\n\n2) For an infinitely long cylindrical beam, we can use Gauss's law to find the electric field:\n   * The electric field at radius r is: $E(r) = \\frac{ner}{2\\epsilon_0}$\n   * Where n is the electron density\n   * The force is radially outward due to repulsion\n\n3) For the magnetic field, we can use Ampère's law:\n   * Current I = nevA = neπr²v\n   * The magnetic field at radius r is: $B(r) = \\frac{\\mu_0 nevr}{2}$\n   * The force is radially inward due to attraction\n\n4) The magnetic force on an electron is:\n   * $F_B = -ev \\times B$\n   * $F_B = -evB$ (perpendicular components)\n   * $F_B = -ev(\\frac{\\mu_0 nevr}{2})$\n   * $F_B = -\\frac{\\mu_0 ne^2v^2r}{2}$\n\n5) The electric force is:\n   * $F_E = -eE$\n   * $F_E = -e(\\frac{ner}{2\\epsilon_0})$\n   * $F_E = -\\frac{ne^2r}{2\\epsilon_0}$\n\n6) The net radial force is:\n   * $F_{net} = F_E + F_B$\n   * $F_{net} = -\\frac{ne^2r}{2\\epsilon_0}(1-\\frac{v^2}{c^2})$\n   * Using $\\mu_0\\epsilon_0 = \\frac{1}{c^2}$\n\n7) For relativistic electrons, we need to include the Lorentz factor γ:\n   * The final expression becomes:\n   * $F_{net} = -\\frac{ne^2r}{2\\epsilon_0\\gamma^2}$\n\nTherefore, the net radial force on an electron in the beam is:\n\n\\[ \\boxed{F_{net} = -\\frac{ne^2r}{2\\epsilon_0\\gamma^2}} \\]\n\nwhere:\n- n is the electron density\n- e is the elementary charge\n- r is the radial distance\n- ε₀ is the vacuum permittivity\n- γ is the Lorentz factor\nThe negative sign indicates the force is radially outward.", "final_answers": ["F_{net} = -\\frac{ne^2r}{2\\epsilon_0\\gamma^2}"], "equivalency_results": [{"input_expressions": {"expr1": "F_{net} = -\\frac{ne^2r}{2\\epsilon_0\\gamma^2}", "expr2": "\\mathbf{F} = \\frac{e^2 n r}{2 \\pi \\epsilon_0 \\gamma^2} \\mathbf{e}_r"}, "preprocessed_expressions": {"expr1": "-e**2*n*r/(2*epsilon*gamma**2)", "expr2": "e**3*mathbf*n*r/(2*epsilon*gamma**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/5_13", "solution": "Let's solve this step by step.\n\n1) First, let's recall some key principles:\n- Due to cylindrical symmetry, we'll use cylindrical coordinates (s, φ, z)\n- The fields will only depend on the radial distance s from the axis\n- Current density J = (q/l)v\n\n2) For part (a) Electric Field:\n- Using Gauss's law: ∮E⋅dA = Q_enclosed/ε₀\n- For s < R:\n  E(s) = (q/l)s/(2πε₀R²)\n- For s > R:\n  E(s) = (q/l)/(2πε₀s)\n- Direction is radially outward\n\n3) For part (b) Magnetic Field:\n- Using Ampère's law: ∮B⋅dl = μ₀I_enclosed\n- For s < R:\n  B(φ) = (μ₀q/l)vs/(2πR²)\n- For s > R:\n  B(φ) = (μ₀q/l)v/(2πs)\n- Direction is azimuthal\n\n4) For part (c) Energy Density:\n- u = ½(ε₀E² + B²/μ₀)\n- For s < R:\n  u = (q/l)²[1/(4π²ε₀R⁴)]s²[1 + v²/c²]\n- For s > R:\n  u = (q/l)²[1/(4π²ε₀s²)][1 + v²/c²]\n\n5) For part (d) Momentum Density:\n- p = ε₀(E×B)\n- For s < R:\n  p = (q/l)²v/(4π²ε₀c²R⁴)s²\n- For s > R:\n  p = (q/l)²v/(4π²ε₀c²s²)\n- Direction is along z-axis\n\nThe complete solution can be expressed as:\n\n\\[\\boxed{\n\\begin{aligned}\n&\\text{For } s < R:\\\\\n&E(s) = \\frac{q}{l}\\frac{s}{2\\pi\\epsilon_0R^2}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{vs}{2\\pi R^2}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0R^4}s^2(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2R^4}s^2\\hat{z}\\\\\n&\\text{For } s > R:\\\\\n&E(s) = \\frac{q}{l}\\frac{1}{2\\pi\\epsilon_0s}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{v}{2\\pi s}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0s^2}(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2s^2}\\hat{z}\n\\end{aligned}\n}\\]", "final_answers": ["\\begin{aligned}\n&\\text{For } s < R:\\\\\n&E(s) = \\frac{q}{l}\\frac{s}{2\\pi\\epsilon_0R^2}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{vs}{2\\pi R^2}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0R^4}s^2(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2R^4}s^2\\hat{z}\\\\\n&\\text{For } s > R:\\\\\n&E(s) = \\frac{q}{l}\\frac{1}{2\\pi\\epsilon_0s}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{v}{2\\pi s}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0s^2}(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2s^2}\\hat{z}\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{For } s < R:\\\\\n&E(s) = \\frac{q}{l}\\frac{s}{2\\pi\\epsilon_0R^2}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{vs}{2\\pi R^2}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0R^4}s^2(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2R^4}s^2\\hat{z}\\\\\n&\\text{For } s > R:\\\\\n&E(s) = \\frac{q}{l}\\frac{1}{2\\pi\\epsilon_0s}\\hat{s}\\\\\n&B(s) = \\frac{\\mu_0q}{l}\\frac{v}{2\\pi s}\\hat{\\phi}\\\\\n&u = \\frac{(q/l)^2}{4\\pi^2\\epsilon_0s^2}(1 + v^2/c^2)\\\\\n&p = \\frac{(q/l)^2v}{4\\pi^2\\epsilon_0c^2s^2}\\hat{z}\n\\end{aligned}", "expr2": "\\mathbf{E} = \n\\begin{cases} \n\\frac{qr}{2\\pi \\varepsilon_0 R^2l} \\mathbf{e}_r, & (r < R) \\\\\n\\frac{q}{2\\pi \\varepsilon_0 rl} \\mathbf{e}_r, & (r > R)\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_23", "solution": "Let me solve this step by step.\n\n(a) First part:\n\n1) For a dipole layer in the x-y plane with uniform moment density in z-direction:\n   * The potential will be different when approaching from above (z > 0) vs below (z < 0)\n   * We need to evaluate the discontinuity in φ and its derivatives\n\n2) For a point very close to the surface:\n   * When z → 0⁺, r points mostly in -z direction\n   * When z → 0⁻, r points mostly in +z direction\n   * The potential itself is continuous across the layer\n\n3) For the derivative (electric field):\n   * The normal component of E (∂φ/∂z) will have a discontinuity\n   * The discontinuity in ∂φ/∂z = -τ/ε₀\n   * This is because the dipole layer creates a discontinuous jump in the electric field\n\n(b) Second part:\n\n1) Inside the sphere (r < a):\n   * We want φᵢₙ = q/(4πε₀r)\n   * This is the potential of the point charge\n\n2) Outside the sphere (r > a):\n   * We want φₒᵤₜ = 0\n   * This means we need to cancel the point charge's potential\n\n3) For a uniform surface charge density σ:\n   * Inside: φᵢₙ(σ) = σa/(ε₀r)\n   * Outside: φₒᵤₜ(σ) = σa/(ε₀r)\n\n4) For a uniform dipole layer τ:\n   * Inside: φᵢₙ(τ) = -τ/(3ε₀)\n   * Outside: φₒᵤₜ(τ) = 0\n\n5) Setting up equations:\n   * Inside: q/(4πε₀r) = σa/(ε₀r) - τ/(3ε₀)\n   * Outside: 0 = σa/(ε₀r)\n\n6) Solving:\n   * From outside equation: σ = 0\n   * From inside equation: τ = -q/(4π·3)\n\nThe final answer is:\n\n\\[\\boxed{\\sigma = 0, \\tau = -\\frac{q}{12\\pi}}\\]", "final_answers": ["\\sigma = 0, \\tau = -\\frac{q}{12\\pi}"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma = 0, \\tau = -\\frac{q}{12\\pi}", "expr2": "\\Delta \\phi = \\frac{\\tau}{\\epsilon_0}"}, "preprocessed_expressions": {"expr1": "-q/(12*pi)", "expr2": "tau/epsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = 0, \\tau = -\\frac{q}{12\\pi}", "expr2": "\\sigma = -\\frac{q}{4\\pi a^2}"}, "preprocessed_expressions": {"expr1": "-q/(12*pi)", "expr2": "-q/(4*a**2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = 0, \\tau = -\\frac{q}{12\\pi}", "expr2": "\\tau = -\\frac{q}{4\\pi a} e_r"}, "preprocessed_expressions": {"expr1": "-q/(12*pi)", "expr2": "-e*q/(4*a*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_83", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when a charge q is placed inside a conducting shell:\n   * Due to electrostatic induction, the charge q induces charges on both surfaces of the shell\n   * On the inner surface, a charge -q is induced\n   * On the outer surface, a charge +q is induced (since the shell is initially uncharged)\n\n2) For the electric force on charge q:\n   * By Gauss's law, the electric field at any point is determined by the charge enclosed within a Gaussian surface through that point\n   * The charge q experiences force only due to the charge induced on the inner surface (-q)\n   * The charge on the outer surface (+q) has no effect on the field inside\n   * Due to the spherical symmetry, the force will be zero\n\n3) For the potential of the inner surface:\n   * The potential at any point is the work done in bringing a unit positive charge from infinity to that point\n   * The conductor is an equipotential surface\n   * The potential at r₁ is due to:\n     - The original charge q at distance r from center\n     - The induced charge -q distributed uniformly on inner surface\n     - The induced charge +q distributed uniformly on outer surface\n\n4) The potential at r₁ can be calculated as:\n   * V = k(q/r₁) - k(q/r₁) + k(q/r₂)\n   * The first two terms cancel out\n   * Therefore, V = kq/r₂\n\nTherefore:\n- The electric force on the charge q is zero\n- The potential of the inner surface is kq/r₂\n\n\\[ \\boxed{F = 0, V = \\frac{kq}{r_2}} \\]", "final_answers": ["F = 0, V = \\frac{kq}{r_2}"], "equivalency_results": [{"input_expressions": {"expr1": "F = 0, V = \\frac{kq}{r_2}", "expr2": "F = -\\frac{ar_1q^2}{4\\pi\\varepsilon_0(r_1^2 - a^2)^2}"}, "preprocessed_expressions": {"expr1": "k*q/r", "expr2": "-a*q**2*r/(4*pi*varepsilon(-a**2 + r**2)**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = 0, V = \\frac{kq}{r_2}", "expr2": "\\frac{q}{4 \\pi \\epsilon_0 r_2}"}, "preprocessed_expressions": {"expr1": "k*q/r", "expr2": "q/(4*epsilon*pi*r)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_77", "solution": "Let's solve this step by step.\n\n(a) For the total force on charge +q:\n\n1) Due to the grounded conducting plane, we can use the method of images. Each charge q will have an image charge -q at the mirror position below the plane.\n\n2) So we have:\n   * Original +q at (a,0,a)\n   * Original -q at (-a,0,a)\n   * Image -q at (a,0,-a)\n   * Image +q at (-a,0,-a)\n\n3) The force on +q is the sum of forces from:\n   * Original -q at (-a,0,a)\n   * Image -q at (a,0,-a)\n   * Image +q at (-a,0,-a)\n\n4) Using Coulomb's law, F = kq₁q₂/r²\n   * Force from -q at (-a,0,a): F₁ = kq²/(4a²)ˆ(horizontal)\n   * Force from -q at (a,0,-a): F₂ = kq²/(4a²)ˆ(vertical down)\n   * Force from +q at (-a,0,-a): F₃ = -kq²/(8a²)ˆ(horizontal)\n\n5) Total horizontal force = kq²/(4a²) - kq²/(8a²) = kq²/(8a²)\n   Total vertical force = -kq²/(4a²)\n\n\\[ \\boxed{\\vec{F} = \\frac{kq^2}{8a^2}\\hat{x} - \\frac{kq^2}{4a^2}\\hat{z}} \\]\n\n(b) For work done:\n\n1) Bring first charge +q from infinity to (a,0,a): W₁ = 0 (no field yet)\n\n2) Bring -q from infinity to (-a,0,a):\n   * Work against original +q and its image\n   * W₂ = -kq²/(4a)\n\n\\[ \\boxed{W_{total} = -\\frac{kq^2}{4a}} \\]\n\n(c) For surface charge density:\n\n1) Use the perpendicular electric field at the surface:\n   σ = -ε₀E⊥\n\n2) Field at (a,0,0) due to all charges:\n   * From +q at (a,0,a): E₁ = kq/(2a²)\n   * From -q at (-a,0,a): negligible in z-direction at this point\n   * From images: same magnitude as real charges\n\n3) Total perpendicular field = kq/a²\n\n\\[ \\boxed{\\sigma = -\\frac{\\varepsilon_0kq}{a^2}} \\]", "final_answers": ["\\vec{F} = \\frac{kq^2}{8a^2}\\hat{x} - \\frac{kq^2}{4a^2}\\hat{z}", "W_{total} = -\\frac{kq^2}{4a}", "\\sigma = -\\frac{\\varepsilon_0kq}{a^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\vec{F} = \\frac{kq^2}{8a^2}\\hat{x} - \\frac{kq^2}{4a^2}\\hat{z}", "expr2": "F = \\frac{(\\sqrt{2} - 1) q^2}{32 \\pi \\epsilon_0 a^2}"}, "preprocessed_expressions": {"expr1": "hat*k*q**2*(x - 2*z)/(8*a**2)", "expr2": "q**2*(-1 + sqrt(2))/(32*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\vec{F} = \\frac{kq^2}{8a^2}\\hat{x} - \\frac{kq^2}{4a^2}\\hat{z}", "expr2": "W = \\frac{(\\sqrt{2} - 1) q^2}{16\\pi\\varepsilon_0 a}"}, "preprocessed_expressions": {"expr1": "hat*k*q**2*(x - 2*z)/(8*a**2)", "expr2": "q**2*(-1 + sqrt(2))/(16*a*pi*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\vec{F} = \\frac{kq^2}{8a^2}\\hat{x} - \\frac{kq^2}{4a^2}\\hat{z}", "expr2": "\\sigma = \\frac{q}{2\\pi \\epsilon_0 a^2} \\left( \\frac{1}{5\\sqrt{5}} - 1 \\right)"}, "preprocessed_expressions": {"expr1": "hat*k*q**2*(x - 2*z)/(8*a**2)", "expr2": "q*(-25 + sqrt(5))/(50*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W_{total} = -\\frac{kq^2}{4a}", "expr2": "F = \\frac{(\\sqrt{2} - 1) q^2}{32 \\pi \\epsilon_0 a^2}"}, "preprocessed_expressions": {"expr1": "-k*q**2/(4*a)", "expr2": "q**2*(-1 + sqrt(2))/(32*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W_{total} = -\\frac{kq^2}{4a}", "expr2": "W = \\frac{(\\sqrt{2} - 1) q^2}{16\\pi\\varepsilon_0 a}"}, "preprocessed_expressions": {"expr1": "-k*q**2/(4*a)", "expr2": "q**2*(-1 + sqrt(2))/(16*a*pi*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W_{total} = -\\frac{kq^2}{4a}", "expr2": "\\sigma = \\frac{q}{2\\pi \\epsilon_0 a^2} \\left( \\frac{1}{5\\sqrt{5}} - 1 \\right)"}, "preprocessed_expressions": {"expr1": "-k*q**2/(4*a)", "expr2": "q*(-25 + sqrt(5))/(50*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = -\\frac{\\varepsilon_0kq}{a^2}", "expr2": "F = \\frac{(\\sqrt{2} - 1) q^2}{32 \\pi \\epsilon_0 a^2}"}, "preprocessed_expressions": {"expr1": "-varepsilonkq/a**2", "expr2": "q**2*(-1 + sqrt(2))/(32*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = -\\frac{\\varepsilon_0kq}{a^2}", "expr2": "W = \\frac{(\\sqrt{2} - 1) q^2}{16\\pi\\varepsilon_0 a}"}, "preprocessed_expressions": {"expr1": "-varepsilonkq/a**2", "expr2": "q**2*(-1 + sqrt(2))/(16*a*pi*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = -\\frac{\\varepsilon_0kq}{a^2}", "expr2": "\\sigma = \\frac{q}{2\\pi \\epsilon_0 a^2} \\left( \\frac{1}{5\\sqrt{5}} - 1 \\right)"}, "preprocessed_expressions": {"expr1": "-varepsilonkq/a**2", "expr2": "q*(-25 + sqrt(5))/(50*a**2*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_48", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens when we introduce a dielectric material in half the space:\n   * The original configuration has two wires in free space\n   * Now, the lower half-space (z < 0) is filled with a dielectric\n   * This creates a dielectric boundary at z = 0\n\n2) The method of images can be used to solve this problem:\n   * When a dielectric boundary is present, we can use the method of images with an image charge factor\n   * The image factor for a dielectric boundary is ($\\varepsilon - 1$)/($\\varepsilon + 1$)\n\n3) For capacitance calculation:\n   * The total field will be the sum of the original field and the field due to image charges\n   * The image charges create an additional contribution to the potential\n\n4) The effect of the dielectric can be shown to increase the capacitance by a factor:\n   * Factor = (ε + 1)/2\n   * This is because:\n     - Half of the electric field lines pass through the dielectric\n     - The other half remain in free space\n     - The average effect is (ε + 1)/2\n\n5) Therefore, the new capacitance C' will be:\n   * C' = C × (ε + 1)/2\n\nThe final answer is:\n\n\\[ \\boxed{C' = C\\frac{(\\varepsilon + 1)}{2}} \\]\n\nThis result shows that the capacitance increases, but not by as much as it would if the dielectric filled all space (which would give C' = εC).", "final_answers": ["C' = C\\frac{(\\varepsilon + 1)}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "C' = C\\frac{(\\varepsilon + 1)}{2}", "expr2": "C' = \\frac{\\varepsilon + \\varepsilon_0}{2\\varepsilon_0}C"}, "preprocessed_expressions": {"expr1": "C*(varepsilon + 1)/2", "expr2": "C"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_70", "solution": "Let's solve this step by step:\n\n1) First, we need to recognize that this is a problem best solved in spherical coordinates due to the spherical geometry. The general solution to Laplace's equation in spherical coordinates (with azimuthal symmetry) is:\n\n   $\\phi(r,\\theta) = \\sum_{l=0}^{\\infty} (A_l r^l + B_l r^{-(l+1)}) P_l(\\cos\\theta)$\n\n2) Since we're looking for the solution outside the sphere (r > R), we can drop the r^l terms as they would grow infinitely at large r. So:\n\n   $\\phi(r,\\theta) = \\sum_{l=0}^{\\infty} B_l r^{-(l+1)} P_l(\\cos\\theta)$\n\n3) The boundary conditions at r = R are:\n   - For 0 ≤ θ ≤ π/2: φ = φ₀\n   - For π/2 ≤ θ ≤ π: φ = 0\n\n4) At r = R, we can write:\n\n   $f(\\theta) = \\begin{cases} \n   \\phi_0 & \\text{for } 0 \\leq \\theta \\leq \\pi/2 \\\\\n   0 & \\text{for } \\pi/2 \\leq \\theta \\leq \\pi\n   \\end{cases}$\n\n5) This function can be expanded in Legendre polynomials:\n\n   $f(\\theta) = \\sum_{l=0}^{\\infty} c_l P_l(\\cos\\theta)$\n\n   where $c_l = \\frac{2l+1}{2}\\int_{-1}^{1} f(\\theta)P_l(\\cos\\theta)d(\\cos\\theta)$\n\n6) Calculating the first few coefficients:\n   \n   $c_0 = \\frac{\\phi_0}{2}$\n   $c_1 = \\frac{2\\phi_0}{π}$\n   $c_2 = 0$\n   $c_3 = \\frac{4\\phi_0}{3π}$\n\n7) Therefore, up to l = 3:\n\n   $\\phi(r,\\theta) = \\phi_0[\\frac{R}{2r} + \\frac{2R^2}{\\pi r^2}\\cos\\theta + \\frac{4R^4}{3\\pi r^4}(\\frac{5}{2}\\cos^3\\theta - \\frac{3}{2}\\cos\\theta)]$\n\nThe final answer, keeping terms up to 1/r⁴, is:\n\n\\[\\boxed{\\phi(r,\\theta) = \\phi_0[\\frac{R}{2r} + \\frac{2R^2}{\\pi r^2}\\cos\\theta + \\frac{4R^4}{3\\pi r^4}(\\frac{5}{2}\\cos^3\\theta - \\frac{3}{2}\\cos\\theta)]}\\]", "final_answers": ["\\phi(r,\\theta) = \\phi_0[\\frac{R}{2r} + \\frac{2R^2}{\\pi r^2}\\cos\\theta + \\frac{4R^4}{3\\pi r^4}(\\frac{5}{2}\\cos^3\\theta - \\frac{3}{2}\\cos\\theta)]"], "equivalency_results": [{"input_expressions": {"expr1": "\\phi(r,\\theta) = \\phi_0[\\frac{R}{2r} + \\frac{2R^2}{\\pi r^2}\\cos\\theta + \\frac{4R^4}{3\\pi r^4}(\\frac{5}{2}\\cos^3\\theta - \\frac{3}{2}\\cos\\theta)]", "expr2": "\\phi = \\phi_0 \\left\\{ \\frac{R}{2r} + \\frac{3}{4} \\left( \\frac{R}{r} \\right)^2 \\cos \\theta - \\frac{7}{32} \\left( \\frac{R}{r} \\right)^4 (5 \\cos^2 \\theta - 3) \\cos \\theta \\right\\}"}, "preprocessed_expressions": {"expr1": "R*phi*(R**3*(3*cos(theta) + 5*cos(3*theta)) + 12*R*r**2*cos(theta) + 3*pi*r**3)/(6*pi*r**4)", "expr2": "R*phi*(7*R**3*(3 - 5*cos(theta)**2)*cos(theta) + 24*R*r**2*cos(theta) + 16*r**3)/(32*r**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_84", "solution": "Let me solve this step by step.\n\n1) First, recall that the method of images can be used here. The conducting plane at V=0 can be replaced by an image dipole.\n\n2) For an electric dipole near a conducting plane:\n   * The image dipole must be placed at position -z₀\n   * The image dipole must be oriented to ensure V=0 on the conducting plane\n   * The magnitude of the image dipole equals the original dipole\n\n3) The image dipole orientation must be the reflection of the original dipole across the conducting plane:\n   * If P_z is the z-component of the original dipole, the image must have -P_z\n   * If P_∥ is the component parallel to the xy-plane, the image must have P_∥\n\n4) The potential at any point on the conductor will be the sum of potentials from both dipoles.\n\n5) The surface charge density σ on the conductor can be found using:\n   σ = -ε₀(∂V/∂z) evaluated at z=0\n\n6) For a dipole at position r' with moment p, the potential is:\n   V(r) = 1/(4πε₀) [p·(r-r')]/|r-r'|³\n\n7) Taking into account both the real and image dipoles:\n   * Real dipole: at z₀, with P = |P|(sin θ x̂ + cos θ ẑ)\n   * Image dipole: at -z₀, with P' = |P|(sin θ x̂ - cos θ ẑ)\n\n8) After calculating ∂V/∂z at z=0 and simplifying:\n   σ(x,y) = -|P|/(2π) [3z₀(x cos θ + z₀ sin θ)]/[x² + y² + z₀²]^(5/2)\n\nTherefore, the induced surface charge density is:\n\n\\[ \\boxed{\\sigma(x,y) = -\\frac{|P|}{2\\pi} \\frac{3z₀(x \\cos \\theta + z₀ \\sin \\theta)}{(x² + y² + z₀²)^{5/2}}} \\]\n\nThis expression gives the charge density at any point (x,y) on the conducting plane due to the dipole oriented at angle θ and positioned at height z₀.", "final_answers": ["\\sigma(x,y) = -\\frac{|P|}{2\\pi} \\frac{3z₀(x \\cos \\theta + z₀ \\sin \\theta)}{(x² + y² + z₀²)^{5/2}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma(x,y) = -\\frac{|P|}{2\\pi} \\frac{3z₀(x \\cos \\theta + z₀ \\sin \\theta)}{(x² + y² + z₀²)^{5/2}}", "expr2": "\\sigma = -\\frac{P \\cos \\theta}{2 \\pi (x^2 + y^2 + z_0^2)^{3/2}} + \\frac{3Pz_0(-x \\sin \\theta + z_0 \\cos \\theta)}{2 \\pi(x^2 + y^2 + z_0^2)^{5/2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n-\\frac{|P|}{2\\pi} \\frac{3z₀(x \\cos \\theta + z₀ \\sin \\theta)}{(x² + y² + z₀²)^{5/2}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "electro/1_46", "solution": "Let me solve this step by step.\n\n1) First, let's recall that the energy density in a dielectric medium is:\n   $u = \\frac{1}{2}ε_0K(r)E^2(r)$\n   where $u$ is constant in this case.\n\n2) In a cylindrical capacitor, the electric field is radial and given by:\n   $E(r) = \\frac{λ}{2πε_0K(r)r}$\n   where $λ$ is the charge per unit length.\n\n3) Since the energy density is constant, let's call it $u_0$:\n   $u_0 = \\frac{1}{2}ε_0K(r)E^2(r)$\n\n4) Substitute the expression for $E(r)$:\n   $u_0 = \\frac{1}{2}ε_0K(r)(\\frac{λ}{2πε_0K(r)r})^2$\n\n5) Simplify:\n   $u_0 = \\frac{λ^2}{8π^2ε_0K(r)r^2}$\n\n6) Since $u_0$ is constant, $K(r)$ must be:\n   $K(r) = \\frac{λ^2}{8π^2ε_0u_0r^2}$\n\n7) To find $λ$, use the voltage condition:\n   $V = \\int_a^b E(r)dr = \\frac{λ}{2πε_0}\\int_a^b \\frac{1}{K(r)r}dr$\n\n8) Substitute $K(r)$ from step 6:\n   $V = \\frac{λ}{2πε_0}\\int_a^b \\frac{8π^2ε_0u_0r^2}{λ^2}\\frac{1}{r}dr$\n   $V = 4πu_0\\int_a^b rdr = 2πu_0(b^2-a^2)$\n\n9) Therefore:\n   $u_0 = \\frac{V}{2π(b^2-a^2)}$\n\n10) Now we can find $K(r)$ and $E(r)$:\n    $K(r) = \\frac{(b^2-a^2)}{2r^2}$\n    $E(r) = \\frac{V}{(b^2-a^2)}r$\n\nThe final answers are:\n\n\\[\\boxed{K(r) = \\frac{b^2-a^2}{2r^2}, \\quad E(r) = \\frac{V}{b^2-a^2}r}\\]\n\nThis solution shows that for constant energy density, the dielectric constant must vary inversely with the square of the radius, while the electric field must increase linearly with radius.", "final_answers": ["K(r) = \\frac{b^2-a^2}{2r^2}, \\quad E(r) = \\frac{V}{b^2-a^2}r"], "equivalency_results": [{"input_expressions": {"expr1": "K(r) = \\frac{b^2-a^2}{2r^2}, \\quad E(r) = \\frac{V}{b^2-a^2}r", "expr2": "K(r) = k r^{-2}"}, "preprocessed_expressions": {"expr1": "-V*r/(a**2 - b**2)", "expr2": "k/r**2"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "electro/1_79", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we know:\n   * Electric field at ground level E = 100 V/m\n   * Bottom of cloud is at height d = 300 m\n   * Cloud thickness is also 300 m, so top is at 600 m\n   * Cloud has +q at top and -q at bottom\n\n2) The electric field at ground level is due to both charges:\n   * From +q at height 600 m\n   * From -q at height 300 m\n\n3) Using Coulomb's law for electric field from a point charge:\n   E = k(q/r²)\n   where k = 8.85 × 10⁻¹² C²/N·m²\n\n4) At ground level, the total field is:\n   E = k(+q/(600)² - q/(300)²)\n   100 = k(q/360000 - q/90000)\n   100 = kq(-3/360000)\n   100 = -kq/120000\n\n5) Solving for q:\n   q = -12000000/k\n   q = -12000000 × 8.85 × 10⁻¹² = -1.062 × 10⁻⁷ C\n\n6) For the external force on the cloud:\n   * The force on +q is upward due to the field\n   * The force on -q is downward due to the field\n   * The field at each charge location is due to the other charge\n   * F = qE = kq²/d²\n   * d = 300 m (distance between charges)\n   * Direction is attractive (charges pull toward each other)\n\n7) Calculate force magnitude:\n   F = k(1.062 × 10⁻⁷)²/(300)²\n   F = (8.85 × 10⁻¹²)(1.127 × 10⁻¹⁴)/(90000)\n   F = 1.11 × 10⁻¹⁸ N\n\nThe final answer for charge magnitude and force:\n\n\\[\\boxed{|q| = 1.062 × 10⁻⁷ \\text{ C}, F = 1.11 × 10⁻¹⁸ \\text{ N (attractive)}}\\]", "final_answers": ["|q| = 1.062 × 10⁻⁷ \\text{ C}, F = 1.11 × 10⁻¹⁸ \\text{ N (attractive)}"], "equivalency_results": [{"input_expressions": {"expr1": "|q| = 1.062 × 10⁻⁷ \\text{ C}, F = 1.11 × 10⁻¹⁸ \\text{ N (attractive)}", "expr2": "q = 6.7 \\times 10^{-4} \\, \\text{C}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "|q| = 1.062 × 10⁻⁷ \\text{ C}, F = 1.11 × 10⁻¹⁸ \\text{ N (attractive)}", "expr2": "F = -4.05 \\times 10^{-3} \\, \\text{N}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "electro/1_41", "solution": "Let's solve this step by step.\n\n1) First, let's understand the setup:\n   * We have three concentric spheres with radii a, b, and d\n   * Inner (radius a) and outer (radius d) spheres are connected\n   * Middle sphere (radius b) is isolated\n   * There's a charge QB on the middle sphere\n\n2) For part (a), to find the capacitance:\n   * Due to the connection, inner and outer spheres are at the same potential\n   * Let's call the potential of inner/outer spheres V1 and middle sphere V2\n   * The system acts like two capacitors in series\n\n3) For a spherical capacitor, capacitance is given by:\n   * C = 4πε₀(r₁r₂)/(r₂-r₁)\n   * For inner region (a to b): C₁ = 4πε₀(ab)/(b-a)\n   * For outer region (b to d): C₂ = 4πε₀(bd)/(d-b)\n\n4) For capacitors in series:\n   * 1/C = 1/C₁ + 1/C₂\n   * C = (C₁C₂)/(C₁+C₂)\n   * Substituting the expressions:\n   * C = 4πε₀[(ab)(bd)]/[(b-a)(d-b)+ab(d/b-1)]\n   * Simplifying:\n   * C = 4πε₀[abd]/[d(b-a)+b(d-b)]\n\n5) For part (b), regarding QB distribution:\n   * Let's call the charge on inner surface Q₁ and outer surface Q₂\n   * QB = Q₁ + Q₂\n   * The potential difference between surfaces is zero\n   * Using Gauss's law:\n   * Q₁/4πε₀b = Q₂/4πε₀b\n   * Therefore: Q₁ = Q₂ = QB/2\n\nThe final answers are:\n\n\\[ \\boxed{C = 4πε₀\\frac{abd}{d(b-a)+b(d-b)}} \\]\n\n\\[ \\boxed{Q₁ = Q₂ = \\frac{Q_B}{2}} \\]", "final_answers": ["C = 4πε₀\\frac{abd}{d(b-a)+b(d-b)}", "Q₁ = Q₂ = \\frac{Q_B}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "C = 4πε₀\\frac{abd}{d(b-a)+b(d-b)}", "expr2": "C = \\frac{4 \\pi \\varepsilon_0 a d}{d-a}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n4πε₀\\frac{abd}{d(b-a)+b(d-b)}\n~^"}, {"input_expressions": {"expr1": "C = 4πε₀\\frac{abd}{d(b-a)+b(d-b)}", "expr2": "Q_{1\\text{inner}} = -\\frac{a(d-b)}{b(d-a)} Q_B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = 4πε₀\\frac{abd}{d(b-a)+b(d-b)}", "expr2": "Q_{2\\text{outer}} = \\frac{d(b-a)}{b(d-a)} Q_B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q₁ = Q₂ = \\frac{Q_B}{2}", "expr2": "C = \\frac{4 \\pi \\varepsilon_0 a d}{d-a}"}, "preprocessed_expressions": {"expr1": "Q/2", "expr2": "-4*a*d*pi*varepsilon/(a - d)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q₁ = Q₂ = \\frac{Q_B}{2}", "expr2": "Q_{1\\text{inner}} = -\\frac{a(d-b)}{b(d-a)} Q_B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q₁ = Q₂ = \\frac{Q_B}{2}", "expr2": "Q_{2\\text{outer}} = \\frac{d(b-a)}{b(d-a)} Q_B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-7", "solution": "Let's solve this step by step.\n\n(a) For a single slit of dimension a:\n\n1) The intensity distribution for a square aperture is the product of two single-slit diffraction patterns in x and y directions:\n\n2) For a square slit of dimension a, the intensity distribution is:\nI(θx,θy) = I₀ [sinc²(πa sin(θx)/λ)] × [sinc²(πa sin(θy)/λ)]\n\n3) For small angles, sin(θ) ≈ θ, and if we define:\nαx = πax/λf and αy = πay/λf\nwhere f is the focal length of the lens and (x,y) are coordinates on the screen\n\n4) The intensity distribution for the single slit becomes:\nI(x,y) = I₀ [sinc²(αx)] × [sinc²(αy)]\n\n(b) For both slits:\n\n1) We need to consider both diffraction and interference effects\n\n2) The two slits have different widths (a and 3a) and are separated by distance 2a (edge to edge)\n\n3) The center-to-center distance d = 3.5a (2a + a/2 + 3a/2)\n\n4) For two slits of different widths, the total amplitude is the sum of individual amplitudes:\nA = A₁ + A₂\n\n5) The intensity distribution will be:\nI(x,y) = I₀ × [sinc²(παx/λf) + 9sinc²(3παx/λf) + 6sinc(παx/λf)sinc(3παx/λf)cos(2π×3.5a×x/λf)] × [sinc²(παy/λf)]\n\nThe final answer for both slits is:\n\n\\[\\boxed{I(x,y) = I₀[sinc²(\\frac{\\pi ax}{\\lambda f}) + 9sinc²(\\frac{3\\pi ax}{\\lambda f}) + 6sinc(\\frac{\\pi ax}{\\lambda f})sinc(\\frac{3\\pi ax}{\\lambda f})cos(\\frac{7\\pi ax}{\\lambda f})] \\times [sinc²(\\frac{\\pi ay}{\\lambda f})]}\\]\n\nThis expression shows both the diffraction effects (sinc terms) and interference effects (cosine term), with the y-dependence showing pure diffraction due to the vertical extent of the slits.", "final_answers": ["I(x,y) = I₀[sinc²(\\frac{\\pi ax}{\\lambda f}) + 9sinc²(\\frac{3\\pi ax}{\\lambda f}) + 6sinc(\\frac{\\pi ax}{\\lambda f})sinc(\\frac{3\\pi ax}{\\lambda f})cos(\\frac{7\\pi ax}{\\lambda f})] \\times [sinc²(\\frac{\\pi ay}{\\lambda f})]"], "equivalency_results": [{"input_expressions": {"expr1": "I(x,y) = I₀[sinc²(\\frac{\\pi ax}{\\lambda f}) + 9sinc²(\\frac{3\\pi ax}{\\lambda f}) + 6sinc(\\frac{\\pi ax}{\\lambda f})sinc(\\frac{3\\pi ax}{\\lambda f})cos(\\frac{7\\pi ax}{\\lambda f})] \\times [sinc²(\\frac{\\pi ay}{\\lambda f})]", "expr2": "I(\\vartheta, \\varphi) = I_0 \\, \\text{sinc}^2 \\alpha \\, \\text{sinc}^2 \\beta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(x,y) = I₀[sinc²(\\frac{\\pi ax}{\\lambda f}) + 9sinc²(\\frac{3\\pi ax}{\\lambda f}) + 6sinc(\\frac{\\pi ax}{\\lambda f})sinc(\\frac{3\\pi ax}{\\lambda f})cos(\\frac{7\\pi ax}{\\lambda f})] \\times [sinc²(\\frac{\\pi ay}{\\lambda f})]", "expr2": "I(\\vartheta, \\varphi) = \\frac{I_0}{100a^2} \\left[ \\sin^4(2\\alpha) + \\frac{1}{4} \\left(\\sin(4\\alpha) - 2\\sin(6\\alpha)\\right)^2 \\right] \\text{sinc}^2\\beta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/7-4", "solution": "Let's solve this step by step.\n\n(a) For the two-magnet case:\n\n1) The force between two magnetic dipoles along their axis (z-direction) is:\n   F = (3μ₀m²/2π)(1/z⁴)\n\n2) For the upper magnet to float:\n   Magnetic force upward = Gravitational force downward\n   (3μ₀m²/2π)(1/z⁴) = m_dg\n\n3) Solving for z:\n   z = [(3μ₀m²)/(2πm_dg)]^(1/4)\n\n(b) For the three-magnet case:\n\n1) Let's call the heights z₁ and z₂ (bottom to middle and middle to top)\n\n2) For the middle magnet:\n   Force from bottom magnet - Force from top magnet = m_dg\n   (3μ₀m²/2π)(1/z₁⁴) - (3μ₀m²/2π)(1/z₂⁴) = m_dg\n\n3) For the top magnet:\n   Force from middle magnet = m_dg\n   (3μ₀m²/2π)(1/z₂⁴) = m_dg\n\n4) From (3), we can substitute into (2):\n   (3μ₀m²/2π)(1/z₁⁴) - m_dg = m_dg\n\n5) Therefore:\n   (3μ₀m²/2π)(1/z₁⁴) = 2m_dg\n\n6) Dividing equations from (5) and (3):\n   (z₂/z₁)⁴ = 1/2\n\nTherefore, the ratio of heights is:\n\n\\[\\boxed{z₂/z₁ = 2^{-1/4}}\\]", "final_answers": ["z₂/z₁ = 2^{-1/4}"], "equivalency_results": [{"input_expressions": {"expr1": "z₂/z₁ = 2^{-1/4}", "expr2": "z = \\left( \\frac{3 \\mu_0 m^2}{2 \\pi m_d g} \\right)^{1/4}"}, "preprocessed_expressions": {"expr1": "2**(3/4)/2", "expr2": "2**(3/4)*3**(1/4)*(m*mu/(g*pi))**(1/4)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "z₂/z₁ = 2^{-1/4}", "expr2": "2 \\zeta^4 (\\zeta + 1)^4 - (\\zeta + 1)^4 - \\zeta^4 = 0"}, "preprocessed_expressions": {"expr1": "2**(3/4)/2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/12-3", "solution": "Let's solve this step by step.\n\n(a) In the lab frame:\n\n1) The magnetic field due to a current-carrying wire at distance y is:\n   B = μ₀I/(2πy)\n\n2) The magnetic field is in the -z direction (using right-hand rule)\n\n3) The force on the electron is given by F = qv × B\n   where q = -e (electron charge)\n\n4) The force is in the -y direction (toward the wire) with magnitude:\n   F_lab = evB = ev(μ₀I)/(2πy)\n\n(b) In the electron's frame:\n\n1) The wire moves to the left with velocity -v\n\n2) The positive ions in the wire are moving with velocity -(v + vd)\n   The electrons in the wire are moving with velocity -(v - vd)\n\n3) Due to length contraction, the linear charge densities change:\n   λ₊ = λ₀γ(1 + vvd/c²)\n   λ₋ = λ₀γ(1 - vvd/c²)\n   where γ = 1/√(1-v²/c²)\n\n4) The net charge density seen is:\n   λnet = λ₊ - λ₋ = 2λ₀γvvd/c²\n\n5) This creates an electric field:\n   E = λnet/(2πϵ₀y)\n   \n6) The force in the electron frame is:\n   F_electron = -eE = -e(2λ₀γvvd/c²)/(2πϵ₀y)\n\n7) Using the relation I = λ₀vd, we get:\n   F_electron = -ev(μ₀I)/(2πy)\n\n(c) Comparing the results:\n\n1) F_electron = -F_lab\n\n2) In the lab frame, the force is purely magnetic.\n   In the electron frame, the force is purely electric.\n\n3) In the v'/2 frame:\n   - Both electric and magnetic forces would be present\n   - The net force would be the same magnitude\n   - The relative contribution of electric and magnetic forces would be between the two extreme cases\n\nThe final answer for the force magnitude in both frames is:\n\n\\[ \\boxed{F = \\frac{ev\\mu_0I}{2\\pi y}} \\]\n\nThe key insight is that while the nature of the force (electric vs magnetic) depends on the reference frame, the magnitude of the force remains the same in all frames, demonstrating the principle of relativity.", "final_answers": ["F = \\frac{ev\\mu_0I}{2\\pi y}"], "equivalency_results": [{"input_expressions": {"expr1": "F = \\frac{ev\\mu_0I}{2\\pi y}", "expr2": "\\mathbf{F} = -\\frac{\\mu_0 I e v}{2 \\pi y} \\hat{\\mathbf{y}}"}, "preprocessed_expressions": {"expr1": "e*muI*v/(2*pi*y)", "expr2": "-I*e*hat*mathbf*mu*v/(2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "F = \\frac{ev\\mu_0I}{2\\pi y}", "expr2": "\\mathbf{F}^{\\prime} = -\\frac{\\mu_0 I e v}{2 \\pi y} \\hat{\\mathbf{y}}"}, "preprocessed_expressions": {"expr1": "e*muI*v/(2*pi*y)", "expr2": "-I*e*hat*mathbf*mu*v/(2*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/7-3", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for a long straight wire with uniform current distribution:\n   * Inside the wire (s < a): B = (μ₀Is)/(2πa²)\n   * Outside the wire (s > a): B = (μ₀I)/(2πs)\n\n2) In a linear magnetic material:\n   * M = χₘH\n   * B = μ₀(H + M) = μ₀(1 + χₘ)H\n   * μᵣ = 1 + χₘ\n\n3) For bound currents:\n   * Surface bound current: Kᵦ = M × n̂\n   * Volume bound current: Jᵦ = ∇ × M\n\n4) Inside the wire (s < a):\n   * H = Is/(2πa²)\n   * M = χₘH = χₘIs/(2πa²)\n   * B = μ₀(1 + χₘ)Is/(2πa²)\n\n5) Outside the wire (s > a):\n   * H = I/(2πs)\n   * M = 0 (no material)\n   * B = μ₀I/(2πs)\n\n6) For volume bound current:\n   * Jᵦ = ∇ × M = 0 (M is uniform inside)\n\n7) For surface bound current at r = a:\n   * Kᵦ = M × n̂ = (χₘI)/(2πa) φ̂\n\n8) Net bound current:\n   * Iᵦ = Kᵦ × (circumference)\n   * Iᵦ = (χₘI)/(2πa) × (2πa)\n   * Iᵦ = χₘI\n\nTherefore, the magnetic field is:\n\nFor s < a: B = μ₀(1 + χₘ)Is/(2πa²)\nFor s > a: B = μ₀I/(2πs)\n\nAnd the net bound current is χₘI.\n\n\\[ \\boxed{B = \\begin{cases} \n\\frac{\\mu_0(1 + \\chi_m)Is}{2\\pi a^2} & \\text{for } s < a \\\\\n\\frac{\\mu_0I}{2\\pi s} & \\text{for } s > a\n\\end{cases}, \\quad I_b = \\chi_mI} \\]", "final_answers": ["B = \\begin{cases} \n\\frac{\\mu_0(1 + \\chi_m)Is}{2\\pi a^2} & \\text{for } s < a \\\\\n\\frac{\\mu_0I}{2\\pi s} & \\text{for } s > a\n\\end{cases}, \\quad I_b = \\chi_mI"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\begin{cases} \n\\frac{\\mu_0(1 + \\chi_m)Is}{2\\pi a^2} & \\text{for } s < a \\\\\n\\frac{\\mu_0I}{2\\pi s} & \\text{for } s > a\n\\end{cases}, \\quad I_b = \\chi_mI", "expr2": "B(s) = \\frac{\\mu_0 I}{2\\pi s}\n\\begin{cases} \n(1+\\chi_m) \\frac{s^2}{a^2}, & s < a, \\\\ \n1, & s > a. \n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/9-2", "solution": "Let's solve this step by step.\n\n(a) Finding electric and magnetic fields:\n\n1) Electric field (E):\n- For r > R: The field is that of a point charge Q at the center\n- E = (1/4πε₀)(Q/r²)r̂\n- For r < R: E = 0 (inside conductor)\n\n2) Magnetic field (B):\n- Inside magnetized sphere (r < R):\nB = (2/3)μ₀M\n- Outside sphere (r > R):\nB = (μ₀/3)(R³/r³)[3(M·r̂)r̂ - M]\nFor M = Mẑ, this simplifies to:\nB = (μ₀MR³/3r³)[3cos(θ)r̂ - ẑ]\n\n(b) Induced electric field during demagnetization:\n\n1) As M decreases, ∂B/∂t creates an induced E field:\n∇ × E = -∂B/∂t\n\n2) The induced E field is azimuthal (φ direction):\nE = -(r/2)∂B/∂t = -(r/2)(-μ₀/dt)(dM/dt)\n= (rμ₀/2)(dM/dt)\n\n3) Torque on surface charge:\nτ = QR × E = QR(rμ₀/2)(dM/dt)\n\n4) Total angular momentum imparted:\nL = ∫τdt = (QRμ₀/2)∫dM\nFrom M to 0:\nL = -(QRμ₀M/2)\n\n(c) Conservation of angular momentum:\n\nThe angular momentum comes from the electromagnetic field. The initial configuration had angular momentum in the electromagnetic field (due to crossed E and B fields). As the magnetization decreases, this field angular momentum is transferred to mechanical angular momentum of the sphere.\n\nFinal Answer:\n\\[ \\boxed{L = -\\frac{QR\\mu_0M}{2}\\hat{z}} \\]\n\nThis represents the total angular momentum imparted to the sphere during demagnetization, where:\n- Q is the total charge\n- R is the radius\n- μ₀ is the permeability of free space\n- M is the initial magnetization", "final_answers": ["L = -\\frac{QR\\mu_0M}{2}\\hat{z}"], "equivalency_results": [{"input_expressions": {"expr1": "L = -\\frac{QR\\mu_0M}{2}\\hat{z}", "expr2": "\\mathbf{E} = \n\\begin{cases} \n0, & r \\leq R, \\\\\n\\frac{Q}{4 \\pi \\epsilon_0 r^2} \\hat{\\mathbf{r}}, & r > R.\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{cases} \n0, & r \\leq R, \\\\\n\\frac{Q}{4 \\pi \\epsilon r^2} \\hat{\\mathbf{r}}, & r > R.\n\\end{cases}\n~~~^"}, {"input_expressions": {"expr1": "L = -\\frac{QR\\mu_0M}{2}\\hat{z}", "expr2": "\\mathbf{B} = \n\\begin{cases} \n\\frac{2}{3} \\mu_0 \\mathbf{M}, & r \\leq R, \\\\\n\\frac{\\mu_0}{3} \\left( \\frac{R}{r} \\right)^3 [3 (\\mathbf{M} \\cdot \\hat{\\mathbf{r}}) \\hat{\\mathbf{r}} - \\mathbf{M}], & r > R.\n\\end{cases}"}, "preprocessed_expressions": {"expr1": "-Q*R*hat*muM*z/2", "expr2": "2*M*a*begin*c*e*mathbf*mu*s**2/3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "L = -\\frac{QR\\mu_0M}{2}\\hat{z}", "expr2": "\\mathbf{E}_{\\text{ind}}(r) = \n-\\frac{\\mu_0 \\dot{M} r \\sin \\theta}{3} \\hat{\\boldsymbol{\\phi}} \\times \n\\begin{cases} \n1, & r \\leq R, \\\\\n(R/r)^3, & r > R.\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "L = -\\frac{QR\\mu_0M}{2}\\hat{z}", "expr2": "L = \\frac{2}{9} \\mu_0 M Q R^2 \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "-Q*R*hat*muM*z/2", "expr2": "2*M*Q*R**2*hat*mathbf*mu*z/9"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/7-2", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have a magnetized rod bent into an almost-complete circle\n   * The magnetization M creates magnetic poles at the ends\n   * Due to w << R << L, we can treat this as a nearly complete circular loop\n\n2) When the rod is bent into a circle:\n   * The radius of the circle will be L/2π\n   * The ends of the rod face each other across the gap w\n\n3) The magnetized rod can be thought of as having magnetic poles at its ends:\n   * Surface pole density σₘ = M·n = M\n   * Each end face has area πR²\n   * Total magnetic \"charge\" on each face = ±MπR²\n\n4) The field at the center of the gap will be primarily due to these end faces\n   * Each face contributes approximately H = σₘ/2 = M/2\n   * The two faces together contribute M\n\n5) Due to w << R, we can use the parallel plate approximation:\n   * The field between two oppositely charged plates is σₘ/ε₀\n   * For magnetic case, the field is σₘ = M\n\n6) Therefore, the magnetic field B in the gap is:\n   * B = μ₀H = μ₀M\n\nThe magnetic field is directed along the axis of the original magnetization.\n\n\\[\\boxed{B = \\mu_0M}\\]\n\nThis result shows that the field in the gap is proportional to the magnetization and independent of the geometry (as long as the assumptions w << R << L hold).", "final_answers": ["B = \\mu_0M"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\mu_0M", "expr2": "\\mathbf{B} = \\mu_0 M \\left(1 - \\frac{w}{2R}\\right)"}, "preprocessed_expressions": {"expr1": "muM", "expr2": "mu*M(1 - w/(2*R))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = \\mu_0M", "expr2": "\\mathbf{B}_g = \\mu_0 M \\left(1 - \\frac{w}{L}\\right)"}, "preprocessed_expressions": {"expr1": "muM", "expr2": "mu*M((L - w)/L)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/7-5", "solution": "Let me solve this step by step.\n\n1) At the boundary between two magnetic materials, there are two key boundary conditions when there is no free current:\n\n   a) The tangential component of H is continuous\n   b) The normal component of B is continuous\n\n2) We can write B in terms of H for each medium:\n   B₁ = μ₁H₁\n   B₂ = μ₂H₂\n\n3) Let's break down the fields into normal and tangential components:\n   - H₁ cos θ₁ and H₂ cos θ₂ are the normal components\n   - H₁ sin θ₁ and H₂ sin θ₂ are the tangential components\n\n4) Using boundary condition (a):\n   H₁ sin θ₁ = H₂ sin θ₂\n\n5) Using boundary condition (b) and the B = μH relation:\n   μ₁H₁ cos θ₁ = μ₂H₂ cos θ₂\n\n6) Dividing these equations:\n   (H₁ sin θ₁)/(μ₁H₁ cos θ₁) = (H₂ sin θ₂)/(μ₂H₂ cos θ₂)\n\n7) The H₁ and H₂ terms cancel out, giving:\n   (sin θ₁)/(μ₁ cos θ₁) = (sin θ₂)/(μ₂ cos θ₂)\n\n8) Rearranging:\n   (sin θ₁/cos θ₁)/μ₁ = (sin θ₂/cos θ₂)/μ₂\n\n9) Using the definition of tangent:\n   tan θ₁/μ₁ = tan θ₂/μ₂\n\n10) Final rearrangement:\n    tan θ₂/tan θ₁ = μ₂/μ₁\n\nTherefore:\n\n\\[\\boxed{\\frac{\\tan \\theta_2}{\\tan \\theta_1} = \\frac{\\mu_2}{\\mu_1}}\\]", "final_answers": ["\\frac{\\tan \\theta_2}{\\tan \\theta_1} = \\frac{\\mu_2}{\\mu_1}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{\\tan \\theta_2}{\\tan \\theta_1} = \\frac{\\mu_2}{\\mu_1}", "expr2": "\\frac{\\tan \\theta_2}{\\tan \\theta_1} = \\frac{\\mu_2}{\\mu_1}"}, "preprocessed_expressions": {"expr1": "1", "expr2": "1"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/12-2", "solution": "Let's solve this step by step.\n\n1) First, let's recall that for a stationary interface:\n   - The reflection angle equals the incident angle: θᵣ = θᵢ\n   - Snell's law: n₁sin(θᵢ) = n₂sin(θₜ)\n   where n = √ε for dielectric materials\n\n2) For a moving interface, we need to use relativistic transformations:\n   - The phase matching condition at the interface must be maintained\n   - The frequency and wavevector components transform according to Lorentz transformations\n\n3) For the reflection angle:\n   - Due to phase matching at the interface, the reflection angle must equal the incident angle even in the moving frame\n   - Therefore: θᵣ = θᵢ\n\n4) For the transmission angle:\n   - We need to use relativistic velocity addition formula\n   - The tangential component of velocity must be continuous across the interface\n   - Using relativistic Snell's law:\n   √ε₁sin(θᵢ) = √ε₂sin(θₜ)/(1 - β²)½\n\n5) Therefore, the transmission angle is:\n   θₜ = arcsin[(√ε₁/√ε₂)sin(θᵢ)(1 - β²)½]\n\n6) For the reflection coefficient (r):\n   r = [√ε₁cos(θᵢ) - √ε₂cos(θₜ)(1-β)/(1+β)] / [√ε₁cos(θᵢ) + √ε₂cos(θₜ)(1-β)/(1+β)]\n\n7) For the transmission coefficient (t):\n   t = [2√ε₁cos(θᵢ)] / [√ε₁cos(θᵢ) + √ε₂cos(θₜ)(1-β)/(1+β)]\n\nThe final answer for the angles and coefficients is:\n\n\\[\\boxed{\n\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}", "expr2": "\\tan \\theta_R = \\frac{\\left(1-\\beta^2\\right) \\sin \\theta_I}{\\left(1+\\beta^2\\right) \\cos \\theta_I-2 \\beta}"}, "preprocessed_expressions": {"expr1": "end*(beta + 1)", "expr2": "(1 - beta**2)*sin(theta)/(beta**2*cos(theta) - 2*beta + cos(theta))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}", "expr2": "\\tan \\theta_T = \\frac{n_1\\left(1-\\beta^2\\right) \\sin \\theta_I}{n_2\\left(1-\\beta \\cos \\theta_I\\right)}\\left[\\left(1-\\frac{n_1^2\\left(1-\\beta^2\\right) \\sin^2 \\theta_I}{n_2^2\\left(1-\\beta \\cos \\theta_I\\right)^2}\\right)^{1 / 2}+\\beta\\right]^{-1}"}, "preprocessed_expressions": {"expr1": "end*(beta + 1)", "expr2": "n(1 - beta**2)*sin(theta)/((beta + sqrt((beta - cos(theta))**2/(beta*cos(theta) - 1)**2))*n(-beta*cos(theta) + 1))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}", "expr2": "R = \\left(\\frac{1-2 \\beta \\cos \\theta_I+\\beta^2}{1-\\beta^2}\\right) R^{\\prime}"}, "preprocessed_expressions": {"expr1": "end*(beta + 1)", "expr2": "R**prime*(-beta**2 + 2*beta*cos(theta) - 1)/(beta**2 - 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\theta_R &= \\theta_I \\\\\n\\theta_T &= \\arcsin\\left[\\frac{\\sqrt{\\epsilon_1}}{\\sqrt{\\epsilon_2}}\\sin(\\theta_I)\\sqrt{1-\\beta^2}\\right] \\\\\nr &= \\frac{\\sqrt{\\epsilon_1}\\cos(\\theta_I) - \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}} \\\\\nt &= \\frac{2\\sqrt{\\epsilon_1}\\cos(\\theta_I)}{\\sqrt{\\epsilon_1}\\cos(\\theta_I) + \\sqrt{\\epsilon_2}\\cos(\\theta_T)\\frac{1-\\beta}{1+\\beta}}\n\\end{align*}", "expr2": "T = 1 - R"}, "preprocessed_expressions": {"expr1": "end*(beta + 1)", "expr2": "1 - R"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/5-1", "solution": "Let me solve this step by step.\n\n1) First, recall that for a dipole in an electric field, the torque is given by:\n   τ = **p** × **E**\n\n2) The electric field at the dipole's location comes from two sources:\n   - The image dipole (required by the method of images)\n   - The original dipole itself (which we can ignore as it doesn't contribute to torque on itself)\n\n3) For a grounded conducting plane, the image dipole:\n   - Is located at distance z below the plane (total distance 2z from real dipole)\n   - Has magnitude p\n   - Points in the direction that is reflected across the plane\n\n4) The image dipole creates an electric field at the location of the real dipole. For a dipole field at distance r:\n   E = (1/4πε₀)[3(**p**·r̂)r̂ - **p**]/r³\n\n5) In this case:\n   - r = 2z\n   - The image dipole moment is **p**' = p(sin θ, -cos θ)\n   - The direction vector r̂ is vertical (0, 1)\n\n6) Calculating the electric field and then the torque:\n   - The field will have components both parallel and perpendicular to the plane\n   - When taking the cross product with **p**, only the perpendicular component contributes\n   - The torque will be:\n   τ = p²sin(2θ)/(32πε₀z³)\n\n7) The direction of the torque:\n   - When θ > 0, the torque is negative (clockwise)\n   - When θ < 0, the torque is positive (counterclockwise)\n   - At θ = 0 and θ = π/2, the torque is zero\n\n8) For stable equilibrium:\n   The dipole will align perpendicular to the plane (θ = 0)\n\nTherefore, the torque is:\n\n\\[\\boxed{\\tau = \\frac{p^2\\sin(2\\theta)}{32\\pi\\epsilon_0z^3}, \\text{ and the dipole will align perpendicular to the plane}}\\]", "final_answers": ["\\tau = \\frac{p^2\\sin(2\\theta)}{32\\pi\\epsilon_0z^3}, \\text{ and the dipole will align perpendicular to the plane}"], "equivalency_results": [{"input_expressions": {"expr1": "\\tau = \\frac{p^2\\sin(2\\theta)}{32\\pi\\epsilon_0z^3}, \\text{ and the dipole will align perpendicular to the plane}", "expr2": "\\mathbf{N} = \\frac{p^2 \\sin 2\\theta \\, \\mathbf{\\hat{x}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau = \\frac{p^2\\sin(2\\theta)}{32\\pi\\epsilon_0z^3}, \\text{ and the dipole will align perpendicular to the plane}", "expr2": "\\text{Pointing directly towards or away from the plane.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-6", "solution": "Let me solve this step by step.\n\n(a) For interference maxima separation:\n- The formula for interference maxima separation is: δy = λL/d\n- We're given d = 1000λ\n- Therefore: δy = λL/1000λ = L/1000\n\n(b) For diffraction pattern widths:\n- The width of central maximum for a single slit is: Δy = 2λL/w\n- For slit 1 (w₁ = 10λ): Δy₁ = 2λL/(10λ) = L/5\n- For slit 2 (w₂ = 20λ): Δy₂ = 2λL/(20λ) = L/10\n\n(c) Number of fringes in central max:\n- We need to find how many interference maxima fit in the smaller central diffraction maximum\n- Smaller central max is Δy₂ = L/10\n- Interference fringe spacing is δy = L/1000\n- Number of fringes = Δy₂/(2δy) = (L/10)/(2L/1000) = 50\n\n(d) Intensity ratio:\n- For two slits of different widths, I_max/I_min = (w₁ + w₂)²/(w₁ - w₂)²\n- w₁ = 10λ, w₂ = 20λ\n- I_max/I_min = (30λ)²/(10λ)² = 9\n\nFinal answers:\n\\[\\boxed{\n\\begin{align*}\n(a) \\: &δy = L/1000 \\\\\n(b) \\: &Δy_1 = L/5, \\: Δy_2 = L/10 \\\\\n(c) \\: &50 \\: fringes \\\\\n(d) \\: &I_{max}/I_{min} = 9\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) \\: &δy = L/1000 \\\\\n(b) \\: &Δy_1 = L/5, \\: Δy_2 = L/10 \\\\\n(c) \\: &50 \\: fringes \\\\\n(d) \\: &I_{max}/I_{min} = 9\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) \\: &δy = L/1000 \\\\\n(b) \\: &Δy_1 = L/5, \\: Δy_2 = L/10 \\\\\n(c) \\: &50 \\: fringes \\\\\n(d) \\: &I_{max}/I_{min} = 9\n\\end{align*}", "expr2": "\\delta y = \\frac{L}{1000}"}, "preprocessed_expressions": {"expr1": "9*end", "expr2": "L/1000"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/10-1", "solution": "Let me solve this step by step.\n\n(a) First, let's derive the dispersion relation (k vs ω):\n\n1) In a metal, the free electrons respond to the electromagnetic wave's electric field E according to:\n   m(d²x/dt²) = -eE\n\n2) For a plane wave, E = E₀e^{i(kx-ωt)}\n   The electron displacement will have similar time dependence: x = x₀e^{i(kx-ωt)}\n\n3) The electron motion creates a current density J:\n   J = -nev\n   where v = dx/dt = -iωx\n\n4) Therefore:\n   J = ne²E/(mω)\n\n5) This gives us the conductivity σ(ω):\n   σ(ω) = ne²/(imω)\n\n6) The dielectric function ε(ω) is related to conductivity:\n   ε(ω) = ε₀(1 + iσ(ω)/(ωε₀))\n   \n7) Substituting:\n   ε(ω) = ε₀(1 - ωₚ²/ω²)\n   where ωₚ = √(ne²/mε₀) is the plasma frequency\n\n8) For electromagnetic waves, k² = (ω²/c²)ε(ω)/ε₀\n   Therefore:\n   k² = (ω²/c²)(1 - ωₚ²/ω²)\n\n(b) For the threshold frequency:\n\n1) For waves to propagate, k must be real\n   This means k² must be positive\n\n2) From our dispersion relation:\n   k² = (ω²/c²)(1 - ωₚ²/ω²) > 0\n\n3) Therefore:\n   1 - ωₚ²/ω² > 0\n   ω > ωₚ\n\n4) The threshold frequency is thus the plasma frequency ωₚ = √(ne²/mε₀)\n\nThe final answers are:\n\n\\[ \\boxed{k = \\frac{\\omega}{c}\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}} \\]\n\n\\[ \\boxed{\\omega_{threshold} = \\omega_p = \\sqrt{\\frac{ne^2}{m\\epsilon_0}}} \\]", "final_answers": ["k = \\frac{\\omega}{c}\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}", "\\omega_{threshold} = \\omega_p = \\sqrt{\\frac{ne^2}{m\\epsilon_0}}"], "equivalency_results": [{"input_expressions": {"expr1": "k = \\frac{\\omega}{c}\\sqrt{1 - \\frac{\\omega_p^2}{\\omega^2}}", "expr2": "k = \\frac{\\omega}{c} \\sqrt{1 - \\left( \\frac{\\omega_p}{\\omega} \\right)^2}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\omega_{threshold} = \\omega_p = \\sqrt{\\frac{ne^2}{m\\epsilon_0}}", "expr2": "k = \\frac{\\omega}{c} \\sqrt{1 - \\left( \\frac{\\omega_p}{\\omega} \\right)^2}"}, "preprocessed_expressions": {"expr1": "sqrt(e**2*n/(epsilon*m))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_{threshold} = \\omega_p = \\sqrt{\\frac{ne^2}{m\\epsilon_0}}", "expr2": "\\omega_p = \\sqrt{\\frac{n e^2}{\\epsilon_0 m}}"}, "preprocessed_expressions": {"expr1": "sqrt(e**2*n/(epsilon*m))", "expr2": "sqrt(e**2*n/(epsilon*m))"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/9-4", "solution": "Let's solve this step by step.\n\n(a) For the magnetic field inside the cylinder:\n\n1) Using Ampère's law for a circular path of radius r ≤ R inside the cylinder:\n∮B⋅dl = μ₀Ienclosed\n\n2) Due to symmetry, B is azimuthal (circulates around the axis) and constant on the circular path.\n2πrB = μ₀I(r²/R²)I\n\n3) Therefore, inside the cylinder (r ≤ R):\nB(r) = (μ₀I/2πR²)r\nThe field direction is azimuthal, following the right-hand rule.\n\n(b) For the focusing effect:\n\n1) The Lorentz force on a charged particle is F = q(v×B)\nSince v is parallel to the axis and B is azimuthal, F points radially inward.\n\n2) For small angles in the thin lens approximation:\n- The radial force is F = qvB(r) = qv(μ₀I/2πR²)r\n- This is proportional to r, like a spring force F = -kr\n\n3) The time spent in the cylinder is t = L/v\n\n4) The radial acceleration is:\na = F/m = qvB(r)/m = qv(μ₀I/2πR²)r/m\n\n5) For a thin lens, the deflection angle θ is:\nθ = (at²/2)/L = (qμ₀IL/4πR²p₀)r\n\n6) For a focusing lens, θ = -r/f where f is the focal length.\nTherefore:\nf = -4πR²p₀/(qμ₀IL)\n\nThe negative sign indicates real focusing.\n\nThe focal length is:\n\n\\[\\boxed{f = \\frac{4\\pi R^2p_0}{qμ₀IL}}\\]", "final_answers": ["f = \\frac{4\\pi R^2p_0}{qμ₀IL}"], "equivalency_results": [{"input_expressions": {"expr1": "f = \\frac{4\\pi R^2p_0}{qμ₀IL}", "expr2": "\\mathbf{B} = \\frac{\\mu_0 I}{2 \\pi R^2} r \\, \\hat{\\phi} = \\frac{B_0}{R}(-y \\hat{\\mathbf{x}} + x \\hat{\\mathbf{y}}), \\text{ where } B_0 \\equiv \\frac{\\mu_0 I}{2 \\pi R}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{4\\pi R^2p_0}{qμ₀IL}", "expr2": "f = \\frac{2 \\pi p_0 R^2}{\\mu_0 q I L}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{4\\pi R^2p}{qμ₀IL}\n~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/9-3", "solution": "Let's solve this step by step.\n\n(a) First, let's find the magnetic field components and analyze their effect:\n\n1) Given Φ = B₀xy/R, we can find B = -∇Φ:\n   * Bₓ = -∂Φ/∂x = -B₀y/R\n   * By = -∂Φ/∂y = -B₀x/R\n   * Bz = -∂Φ/∂z = 0\n\n2) For particles moving along z-axis (v = vẑ), the Lorentz force is:\n   * Fₓ = qvBy = -qvB₀x/R\n   * Fy = -qvBₓ = qvB₀y/R\n   * Fz = 0\n\n3) The equations of motion are:\n   * d²x/dt² = -(qvB₀/mR)x\n   * d²y/dt² = (qvB₀/mR)y\n\n4) These are harmonic oscillator equations with:\n   * x-direction: focusing (negative coefficient)\n   * y-direction: defocusing (positive coefficient)\n   \nSo the quadrupole acts as a focusing lens in x and defocusing lens in y.\n\n(b) For the focal length calculation:\n\n1) For relativistic particles:\n   * p = γmv ≈ E/c\n   * For 20 GeV electrons, p = 20×10⁹ eV/c\n\n2) The focal length formula for a quadrupole is:\n   * 1/f = (qB₀L)/(pR)\n\n3) Substituting values:\n   * q = 1.6×10⁻¹⁹ C\n   * B₀ = 1 T\n   * L = 2 m\n   * R = 0.2 m\n   * p = 20×10⁹ × 1.6×10⁻¹⁹/3×10⁸ = 1.07×10⁻⁸ N·s\n\n4) Calculate:\n   * 1/f = (1.6×10⁻¹⁹ × 1 × 2)/(1.07×10⁻⁸ × 0.2)\n   * f = 6.7 meters\n\n\\[\\boxed{f = 6.7 \\text{ meters}}\\]\n\nNote: The quadrupole focuses in one plane while defocusing in the other. Multiple quadrupoles with alternating orientations are typically used to achieve net focusing in both planes.", "final_answers": ["f = 6.7 \\text{ meters}"], "equivalency_results": [{"input_expressions": {"expr1": "f = 6.7 \\text{ meters}", "expr2": "f_y = -f_x = \\frac{p_0 R}{q L B_0}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = 6.7 \\text{ meters}", "expr2": "f \\approx 6.67 \\, \\mathrm{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/8-1", "solution": "Let me solve this step by step.\n\n1) First, let's understand what creates an EMF in this situation:\n   * The EMF is induced when there's a change in magnetic flux through the loop\n   * In this case, the electric field E between the capacitor plates is changing with time\n   * This changing E-field creates a changing magnetic field (by Maxwell's equations)\n\n2) The EMF is given by Faraday's law:\n   * ε = -dΦ/dt\n   * where Φ is the magnetic flux through the loop\n\n3) For a parallel plate capacitor:\n   * The electric field E is uniform between the plates\n   * The flux through the loop is related to the area of the loop in the field\n   * Only the portion of height h is in the field\n\n4) The flux can be written as:\n   * Φ = E·A = E·h·w\n   * where w is the width of the loop\n\n5) Therefore, the EMF is:\n   * ε = -d(E·h·w)/dt\n   * ε = -h·w·dE/dt\n   * The negative sign indicates the direction of induced current (Lenz's law)\n\n6) Once we have the EMF, the current can be found using Ohm's law:\n   * I = ε/R\n   * I = -(h·w/R)·dE/dt\n\nThe final answers for EMF and current are:\n\n\\[ \\boxed{\\varepsilon = -h w \\frac{dE}{dt}} \\]\n\n\\[ \\boxed{I = -\\frac{hw}{R}\\frac{dE}{dt}} \\]\n\nThe negative signs indicate that the induced current flows in a direction that opposes the change in the electric field, in accordance with Lenz's law.", "final_answers": ["\\varepsilon = -h w \\frac{dE}{dt}", "I = -\\frac{hw}{R}\\frac{dE}{dt}"], "equivalency_results": [{"input_expressions": {"expr1": "\\varepsilon = -h w \\frac{dE}{dt}", "expr2": "\\text{emf} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\varepsilon = -h w \\frac{dE}{dt}", "expr2": "I = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "I = -\\frac{hw}{R}\\frac{dE}{dt}", "expr2": "\\text{emf} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = -\\frac{hw}{R}\\frac{dE}{dt}", "expr2": "I = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/11-3", "solution": "Let's solve this step by step.\n\n(a) First, let's analyze the motion and radiation:\n\n1) The particle undergoes simple harmonic motion with:\n   - Angular frequency: ω = √(k/m)\n   - Position: y(t) = d cos(ωt)\n   - Acceleration: a(t) = -dω² cos(ωt)\n\n2) For an accelerating charge, the radiation power pattern follows Larmor's formula:\n   P(θ) = (q²a²/6πε₀c³) sin²θ\n\n3) For our case, θ is the angle from vertical to R, and:\n   sin²θ = R²/(R² + h²)\n\n4) The instantaneous intensity at distance r is:\n   I = P/(4πr²)\n   where r = √(R² + h²)\n\n5) The time-averaged intensity is:\n   I(R) = (q²d²ω⁴/24πε₀c³) * [R²/(R² + h²)³]\n\n6) To find maximum intensity, differentiate I(R) with respect to R and set to zero:\n   dI/dR = 0 leads to R = h/√2\n\nThe maximum intensity occurs at R = h/√2.\n\n(b) To check total power:\n\n1) Integrate intensity over entire floor:\n   P_total = ∫₀^∞ I(R) * 2πR dR\n   = (q²d²ω⁴/12ε₀c³)\n\n2) This matches Larmor's formula for the total radiated power from an oscillating charge, confirming our result.\n\n(c) For radiative damping:\n\n1) Energy loss rate = P_total = (q²d²ω⁴/12ε₀c³)\n2) Total energy of oscillator = ½kd² = ½mω²d²\n3) Using exponential decay: d(t) = d₀e^(-t/τ)\n4) Time constant τ = (6πε₀c³m)/(q²ω²)\n\nThe final answers are:\n\n\\[\\boxed{I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}}\\]\n\\[\\boxed{R_{max} = \\frac{h}{\\sqrt{2}}}\\]\n\\[\\boxed{\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}}\\]", "final_answers": ["I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}", "R_{max} = \\frac{h}{\\sqrt{2}}", "\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}"], "equivalency_results": [{"input_expressions": {"expr1": "I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}", "expr2": "I = \\left( \\frac{\\mu_0 p_0^2 \\omega^4}{32 \\pi^2 c} \\right) \\frac{R^2 h}{(R^2 + h^2)^{5/2}}"}, "preprocessed_expressions": {"expr1": "R**2*d**2*omega**4*q**2/(24*epsilonc**3*pi*(R**6 + 3*R**4*h**2 + 3*R**2*h**4 + h**6))", "expr2": "R**2*h*mu*omega**4*p**2/(32*c*pi**2*sqrt(R**2 + h**2)*(R**4 + 2*R**2*h**2 + h**4))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}", "expr2": "R = \\sqrt{\\frac{2}{3}} h"}, "preprocessed_expressions": {"expr1": "R**2*d**2*omega**4*q**2/(24*epsilonc**3*pi*(R**6 + 3*R**4*h**2 + 3*R**2*h**4 + h**6))", "expr2": "sqrt(6)*h/3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}", "expr2": "P = \\frac{\\mu_0 q^2 d^2 \\omega^4}{24 \\pi c}"}, "preprocessed_expressions": {"expr1": "R**2*d**2*omega**4*q**2/(24*epsilonc**3*pi*(R**6 + 3*R**4*h**2 + 3*R**2*h**4 + h**6))", "expr2": "d**2*mu*omega**4*q**2/(24*c*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(R) = \\frac{q^2d^2\\omega^4}{24\\pi\\epsilon_0c^3} \\frac{R^2}{(R^2 + h^2)^3}", "expr2": "\\tau = \\frac{12 \\pi m^2 c}{\\mu_0 q^2 k}"}, "preprocessed_expressions": {"expr1": "R**2*d**2*omega**4*q**2/(24*epsilonc**3*pi*(R**6 + 3*R**4*h**2 + 3*R**2*h**4 + h**6))", "expr2": "12*c*m**2*pi/(k*mu*q**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R_{max} = \\frac{h}{\\sqrt{2}}", "expr2": "I = \\left( \\frac{\\mu_0 p_0^2 \\omega^4}{32 \\pi^2 c} \\right) \\frac{R^2 h}{(R^2 + h^2)^{5/2}}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*h/2", "expr2": "R**2*h*mu*omega**4*p**2/(32*c*pi**2*sqrt(R**2 + h**2)*(R**4 + 2*R**2*h**2 + h**4))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R_{max} = \\frac{h}{\\sqrt{2}}", "expr2": "R = \\sqrt{\\frac{2}{3}} h"}, "preprocessed_expressions": {"expr1": "sqrt(2)*h/2", "expr2": "sqrt(6)*h/3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R_{max} = \\frac{h}{\\sqrt{2}}", "expr2": "P = \\frac{\\mu_0 q^2 d^2 \\omega^4}{24 \\pi c}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*h/2", "expr2": "d**2*mu*omega**4*q**2/(24*c*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R_{max} = \\frac{h}{\\sqrt{2}}", "expr2": "\\tau = \\frac{12 \\pi m^2 c}{\\mu_0 q^2 k}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*h/2", "expr2": "12*c*m**2*pi/(k*mu*q**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}", "expr2": "I = \\left( \\frac{\\mu_0 p_0^2 \\omega^4}{32 \\pi^2 c} \\right) \\frac{R^2 h}{(R^2 + h^2)^{5/2}}"}, "preprocessed_expressions": {"expr1": "6*epsilonc**3*m*pi/(omega**2*q**2)", "expr2": "R**2*h*mu*omega**4*p**2/(32*c*pi**2*sqrt(R**2 + h**2)*(R**4 + 2*R**2*h**2 + h**4))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}", "expr2": "R = \\sqrt{\\frac{2}{3}} h"}, "preprocessed_expressions": {"expr1": "6*epsilonc**3*m*pi/(omega**2*q**2)", "expr2": "sqrt(6)*h/3"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}", "expr2": "P = \\frac{\\mu_0 q^2 d^2 \\omega^4}{24 \\pi c}"}, "preprocessed_expressions": {"expr1": "6*epsilonc**3*m*pi/(omega**2*q**2)", "expr2": "d**2*mu*omega**4*q**2/(24*c*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau = \\frac{6\\pi\\epsilon_0c^3m}{q^2\\omega^2}", "expr2": "\\tau = \\frac{12 \\pi m^2 c}{\\mu_0 q^2 k}"}, "preprocessed_expressions": {"expr1": "6*epsilonc**3*m*pi/(omega**2*q**2)", "expr2": "12*c*m**2*pi/(k*mu*q**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/4-4", "solution": "Let me solve this step by step.\n\n1) First, let's understand what stability means:\n   - For a position to be stable, the potential energy should be at a minimum\n   - This means the force should be restorative (point back to the position) when displaced in any direction\n\n2) For electrostatic forces:\n   - Like charges repel\n   - Force follows inverse square law (F ∝ 1/r²)\n   - The force at any point is the vector sum of forces from all charges\n\n3) At the center of the cube:\n   - Due to symmetry, the net force is zero\n   - This is an equilibrium point\n   - But we need to determine if it's stable or unstable\n\n4) Consider a small displacement from center:\n   - When moved slightly toward any corner, that corner's repulsive force becomes stronger\n   - The opposite corner's force becomes weaker\n   - The net effect is to push the charge further away from the center\n   - This is because of the inverse square law - closer forces grow faster than farther forces weaken\n\n5) Mathematical proof:\n   - This follows from Earnshaw's theorem\n   - No stable equilibrium can exist for charged particles under purely electrostatic forces\n   - The potential satisfies Laplace's equation ∇²V = 0\n   - By the maximum principle, no local minimum can exist in charge-free space\n\n6) Conclusion:\n   - The equilibrium at the center is unstable\n   - Any slight displacement will cause the charge to accelerate away from the center\n   - No potential barrier exists to prevent the charge from escaping\n\n\\[ \\boxed{\\text{No, stable suspension is impossible}} \\]\n\nThis is a direct consequence of Earnshaw's theorem, which proves that stable electrostatic levitation is impossible in classical physics.", "final_answers": ["\\text{No, stable suspension is impossible}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{No, stable suspension is impossible}", "expr2": "\\text{No, a positive charge cannot be suspended in a stable manner at the center due to the potential being a saddle point. Laplace's equation forbids a local minimum at the center.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/11-4", "solution": "Let me solve this step by step.\n\n(a) First, let's find the angular distribution:\n\n1) For a single dipole antenna along z-axis, the angular distribution is proportional to sin²θ.\n\n2) For an array of N identical sources, we multiply this by the array factor |F|², where:\n   F = Σ exp(ikx_n sinθ cosφ)\n   where x_n are the positions of the antennae\n\n3) In this case, we have 7 antennae at positions:\n   x = 0, ±λ/2, ±λ, ±3λ/2\n\n4) k = 2π/λ, so kx_n = 2πx_n/λ\n\n5) The array factor is:\n   F = 1 + 2cos(πsinθcosφ) + 2cos(2πsinθcosφ) + 2cos(3πsinθcosφ)\n\n6) The total angular distribution is:\n   P(θ,φ) ∝ sin²θ |F|²\n\n(b) For maximum intensity:\n\n1) sin²θ is maximum at θ = π/2\n2) For θ = π/2, the array factor is maximum when φ = 0 or π\n\n3) At these values:\n   F = 1 + 2cos(π) + 2cos(2π) + 2cos(3π)\n   F = 1 - 2 + 2 - 2 = -1\n\n4) |F|² = 1\n\n5) For a single dipole, maximum intensity is just sin²(π/2) = 1\n\n6) For the array, maximum intensity is 7² = 49 times larger than single dipole\n   (because we have 7 antennae in phase)\n\nThe final answer for part (a) is:\n\\[ \\boxed{P(\\theta,φ) \\propto \\sin^2\\theta |1 + 2\\cos(π\\sin\\theta\\cos\\phi) + 2\\cos(2π\\sin\\theta\\cos\\phi) + 2\\cos(3π\\sin\\theta\\cos\\phi)|^2} \\]\n\nFor part (b):\n\\[ \\boxed{I_{max,array} = 49 I_{max,single}} \\]", "final_answers": ["P(\\theta,φ) \\propto \\sin^2\\theta |1 + 2\\cos(π\\sin\\theta\\cos\\phi) + 2\\cos(2π\\sin\\theta\\cos\\phi) + 2\\cos(3π\\sin\\theta\\cos\\phi)|^2", "I_{max,array} = 49 I_{max,single}"], "equivalency_results": [{"input_expressions": {"expr1": "P(\\theta,φ) \\propto \\sin^2\\theta |1 + 2\\cos(π\\sin\\theta\\cos\\phi) + 2\\cos(2π\\sin\\theta\\cos\\phi) + 2\\cos(3π\\sin\\theta\\cos\\phi)|^2", "expr2": "\\frac{d\\bar{P}}{d\\Omega} \\propto \\sin^2\\theta \\frac{\\sin^2(7\\delta)}{\\sin^2(\\delta)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nP(\\theta,φ) \\propto \\sin^2\\theta |1 + 2\\cos(π\\sin\\theta\\cos\\phi) + 2\\cos(2π\\sin\\theta\\cos\\phi) + 2\\cos(3π\\sin\\theta\\cos\\phi)|^2\n~~~~~~~~~^"}, {"input_expressions": {"expr1": "I_{max,array} = 49 I_{max,single}", "expr2": "\\frac{d\\bar{P}}{d\\Omega} \\propto \\sin^2\\theta \\frac{\\sin^2(7\\delta)}{\\sin^2(\\delta)}"}, "preprocessed_expressions": {"expr1": "49*I", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/4-3", "solution": "Let's solve this step by step.\n\n(a) To find the electrostatic potential:\n\n1) The potential will be the sum of:\n   - Potential due to point charge Q\n   - Potential due to its image charge -Q below the plane\n   - Additional potential due to the hemisphere modification\n\n2) For a conducting hemisphere in a uniform field, we can use the solution in spherical coordinates:\n   - The potential outside the hemisphere (r > R) can be written as:\n   V = V₀ + A(R³/r²)cosθ\n   where V₀ is the potential due to Q and its image\n\n3) The potential due to Q and its image is:\n   V₀ = Q/4πε₀ [1/|r-r'| - 1/|r-r''|]\n   where r' is the position of Q and r'' is the position of -Q\n\n(b) For the induced charge:\n\n1) The total induced charge on the protrusion can be found using Gauss's law:\n   Q_ind = -ε₀∮E·dA\n\n2) The electric field can be found from the gradient of the potential\n\n3) For a hemisphere in this configuration:\n   Q_ind = -3πε₀QR²/h²\n\n(c) In the limit h→∞, Q→∞ with Q/h²=2πε₀E₀:\n\n1) The potential far from the protrusion approaches:\n   V = -E₀z + (E₀R³/2r²)cosθ\n\n2) The first term is the uniform field potential\n   The second term is the dipole-like modification due to the protrusion\n\n3) The modification falls off as 1/r²\n\nThe final answer for the induced charge on the protrusion is:\n\n\\[\\boxed{Q_{ind} = -3\\pi\\epsilon_0QR^2/h^2}\\]\n\nAnd the potential modification in the limit case is:\n\n\\[\\boxed{V = -E_0z + \\frac{E_0R^3}{2r^2}\\cos\\theta}\\]", "final_answers": ["Q_{ind} = -3\\pi\\epsilon_0QR^2/h^2", "V = -E_0z + \\frac{E_0R^3}{2r^2}\\cos\\theta"], "equivalency_results": [{"input_expressions": {"expr1": "Q_{ind} = -3\\pi\\epsilon_0QR^2/h^2", "expr2": "\\Phi = \\frac{Q}{4 \\pi \\epsilon_0}\\left(\\frac{1}{\\sqrt{\\rho^2+(z-h)^2}}-\\frac{1}{\\sqrt{\\rho^2+(z+h)^2}}+\\frac{R}{h}\\left(\\frac{1}{\\sqrt{\\rho^2+\\left(z+R^2 / h\\right)^2}}-\\frac{1}{\\sqrt{\\rho^2+\\left(z-R^2 / h\\right)^2}}\\right)\\right)"}, "preprocessed_expressions": {"expr1": "-3*epsilonQR**2*pi/h**2", "expr2": "Q*R/(4*epsilon*h*pi*sqrt(R**4/h**2 + 2*R**2*z/h + rho**2 + z**2)) - Q*R/(4*epsilon*h*pi*sqrt(R**4/h**2 - 2*R**2*z/h + rho**2 + z**2)) - Q/(4*epsilon*pi*sqrt(h**2 + 2*h*z + rho**2 + z**2)) + Q/(4*epsilon*pi*sqrt(h**2 - 2*h*z + rho**2 + z**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q_{ind} = -3\\pi\\epsilon_0QR^2/h^2", "expr2": "Q_{\\text{protrusion induced}} = - \\left[ 1 - \\left( \\frac{1 - (R/h)^2}{\\sqrt{1 + (R/h)^2}} \\right) \\right] Q"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Q_{ind} = -3\\pi\\epsilon_0QR^2/h^2", "expr2": "\\mathbf{p}_{\\text{protrusion}} = \\frac{-2 Q R^3}{h^2} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = -E_0z + \\frac{E_0R^3}{2r^2}\\cos\\theta", "expr2": "\\Phi = \\frac{Q}{4 \\pi \\epsilon_0}\\left(\\frac{1}{\\sqrt{\\rho^2+(z-h)^2}}-\\frac{1}{\\sqrt{\\rho^2+(z+h)^2}}+\\frac{R}{h}\\left(\\frac{1}{\\sqrt{\\rho^2+\\left(z+R^2 / h\\right)^2}}-\\frac{1}{\\sqrt{\\rho^2+\\left(z-R^2 / h\\right)^2}}\\right)\\right)"}, "preprocessed_expressions": {"expr1": "E*R**3*cos(theta)/(2*r**2) - E*z", "expr2": "Q*R/(4*epsilon*h*pi*sqrt(R**4/h**2 + 2*R**2*z/h + rho**2 + z**2)) - Q*R/(4*epsilon*h*pi*sqrt(R**4/h**2 - 2*R**2*z/h + rho**2 + z**2)) - Q/(4*epsilon*pi*sqrt(h**2 + 2*h*z + rho**2 + z**2)) + Q/(4*epsilon*pi*sqrt(h**2 - 2*h*z + rho**2 + z**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = -E_0z + \\frac{E_0R^3}{2r^2}\\cos\\theta", "expr2": "Q_{\\text{protrusion induced}} = - \\left[ 1 - \\left( \\frac{1 - (R/h)^2}{\\sqrt{1 + (R/h)^2}} \\right) \\right] Q"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V = -E_0z + \\frac{E_0R^3}{2r^2}\\cos\\theta", "expr2": "\\mathbf{p}_{\\text{protrusion}} = \\frac{-2 Q R^3}{h^2} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/4-2", "solution": "Let's solve this step by step:\n\n1) First, let's understand the forces involved:\n   * Spring force: F_s = -kx\n   * Electrostatic force: F_e between the point charge and its induced charge on the sphere\n\n2) When the sphere is displaced by x, the point charge q induces charges on the sphere:\n   * Due to grounding, the sphere gets an induced charge distribution\n   * The net force can be calculated using the method of images\n   * The image charge q' = -qR/x inside the sphere at distance R²/x from the center\n\n3) The electrostatic force is:\n   F_e = kₑq²R/(x²)\n   where kₑ is Coulomb's constant\n\n4) The total force is:\n   F_total = -kx + kₑq²R/(x²)\n\n5) For small oscillations, we can expand F_total around x = R:\n   F_total ≈ -kx + kₑq²R/(R²)(1 - 2(x-R)/R)\n   = -kx + kₑq²/R - 2kₑq²(x-R)/R³\n\n6) For simple harmonic motion around x = R:\n   * The net force at x = R should be zero\n   * The force should be restoring (negative derivative)\n\n7) The effective spring constant is:\n   k_eff = k + 2kₑq²/R³\n\n8) For stable oscillation:\n   k_eff > 0\n   k + 2kₑq²/R³ > 0\n\n9) Therefore:\n   q² < kR³/(2kₑ)\n   The critical charge is: qc = √(kR³/(2kₑ))\n\n10) The oscillation frequency is:\n    ω = √(k_eff/m) = √((k + 2kₑq²/R³)/m)\n\nThe final answers are:\n\n\\[\\boxed{q_c = \\sqrt{\\frac{kR^3}{2k_e}}, \\quad \\omega = \\sqrt{\\frac{k + 2k_eq^2/R^3}{m}}}\\]", "final_answers": ["q_c = \\sqrt{\\frac{kR^3}{2k_e}}, \\quad \\omega = \\sqrt{\\frac{k + 2k_eq^2/R^3}{m}}"], "equivalency_results": [{"input_expressions": {"expr1": "q_c = \\sqrt{\\frac{kR^3}{2k_e}}, \\quad \\omega = \\sqrt{\\frac{k + 2k_eq^2/R^3}{m}}", "expr2": "\\omega = \\sqrt{\\frac{k}{m} - \\frac{q^2}{4\\pi\\varepsilon_0 R^3 m}} = \\omega_0 \\sqrt{1 - (q/q_c)^2}"}, "preprocessed_expressions": {"expr1": "sqrt(k*(R**3 + 2*q**2)/(R**3*m))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "q_c = \\sqrt{\\frac{kR^3}{2k_e}}, \\quad \\omega = \\sqrt{\\frac{k + 2k_eq^2/R^3}{m}}", "expr2": "q_c = \\sqrt{4 \\pi \\epsilon_0 R^3 k}"}, "preprocessed_expressions": {"expr1": "sqrt(k*(R**3 + 2*q**2)/(R**3*m))", "expr2": "2*sqrt(R**3*epsilon*k*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/11-2", "solution": "Let's solve this step by step.\n\n1) First, let's recall the fields for an oscillating dipole along z-axis:\n   * E_θ = (p₀ω²sinθ/4πε₀c²r) sin(ωt-kr)\n   * B_φ = (p₀ω²sinθ/4πε₀c³r) sin(ωt-kr)\n\n2) For our rotating dipole, we need to:\n   * Transform these expressions for x and y directions\n   * Apply superposition with 90° phase difference\n\n3) For x-direction (θ measured from x-axis):\n   * E_θx = (p₀ω²sinθ/4πε₀c²r) cos(ωt-kr)\n   * B_φx = (p₀ω²sinθ/4πε₀c³r) cos(ωt-kr)\n\n4) For y-direction (θ measured from y-axis):\n   * E_θy = (p₀ω²sinθ/4πε₀c²r) sin(ωt-kr)\n   * B_φy = (p₀ω²sinθ/4πε₀c³r) sin(ωt-kr)\n\n5) Total fields (superposition):\n   * E_total = √(E_θx² + E_θy²)\n   * B_total = √(B_φx² + B_φy²)\n\n6) The Poynting vector S = (E × B)/μ₀:\n   * S = (p₀²ω⁴sin²θ/16π²ε₀c³r²)\n\n7) The intensity profile (time-averaged Poynting vector):\n   * I(θ) = (p₀²ω⁴sin²θ/32π²ε₀c³r²)\n\n8) Total power radiated:\n   * P = ∫I(θ)r²dΩ = (p₀²ω⁴/12πε₀c³)\n\n9) The intensity profile is symmetric about the z-axis, forming a \"donut\" shape.\n\n10) The power result is reasonable because:\n   * It's proportional to ω⁴ (like a single dipole)\n   * It's proportional to p₀²\n   * The numerical factor is consistent with dipole radiation\n\n11) Regarding superposition:\n   * The x and y components are orthogonal\n   * The 90° phase difference means cross terms cancel in time average\n   * This is why power addition works here\n\nFinal answer:\n\n\\[\\boxed{I(\\theta) = \\frac{p_0^2\\omega^4\\sin^2\\theta}{32\\pi^2\\epsilon_0c^3r^2}, \\quad P = \\frac{p_0^2\\omega^4}{12\\pi\\epsilon_0c^3}}\\]", "final_answers": ["I(\\theta) = \\frac{p_0^2\\omega^4\\sin^2\\theta}{32\\pi^2\\epsilon_0c^3r^2}, \\quad P = \\frac{p_0^2\\omega^4}{12\\pi\\epsilon_0c^3}"], "equivalency_results": [{"input_expressions": {"expr1": "I(\\theta) = \\frac{p_0^2\\omega^4\\sin^2\\theta}{32\\pi^2\\epsilon_0c^3r^2}, \\quad P = \\frac{p_0^2\\omega^4}{12\\pi\\epsilon_0c^3}", "expr2": "\\bar{\\mathbf{S}} = \\frac{\\mu_0}{c} \\left( \\frac{p_0 \\omega^2}{4\\pi r} \\right)^2 \\left( 1 - \\frac{1}{2} \\sin^2 \\theta \\right) \\hat{\\mathbf{r}}"}, "preprocessed_expressions": {"expr1": "omega**4*p**2/(12*epsilonc**3*pi)", "expr2": "hat*mathbf*mu*omega**4*p**2*(cos(theta)**2 + 1)/(32*c*pi**2*r)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(\\theta) = \\frac{p_0^2\\omega^4\\sin^2\\theta}{32\\pi^2\\epsilon_0c^3r^2}, \\quad P = \\frac{p_0^2\\omega^4}{12\\pi\\epsilon_0c^3}", "expr2": "\\frac{d \\bar{P}}{d \\Omega} = \\frac{\\mu_0}{2c} \\left( \\frac{p_0 \\omega^2}{4\\pi} \\right)^2 \\left( 1 + \\cos^2 \\theta \\right)"}, "preprocessed_expressions": {"expr1": "omega**4*p**2/(12*epsilonc**3*pi)", "expr2": "mu*omega**4*p**2*(cos(theta)**2 + 1)/(32*c*pi**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I(\\theta) = \\frac{p_0^2\\omega^4\\sin^2\\theta}{32\\pi^2\\epsilon_0c^3r^2}, \\quad P = \\frac{p_0^2\\omega^4}{12\\pi\\epsilon_0c^3}", "expr2": "\\overline{P} = \\frac{\\mu_0 p_0^2 \\omega^4}{6\\pi c}"}, "preprocessed_expressions": {"expr1": "omega**4*p**2/(12*epsilonc**3*pi)", "expr2": "mu*omega**4*p**2/(6*c*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/4-5", "solution": "Let me solve this step by step.\n\n1) This is an electrostatics problem where we need to find the potential at the center of a dodecahedron given the boundary conditions.\n\n2) Key facts about a regular dodecahedron:\n   - It has 12 regular pentagonal faces\n   - It is highly symmetric\n   - All faces are equidistant from the center\n   - All faces are identical regular pentagons\n\n3) Given boundary conditions:\n   - 11 faces are grounded (V = 0)\n   - 1 face is at potential V\n\n4) Due to the uniqueness theorem in electrostatics, the potential at any point inside is uniquely determined by the boundary conditions.\n\n5) Due to the symmetry of the dodecahedron:\n   - Each face contributes equally in magnitude to the potential at the center\n   - The contribution only differs in sign depending on whether the face is grounded or at potential V\n\n6) Let's say each face, if at potential V, would contribute V/12 to the center potential.\n   This is because:\n   - All faces are equivalent due to symmetry\n   - If all faces were at potential V, the center would also be at V\n   - Therefore each face must contribute V/12\n\n7) In our case:\n   - 11 faces contribute 0 (as they're grounded)\n   - 1 face contributes V/12\n   - Total potential at center = V/12\n\nTherefore, the potential at the center is V/12.\n\n\\[ \\boxed{V_{center} = \\frac{V}{12}} \\]", "final_answers": ["V_{center} = \\frac{V}{12}"], "equivalency_results": [{"input_expressions": {"expr1": "V_{center} = \\frac{V}{12}", "expr2": "V_c = \\frac{V}{12}"}, "preprocessed_expressions": {"expr1": "V/12", "expr2": "V/12"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/6-1", "solution": "Let's solve this step by step.\n\n(a) For a circular current loop:\n\n1) The Biot-Savart law gives the magnetic field at point P:\n   $d\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{l} \\times \\hat{r}}{r^2}$\n\n2) Due to symmetry, at point (0,0,z), only the z-component survives.\n\n3) For a circular loop in xy-plane:\n   $r = \\sqrt{R^2 + z^2}$\n   $\\cos\\theta = \\frac{z}{r} = \\frac{z}{\\sqrt{R^2 + z^2}}$\n\n4) The magnetic field is:\n   $B_z = \\frac{\\mu_0IR^2}{2(R^2 + z^2)^{3/2}}$\n\n(b) For a solenoid:\n\n1) Consider each differential element of length dz of the solenoid.\n   Each element contains ndz turns.\n\n2) From part (a), the contribution from each element is:\n   $dB = \\frac{\\mu_0I(ndz)R^2}{2(R^2 + z'^2)^{3/2}}$\n\n3) Integrate over the entire length:\n   $B = \\int dB = \\frac{\\mu_0InR^2}{2}\\int \\frac{dz'}{(R^2 + z'^2)^{3/2}}$\n\n4) Using the angles shown:\n   $\\cos\\theta = \\frac{z}{\\sqrt{R^2 + z^2}}$\n\n5) After integration:\n   $B = \\frac{\\mu_0nI}{2}(\\cos\\theta_1 - \\cos\\theta_2)$\n\nThe final answers are:\n\nFor part (a):\n\\[\\boxed{B = \\frac{\\mu_0IR^2}{2(R^2 + z^2)^{3/2}}}\\]\n\nFor part (b):\n\\[\\boxed{B = \\frac{\\mu_0nI}{2}(\\cos\\theta_1 - \\cos\\theta_2)}\\]", "final_answers": ["B = \\frac{\\mu_0IR^2}{2(R^2 + z^2)^{3/2}}", "B = \\frac{\\mu_0nI}{2}(\\cos\\theta_1 - \\cos\\theta_2)"], "equivalency_results": [{"input_expressions": {"expr1": "B = \\frac{\\mu_0IR^2}{2(R^2 + z^2)^{3/2}}", "expr2": "\\mathbf{B} = \\frac{\\mu_0 I}{2} \\frac{R^2}{(R^2 + z^2)^{3/2}} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "muIR**2/(2*(R**2 + z**2)**(3/2))", "expr2": "I*R**2*hat*mathbf*mu*z/(2*(R**2 + z**2)**(3/2))"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "B = \\frac{\\mu_0nI}{2}(\\cos\\theta_1 - \\cos\\theta_2)", "expr2": "\\mathbf{B} = \\frac{\\mu_0 I}{2} \\frac{R^2}{(R^2 + z^2)^{3/2}} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "I*R**2*hat*mathbf*mu*z/(2*(R**2 + z**2)**(3/2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B = \\frac{\\mu_0nI}{2}(\\cos\\theta_1 - \\cos\\theta_2)", "expr2": "\\mathbf{B} = \\frac{\\mu_0 n I}{2} \\left(\\cos\\theta_2 - \\cos\\theta_1\\right) \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/13-1", "solution": "Let's solve this step by step.\n\n(a) First, let's find the focal points:\n\nFor the lens:\nUsing the lensmaker's equation:\n1/f = (n-1)[1/R₁ - 1/R₂]\n1/f = (1.5-1)[1/42 + 1/42]\n1/f = 0.5(2/42)\nf_lens = 42 m\n\nFor the mirror:\nf_mirror = R/2 = 42/2 = 21 m\n\n(b) There are two stages:\n1. Light passes through the lens from left to right\n2. Light reflects off the mirror from right to left\n\n(c) Let's analyze each stage:\n\nStage 1 (Lens):\n1/f = 1/d_o + 1/d_i\n1/42 = 1/84 + 1/d_i\nd_i = 84 m\nm₁ = -d_i/d_o = -84/84 = -1\n\nStage 2 (Mirror):\nNew object distance = d_i from stage 1 = 84 m\n1/f = 1/d_o + 1/d_i\n1/21 = 1/84 + 1/d_i\nd_i = 28 m\nm₂ = -d_i/d_o = -28/84 = -1/3\n\n(d) Final image:\n- Location: 28 m to the left of the lens/mirror\n- Total magnification: m_total = m₁ × m₂ = (-1)(-1/3) = 1/3\n\nImage characteristics:\n- Real (because final image is on the same side as the object)\n- Upright (because m_total is positive)\n- Smaller than object (because |m_total| < 1)\n\n\\[\\boxed{\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}}\\]", "final_answers": ["\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "f_{\\ell} = 42 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "f_m = 21 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "\\text{Three stages:}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "d_i^{(1)} = 84 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "m_1 = -1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "d^{(2)}_o = -84 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "d^{(2)}_i = 16.8 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "m_2 = \\frac{1}{5}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "d^{(3)}_o = -16.8 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "d^{(3)}_i = 12 \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "m_3 = \\frac{5}{7}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "\\text{Final image is located } 12 \\, \\text{m} \\text{ to the left of the lens.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "m = -\\frac{1}{7}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Final image: 28 m to left, real, upright, } \\frac{1}{3} \\text{ times size of object}", "expr2": "\\text{The image is real, inverted, and smaller by a factor of 7.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/9-1", "solution": "Let me solve this step by step.\n\n1) First, let's understand what creates the magnetic effect:\n   * The spinning charged sphere creates a current distribution\n   * Each hemisphere acts like a current loop\n   * The force will be attractive between the hemispheres\n\n2) Calculate the surface current density K:\n   * K = σv = σ(ωr sin θ)\n   * where r = R (since it's a spherical shell)\n   * K = σωR sin θ\n\n3) The magnetic moment of each hemisphere can be calculated by:\n   * dm = K(area) = σωR sin θ (R dθ)(R sin θ dφ)\n   * m = ∫∫ dm = σωR³ ∫∫ sin²θ dθ dφ\n\n4) For one hemisphere:\n   * θ goes from 0 to π/2\n   * φ goes from 0 to 2π\n   * m = σωR³ ∫₀²ᵖ dφ ∫₀ᵖ/² sin²θ dθ\n   * m = σωR³(2π)(1/2)\n   * m = πσωR³\n\n5) The force between two magnetic dipoles at distance r is:\n   * F = (3μ₀/2π)(m²/r⁴)\n   * Here r = R (distance between centers of hemispheres)\n\n6) Substituting the magnetic moment:\n   * F = (3μ₀/2π)((πσωR³)²/R⁴)\n   * F = (3μ₀π/2)(σ²ω²R²)\n\nTherefore, the force of magnetic attraction between the hemispheres is:\n\n\\[ \\boxed{F = \\frac{3\\mu_0\\pi}{2}\\sigma^2\\omega^2R^2} \\]", "final_answers": ["F = \\frac{3\\mu_0\\pi}{2}\\sigma^2\\omega^2R^2"], "equivalency_results": [{"input_expressions": {"expr1": "F = \\frac{3\\mu_0\\pi}{2}\\sigma^2\\omega^2R^2", "expr2": "\\mathbf{F} = -\\frac{1}{4} \\pi \\mu_0 (R^2 \\sigma \\omega)^2 \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "3*R**2*mu*omega**2*pi*sigma**2/2", "expr2": "-hat*mathbf*pi*z*mu(R**2*omega*sigma)**2/4"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/3-1", "solution": "Let's solve this step by step.\n\n1) First, let's understand what changed:\n   * The force law now has an additional factor (1 + r/λ)e^(-r/λ)\n   * The principle of superposition still holds\n   * We need to modify all electrostatic laws accordingly\n\n2) For part (a), the electric field:\n   * The electric field is force per unit charge\n   * For a point charge q at the origin:\n   E = (1/4πε₀)(q/r²)(1 + r/λ)e^(-r/λ)r̂\n   * For a charge distribution ρ, using superposition:\n   E(r) = (1/4πε₀)∫(ρ(r')/|r-r'|²)(1 + |r-r'|/λ)e^(-|r-r'|/λ)(r-r')/|r-r'| dτ'\n\n3) For part (b), regarding scalar potential:\n   * The force is still radial\n   * The additional factor only depends on r\n   * Therefore, the field is still conservative\n   * The potential can be found by integrating -E·dr:\n   V(r) = (1/4πε₀)(q/r)e^(-r/λ)\n   * For a distribution:\n   V(r) = (1/4πε₀)∫(ρ(r')/|r-r'|)e^(-|r-r'|/λ) dτ'\n\n4) For part (c), Gauss's law:\n   * The flux through a closed surface will be modified\n   * ∇·E = ρ/ε₀ becomes:\n   ∇·E = (ρ/ε₀) + (1/λ)∇·[(r/r)e^(-r/λ)E]\n\n5) For part (d), the triangle diagram:\n   * E field connects to Force (F = qE)\n   * E field connects to potential (E = -∇V)\n   * Potential connects to charge density through modified Poisson's equation\n   * All relationships modified by the exponential factor\n\nThe final answer in the form of the modified fundamental equations:\n\n\\[\\boxed{\n\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}", "expr2": "\\mathbf{E} = \\frac{1}{4\\pi \\epsilon_0} \\int \\frac{\\rho \\, \\hat{\\mathbf{r}}"}, "preprocessed_expressions": {"expr1": "E*end*nabla/(e**(r/lambda)*lambda) + rho/epsilon", "expr2": "1/(4*epsilon*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}", "expr2": "V_{pt}(r) = \\frac{q}{4\\pi \\epsilon_0} \\frac{e^{-r/\\lambda}}{r}"}, "preprocessed_expressions": {"expr1": "E*end*nabla/(e**(r/lambda)*lambda) + rho/epsilon", "expr2": "q/(4*e**(r/lambda)*epsilon*pi*r)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}", "expr2": "V(r) = \\frac{1}{4\\pi \\epsilon_0} \\int_{V'} \\frac{\\rho(r') e^{-r/\\lambda}}{\\hat{r}} \\, d\\tau'"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: <INVALID>\n\\frac{1}{4\\pi \\epsilon} \\int \\frac{\\rho(r') e^{-r/\\lambda}}{\\hat{r}} \\, d\\tau'\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\nE(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|^2}(1 + \\frac{|r-r'|}{\\lambda})e^{-|r-r'|/\\lambda}\\hat{r'} d\\tau' \\\\\nV(r) &= \\frac{1}{4\\pi\\epsilon_0}\\int\\frac{\\rho(r')}{|r-r'|}e^{-|r-r'|/\\lambda} d\\tau' \\\\\n\\nabla\\cdot E &= \\frac{\\rho}{\\epsilon_0} + \\frac{1}{\\lambda}\\nabla\\cdot[(r/r)e^{-r/\\lambda}E]\n\\end{align*}", "expr2": "\\oint_S \\mathbf{E} \\cdot d\\mathbf{a} + \\frac{1}{\\lambda^2} \\int_V V \\, d\\tau = \\frac{q_{enc}}{\\epsilon_0}"}, "preprocessed_expressions": {"expr1": "E*end*nabla/(e**(r/lambda)*lambda) + rho/epsilon", "expr2": "q/epsilon"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-4", "solution": "Let me solve this step by step.\n\n1) When an electromagnetic wave is reflected from a conductor, the phase change depends on the reflection coefficient r, which is given by:\n   \n   r = (n₁ - n₂)/(n₁ + n₂)\n\n2) Here, n₁ = n (refractive index of dielectric)\n   and n₂ = n(1 + iρ) (refractive index of conductor)\n\n3) Substituting these values:\n   r = [n - n(1 + iρ)]/[n + n(1 + iρ)]\n   = [-niρ]/[2n + niρ]\n\n4) Multiply numerator and denominator by (2n - niρ) to rationalize:\n   r = [-niρ(2n - niρ)]/[(2n + niρ)(2n - niρ)]\n   = [-2n²iρ + n²iρ²]/[4n² + n²ρ²]\n   = [-2n²iρ + n²iρ²]/n²(4 + ρ²)\n   = [-2iρ + iρ²]/(4 + ρ²)\n\n5) The phase change φ is related to the reflection coefficient by:\n   φ = arg(r)\n   = arctan(Im(r)/Re(r))\n   = arctan(-2ρ/(ρ²))\n   = arctan(-2/ρ)\n\n6) Therefore, the phase change is:\n   φ = π - arctan(2/ρ)\n\nThe final answer in radians is:\n\n\\[ \\boxed{\\phi = \\pi - \\arctan(2/\\rho)} \\]\n\nThis shows that the phase change depends only on ρ, which is related to the conductivity of the reflecting medium.", "final_answers": ["\\phi = \\pi - \\arctan(2/\\rho)"], "equivalency_results": [{"input_expressions": {"expr1": "\\phi = \\pi - \\arctan(2/\\rho)", "expr2": "\\text{phase shift} = \\pi + \\tan^{-1}\\left(\\frac{2}{\\rho}\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-3", "solution": "Let's solve this step by step.\n\n1) For total internal reflection to occur at the beam boundary, the angle of incidence must exceed the critical angle θc. The critical angle is given by:\n   sin(θc) = n_outside/n_inside\n\n2) In this case, n_outside = n₀ (outside the beam)\n   n_inside = n₀ + n₂E² (inside the beam)\n   \n3) For small angles, sin(θc) ≈ θc, and:\n   θc = n₀/(n₀ + n₂E²)\n\n4) For self-trapping, the diffraction angle must equal the critical angle:\n   1.22λ/D = n₀/(n₀ + n₂E²)\n\n5) The power P in the beam can be related to the electric field E and beam diameter D:\n   P = (πD²/4)(ε₀cE²/2)\n   where ε₀ is the vacuum permittivity and c is the speed of light\n\n6) From step 4:\n   n₂E² = n₀(D/1.22λ - 1)\n\n7) Substituting this into the power equation:\n   P = (πD²/4)(ε₀c/2n₂)[n₀(D/1.22λ - 1)]\n\n8) For the threshold condition, this is the minimum power needed for self-trapping.\n   The threshold occurs when D/1.22λ is just slightly larger than 1.\n\n9) Therefore, the threshold power is:\n   P_threshold = (πλ²/2n₂)(ε₀cn₀)\n\nThe final answer for the threshold power is:\n\n\\[\\boxed{P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}}\\]\n\nThis represents the minimum power needed to create a self-trapped beam in the nonlinear medium.", "final_answers": ["P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}", "expr2": "E \\geq \\sqrt{\\frac{n_0}{n_2}\\left(\\frac{1}{\\cos(\\theta_d/2)} - 1\\right)}"}, "preprocessed_expressions": {"expr1": "c*epsilon*lambda**2*pi/2", "expr2": "E >= sqrt(-1 + 1/cos(theta/2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'Mul' and 'GreaterThan'"}, {"input_expressions": {"expr1": "P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}", "expr2": "P_c = \\frac{\\pi \\epsilon_0 c D^2}{8} \\frac{n_0^2}{n_2} \\frac{1-\\cos\\left(\\theta_d/2\\right)}{\\cos^2\\left(\\theta_d/2\\right)}"}, "preprocessed_expressions": {"expr1": "c*epsilon*lambda**2*pi/2", "expr2": "D**2*c*epsilon*n*pi*(1 - cos(theta/2))/(4*(cos(theta) + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}", "expr2": "P_c \\approx \\frac{\\pi \\epsilon_0 c}{64} \\frac{n_0^2}{n_2} \\left(1.22 \\lambda_n\\right)^2"}, "preprocessed_expressions": {"expr1": "c*epsilon*lambda**2*pi/2", "expr2": "0.02325625*P*approx*c*epsilon*lambda**2*n*pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{threshold} = \\frac{\\pi\\lambda^2\\epsilon_0 cn_0}{2n_2}", "expr2": "P_c \\approx \\frac{\\pi \\epsilon_0 c}{64 n_2} (1.22 \\lambda)^2"}, "preprocessed_expressions": {"expr1": "c*epsilon*lambda**2*pi/2", "expr2": "0.02325625*P*approx*c*epsilon*lambda**2*pi/n"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/12-1", "solution": "Let me solve this step by step.\n\n1) First, let's recall what we know about the fields in S₀:\n   * Electric field: E₀ = (q/4πε₀)(r/r³)\n   * Magnetic field: B₀ = 0 (since charge is at rest)\n\n2) To find fields in S₁, we need to use Lorentz transformations for electromagnetic fields:\n   * E∥' = E∥\n   * E⊥' = γ(E⊥ + v₀ × B)\n   * B∥' = B∥\n   * B⊥' = γ(B⊥ - (v₀ × E)/c²)\n   where γ = 1/√(1-v₀²/c²)\n\n3) In S₀, B = 0, so the transformations simplify to:\n   * E∥' = E∥\n   * E⊥' = γE⊥\n   * B∥' = 0\n   * B⊥' = -γ(v₀ × E)/c²\n\n4) Let's break E into components:\n   * E∥ is parallel to v₀ (x-direction)\n   * E⊥ is perpendicular to v₀ (y and z directions)\n\n5) Therefore in S₁:\n   * Ex' = Ex\n   * Ey' = γEy\n   * Ez' = γEz\n   * B' = -γ(v₀ × E)/c²\n\n6) The final fields in S₁ are:\n   * Electric field: E' = (q/4πε₀)(x̂/γ + γŷ + γẑ)/r'³\n   * Magnetic field: B' = γv₀ × E/c²\n\nThe final answer in compact form:\n\n\\[\\boxed{E' = \\frac{q}{4\\pi\\epsilon_0}\\left(\\frac{\\hat{x}}{\\gamma} + \\gamma\\hat{y} + \\gamma\\hat{z}\\right)/r'^3, \\quad B' = \\frac{\\gamma v_0}{c^2} \\times E'}\\]", "final_answers": ["E' = \\frac{q}{4\\pi\\epsilon_0}\\left(\\frac{\\hat{x}}{\\gamma} + \\gamma\\hat{y} + \\gamma\\hat{z}\\right)/r'^3, \\quad B' = \\frac{\\gamma v_0}{c^2} \\times E'"], "equivalency_results": [{"input_expressions": {"expr1": "E' = \\frac{q}{4\\pi\\epsilon_0}\\left(\\frac{\\hat{x}}{\\gamma} + \\gamma\\hat{y} + \\gamma\\hat{z}\\right)/r'^3, \\quad B' = \\frac{\\gamma v_0}{c^2} \\times E'", "expr2": "\\mathbf{E}^{\\prime} = \\frac{\\gamma \\, q}{4 \\pi \\epsilon_0} \\frac{\\left(\\beta x^{\\prime}+c t^{\\prime}\\right) \\hat{\\mathbf{x}}+y^{\\prime} \\hat{\\mathbf{y}}+z^{\\prime} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "E'*gamma*v/c**2", "expr2": "gamma*q/(4*epsilon*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E' = \\frac{q}{4\\pi\\epsilon_0}\\left(\\frac{\\hat{x}}{\\gamma} + \\gamma\\hat{y} + \\gamma\\hat{z}\\right)/r'^3, \\quad B' = \\frac{\\gamma v_0}{c^2} \\times E'", "expr2": "\\mathbf{B}^{\\prime} = - \\frac{\\beta \\gamma \\, q}{4 \\pi \\epsilon_0} \\frac{y^{\\prime} \\hat{\\mathbf{y}} + z^{\\prime} \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {"expr1": "E'*gamma*v/c**2", "expr2": "-beta*gamma*q/(4*epsilon*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/7-1", "solution": "Let me solve this step by step.\n\n1) For two magnetic dipoles aligned parallel to each other and along the line connecting them:\n\n   * The force between magnetic dipoles follows an inverse fourth power law\n   * The force is attractive when dipoles are aligned parallel\n   * The formula for force in this case is:\n     F = -(3μ₀m₁m₂)/(2πr⁴)\n\n2) The negative sign indicates attraction when the dipoles are parallel and aligned along r.\n\n3) For the extra part about misalignment:\n   * When m₂ is misaligned by angle θ:\n   * The torque τ = (μ₀m₁m₂)/(4πr³) × sin(θ)\n\n4) For equilibrium orientation:\n   * Torque must be zero\n   * This occurs when sin(θ) = 0\n   * Therefore θ = 0° or 180°\n   * θ = 0° is stable equilibrium (parallel alignment)\n   * θ = 180° is unstable equilibrium (anti-parallel alignment)\n\nThe force for parallel alignment along the line joining them is:\n\n\\[ \\boxed{F = -\\frac{3\\mu_0m_1m_2}{2\\pi r^4}} \\]\n\nThe torque when misaligned by angle θ is:\n\n\\[ \\boxed{\\tau = \\frac{\\mu_0m_1m_2}{4\\pi r^3}\\sin(\\theta)} \\]", "final_answers": ["F = -\\frac{3\\mu_0m_1m_2}{2\\pi r^4}", "\\tau = \\frac{\\mu_0m_1m_2}{4\\pi r^3}\\sin(\\theta)"], "equivalency_results": [{"input_expressions": {"expr1": "F = -\\frac{3\\mu_0m_1m_2}{2\\pi r^4}", "expr2": "\\mathbf{F} = -\\frac{3 \\mu_0 m_1 m_2 \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '}'\n-\\frac{3 \\mu m m \\hat{\\mathbf{z}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "F = -\\frac{3\\mu_0m_1m_2}{2\\pi r^4}", "expr2": "\\mathbf{N} = -\\frac{\\mu_0 m_1 m_2 \\sin \\theta \\hat{\\mathbf{y}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected something else here\n-\\frac{\\mu m m \\sin \\theta \\hat{\\mathbf{y}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\tau = \\frac{\\mu_0m_1m_2}{4\\pi r^3}\\sin(\\theta)", "expr2": "\\mathbf{F} = -\\frac{3 \\mu_0 m_1 m_2 \\hat{\\mathbf{z}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '}'\n-\\frac{3 \\mu m m \\hat{\\mathbf{z}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\tau = \\frac{\\mu_0m_1m_2}{4\\pi r^3}\\sin(\\theta)", "expr2": "\\mathbf{N} = -\\frac{\\mu_0 m_1 m_2 \\sin \\theta \\hat{\\mathbf{y}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected something else here\n-\\frac{\\mu m m \\sin \\theta \\hat{\\mathbf{y}}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-2", "solution": "Let's solve this step by step by analyzing the phase relationships and interference patterns.\n\n1) First, let's understand the setup:\n- All sources emit coherent waves with wavelength λ\n- Sources are arranged in a cross pattern with λ/2 spacing\n- R₁ and R₂ are at large equal distances from B\n\n2) For part (a) - All sources operating:\n- For R₁: Sources A and C are λ apart (in phase)\n- B and D are λ/2 from A (out of phase)\n- All waves interfere at R₁, canceling out\n- For R₂: B and D are λ apart (in phase)\n- A and C are λ/2 from B (out of phase)\n- All waves interfere at R₂, canceling out\nTherefore, both receivers get equal (zero) signal\n\n3) For part (b) - B turned off:\n- At R₁: A and C remain in phase, D out of phase\n- At R₂: A and C out of phase with each other, D adds constructively with one\nTherefore, R₁ gets stronger signal\n\n4) For part (c) - D turned off:\n- At R₁: A and C in phase, B out of phase\n- At R₂: A and C out of phase with each other, B adds constructively with one\nTherefore, R₁ gets stronger signal\n\n5) For part (d):\nSince R₁ responds differently to B vs D being turned off (stronger signal when B off, weaker when D off), R₁ can distinguish which source was turned off.\n\n\\[\\boxed{\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}}\\]", "final_answers": ["\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}", "expr2": "I_1 = 0, \\quad I_2 \\approx 4E_0^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}", "expr2": "I_1 = I_2 \\approx E_0^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}", "expr2": "I_1 \\approx E_0^2, \\quad I_2 \\approx 9E_0^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) Equal signals} \\\\ \\text{(b) R₁ stronger} \\\\ \\text{(c) R₁ stronger} \\\\ \\text{(d) R₁}", "expr2": "\\text{Only receiver } R_2 \\text{ can determine which source, B or D, has been turned off.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/5-2", "solution": "Let me solve this step by step.\n\n1) First, we need to understand what causes the oil to rise:\n   * The electric field between the cylinders creates a force on the dielectric oil\n   * This force competes with gravity to determine the equilibrium height\n\n2) The electric field between coaxial cylinders at radius r is:\n   * E(r) = V/(r ln(b/a))\n\n3) The energy density in a dielectric material is:\n   * u = (1/2)ε₀χₑE²\n\n4) The force density on the dielectric is the gradient of the energy density:\n   * f = -∇u = -(1/2)ε₀χₑ∇(E²)\n\n5) At equilibrium, this upward force must balance the gravitational force per unit volume:\n   * ρg = (1/2)ε₀χₑ∇(E²)\n\n6) Substituting the electric field expression:\n   * ρg = (1/2)ε₀χₑ∇[V²/(r² ln²(b/a))]\n\n7) Integrating from the bottom (where h=0) to height h:\n   * ρgh = (1/2)ε₀χₑV²/(r² ln²(b/a))\n\n8) Solving for h:\n   * h = ε₀χₑV²/(2ρgr² ln²(b/a))\n\nThe final answer for the height is:\n\n\\[\\boxed{h = \\frac{\\epsilon_0\\chi_eV^2}{2\\rho gr^2\\ln^2(b/a)}}\\]\n\nThis shows that the height is:\n- Proportional to the square of the voltage\n- Inversely proportional to the density of the oil\n- Inversely proportional to the square of the logarithm of the radius ratio", "final_answers": ["h = \\frac{\\epsilon_0\\chi_eV^2}{2\\rho gr^2\\ln^2(b/a)}"], "equivalency_results": [{"input_expressions": {"expr1": "h = \\frac{\\epsilon_0\\chi_eV^2}{2\\rho gr^2\\ln^2(b/a)}", "expr2": "h = \\frac{\\varepsilon_0 \\chi_e V^2}{\\rho g (b^2 - a^2) \\ln(b / a)}"}, "preprocessed_expressions": {"expr1": "chiV**2*epsilon/(2*g*r**2*rho*log(b/a)**2)", "expr2": "V**2*chi*varepsilon/(rho*g(-a**2 + b**2)*log(b/a))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/10-5", "solution": "Let's solve this step by step.\n\n(a) Finding **E** and dispersion relation:\n\n1) For a wave propagating in z-direction, we can write:\n   **E**(x,y,z,t) = **E**(x,y)e^{i(kz-ωt)}\n\n2) The wave must satisfy Maxwell's equations in vacuum:\n   ∇²**E** + k₀²**E** = 0, where k₀ = ω/c\n\n3) Due to perfect conductor boundary conditions:\n   - E_x = 0 at y = 0 and y = b\n   - E_y = 0 at x = 0 and x = a\n\n4) The solution must be of the form:\n   E_x = E₀ sin(mπx/a)cos(nπy/b)e^{i(kz-ωt)}\n   E_y = E₁ cos(mπx/a)sin(nπy/b)e^{i(kz-ωt)}\n   E_z = 0\n\n5) The dispersion relation is:\n   k₀² = k² + (mπ/a)² + (nπ/b)²\n\n(b) Phase and group velocities:\n\n1) Phase velocity: v_p = ω/k = c/√(1-(mπc/aω)²-(nπc/bω)²)\n\n2) Group velocity: v_g = dω/dk = c√(1-(mπc/aω)²-(nπc/bω)²)\n\n3) Therefore:\n   v_p·v_g = c²\n\n4) Since the term under the square root is less than 1:\n   v_g < c < v_p\n\n(c) Cutoff frequency:\n\n1) From the dispersion relation, k must be real for wave propagation.\n\n2) This means: k₀² > (mπ/a)² + (nπ/b)²\n\n3) Therefore: ω > ωc = πc√((m/a)² + (n/b)²)\n\n4) The lowest cutoff frequency occurs for m=1, n=0:\n   ωc_min = πc/a\n\nThe final answer for the cutoff frequency is:\n\n\\[\\boxed{\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}}\\]\n\nThis shows that waves with frequency below ωc cannot propagate through the waveguide, as k would become imaginary, resulting in evanescent waves.", "final_answers": ["\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "\\begin{aligned}\nE_x &= E_0 \\cos \\left( \\frac{n_x \\pi x}{a} \\right) \\sin \\left( \\frac{n_y \\pi y}{b} \\right) e^{i(k_z z - \\omega t)}, \\\\ \nE_y &=-E_0 \\frac{n_x b}{n_y a} \\sin \\left(\\frac{n_x \\pi x}{a}\\right) \\cos \\left(\\frac{n_y \\pi y}{b}\\right) e^{i\\left(k_z z-\\omega t\\right)}.\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "-E*b*e**i(k*z - omega*t)*sin(n*pi*x/a)*cos(n*pi*y/b)/a"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "\\begin{aligned}\nE_x &= E_0 \\cos \\left(\\frac{n_x \\pi x}{a}\\right) \\sin \\left(\\frac{n_y \\pi y}{b}\\right) e^{i\\left(k_z z-\\omega t\\right)}, \\\\\nE_y &= E_0 \\frac{n_y a}{n_x b} \\sin \\left(\\frac{n_x \\pi x}{a}\\right) \\cos \\left(\\frac{n_y \\pi y}{b}\\right) e^{i\\left(k_z z-\\omega t\\right)}, \\\\\nE_z &= -\\frac{i a\\left(\\omega^2-k_z^2 c^2\\right)}{n_x \\pi k_z c^2} \\sin \\left(\\frac{n_x \\pi x}{a}\\right) \\sin \\left(\\frac{n_y \\pi y}{b}\\right) e^{i\\left(k_z z-\\omega t\\right)}.\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "-e**i(k*z - omega*t)*i*a(-c**2*k**2 + omega**2)*sin(n*pi*x/a)*sin(n*pi*y/b)/(c**2*k*n*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "\\omega^2 = \\left[k_z^2 + \\left( \\frac{m \\pi}{a} \\right)^2 + \\left( \\frac{n \\pi}{b} \\right)^2 \\right] c^2"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "c**2*k**2 + c**2*n**2*pi**2/b**2 + c**2*m**2*pi**2/a**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "v_p = \\frac{\\omega}{k_z} = c \\sqrt{1 + \\left( \\frac{\\omega_{mn}}{k_z c} \\right)^2"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "c"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "v_g = \\frac{d\\omega}{dk_z} = \\frac{c}{\\sqrt{1 + \\left( \\frac{\\omega_{mn}}{k_z c} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '}'\n\\frac{c}{\\sqrt{1 + ( \\frac{\\omega}{k c} )^2\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "v_p v_g = c^2"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "c**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\omega_c = \\pi c\\sqrt{(\\frac{m}{a})^2 + (\\frac{n}{b})^2}", "expr2": "\\omega > \\omega_{10} = \\frac{\\pi c}{a}"}, "preprocessed_expressions": {"expr1": "c*pi*sqrt(n**2/b**2 + m**2/a**2)", "expr2": "c*pi/a"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/6-3", "solution": "Let's solve this step by step.\n\n1) First, let's understand what zero total flux means:\n   * ∫B⋅dA = 0 over the entire region\n   * Due to circular symmetry, this means that there must be both positive and negative B fields in different regions\n\n2) For a charged particle in a magnetic field:\n   * The force is given by F = qv×B\n   * This force is always perpendicular to both velocity and magnetic field\n   * The force does no work since it's perpendicular to displacement\n\n3) Key conservation laws:\n   * Energy is conserved (since magnetic force does no work)\n   * Angular momentum about the center is conserved\n\n4) Consider angular momentum conservation:\n   * L = r×p\n   * The rate of change of L is given by r×F\n   * F = qv×B is always perpendicular to v\n   * Due to circular symmetry, the net torque about the center is zero\n\n5) For a particle starting at the center:\n   * Initial angular momentum is zero (r = 0)\n   * Due to conservation of angular momentum, L must remain zero throughout motion\n   * L = mvr sin(θ) = 0, where θ is angle between r and v\n\n6) Therefore:\n   * Either v = 0 (particle stops)\n   * Or sin(θ) = 0, meaning θ = 0 or π\n   * This means velocity must be parallel or antiparallel to r\n   * The path must be radial\n\n7) For the reverse trajectory:\n   * The same conservation laws apply\n   * If aimed precisely at the center, the particle must follow a path that preserves zero angular momentum\n   * This ensures it will reach the center, though the path may be curved\n\nThe final answer is:\n\n\\[\\boxed{\\text{Zero total flux ensures L = mvr sin(θ) = 0, forcing radial motion}}\\]", "final_answers": ["\\text{Zero total flux ensures L = mvr sin(θ) = 0, forcing radial motion}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Zero total flux ensures L = mvr sin(θ) = 0, forcing radial motion}", "expr2": "\\mathbf{L} = -\\frac{q}{2\\pi} \\int \\mathbf{B} da"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/6-4", "solution": "Let's solve this step by step.\n\n(a) For a thin uniform donut:\n\n1) The magnetic dipole moment μ for a current loop is:\n   μ = IA where I is current and A is area\n\n2) For a rotating charged object:\n   I = Q(ω/2π) where ω is angular velocity\n\n3) For a thin donut of radius R:\n   A = πR²\n\n4) Therefore:\n   μ = (Q/2π)(ω)(πR²) = (QR²ω)/2\n\n5) Angular momentum L for a thin ring:\n   L = MR²ω\n\n6) The gyromagnetic ratio γ = μ/L:\n   γ = (QR²ω/2)/(MR²ω) = Q/(2M)\n\n(b) For a uniform sphere:\n\n1) The calculation is the same because both objects are symmetric about the rotation axis\n\n2) The gyromagnetic ratio is again:\n   γ = Q/(2M)\n\n(c) For an electron:\n\n1) We know L = ℏ/2\n\n2) Using the gyromagnetic ratio for a point charge (Q = -e, M = me):\n   γ = -e/(2me)\n\n3) Therefore:\n   μ = γL = (-e/(2me))(ℏ/2) = -eℏ/(4me)\n\n4) Experimentally, the electron's magnetic moment is actually about twice this value:\n   μe = -eℏ/(2me)\n\nThe final answers are:\n\n\\[ \\boxed{\\text{(a) and (b): } γ = \\frac{Q}{2M}} \\]\n\\[ \\boxed{\\text{(c): } μ_e = -\\frac{eℏ}{2m_e}} \\]\n\nNote: The factor of 2 difference between the classical prediction and the quantum mechanical reality for the electron is explained by the electron's intrinsic \"g-factor\" of approximately 2, which was later explained by quantum electrodynamics.", "final_answers": ["\\text{(a) and (b): } γ = \\frac{Q}{2M}", "\\text{(c): } μ_e = -\\frac{eℏ}{2m_e}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) and (b): } γ = \\frac{Q}{2M}", "expr2": "g = \\frac{Q}{2M}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{(c): } μ_e = -\\frac{eℏ}{2m_e}", "expr2": "g = \\frac{Q}{2M}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c): } μ_e = -\\frac{eℏ}{2m_e}", "expr2": "g = \\frac{Q}{2M}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c): } μ_e = -\\frac{eℏ}{2m_e}", "expr2": "\\mu = \\frac{e\\hbar}{4m_e}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "Electricity and Magenetism/4-7", "solution": "Let me solve this step by step.\n\n1) The pressure on the plane is due to the electric field squared at each point. The formula is:\n   P = ½ε₀E²\n\n2) To find the electric field at any point on the plane, we need to consider:\n   - The field from the surface charge on the plane itself\n   - The field from the induced charges on the conducting sphere\n\n3) Due to the conducting sphere at potential V=0, we can use the method of images:\n   - The image charge distribution will be a compressed version of the plane charge\n   - For a point at height h above the sphere, the image point is at distance R²/h below the center\n\n4) The surface charge density given is exactly what would be induced by a point charge q at height h:\n   - This is because the field lines must be perpendicular to the conducting sphere\n   - The given σ(ρ) produces exactly this field pattern\n\n5) Therefore, this configuration is equivalent to:\n   - The actual charge distribution on the plane\n   - An image charge distribution that makes the sphere an equipotential\n\n6) The electric field at any point on the plane is:\n   E = σ(ρ)/2ε₀\n   This is because at the surface of a charged plane, the field is σ/2ε₀\n\n7) Substituting the given σ(ρ):\n   E = (σ₀R³/2ε₀)/(h² + ρ²)^(3/2)\n\n8) The pressure is:\n   P = ½ε₀E² = ½ε₀(σ₀R³/2ε₀)²/(h² + ρ²)³\n   = (σ₀²R⁶)/(8ε₀(h² + ρ²)³)\n\nTherefore, the pressure as a function of position on the plane is:\n\n\\[ \\boxed{P(\\rho) = \\frac{\\sigma_0^2R^6}{8\\varepsilon_0(h^2 + \\rho^2)^3}} \\]\n\nThis shows that the pressure is maximum at ρ=0 (directly above the sphere) and decreases with increasing radial distance.", "final_answers": ["P(\\rho) = \\frac{\\sigma_0^2R^6}{8\\varepsilon_0(h^2 + \\rho^2)^3}"], "equivalency_results": [{"input_expressions": {"expr1": "P(\\rho) = \\frac{\\sigma_0^2R^6}{8\\varepsilon_0(h^2 + \\rho^2)^3}", "expr2": "P = \\frac{R^6 \\sigma_0^2}{2 \\epsilon_0 (h^2 + \\rho^2)^3}"}, "preprocessed_expressions": {"expr1": "R**6*sigma**2/(8*varepsilon(h**2 + rho**2)**3)", "expr2": "R**6*sigma**2/(2*epsilon(h**2 + rho**2)**3)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/8-5", "solution": "Let's solve this step by step.\n\n(a) For inductance per length:\n1) The magnetic field between conductors at radius r is (using Ampère's law):\n   B(r) = μ₀I/(2πr)\n\n2) The magnetic flux between a and b is:\n   Φ = ∫B·dA = (μ₀I/2π)ln(b/a)\n\n3) Inductance per length is L' = Φ/I:\n   L' = (μ₀/2π)ln(b/a)\n\n(b) For capacitance per length:\n1) The electric field between conductors at radius r is (using Gauss's law):\n   E(r) = λ/(2πϵr), where λ is charge per length\n\n2) Voltage between conductors:\n   V = ∫E·dr = (λ/2πϵ)ln(b/a)\n\n3) Capacitance per length is C' = λ/V:\n   C' = 2πϵ/ln(b/a)\n\n(c) For characteristic impedance and wave speed:\n1) Characteristic impedance Z₀ = √(L'/C'):\n   Z₀ = √((μ₀/2π)ln(b/a)/(2πϵ/ln(b/a)))\n   Z₀ = (1/2π)√(μ₀/ϵ)ln(b/a)\n\n2) Wave speed v = 1/√(L'C'):\n   v = 1/√(μ₀ϵ)\n\nFinal answers:\n\\[\\boxed{L' = \\frac{\\mu_0}{2\\pi}\\ln(\\frac{b}{a})}\\]\n\\[\\boxed{C' = \\frac{2\\pi\\epsilon}{\\ln(b/a)}}\\]\n\\[\\boxed{Z_0 = \\frac{1}{2\\pi}\\sqrt{\\frac{\\mu_0}{\\epsilon}}\\ln(\\frac{b}{a}), \\quad v = \\frac{1}{\\sqrt{\\mu_0\\epsilon}}}\\]", "final_answers": ["L' = \\frac{\\mu_0}{2\\pi}\\ln(\\frac{b}{a})", "C' = \\frac{2\\pi\\epsilon}{\\ln(b/a)}", "Z_0 = \\frac{1}{2\\pi}\\sqrt{\\frac{\\mu_0}{\\epsilon}}\\ln(\\frac{b}{a}), \\quad v = \\frac{1}{\\sqrt{\\mu_0\\epsilon}}"], "equivalency_results": [{"input_expressions": {"expr1": "L' = \\frac{\\mu_0}{2\\pi}\\ln(\\frac{b}{a})", "expr2": "\\frac{L}{\\ell} = \\frac{\\mu_0 \\ln(b/a)}{2\\pi}"}, "preprocessed_expressions": {"expr1": "mu*log(b/a)/(2*pi)", "expr2": "mu*log(b/a)/(2*pi)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "C' = \\frac{2\\pi\\epsilon}{\\ln(b/a)}", "expr2": "\\frac{L}{\\ell} = \\frac{\\mu_0 \\ln(b/a)}{2\\pi}"}, "preprocessed_expressions": {"expr1": "2*epsilon*pi/log(b/a)", "expr2": "mu*log(b/a)/(2*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C' = \\frac{2\\pi\\epsilon}{\\ln(b/a)}", "expr2": "\\frac{C}{\\ell} = \\frac{2\\pi \\epsilon}{\\ln(b/a)}"}, "preprocessed_expressions": {"expr1": "2*epsilon*pi/log(b/a)", "expr2": "2*epsilon*pi/log(b/a)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "Z_0 = \\frac{1}{2\\pi}\\sqrt{\\frac{\\mu_0}{\\epsilon}}\\ln(\\frac{b}{a}), \\quad v = \\frac{1}{\\sqrt{\\mu_0\\epsilon}}", "expr2": "\\frac{L}{\\ell} = \\frac{\\mu_0 \\ln(b/a)}{2\\pi}"}, "preprocessed_expressions": {"expr1": "1/sqrt(epsilon*mu)", "expr2": "mu*log(b/a)/(2*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Z_0 = \\frac{1}{2\\pi}\\sqrt{\\frac{\\mu_0}{\\epsilon}}\\ln(\\frac{b}{a}), \\quad v = \\frac{1}{\\sqrt{\\mu_0\\epsilon}}", "expr2": "\\frac{C}{\\ell} = \\frac{2\\pi \\epsilon}{\\ln(b/a)}"}, "preprocessed_expressions": {"expr1": "1/sqrt(epsilon*mu)", "expr2": "2*epsilon*pi/log(b/a)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Z_0 = \\frac{1}{2\\pi}\\sqrt{\\frac{\\mu_0}{\\epsilon}}\\ln(\\frac{b}{a}), \\quad v = \\frac{1}{\\sqrt{\\mu_0\\epsilon}}", "expr2": "Z_0 = \\frac{\\ln(b/a)}{2\\pi} \\sqrt{\\frac{\\mu_0}{\\epsilon}}"}, "preprocessed_expressions": {"expr1": "1/sqrt(epsilon*mu)", "expr2": "sqrt(mu/epsilon)*log(b/a)/(2*pi)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/8-2", "solution": "Let's solve this step by step.\n\n1) First, let's understand what causes induced current:\n   * The magnetic flux through the loop changes with time\n   * For no induced current, the total rate of change of magnetic flux must be zero\n\n2) The magnetic field B from an infinite wire at distance r is:\n   * B = (μ₀I)/(2πr)\n\n3) The magnetic flux through the loop is:\n   * Φ = ∫B·dA\n   * For a rectangular loop from distance a to a+b:\n   * Φ = ∫ₐᵃ⁺ᵇ (μ₀I·ℓ)/(2πr) dr\n\n4) Evaluating the integral:\n   * Φ = (μ₀I·ℓ)/(2π) ln((a+b)/a)\n\n5) For no induced current, dΦ/dt = 0:\n   * d/dt[(μ₀I·ℓ)/(2π) ln((a+b)/a)] = 0\n\n6) Using the chain rule:\n   * (μ₀I·ℓ)/(2π) · d/dt[ln((a+b)/a)] = 0\n   * (μ₀I·ℓ)/(2π) · [1/(a+b)·(ȧ+ḃ) - 1/a·ȧ] = 0\n\n7) Since μ₀I·ℓ/(2π) ≠ 0:\n   * [1/(a+b)·(ȧ+ḃ) - 1/a·ȧ] = 0\n\n8) Initial conditions:\n   * a(0) = a₀\n   * b(0) = b₀\n   * ȧ is constant\n   * ḃ is constant\n\n9) From step 7:\n   * a(ȧ+ḃ) = (a+b)ȧ\n   * aḃ = bȧ\n   * b/a = ḃ/ȧ = constant = b₀/a₀\n\n10) Therefore:\n    * b(t) = (b₀/a₀)·a(t)\n    * a(t) = a₀ + ȧt\n\nThe final answer for a(t) and b(t) is:\n\n\\[\\boxed{a(t) = a₀ + ȧt, \\quad b(t) = b₀ + (b₀/a₀)ȧt}\\]", "final_answers": ["a(t) = a₀ + ȧt, \\quad b(t) = b₀ + (b₀/a₀)ȧt"], "equivalency_results": [{"input_expressions": {"expr1": "a(t) = a₀ + ȧt, \\quad b(t) = b₀ + (b₀/a₀)ȧt", "expr2": "a(t) = a_0 \\left( 1 + \\frac{\\dot{a}}{a_0} t \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\nb₀ + (b₀/a₀)ȧt\n~^"}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/11-1", "solution": "Let's solve this step by step.\n\n(a) To find the input current:\n\n1) The dipole moment p(t) is given by charge × distance:\n   p(t) = q(t)d = qd cos(ωt)\n\n2) The current is the time derivative of charge:\n   I(t) = dq/dt = -qω sin(ωt)\n\n3) The amplitude of the current is:\n   I₀ = qω\n\nTherefore, the input current is I(t) = -qω sin(ωt)\n\n(b) Let's compare power:\n\n1) Average of current squared:\n   ⟨I²⟩ = (qω)²/2\n\n2) The power formula given is:\n   ⟨P⟩ = (μ₀(qd)²ω⁴)/(12πc)\n\n3) The impedance R is defined as:\n   R = ⟨P⟩/⟨I²⟩\n\n4) Substituting:\n   R = [μ₀(qd)²ω⁴/(12πc)]/[(qω)²/2]\n   = (μ₀d²ω²)/(6πc)\n\n5) Using ω = 2πc/λ and c = 1/√(μ₀ε₀):\n   R = (2π/3)√(μ₀/ε₀)(d/λ)²\n\n(c) For numerical value:\n\n1) When d = 0.3λ:\n   R = (2π/3)√(μ₀/ε₀)(0.3)²\n\n2) √(μ₀/ε₀) = 377Ω (impedance of free space)\n\n3) Therefore:\n   R = (2π/3)(377)(0.3)² ≈ 71.3Ω\n\nThis is indeed close to 75Ω, the standard impedance of TV coaxial cables.\n\n\\[\\boxed{R \\approx 71.3 \\, \\Omega \\text{ for } d = 0.3\\lambda}\\]", "final_answers": ["R \\approx 71.3 \\, \\Omega \\text{ for } d = 0.3\\lambda"], "equivalency_results": [{"input_expressions": {"expr1": "R \\approx 71.3 \\, \\Omega \\text{ for } d = 0.3\\lambda", "expr2": "I = |q \\omega \\sin(\\omega t)|"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R \\approx 71.3 \\, \\Omega \\text{ for } d = 0.3\\lambda", "expr2": "R = \\frac{2\\pi}{3} \\sqrt{\\frac{\\mu_0}{\\epsilon_0}} \\left(\\frac{d}{\\lambda}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/4-6", "solution": "Let's solve this step by step.\n\n1) First, let's express $\\mathbf{p} \\cdot \\mathbf{\\hat{r}}$ in spherical coordinates:\n   * $\\mathbf{p} = p\\mathbf{\\hat{z}} = p(\\cos\\theta\\mathbf{\\hat{r}} - \\sin\\theta\\mathbf{\\hat{\\theta}})$\n   * $\\mathbf{\\hat{r}}$ is a unit vector\n   * Therefore, $\\mathbf{p} \\cdot \\mathbf{\\hat{r}} = p\\cos\\theta$\n\n2) The potential can now be written as:\n   * $V_{\\text{dip}} = \\frac{p}{4\\pi\\epsilon_0} \\frac{\\cos\\theta}{r^2}$\n\n3) To find the electric field, we use $\\mathbf{E} = -\\nabla V$:\n   * $\\mathbf{E} = -\\left(\\frac{\\partial V}{\\partial r}\\mathbf{\\hat{r}} + \\frac{1}{r}\\frac{\\partial V}{\\partial \\theta}\\mathbf{\\hat{\\theta}} + \\frac{1}{r\\sin\\theta}\\frac{\\partial V}{\\partial \\phi}\\mathbf{\\hat{\\phi}}\\right)$\n\n4) Calculate partial derivatives:\n   * $\\frac{\\partial V}{\\partial r} = -\\frac{2p}{4\\pi\\epsilon_0}\\frac{\\cos\\theta}{r^3}$\n   * $\\frac{\\partial V}{\\partial \\theta} = -\\frac{p}{4\\pi\\epsilon_0}\\frac{\\sin\\theta}{r^2}$\n   * $\\frac{\\partial V}{\\partial \\phi} = 0$\n\n5) Therefore:\n   * $\\mathbf{E} = \\frac{p}{4\\pi\\epsilon_0}\\left(\\frac{2\\cos\\theta}{r^3}\\mathbf{\\hat{r}} + \\frac{\\sin\\theta}{r^3}\\mathbf{\\hat{\\theta}}\\right)$\n\n6) For a charge q in this field, the force is $\\mathbf{F} = q\\mathbf{E}$\n\n7) When released in the xy-plane ($\\theta = \\pi/2$):\n   * The radial component is zero (since $\\cos(\\pi/2) = 0$)\n   * Only the $\\theta$ component remains\n   * This creates a force perpendicular to the radius vector\n   * The magnitude of force varies as $1/r^3$\n\n8) The charge follows a circular path because:\n   * The force is always perpendicular to the radius vector\n   * The force varies as $1/r^3$, similar to a pendulum's restoring force\n   * Conservation of energy ensures oscillatory motion\n\nThe final electric field expression is:\n\n\\[\\boxed{\\mathbf{E} = \\frac{p}{4\\pi\\epsilon_0}\\left(\\frac{2\\cos\\theta}{r^3}\\mathbf{\\hat{r}} + \\frac{\\sin\\theta}{r^3}\\mathbf{\\hat{\\theta}}\\right)}\\]", "final_answers": ["\\mathbf{E} = \\frac{p}{4\\pi\\epsilon_0}\\left(\\frac{2\\cos\\theta}{r^3}\\mathbf{\\hat{r}} + \\frac{\\sin\\theta}{r^3}\\mathbf{\\hat{\\theta}}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{E} = \\frac{p}{4\\pi\\epsilon_0}\\left(\\frac{2\\cos\\theta}{r^3}\\mathbf{\\hat{r}} + \\frac{\\sin\\theta}{r^3}\\mathbf{\\hat{\\theta}}\\right)", "expr2": "\\mathbf{E} = \\frac{p}{4 \\pi \\epsilon_0 r^3} (2 \\cos \\theta \\mathbf{\\hat{r}} + \\sin \\theta \\mathbf{\\hat{\\theta}})"}, "preprocessed_expressions": {"expr1": "hat*mathbf*p*(2*r*cos(theta) + theta*sin(theta))/(4*epsilon*pi*r**3)", "expr2": "p*(sin(hat*mathbf*theta**2) + 2*cos(hat*mathbf*r*theta))/(4*epsilon*pi*r**3)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/4-1", "solution": "Let's solve this step by step.\n\n(a) For the method of images with two parallel conducting planes:\n1) The original charge q at x=a creates infinite series of images due to multiple reflections\n2) For x=0 plane: Images at x = -a, -(2D+a), -(4D+a), ... with charges -q, -q, -q, ...\n3) For x=D plane: Images at x = (2D-a), (4D-a), (6D-a), ... with charges -q, -q, -q, ...\n4) The complete series is:\n   - Original: q at x=a\n   - Left images: -q at -a, -q at -(2D+a), -q at -(4D+a), ...\n   - Right images: -q at (2D-a), -q at (4D-a), -q at (6D-a), ...\n\n(b) The potential function is the sum of potentials from all charges:\nV(x,y,z) = q/(4πε₀) × [1/r₀ - 1/r₁ - 1/r₂ - 1/r₃ - ...]\nwhere r₀ is distance from (x,y,z) to original charge\nand r₁, r₂, etc. are distances to image charges.\n\nThis can be written as:\nV(x,y,z) = q/(4πε₀) × Σ[1/√((x-a±2nD)²+y²+z²)]\nwhere n goes from -∞ to +∞\n\n(c) Surface charge density can be found using Gauss's law:\nσ(r) = -ε₀(∂V/∂x)|ₓ₌₀\nAfter calculating the derivative:\nσ(r) = -q/(2π) × Σ[a±2nD/((a±2nD)²+r²)^(3/2)]\n\n(d) For Green's reciprocity theorem:\n1) System 1: Our actual setup with charge q and grounded plates\n2) System 2: No charge, one plate at V₀, other grounded\n\nThe integral of σ over the plane should give -q, as the total induced charge must neutralize the original charge.\n\nUsing Green's theorem:\n∫ρ₁V₂dτ = ∫ρ₂V₁dτ\nqV₀ = ∫σV₀dA\n\nTherefore:\n∫σdA = -q\n\n\\[\\boxed{\\int \\sigma dA = -q}\\]\n\nThis confirms our physical intuition that the total induced charge on each plate must be equal and opposite to the original charge.", "final_answers": ["\\int \\sigma dA = -q"], "equivalency_results": [{"input_expressions": {"expr1": "\\int \\sigma dA = -q", "expr2": "\\text{Place a charge } q \\text{ at } x = 2nD + a \\text{ and } -q \\text{ at } x = 2nD - a \\text{ for } n \\in \\mathbb{Z}."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\int \\sigma dA = -q", "expr2": "V(x, y, z) = \\frac{q}{4\\pi\\epsilon_0} \\sum_{n \\in \\mathbb{Z}} \\left\\{ \\frac{1}{\\sqrt{(x-(2nD+a))^2 + y^2 + z^2}} - \\frac{1}{\\sqrt{(x-(2nD-a))^2 + y^2 + z^2}} \\right\\"}, "preprocessed_expressions": {"expr1": "-q", "expr2": "q/(4*epsilon*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\int \\sigma dA = -q", "expr2": "\\sigma (r) = -\\frac{q}{4\\pi} \\sum_{n \\in \\mathbb{Z}} \\left\\{ \\frac{2nD + a}{[(2nD+a)^2 + r^2]^{3/2}} - \\frac{2nD - a}{[(2nD-a)^2 + r^2]^{3/2}} \\right\\"}, "preprocessed_expressions": {"expr1": "-q", "expr2": "-q/(4*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\int \\sigma dA = -q", "expr2": "Q_{1t} = -\\left(1 - \\frac{a}{D}\\right)q_1"}, "preprocessed_expressions": {"expr1": "-q", "expr2": "q*(-D + a)/D"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/6-2", "solution": "Let's solve this step by step:\n\n1) First, let's understand what's happening:\n   * We have stationary positive charges (ρ₊)\n   * We have moving negative charges (ρ₋) with velocity v\n   * The wire appears neutral overall\n\n2) Due to special relativity, moving charges experience length contraction:\n   * The negative charges are moving, so their density appears different in the lab frame\n   * The positive charges are stationary, so their density is the same in both frames\n\n3) In the rest frame of the negative charges:\n   * The charge densities must be equal and opposite (for neutrality)\n   * ρ₋' = -ρ₊'\n   * Where prime (') denotes quantities in the rest frame of negative charges\n\n4) The relationship between charge densities in different frames is:\n   * ρ₋ = γρ₋'\n   * ρ₊ remains unchanged as it's stationary\n\n5) Therefore:\n   * ρ₋ = γρ₋' = -γρ₊' = -γρ₊\n   * But due to relativistic effects, we need another factor of γ\n   * So ρ₋ = -γ²ρ₊\n\n6) The compensating charge:\n   * Since γ > 1, |ρ₋| > |ρ₊|\n   * This means the moving negative charges create a net negative charge\n   * The compensating positive charge must be on the surface of the wire\n\nThe final answer for the relationship between charge densities is:\n\n\\[ \\boxed{\\rho_- = -\\gamma^2\\rho_+} \\]\n\nThis explains why the current doesn't collapse: the electrostatic repulsion from the excess surface charge balances the magnetic attraction between parallel currents.", "final_answers": ["\\rho_- = -\\gamma^2\\rho_+"], "equivalency_results": [{"input_expressions": {"expr1": "\\rho_- = -\\gamma^2\\rho_+", "expr2": "\\rho_{-} = -\\gamma^2 \\rho_{+}"}, "preprocessed_expressions": {"expr1": "-gamma**2", "expr2": "-gamma**2*rho"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Electricity and Magenetism/8-3", "solution": "Let me solve this step by step.\n\n1) First, let's understand what happens:\n   * As the dipole falls, it induces eddy currents in the conducting tube\n   * These eddy currents create a magnetic field that opposes the motion (Lenz's law)\n   * At terminal velocity, the magnetic drag force equals the gravitational force\n\n2) The magnetic field from a dipole on the axis at position z relative to a point is:\n   * $\\vec{B}(r,z) = \\frac{\\mu_0\\mu}{4\\pi} \\left(\\frac{3z\\hat{z} + r\\hat{r}}{(r^2+z^2)^{5/2}} - \\frac{\\hat{z}}{(r^2+z^2)^{3/2}}\\right)$\n\n3) As the dipole moves with velocity v, it induces an EMF in the tube:\n   * $\\mathcal{E} = -\\frac{d\\Phi}{dt} = -\\frac{\\partial B_r}{\\partial t}$\n   * $B_r = \\frac{\\mu_0\\mu r}{4\\pi(r^2+z^2)^{5/2}}$\n   * $\\frac{\\partial B_r}{\\partial t} = -v\\frac{\\partial B_r}{\\partial z}$\n\n4) The induced current density in the tube:\n   * $J = \\sigma\\mathcal{E} = \\sigma v\\frac{\\partial B_r}{\\partial z}$\n\n5) The power dissipated in the tube:\n   * $P = \\int J^2/\\sigma \\, dV$\n   * $dV = 2\\pi R t \\, dz$ (tube element)\n\n6) The drag force is related to power by:\n   * $F_{drag}v = P$\n\n7) After performing the integration and using the given integral:\n   * $F_{drag} = \\frac{3\\pi\\sigma t\\mu_0^2\\mu^2v}{64R^3}$\n\n8) At terminal velocity:\n   * $F_{drag} = mg$\n   * $\\frac{3\\pi\\sigma t\\mu_0^2\\mu^2v_{terminal}}{64R^3} = mg$\n\n9) Solving for terminal velocity:\n\n\\[ \\boxed{v_{terminal} = \\frac{64mgR^3}{3\\pi\\sigma t\\mu_0^2\\mu^2}} \\]", "final_answers": ["v_{terminal} = \\frac{64mgR^3}{3\\pi\\sigma t\\mu_0^2\\mu^2}"], "equivalency_results": [{"input_expressions": {"expr1": "v_{terminal} = \\frac{64mgR^3}{3\\pi\\sigma t\\mu_0^2\\mu^2}", "expr2": "v_{\\text{term}} = \\frac{1024 \\, m \\, g \\, R^4}{45 \\, \\mu_0^2 \\, \\mu^2 \\, \\sigma \\, t}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Electricity and Magenetism/8-4", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we need to calculate:\n   * We need to find the magnetic flux through the large loop due to current in small loop\n   * Then use this to find mutual inductance M = Φ/I\n\n2) For a square current loop, the magnetic field along its axis at a distance x is:\n   * B(x) = (μ₀Ia²/4π) × [1/(x²+a²/4)^(3/2)]\n   * This is valid for points along the axis of the square loop\n\n3) Since ℓ >> a, most of the flux through the large loop comes from the central region\n   * We can approximate the field as being uniform over the width of the large loop\n   * The field is perpendicular to the large loop's plane\n\n4) The flux through the large loop is:\n   * Φ = ∫B·dA\n   * For our approximation: Φ ≈ B(0) × Area\n   * Area of large loop = 2aℓ\n\n5) Calculate B(0) (field at center of small loop):\n   * B(0) = (μ₀Ia²/4π) × [1/(a²/4)^(3/2)]\n   * B(0) = (μ₀I/πa) × 2\n\n6) Therefore, the flux is:\n   * Φ = B(0) × 2aℓ\n   * Φ = (μ₀I/πa) × 2 × 2aℓ\n   * Φ = 4μ₀Iℓ/π\n\n7) The mutual inductance is:\n   * M = Φ/I\n   * M = 4μ₀ℓ/π\n\nThe final answer for the mutual inductance is:\n\n\\[\\boxed{M = \\frac{4\\mu_0\\ell}{\\pi}}\\]", "final_answers": ["M = \\frac{4\\mu_0\\ell}{\\pi}"], "equivalency_results": [{"input_expressions": {"expr1": "M = \\frac{4\\mu_0\\ell}{\\pi}", "expr2": "\\Phi = \\frac{\\mu_0 a \\ln 3}{\\pi} I"}, "preprocessed_expressions": {"expr1": "4*ell*mu/pi", "expr2": "I*a*mu*log(3)/pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "M = \\frac{4\\mu_0\\ell}{\\pi}", "expr2": "M = \\frac{\\mu_0 a \\ln 3}{\\pi}"}, "preprocessed_expressions": {"expr1": "4*ell*mu/pi", "expr2": "a*mu*log(3)/pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
