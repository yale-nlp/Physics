{"id": "quantum/3-3013", "solution": "Let's solve this step by step.\n\n1) First, recall that eigenstates of angular momentum are characterized by quantum numbers l and m, where:\n   * L² eigenvalues are l(l+1)ℏ²\n   * Lz eigenvalues are mℏ\n\n2) The wave function is given in Cartesian coordinates. To identify angular momentum states, it's helpful to convert to spherical coordinates (r, θ, φ):\n   * x = r sin θ cos φ\n   * y = r sin θ sin φ\n   * z = r cos θ\n   * r = (x² + y² + z²)^(1/2)\n\n3) In spherical coordinates, the wave function becomes:\n   ψ(r,θ,φ) = (α^(5/2)/√π) r cos θ exp(-αr)\n\n4) In spherical coordinates, this can be written as:\n   ψ(r,θ,φ) = R(r) × Y(θ,φ)\n   where:\n   * R(r) = (α^(5/2)/√π) r exp(-αr)\n   * Y(θ,φ) = cos θ\n\n5) The angular part Y(θ,φ) = cos θ is proportional to the spherical harmonic Y₁₀(θ,φ)\n   * Y₁₀(θ,φ) = √(3/4π) cos θ\n\n6) Since the wave function's angular part is proportional to Y₁₀(θ,φ):\n   * l = 1 (because the subscript in Y₁₀)\n   * m = 0 (because the second subscript in Y₁₀)\n\n7) Therefore:\n   * L² = l(l+1)ℏ² = 2ℏ²\n   * Lz = mℏ = 0\n\nThe final answer is:\n\n\\[\\boxed{L^2 = 2\\hbar^2, \\quad L_z = 0}\\]", "final_answers": ["L^2 = 2\\hbar^2, \\quad L_z = 0"], "equivalency_results": [{"input_expressions": {"expr1": "L^2 = 2\\hbar^2, \\quad L_z = 0", "expr2": "L^2 = 2 \\hbar^2"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2*hbar**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "L^2 = 2\\hbar^2, \\quad L_z = 0", "expr2": "L_z = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6041", "solution": "Let's solve this step by step.\n\n(a) For the ratio of energy emitted per unit time:\n\n1) The energy emitted in a transition is equal to the energy difference between levels multiplied by the transition rate.\n\n2) For E₂ → E₀ transition:\n- Energy difference = E₂ - E₀ = -7.0 eV - (-14.0 eV) = 7.0 eV\n- Transition rate = A₂₀ = 1.2 × 10⁸ s⁻¹\n- Energy emitted per unit time = 7.0 eV × 1.2 × 10⁸ s⁻¹\n\n3) For E₂ → E₁ transition:\n- Energy difference = E₂ - E₁ = -7.0 eV - (-9.0 eV) = 2.0 eV\n- Transition rate = A₂₁ = 8.0 × 10⁷ s⁻¹\n- Energy emitted per unit time = 2.0 eV × 8.0 × 10⁷ s⁻¹\n\n4) Ratio = (7.0 eV × 1.2 × 10⁸ s⁻¹)/(2.0 eV × 8.0 × 10⁷ s⁻¹) = 5.25\n\n(b) For the radiative lifetime:\n\n1) The radiative lifetime is the inverse of the sum of all possible transition rates from that level.\n\n2) From E₂, there are two possible transitions:\n- E₂ → E₀ with A₂₀ = 1.2 × 10⁸ s⁻¹\n- E₂ → E₁ with A₂₁ = 8.0 × 10⁷ s⁻¹\n\n3) Total transition rate = A₂₀ + A₂₁ = 1.2 × 10⁸ + 8.0 × 10⁷ = 2.0 × 10⁸ s⁻¹\n\n4) Radiative lifetime = 1/(2.0 × 10⁸) = 5.0 × 10⁻⁹ s\n\nFinal answers:\n\\[\\boxed{\\text{(a) } 5.25, \\text{ (b) } 5.0 \\times 10^{-9} \\text{ s}}\\]", "final_answers": ["\\text{(a) } 5.25, \\text{ (b) } 5.0 \\times 10^{-9} \\text{ s}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } 5.25, \\text{ (b) } 5.0 \\times 10^{-9} \\text{ s}", "expr2": "5.25"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } 5.25, \\text{ (b) } 5.0 \\times 10^{-9} \\text{ s}", "expr2": "5.0 \\times 10^{-9} \\, \\text{s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1048", "solution": "Let's solve this step by step.\n\n(a) For bound states (E < 0):\n\n1) First, let's identify the wave functions in each region:\n   * x < 0: ψ₁(x) = 0 (due to infinite potential)\n   * 0 < x < a: ψ₂(x) = A sin(kx) + B cos(kx), where k = √(2m(E+V₀)/ℏ²)\n   * x > a: ψ₃(x) = Ce^(-αx), where α = √(-2mE/ℏ²)\n\n2) Boundary conditions:\n   * At x = 0: ψ₂(0) = 0\n   * At x = a: ψ₂(a) = ψ₃(a)\n   * At x = a: ψ₂'(a) = ψ₃'(a)\n\n3) From ψ₂(0) = 0, we get B = 0\n   So ψ₂(x) = A sin(kx)\n\n4) Applying remaining boundary conditions:\n   A sin(ka) = Ce^(-αa)\n   Ak cos(ka) = -Cαe^(-αa)\n\n5) Dividing these equations:\n   tan(ka) = -k/α\n\nThis is the equation determining allowed energy values:\n\\[\\boxed{\\tan(\\sqrt{2m(E+V_0)/\\hbar^2}a) = -\\sqrt{2m(E+V_0)/\\hbar^2}/\\sqrt{-2mE/\\hbar^2}}\\]\n\n(b) For E > 0:\n\n1) Wave functions:\n   * x < 0: ψ₁(x) = 0\n   * 0 < x < a: ψ₂(x) = A sin(k₁x) + B cos(k₁x), where k₁ = √(2m(E+V₀)/ℏ²)\n   * x > a: ψ₃(x) = Fe^(ik₂x) + Ge^(-ik₂x), where k₂ = √(2mE/ℏ²)\n\n2) The phase relation between incident and outgoing waves is:\n\\[\\boxed{\\phi_{out} - \\phi_{in} = 2\\arctan\\left(\\frac{k_1\\tan(k_1a)}{k_2}\\right)}\\]\n\nThis phase difference represents the phase shift between the incident and scattered waves.", "final_answers": ["\\tan(\\sqrt{2m(E+V_0)/\\hbar^2}a) = -\\sqrt{2m(E+V_0)/\\hbar^2}/\\sqrt{-2mE/\\hbar^2}", "\\phi_{out} - \\phi_{in} = 2\\arctan\\left(\\frac{k_1\\tan(k_1a)}{k_2}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "\\tan(\\sqrt{2m(E+V_0)/\\hbar^2}a) = -\\sqrt{2m(E+V_0)/\\hbar^2}/\\sqrt{-2mE/\\hbar^2}", "expr2": "k \\cot(ka) = -k'"}, "preprocessed_expressions": {"expr1": "-sqrt(m(E + V)/hbar**2)/sqrt(-E*m/hbar**2)", "expr2": "-k'"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\phi_{out} - \\phi_{in} = 2\\arctan\\left(\\frac{k_1\\tan(k_1a)}{k_2}\\right)", "expr2": "k \\cot(ka) = -k'"}, "preprocessed_expressions": {"expr1": "2*atan(tan(a*k))", "expr2": "-k'"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\phi_{out} - \\phi_{in} = 2\\arctan\\left(\\frac{k_1\\tan(k_1a)}{k_2}\\right)", "expr2": "\\delta = 2 \\left[ \\operatorname{arccot} \\left( \\frac{k}{k'} \\cot (ka) \\right) - k'a \\right]"}, "preprocessed_expressions": {"expr1": "2*atan(tan(a*k))", "expr2": "2*a*(c**2*k*o*operatorname*r*t/tan(a*k) - k'**2)/k'"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/6046", "solution": "Let's solve this step by step:\n\n1) For an infinite potential well with width 2a centered at x=0:\n\n(a) The allowed energies are:\n- The general formula is En = (n²ℏ²π²)/(2m(2a)²)\n- Simplifying: En = (n²ℏ²π²)/(8ma²)\n- Where n = 1, 2, 3, ...\n\n2) (b) The allowed wave functions:\n- For a well centered at x=0, we need to consider even and odd solutions\n- Even solutions (n odd): ψn(x) = A cos(nπx/2a)\n- Odd solutions (n even): ψn(x) = A sin(nπx/2a)\n- Where A = √(1/a) for normalization\n- Valid for -a ≤ x ≤ a\n\n3) (c) For the perturbing potential ΔV(x) = kx:\n- First-order correction: ΔE = ∫ψ*n(kx)ψn dx\n- Due to symmetry, this integral vanishes for states with definite parity\n- For even states (odd n), the integrand is odd and integrates to zero\n- For odd states (even n), the integrand is odd and integrates to zero\n- Therefore, all states have no first-order energy correction\n\n4) (d) Selection rules for dipole transitions:\n- Dipole matrix element: ∫ψf*xψi dx\n- Due to parity considerations:\n- Transitions only allowed between states of opposite parity\n- Δn must be odd\n- Therefore, selection rule is: Δn = ±1, ±3, ±5, ...\n\nThe final answer for the selection rules can be written as:\n\n\\[\\boxed{\\Delta n = \\pm(2k+1), \\text{ where } k = 0,1,2,...}\\]", "final_answers": ["\\Delta n = \\pm(2k+1), \\text{ where } k = 0,1,2,..."], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta n = \\pm(2k+1), \\text{ where } k = 0,1,2,...", "expr2": "E_n = \\frac{\\hbar^2 \\pi^2 n^2}{8ma^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta n = \\pm(2k+1), \\text{ where } k = 0,1,2,...", "expr2": "\\psi^+_n(x) = \\sqrt{\\frac{1}{a}} \\cos \\frac{n \\pi x}{2a} \\text{ for odd } n"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5068", "solution": "Let me solve this step by step.\n\n1) For a He atom in its ground state:\n   * Electronic configuration: 1s²\n   * Both electrons are paired (opposite spins)\n   * Total spin angular momentum S = 0\n   * Total orbital angular momentum L = 0\n\n2) Magnetic susceptibility has two contributions:\n   * Paramagnetic susceptibility (χₚ) - due to permanent magnetic moments\n   * Diamagnetic susceptibility (χd) - due to induced magnetic moments\n\n3) Since S = 0 and L = 0:\n   * No permanent magnetic moment exists\n   * χₚ = 0\n   * Only diamagnetic contribution remains\n\n4) For diamagnetic susceptibility:\n   * χd = -(e²/6mc²)⟨r²⟩N\n   * where ⟨r²⟩ is the mean square radius\n   * For He, ⟨r²⟩ ≈ (0.31×10⁻¹⁰ m)²\n   * N is the number of electrons (2 for He)\n\n5) Calculating:\n   * χd = -(e²/6mc²)(0.31×10⁻¹⁰ m)²(2)\n   * χd ≈ -2.1 × 10⁻² m³/mol\n\nTherefore, He in its ground state is diamagnetic (χ < 0)\n\n\\[ \\boxed{\\chi \\approx -2.1 \\times 10^{-29} \\text{ m}^3/\\text{atom (diamagnetic)}} \\]", "final_answers": ["\\chi \\approx -2.1 \\times 10^{-29} \\text{ m}^3/\\text{atom (diamagnetic)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\chi \\approx -2.1 \\times 10^{-29} \\text{ m}^3/\\text{atom (diamagnetic)}", "expr2": "\\chi \\approx -\\frac{4\\pi}{c^2} \\frac{e^2 r^2_{He\\,g.s.}}{3m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1041", "solution": "Let's solve this step by step.\n\n(a) Mean position ⟨x⟩:\n1) For a normalized wavefunction, ⟨x⟩ = ∫ x|ψ(x)|² dx\n2) |ψ(x)|² = (γ²/π)^(1/2) exp(-γ²x²)\n3) The integral is symmetric about x=0\n4) Therefore, ⟨x⟩ = 0\n\n(b) Mean momentum ⟨p⟩:\n1) ⟨p⟩ = -iℏ∫ ψ*(x)(d/dx)ψ(x) dx\n2) d/dx[ψ(x)] = -(γ²/π)^(1/4) γ²x exp(-γ²x²/2)\n3) Again, the integral is symmetric about x=0\n4) Therefore, ⟨p⟩ = 0\n\n(c) Finding V(x):\n1) Using Schrödinger equation: -ℏ²/2m (d²ψ/dx²) + V(x)ψ = Eψ\n2) d²ψ/dx² = (γ²/π)^(1/4) (γ⁴x² - γ²) exp(-γ²x²/2)\n3) Substituting into Schrödinger equation:\n   -ℏ²/2m (γ⁴x² - γ²) + V(x) = ℏ²γ²/2m\n4) Solving for V(x):\n   V(x) = ℏ²γ⁴x²/2m\n\n(d) Momentum probability distribution:\n1) The momentum wavefunction is the Fourier transform of ψ(x)\n2) φ(p) = (1/2πℏ)^(1/2) ∫ ψ(x)exp(-ipx/ℏ)dx\n3) This gives: φ(p) = (1/πℏ²γ²)^(1/4) exp(-p²/2ℏ²γ²)\n4) Therefore, P(p)dp = |φ(p)|²dp = (1/πℏ²γ²)^(1/2) exp(-p²/ℏ²γ²)dp\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\n⟨x⟩ &= 0 \\\\\n⟨p⟩ &= 0 \\\\\nV(x) &= \\frac{\\hbar^2\\gamma^4x^2}{2m} \\\\\nP(p)dp &= \\frac{1}{\\sqrt{\\pi\\hbar^2\\gamma^2}} e^{-p^2/\\hbar^2\\gamma^2}dp\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n⟨x⟩ &= 0 \\\\\n⟨p⟩ &= 0 \\\\\nV(x) &= \\frac{\\hbar^2\\gamma^4x^2}{2m} \\\\\nP(p)dp &= \\frac{1}{\\sqrt{\\pi\\hbar^2\\gamma^2}} e^{-p^2/\\hbar^2\\gamma^2}dp\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n⟨x⟩ &= 0 \\\\\n⟨p⟩ &= 0 \\\\\nV(x) &= \\frac{\\hbar^2\\gamma^4x^2}{2m} \\\\\nP(p)dp &= \\frac{1}{\\sqrt{\\pi\\hbar^2\\gamma^2}} e^{-p^2/\\hbar^2\\gamma^2}dp\n\\end{align*}", "expr2": "\\langle x \\rangle = 0"}, "preprocessed_expressions": {"expr1": "dp*end/(e**(p**2/(gamma**2*hbar**2))*sqrt(gamma**2*hbar**2*pi))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n⟨x⟩ &= 0 \\\\\n⟨p⟩ &= 0 \\\\\nV(x) &= \\frac{\\hbar^2\\gamma^4x^2}{2m} \\\\\nP(p)dp &= \\frac{1}{\\sqrt{\\pi\\hbar^2\\gamma^2}} e^{-p^2/\\hbar^2\\gamma^2}dp\n\\end{align*}", "expr2": "\\langle p \\rangle = 0"}, "preprocessed_expressions": {"expr1": "dp*end/(e**(p**2/(gamma**2*hbar**2))*sqrt(gamma**2*hbar**2*pi))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n⟨x⟩ &= 0 \\\\\n⟨p⟩ &= 0 \\\\\nV(x) &= \\frac{\\hbar^2\\gamma^4x^2}{2m} \\\\\nP(p)dp &= \\frac{1}{\\sqrt{\\pi\\hbar^2\\gamma^2}} e^{-p^2/\\hbar^2\\gamma^2}dp\n\\end{align*}", "expr2": "V(x) = \\frac{\\hbar^2 \\gamma^4 x^2}{2m}"}, "preprocessed_expressions": {"expr1": "dp*end/(e**(p**2/(gamma**2*hbar**2))*sqrt(gamma**2*hbar**2*pi))", "expr2": "gamma**4*hbar**2*x**2/(2*m)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3025", "solution": "Let me solve this step by step.\n\n1) First, we can use Heisenberg's equation of motion:\n   $\\frac{d\\mathbf{s}}{dt} = \\frac{i}{\\hbar}[H,\\mathbf{s}]$\n\n2) With $\\mathbf{B} = B\\hat{y}$, the Hamiltonian becomes:\n   $H = -\\frac{geB}{2mc}s_y$\n\n3) We need to calculate $[H,\\mathbf{s}]$ for each component:\n   - $[H,s_x] = -\\frac{geB}{2mc}[s_y,s_x]$\n   - $[H,s_y] = -\\frac{geB}{2mc}[s_y,s_y] = 0$\n   - $[H,s_z] = -\\frac{geB}{2mc}[s_y,s_z]$\n\n4) Using the spin commutation relations:\n   $[s_i,s_j] = i\\hbar\\epsilon_{ijk}s_k$\n   - $[s_y,s_x] = i\\hbar s_z$\n   - $[s_y,s_z] = -i\\hbar s_x$\n\n5) Therefore:\n   $\\frac{ds_x}{dt} = \\omega s_z$\n   $\\frac{ds_y}{dt} = 0$\n   $\\frac{ds_z}{dt} = -\\omega s_x$\n   where $\\omega = \\frac{geB}{2mc}$\n\n6) These equations describe precession around the y-axis.\n\n7) To find $s_z(t)$, we solve these coupled differential equations:\n   $s_z(t) = s_z(0)\\cos(\\omega t) - s_x(0)\\sin(\\omega t)$\n\n8) In matrix form, using the standard basis:\n   $s_z(t) = \\frac{\\hbar}{2}\\begin{pmatrix} \\cos(\\omega t) & -i\\sin(\\omega t) \\\\ i\\sin(\\omega t) & -\\cos(\\omega t) \\end{pmatrix}$\n\nThe final answer in matrix form is:\n\n\\[\\boxed{s_z(t) = \\frac{\\hbar}{2}\\begin{pmatrix} \\cos(\\omega t) & -i\\sin(\\omega t) \\\\ i\\sin(\\omega t) & -\\cos(\\omega t) \\end{pmatrix}}\\]\n\nwhere $\\omega = \\frac{geB}{2mc}$", "final_answers": ["s_z(t) = \\frac{\\hbar}{2}\\begin{pmatrix} \\cos(\\omega t) & -i\\sin(\\omega t) \\\\ i\\sin(\\omega t) & -\\cos(\\omega t) \\end{pmatrix}"], "equivalency_results": [{"input_expressions": {"expr1": "s_z(t) = \\frac{\\hbar}{2}\\begin{pmatrix} \\cos(\\omega t) & -i\\sin(\\omega t) \\\\ i\\sin(\\omega t) & -\\cos(\\omega t) \\end{pmatrix}", "expr2": "s_z(t) = s_z(0) \\cos \\left( \\frac{g e B}{2mc} t \\right) + s_x(0) \\sin \\left( \\frac{g e B}{2mc} t \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{\\hbar}{2}\\begin{pmatrix} \\cos(\\omega t) & -i\\sin(\\omega t) \\\\ i\\sin(\\omega t) & -\\cos(\\omega t) \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/1-1046", "solution": "Let me solve this step by step.\n\n1) For a rectangular barrier, when E < V₀, the transmission probability T is approximately given by:\n   T ≈ 16(E/V₀)(1-E/V₀)exp(-2κd)\n   where κ = √(2m(V₀-E))/ℏ\n\n2) Given:\n   - E = 1 eV\n   - V₀ = 2 eV\n   - T = 10⁻³\n\n3) Let's calculate κ:\n   κ = √(2m(V₀-E))/ℏ\n   = √(2(9.11×10⁻³¹)(2-1)(1.6×10⁻¹⁹))/(1.055×10⁻³⁴)\n   ≈ 5.1×10⁹ m⁻¹\n\n4) Using the transmission probability formula:\n   10⁻³ ≈ 16(1/2)(1-1/2)exp(-2κd)\n   10⁻³ ≈ 4(0.5)exp(-2κd)\n   10⁻³ ≈ 2exp(-2κd)\n\n5) Taking natural log of both sides:\n   ln(10⁻³/2) = -2κd\n   ln(5×10⁻⁴) = -2κd\n   -7.6 = -2κd\n\n6) Solving for d:\n   d = 7.6/(2κ)\n   d = 7.6/(2×5.1×10⁹)\n   d ≈ 0.75 nm\n\nTherefore, the barrier width should be approximately 0.75 nanometers.\n\n\\[\\boxed{d \\approx 0.75 \\text{ nm}}\\]", "final_answers": ["d \\approx 0.75 \\text{ nm}"], "equivalency_results": [{"input_expressions": {"expr1": "d \\approx 0.75 \\text{ nm}", "expr2": "d = 8.1 \\times 10^{-8} \\, \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6023", "solution": "Let's solve this step by step.\n\n1) First, recall that in the Born approximation, the scattering amplitude is proportional to the Fourier transform of the potential:\n   f(q) ∝ ∫ V(r) e^(iq·r) d³r\n\n2) For part (a):\n   - The cross-section is roughly constant for q < q₀\n   - q₀ represents the momentum transfer where the behavior changes\n   - By the uncertainty principle, ΔxΔp ≈ ℏ\n   - The size of the potential R is related to q₀ by:\n   R ≈ ℏ/q₀\n   This gives us the approximate spatial extension of the potential.\n\n3) For part (b):\n   - For large q, the cross-section falls off as q^(-N)\n   - The high-q behavior is related to the short-distance behavior of V(r)\n   - For a potential that behaves as r^(-p) at small r, the Fourier transform at large q goes as q^(-3+p)\n   - Therefore, comparing with the given behavior:\n     -N = -3+p\n     p = 3-N\n   - This means V(r) ∼ r^(3-N) at small r\n\n4) The final answers are:\n\n\\[ \\boxed{\\text{(a) Size of potential } R \\approx \\hbar/q_0} \\]\n\\[ \\boxed{\\text{(b) } V(r) \\sim r^{3-N} \\text{ at small } r} \\]\n\nThe first answer tells us the spatial extent of the potential, while the second tells us its singular behavior at the origin.", "final_answers": ["\\text{(a) Size of potential } R \\approx \\hbar/q_0", "\\text{(b) } V(r) \\sim r^{3-N} \\text{ at small } r"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) Size of potential } R \\approx \\hbar/q_0", "expr2": "R = \\sqrt{\\frac{10}{q_0^2 |f(0)|} (|f(0)| - |f(q_0)|)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) Size of potential } R \\approx \\hbar/q_0", "expr2": "n = \\frac{N}{2} - 3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } V(r) \\sim r^{3-N} \\text{ at small } r", "expr2": "R = \\sqrt{\\frac{10}{q_0^2 |f(0)|} (|f(0)| - |f(q_0)|)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } V(r) \\sim r^{3-N} \\text{ at small } r", "expr2": "n = \\frac{N}{2} - 3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5003", "solution": "Let me solve this step by step.\n\n1) First, let's recall the relativistic energy-momentum relation:\n   $E = \\sqrt{p^2c^2 + m^2c^4}$\n\n2) The kinetic energy T is:\n   $T = E - mc^2 = \\sqrt{p^2c^2 + m^2c^4} - mc^2$\n\n3) We need to expand this for small p/mc to get the relativistic correction:\n   Using $(1+x)^{1/2} = 1 + \\frac{1}{2}x - \\frac{1}{8}x^2 + ...$\n   \n   $T = mc^2(\\sqrt{1 + \\frac{p^2}{m^2c^2}} - 1)$\n   $= mc^2(1 + \\frac{1}{2}\\frac{p^2}{m^2c^2} - \\frac{1}{8}\\frac{p^4}{m^4c^4} - 1)$\n   $= \\frac{p^2}{2m} - \\frac{p^4}{8m^3c^2}$\n\n4) The Hamiltonian becomes:\n   $H = \\frac{p^2}{2m} - \\frac{p^4}{8m^3c^2} + \\frac{1}{2}m\\omega^2x^2$\n\n5) The correction term is $-\\frac{p^4}{8m^3c^2}$\n\n6) For the harmonic oscillator ground state:\n   $\\langle p^2 \\rangle = \\frac{m\\hbar\\omega}{2}$\n   $\\langle p^4 \\rangle = 3\\langle p^2 \\rangle^2 = \\frac{3}{4}m^2\\hbar^2\\omega^2$\n\n7) Therefore, the energy shift is:\n   $\\Delta E = -\\frac{\\langle p^4 \\rangle}{8m^3c^2}$\n   $= -\\frac{3}{4}\\frac{m^2\\hbar^2\\omega^2}{8m^3c^2}$\n   $= -\\frac{3}{32}\\frac{\\hbar^2\\omega^2}{mc^2}$\n\nThe final answer for the relativistic correction to the ground state energy is:\n\n\\[\\boxed{\\Delta E = -\\frac{3}{32}\\frac{\\hbar^2\\omega^2}{mc^2}}\\]", "final_answers": ["\\Delta E = -\\frac{3}{32}\\frac{\\hbar^2\\omega^2}{mc^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\frac{3}{32}\\frac{\\hbar^2\\omega^2}{mc^2}", "expr2": "\\Delta E = -\\frac{15}{32} \\frac{(\\hbar \\omega)^2}{mc^2}"}, "preprocessed_expressions": {"expr1": "-3*hbar**2*omega**2/(32*c**2*m)", "expr2": "-15*hbar**2*omega**2/(32*c**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5035", "solution": "Let me solve this step by step.\n\n1) The Stark effect describes the splitting of spectral lines in the presence of an external electric field. For the hydrogen atom ground state, we need to consider perturbation theory.\n\n2) Let's assume an external electric field E in the z-direction. The perturbation Hamiltonian is:\n   H' = -eEz = -eEr cos(θ)\n\n3) For the ground state (n=1, l=0), the unperturbed wavefunction is:\n   ψ₁₀₀ = (1/√π)(1/a₀)³/² exp(-r/a₀)\n   where a₀ is the Bohr radius\n\n4) The first-order energy correction is:\n   ΔE¹ = ⟨ψ₁₀₀|H'|ψ₁₀₀⟩\n   \n5) Due to the symmetry of the ground state wavefunction and the odd parity of z = r cos(θ), this integral vanishes:\n   ΔE¹ = 0\n\n6) We need to consider the second-order correction:\n   ΔE² = Σ(|⟨ψₙₗₘ|H'|ψ₁₀₀⟩|²)/(E₁₀₀ - Eₙₗₘ)\n   where the sum is over all states except the ground state\n\n7) After performing the calculation, the second-order energy shift is:\n   ΔE² = -(1/2)αE²\n   where α = (9/2)a₀³ is the polarizability of the ground state\n\n8) Therefore, the total energy shift for the ground state is:\n   ΔE = -(9/4)a₀³E²\n\nThe final answer for the energy shift due to the Stark effect in the ground state is:\n\n\\[ \\boxed{\\Delta E = -\\frac{9}{4}a_0^3E^2} \\]\n\nThis shows that the ground state experiences a quadratic Stark effect (proportional to E²), unlike excited states which can show a linear Stark effect. The negative sign indicates that the energy decreases in the presence of an electric field.", "final_answers": ["\\Delta E = -\\frac{9}{4}a_0^3E^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\frac{9}{4}a_0^3E^2", "expr2": "E^{(1)} = 0"}, "preprocessed_expressions": {"expr1": "-9*E**2*a**3/4", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E = -\\frac{9}{4}a_0^3E^2", "expr2": "E^{(2)} = -e^2\\varepsilon^2 \\sum_{\\substack{n \\neq 1 \\\\ l,m}} \\frac{|\\langle 1, 0, 0 | z | n, l, m \\rangle|^2}{|E_1 - E_n|}"}, "preprocessed_expressions": {"expr1": "-9*E**2*a**3/4", "expr2": "-e**2*varepsilon**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6012", "solution": "Let me solve this step by step.\n\n1) For a square well potential with $\\ell = 0$, we need to match the wavefunctions and their derivatives at r = a.\n\n2) Inside the well (r < a):\n   - The radial wave function is $R(r) = A \\sin(K'r)/r$\n   - Where $K' = \\sqrt{2m(E+V_0)}/\\hbar$\n\n3) Outside the well (r > a):\n   - The radial wave function is $R(r) = B \\sin(kr + \\delta_0)/r$\n   - Where $k = \\sqrt{2mE}/\\hbar$\n\n4) Matching at r = a:\n   - $A \\sin(K'a) = B \\sin(ka + \\delta_0)$\n   - $AK' \\cos(K'a) = Bk \\cos(ka + \\delta_0)$\n\n5) Dividing these equations:\n   - $\\frac{K' \\cot(K'a)}{k} = \\cot(ka + \\delta_0)$\n\n6) This is the matching equation that determines $\\delta_0(k)$.\n\n7) For high energies (large k):\n   - $K' \\approx k$ (since $E >> V_0$)\n   - The phase shift will be small\n   - $\\cot(ka + \\delta_0) \\approx \\cot(ka) - \\delta_0/\\sin^2(ka)$\n\n8) Substituting into the matching equation:\n   - $\\cot(ka) - \\frac{mV_0}{2\\hbar^2k^2}\\cot(ka) = \\cot(ka) - \\frac{\\delta_0}{\\sin^2(ka)}$\n\n9) Therefore:\n   - $\\delta_0 = \\frac{mV_0}{2\\hbar^2k}\\sin^2(ka)$\n   - At high energies, averaging over rapid oscillations: $\\sin^2(ka) \\approx \\frac{1}{2}$\n\n10) Born approximation:\n    - $\\delta_0^{Born} = -\\frac{m}{2\\hbar^2k}\\int_0^\\infty V(r)r\\sin(2kr)dr$\n    - For square well: $\\delta_0^{Born} = \\frac{mV_0}{\\hbar^2k}$\n\nThe final result for high energy phase shift is:\n\n\\[\\boxed{\\delta_0(k) \\approx \\frac{maV_0}{\\hbar^2 k}}\\]\n\nThis matches the Born approximation result up to a factor of order unity, confirming the validity of both approaches.", "final_answers": ["\\delta_0(k) \\approx \\frac{maV_0}{\\hbar^2 k}"], "equivalency_results": [{"input_expressions": {"expr1": "\\delta_0(k) \\approx \\frac{maV_0}{\\hbar^2 k}", "expr2": "\\delta(k) \\rightarrow \\frac{maV_0}{\\hbar^2 k}"}, "preprocessed_expressions": {"expr1": "V*a*approx*m*delta(k)/(hbar**2*k)", "expr2": "V*a**2*m*o*r**2*w*delta(k)/(hbar**2*k)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1023", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * An infinite square well from 0 to L\n   * A delta function potential at x = L/2\n   * We need to find the energy eigenvalues\n\n2) Due to the delta function at x = L/2, we need to solve the Schrödinger equation separately for:\n   * Region I: 0 < x < L/2\n   * Region II: L/2 < x < L\n\n3) In both regions (where x ≠ L/2), the equation reduces to:\n   * -ℏ²/2m * d²ψ/dx² = Eψ\n\n4) The general solutions in both regions are:\n   * ψᵢ(x) = Aᵢsin(kx) + Bᵢcos(kx)\n   where k = √(2mE)/ℏ, and i = 1,2 for regions I and II\n\n5) Due to infinite walls at x = 0 and x = L:\n   * ψ(0) = 0 implies B₁ = 0\n   * ψ(L) = 0 implies A₂sin(kL) + B₂cos(kL) = 0\n\n6) The wavefunction must be continuous at x = L/2:\n   * A₁sin(kL/2) = A₂sin(kL/2) + B₂cos(kL/2)\n\n7) The derivative must have a discontinuity at x = L/2 due to the delta function:\n   * [dψ/dx]ₓ=L/2₊ - [dψ/dx]ₓ=L/2₋ = (2mλ/ℏ²)ψ(L/2)\n\n8) Applying these conditions and solving the system of equations leads to the transcendental equation:\n\n\\[\\boxed{k\\tan(kL/2) = \\frac{m\\lambda}{\\hbar^2}}\\]\n\nwhere k = √(2mE)/ℏ\n\nThis equation can be solved numerically to find the allowed energy eigenvalues E.", "final_answers": ["k\\tan(kL/2) = \\frac{m\\lambda}{\\hbar^2}"], "equivalency_results": [{"input_expressions": {"expr1": "k\\tan(kL/2) = \\frac{m\\lambda}{\\hbar^2}", "expr2": "\\tan \\left(\\frac{\\sqrt{2mE} \\, L}{2 \\hbar}\\right) = -\\sqrt{\\frac{2E}{m}} \\frac{\\hbar}{\\lambda}"}, "preprocessed_expressions": {"expr1": "lambda*m/hbar**2", "expr2": "-sqrt(2)*hbar*sqrt(E/m)/lambda"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2014", "solution": "Let's solve this step by step.\n\n(a) Using the Uncertainty Principle:\n1) The uncertainty principle states: ΔxΔp ≥ ℏ/2\n2) For ground state, assume ΔxΔp ≈ ℏ\n3) Energy = Kinetic + Potential = p²/2m + kr\n4) Using Δp ≈ ℏ/Δx and r ≈ Δx:\n   E ≈ ℏ²/2mΔx² + kΔx\n5) Minimize E with respect to Δx:\n   dE/d(Δx) = -ℏ²/mΔx³ + k = 0\n6) This gives: Δx = (ℏ²/mk)^(1/3)\n7) Ground state energy: E₀ ≈ 3/2(ℏ²k²/m)^(1/3)\n\n(b) Bohr-Sommerfeld quantization:\n1) ∮p dr = 2πℏ(n + 1/2)\n2) For ground state n = 0\n3) p = √(2m(E-kr))\n4) Solving the integral: ∮√(2m(E-kr))dr = πℏ\n5) This gives: E₀ = c(ℏ²k²/m)^(1/3), where c is a constant\n\n(c) Variational method:\n1) Choose trial function: ψ(r) = Ne^(-αr)\n2) Calculate expectation value of H = -ℏ²/2m∇² + kr\n3) Minimize with respect to α\n4) This gives: E₀ ≈ 1.5(ℏ²k²/m)^(1/3)\n\n(d) Exact solution:\n1) Use Fourier transform: ψ(r) = ∫φ(p)e^(ip·r/ℏ)d³p\n2) Schrödinger equation becomes:\n   (p²/2m)φ(p) + ik∇ₚφ(p) = Eφ(p)\n3) Solve for ground state:\n   E₀ = 1.4561(ℏ²k²/m)^(1/3)\n   ψ₀(r) = NAi((2mk/ℏ²)^(1/3)r - E₀/(ℏ²k²/m)^(1/3))\n\n(e) Effective potential:\nThe effective potential includes centrifugal term:\nVeff(r) = kr + ℓ(ℓ+1)ℏ²/2mr²\n\nThe final answer for the ground state energy is:\n\n\\[ \\boxed{E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}} \\]\n\nThis is the exact result, while the other methods give approximations that are reasonably close to this value.", "final_answers": ["E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}"], "equivalency_results": [{"input_expressions": {"expr1": "E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}", "expr2": "E = \\frac{3}{2} \\left( \\frac{k^2 \\hbar^2}{4m} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "1.4561*(hbar**2*k**2/m)**(1/3)", "expr2": "3*2**(1/3)*(hbar**2*k**2/m)**(1/3)/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}", "expr2": "E_0 = \\frac{3}{2}(k^2 \\hbar^2/m)^{1/3}"}, "preprocessed_expressions": {"expr1": "1.4561*(hbar**2*k**2/m)**(1/3)", "expr2": "3*(hbar**2*k**2/m)**(1/3)/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}", "expr2": "\\bar{H} = \\frac{3}{2} \\left( \\frac{9}{4} \\frac{k^2 \\hbar^2}{m} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "1.4561*(hbar**2*k**2/m)**(1/3)", "expr2": "3*2**(1/3)*3**(2/3)*(hbar**2*k**2/m)**(1/3)/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}", "expr2": "E_0 = \\left( \\frac{\\hbar^2}{2mk} \\right)^{\\frac{1}{3}} kx_0"}, "preprocessed_expressions": {"expr1": "1.4561*(hbar**2*k**2/m)**(1/3)", "expr2": "2**(2/3)*k*x*(hbar**2/(k*m))**(1/3)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = 1.4561\\left(\\frac{\\hbar^2k^2}{m}\\right)^{1/3}", "expr2": "R(r) = \\frac{1}{r} Ai(-x) \\quad \\text{with} \\quad x = \\left( \\frac{2mk}{\\hbar^2} \\right)^{1/3} \\left( \\frac{E_0}{k} - r \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1024", "solution": "Let's solve this step by step:\n\n1) For the original infinite square well (without delta function):\n- The lowest energy eigenstate (n=1) has wave function:\n  ψ₁(x) = √(2/L) sin(πx/L)\n- This has no nodes and is symmetric about x = L/2\n- Energy is E₀ = (ℏ²π²)/(2mL²)\n\n2) When adding the repulsive delta function at x = L/2:\n- The delta function creates a barrier at the center\n- The wave function must remain continuous at x = L/2\n- However, its derivative will have a discontinuity at x = L/2 due to the delta function\n\n3) Effect on the wave function:\n- The repulsive potential pushes the wave function away from x = L/2\n- This creates a \"dip\" in the wave function at x = L/2\n- The stronger λ is, the more pronounced this dip becomes\n\n4) Effect on energy:\n- Adding a repulsive potential always increases the energy\n- Therefore, E > E₀ for any λ > 0\n\n5) When λ → ∞:\n- The delta function effectively splits the well into two separate wells of width L/2\n- The wave function becomes zero at x = L/2\n- The system becomes equivalent to the ground state of an infinite square well of width L/2\n- The new energy will be E = (ℏ²π²)/(2m(L/2)²) = 4E₀\n\nTherefore, when λ → ∞, the energy becomes four times the original energy.\n\n\\[ \\boxed{E_{\\lambda \\to \\infty} = 4E_0} \\]", "final_answers": ["E_{\\lambda \\to \\infty} = 4E_0"], "equivalency_results": [{"input_expressions": {"expr1": "E_{\\lambda \\to \\infty} = 4E_0", "expr2": "E = 4E_0"}, "preprocessed_expressions": {"expr1": "4*E", "expr2": "4*E"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6015", "solution": "Let's solve this step by step:\n\n(a) For rotational invariance around z-axis:\n1) If the Hamiltonian is rotationally invariant, the system has symmetry around the z-axis\n2) This means rotating the system around z-axis shouldn't change physical observables\n3) Such rotation only affects φ coordinate\n4) Therefore, f(θ,φ) must be independent of φ\n5) So f(θ,φ) = f(θ)\n\n(b) For θ dependence:\n1) The incident wave e^(ikz) breaks spherical symmetry\n2) It defines a preferred direction (z-axis)\n3) Different θ values represent different angles relative to incident beam\n4) These different angles can have different scattering probabilities\n5) Therefore, f must depend on θ\n\n(c) For zero energy limit:\n1) As k → 0 (E → 0), wavelength becomes infinite\n2) Long wavelength means incident wave approaches spherical symmetry\n3) No preferred direction exists anymore\n4) In this limit, f becomes independent of θ\n5) Scattering becomes isotropic: f(θ) → constant\n\n(d) Differential cross section:\nThe formula is:\n\\[ \\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2 \\]\n\n(e) First Born approximation:\n1) Define V(r) as the scattering potential\n2) Define q = k_f - k_i as momentum transfer\n3) First Born approximation is:\n\\[ f(\\theta) = -\\frac{m}{2\\pi\\hbar^2} \\int V(r) e^{i\\mathbf{q}\\cdot\\mathbf{r}} d^3r \\]\n\n(f) Born approximation validity:\n1) Valid when potential is weak compared to incident energy\n2) Mathematically: |V(r)| << ℏ²k²/2m\n3) First-order perturbation theory must be valid\n4) Multiple scattering must be negligible\n5) Wave function not significantly distorted from plane wave\n\nFinal answer for the differential cross section:\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2} \\]", "final_answers": ["\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2", "expr2": "\\frac{\\partial f(\\theta, \\varphi)}{\\partial \\varphi} = 0"}, "preprocessed_expressions": {"expr1": "Abs(f(theta))**2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2", "expr2": "\\frac{d f(\\theta)}{d \\theta} = 0"}, "preprocessed_expressions": {"expr1": "Abs(f(theta))**2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2", "expr2": "\\frac{d \\sigma}{d \\Omega} = |f(\\theta, \\varphi)|^2"}, "preprocessed_expressions": {"expr1": "Abs(f(theta))**2", "expr2": "Abs(f(theta, varphi))**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2", "expr2": "f(\\theta, \\varphi) = -\\frac{m}{2 \\pi \\hbar^2} \\int V(r') \\exp(-i \\mathbf{q} \\cdot \\mathbf{r'}) d^3 r' = -\\frac{2m}{\\hbar^2 q} \\int_{0}^{\\infty} r' V(r') \\sin(qr') dr'"}, "preprocessed_expressions": {"expr1": "Abs(f(theta))**2", "expr2": "-2*m/(hbar**2*q)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2", "expr2": "\\text{The interaction potential is small compared with the energy of the incident particle.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5032", "solution": "Let me solve this step by step.\n\n(a) For the helium atom states:\n\n1) Ground State:\n- Both electrons in 1s orbital\n- Total angular momentum J = 0\n- Total spin S = 0 (paired spins)\n- Parity = even (+)\n- Configuration: 1s²(¹S₀)\n\n2) First Excited State:\n- One electron in 1s, one in 2s\n- Total angular momentum J = 0\n- Total spin S = 1 (parallel spins)\n- Parity = even (+)\n- Configuration: 1s2s(³S₁)\n\n3) Second Excited State:\n- One electron in 1s, one in 2s\n- Total angular momentum J = 0\n- Total spin S = 0 (paired spins)\n- Parity = even (+)\n- Configuration: 1s2s(¹S₀)\n\n(b) Pauli Principle Role:\n1) The Pauli principle requires the total wavefunction to be antisymmetric.\n2) For the ground state, both electrons must have opposite spins (S=0) to occupy the same 1s orbital.\n3) For excited states, the 1s2s configuration can have either S=0 or S=1.\n4) The triplet state (S=1) is lower in energy than the singlet state (S=0) due to exchange interaction.\n\n(c) Perturbation Energy Formulas:\n\nLet's denote:\n- r₁, r₂: electron coordinates\n- r₁₂: inter-electron distance\n\n1) Ground State (1s²):\nE₀ = 2E₁ₛ + ⟨1s(1)1s(2)|e²/r₁₂|1s(1)1s(2)⟩\n\n2) First Excited State (1s2s, triplet):\nE₁ = E₁ₛ + E₂ₛ + ⟨1s(1)2s(2)|e²/r₁₂|1s(1)2s(2)⟩ - ⟨1s(1)2s(2)|e²/r₁₂|2s(1)1s(2)⟩\n\n3) Second Excited State (1s2s, singlet):\nE₂ = E₁ₛ + E₂ₛ + ⟨1s(1)2s(2)|e²/r₁₂|1s(1)2s(2)⟩ + ⟨1s(1)2s(2)|e²/r₁₂|2s(1)1s(2)⟩\n\nThe final answer in terms of quantum numbers can be expressed as:\n\n\\[\\boxed{\n\\begin{array}{l}\n\\text{Ground: } J=0, S=0, P=+ \\\\\n\\text{First Excited: } J=0, S=1, P=+ \\\\\n\\text{Second Excited: } J=0, S=0, P=+\n\\end{array}\n}\\]", "final_answers": ["\\begin{array}{l}\n\\text{Ground: } J=0, S=0, P=+ \\\\\n\\text{First Excited: } J=0, S=1, P=+ \\\\\n\\text{Second Excited: } J=0, S=0, P=+\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{Ground: } J=0, S=0, P=+ \\\\\n\\text{First Excited: } J=0, S=1, P=+ \\\\\n\\text{Second Excited: } J=0, S=0, P=+\n\\end{array}", "expr2": "\\begin{aligned}\n&\\text{Ground state: } (J, S, P) = (0, 0, \\text{even}) \\\\\n&\\text{First excited state: } (J, S, P) = (1, 1, \\text{even}) \\\\\n&\\text{Second excited state: } (J, S, P) = (0, 1, \\text{odd})\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{Ground: } J=0, S=0, P=+ \\\\\n\\text{First Excited: } J=0, S=1, P=+ \\\\\n\\text{Second Excited: } J=0, S=0, P=+\n\\end{array}", "expr2": "\\text{Pauli principle: Triplet states have lower energy due to antisymmetric spatial wave functions and reduced repulsion.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{Ground: } J=0, S=0, P=+ \\\\\n\\text{First Excited: } J=0, S=1, P=+ \\\\\n\\text{Second Excited: } J=0, S=0, P=+\n\\end{array}", "expr2": "\\begin{aligned}\n&\\Delta E_{1s} = \\left\\langle 1s1s \\left| \\frac{e^2}{|r_1 - r_2|} \\right| 1s1s \\right\\rangle \\\\\n&\\Delta E_{nl}^{(3)} = \\left\\langle 1snl \\left| \\frac{e^2}{|r_1 - r_2|} \\right| 1snl \\right\\rangle - \\left\\langle 1snl \\left| \\frac{e^2}{|r_1 - r_2|} \\right| nl1s \\right\\rangle \\\\\n&\\Delta E_{nl}^{(1)} = \\left\\langle 1snl \\left| \\frac{e^2}{|r_1 - r_2|} \\right| 1snl \\right\\rangle + \\left\\langle 1snl \\left| \\frac{e^2}{|r_1 - r_2|} \\right| nl1s \\right\\rangle \n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2013", "solution": "Let's solve this step by step.\n\n(a) For positronium (electron-positron system):\n\n1) First, calculate reduced mass:\n   * For positronium, both particles have mass me\n   * μ = (me × me)/(me + me) = me/2\n   * μ = 4.555 × 10^-28 g\n\n2) Calculate Bohr radius:\n   * a0 = ℏ^2/μe^2\n   * a0 = (1.05 × 10^-27)^2/(4.555 × 10^-28 × (4.80 × 10^-10)^2)\n   * a0 = 1.06 × 10^-8 cm\n\n3) Calculate ground state energy:\n   * E0 = -e^2/2a0\n   * E0 = -(4.80 × 10^-10)^2/(2 × 1.06 × 10^-8)\n   * E0 = -6.8 × 10^-12 erg\n\n(b) For spin states:\n\n1) Each particle has spin 1/2\n2) Total spin can be S = 0 (singlet) or S = 1 (triplet)\n3) Degeneracy = 2S + 1 for each value of S\n   * For S = 0: degeneracy = 1\n   * For S = 1: degeneracy = 3\n   * Total degeneracy = 4\n\n4) Spin wave functions:\n   * Singlet (S = 0): 1/√2(↑↓ - ↓↑)\n   * Triplet (S = 1): \n     * ↑↑ (ms = +1)\n     * 1/√2(↑↓ + ↓↑) (ms = 0)\n     * ↓↓ (ms = -1)\n\n(c) For annihilation:\n\n1) Energy released = rest mass energy of e+ and e-\n   * E = 2mec^2 ≈ 1.022 MeV\n\n2) Angular momentum conservation:\n   * Initial state: L = 0, S = 0 or 1\n   * For single photon: J = 1\n   * Conservation of angular momentum requires at least 2 photons\n\n3) For singlet state (S = 0):\n   * Can decay into 2 photons\n   * Each photon carries E = mec^2 ≈ 0.511 MeV\n\n4) For triplet state (S = 1):\n   * Must decay into 3 photons to conserve angular momentum\n\nThe final answer for ground state energy and Bohr radius:\n\n\\[\\boxed{E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}}\\]", "final_answers": ["E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}"], "equivalency_results": [{"input_expressions": {"expr1": "E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}", "expr2": "E_0 = -6.8 \\ \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}", "expr2": "a_0 = 1.05 \\times 10^{-8} \\ \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}", "expr2": "\\Delta E = 1.02 \\ \\text{MeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = -6.8 \\times 10^{-12} \\text{ erg}, \\ a_0 = 1.06 \\times 10^{-8} \\text{ cm}", "expr2": "AJ = \\sqrt{2}\\hbar"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3047", "solution": "Let's solve this step by step.\n\n(a) First, let's find the spin wave function for t > 0:\n\n1) In region I, the spin is in +z direction, so initial state is:\n   |ψ(0)⟩ = |+z⟩\n\n2) In region II, B is in x direction, so Hamiltonian is:\n   H = -μₙB₂σₓ\n   where μₙ is neutron magnetic moment\n\n3) Time evolution is given by:\n   |ψ(t)⟩ = e^(-iHt/ℏ)|ψ(0)⟩\n   = e^(iωt σₓ)|+z⟩\n   where ω = μₙB₂/ℏ\n\n4) The wave function can be written as:\n   |ψ(t)⟩ = cos(ωt)|+z⟩ + i sin(ωt)|−z⟩\n\n(b) For measuring probabilities:\n\n1) For +x direction:\n   P(+x) = |⟨+x|ψ(t)⟩|² = 1/2\n\n2) For +y direction:\n   P(+y) = |⟨+y|ψ(t)⟩|² = 1/2[1 - sin(2ωt)]\n\n3) For +z direction:\n   P(+z) = |⟨+z|ψ(t)⟩|² = cos²(ωt)\n\n(c) For transition validity:\n\n1) The transition must be sudden compared to the Larmor precession period:\n   τ ≪ 2π/ω = 2πℏ/μₙB₂\n\n2) Also, spatial extent of transition region (d) must satisfy:\n   d ≪ v(2πℏ/μₙB₂)\n\nThe final answer for the probabilities can be written as:\n\n\\[\\boxed{P(+x) = \\frac{1}{2}, P(+y) = \\frac{1}{2}[1 - \\sin(2\\omega t)], P(+z) = \\cos^2(\\omega t)}\\]\n\nwhere ω = μₙB₂/ℏ", "final_answers": ["P(+x) = \\frac{1}{2}, P(+y) = \\frac{1}{2}[1 - \\sin(2\\omega t)], P(+z) = \\cos^2(\\omega t)"], "equivalency_results": [{"input_expressions": {"expr1": "P(+x) = \\frac{1}{2}, P(+y) = \\frac{1}{2}[1 - \\sin(2\\omega t)], P(+z) = \\cos^2(\\omega t)", "expr2": "\\left| \\chi \\right\\rangle = \n\\begin{pmatrix} \n\\cos \\omega_2 t \\\\ \n-i \\sin \\omega_2 t \n\\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{pmatrix} \n\\cos \\omega t \\\\ \n-i \\sin \\omega t \n\\end{pmatrix}\n~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "P(+x) = \\frac{1}{2}, P(+y) = \\frac{1}{2}[1 - \\sin(2\\omega t)], P(+z) = \\cos^2(\\omega t)", "expr2": "\\mathbf{p} = (0, -\\sin 2 \\omega_2 t, \\cos 2 \\omega_2 t)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: ')'\n(0, -\\sin 2 \\omega t, \\cos 2 \\omega t)\n~~^"}, {"input_expressions": {"expr1": "P(+x) = \\frac{1}{2}, P(+y) = \\frac{1}{2}[1 - \\sin(2\\omega t)], P(+z) = \\cos^2(\\omega t)", "expr2": "t \\ll \\frac{h}{|\\mu_n| B_2}"}, "preprocessed_expressions": {"expr1": "cos(omega*t)**2", "expr2": "h*ll*t/(B*Abs(mu))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3024", "solution": "Let me solve this step by step.\n\n1) First, let's recall that in a magnetic field B, the Hamiltonian is:\n   H = -μ·B = -μ₀B·s\n\n2) Given that B is along x-axis, B = Bx̂\n   H = -μ₀Bs_x\n\n3) The initial state at t=0 is |s_z = +1/2⟩\n   We need to express this in terms of s_y eigenstates.\n\n4) The relationship between s_z and s_y eigenstates is:\n   |s_z = +1/2⟩ = (1/√2)(|s_y = +1/2⟩ + i|s_y = -1/2⟩)\n\n5) The time evolution of the state is:\n   |ψ(t)⟩ = e^(-iHt/ℏ)|s_z = +1/2⟩\n\n6) Using s_x eigenstates:\n   |s_z = +1/2⟩ = (1/√2)(|s_x = +1/2⟩ + |s_x = -1/2⟩)\n\n7) The time evolution gives:\n   |ψ(t)⟩ = (1/√2)(e^(iωt/2)|s_x = +1/2⟩ + e^(-iωt/2)|s_x = -1/2⟩)\n   where ω = μ₀B/ℏ\n\n8) Converting back to s_y basis:\n   |s_x = +1/2⟩ = (1/√2)(|s_y = +1/2⟩ + |s_y = -1/2⟩)\n   |s_x = -1/2⟩ = (1/√2)(|s_y = +1/2⟩ - |s_y = -1/2⟩)\n\n9) After substitution and simplification:\n   |ψ(t)⟩ = [cos(ωt/2)|s_y = +1/2⟩ + sin(ωt/2)|s_y = -1/2⟩]\n\n10) Therefore, the probabilities are:\n    P(s_y = +1/2) = cos²(ωt/2)\n    P(s_y = -1/2) = sin²(ωt/2)\n\nThe final answer for both probabilities is:\n\n\\[ \\boxed{P(s_y = +1/2) = \\cos^2(\\frac{\\mu_0Bt}{2\\hbar}), \\quad P(s_y = -1/2) = \\sin^2(\\frac{\\mu_0Bt}{2\\hbar})} \\]", "final_answers": ["P(s_y = +1/2) = \\cos^2(\\frac{\\mu_0Bt}{2\\hbar}), \\quad P(s_y = -1/2) = \\sin^2(\\frac{\\mu_0Bt}{2\\hbar})"], "equivalency_results": [{"input_expressions": {"expr1": "P(s_y = +1/2) = \\cos^2(\\frac{\\mu_0Bt}{2\\hbar}), \\quad P(s_y = -1/2) = \\sin^2(\\frac{\\mu_0Bt}{2\\hbar})", "expr2": "P(+) = \\frac{1}{2} (1 + \\sin 2\\omega t)"}, "preprocessed_expressions": {"expr1": "sin(muBt/(2*hbar))**2", "expr2": "sin(2*omega*t)/2 + 1/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(s_y = +1/2) = \\cos^2(\\frac{\\mu_0Bt}{2\\hbar}), \\quad P(s_y = -1/2) = \\sin^2(\\frac{\\mu_0Bt}{2\\hbar})", "expr2": "P(-) = \\frac{1}{2} (1 - \\sin 2\\omega t)"}, "preprocessed_expressions": {"expr1": "sin(muBt/(2*hbar))**2", "expr2": "1/2 - sin(2*omega*t)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5051", "solution": "Let me solve this step by step.\n\n1) First, let's identify the unperturbed states:\n   * The first excited state (n=1) of a 3D harmonic oscillator has energy E₁ = 3ℏω₀/2\n   * The three degenerate states are |1,0,0⟩, |0,1,0⟩, and |0,0,1⟩\n\n2) For perturbation theory, we need to find the matrix elements:\n   ⟨ψᵢ|H'|ψⱼ⟩ = b⟨ψᵢ|xy|ψⱼ⟩\n\n3) Calculate matrix elements:\n   * For |1,0,0⟩: ⟨1,0,0|xy|1,0,0⟩ = 0\n   * For |0,1,0⟩: ⟨0,1,0|xy|0,1,0⟩ = 0\n   * For |0,0,1⟩: ⟨0,0,1|xy|0,0,1⟩ = 0\n\n4) Off-diagonal elements:\n   * ⟨1,0,0|xy|0,1,0⟩ = ⟨1|x|0⟩⟨0|y|1⟩ = (ℏ/2mω₀)\n   * Other off-diagonal elements are zero\n\n5) The perturbation matrix in the basis {|1,0,0⟩, |0,1,0⟩, |0,0,1⟩} is:\n   ```\n   | 0    b/2   0  |\n   | b/2   0    0  |\n   | 0     0    0  |\n   ```\n   where b' = bℏ/2mω₀\n\n6) The characteristic equation gives eigenvalues:\n   * λ₁ = b'/2\n   * λ₂ = -b'/2\n   * λ₃ = 0\n\n7) The corresponding eigenvectors are:\n   * |ψ₁⟩ = (1/√2)(|1,0,0⟩ + |0,1,0⟩)\n   * |ψ₂⟩ = (1/√2)(|1,0,0⟩ - |0,1,0⟩)\n   * |ψ₃⟩ = |0,0,1⟩\n\n8) The energy corrections are:\n   * ΔE₁ = bℏ/4mω₀\n   * ΔE₂ = -bℏ/4mω₀\n   * ΔE₃ = 0\n\nThe final answer for the energy splittings and wavefunctions is:\n\n\\[\\boxed{\n\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}", "expr2": "E^{(1)}_0 = \\frac{5}{2} \\hbar\\omega"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|0,0,1⟩\n\\end{align*}\n~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}", "expr2": "E^{(1)}_{\\pm} = \\frac{5}{2} \\hbar\\omega \\pm \\frac{\\hbar b}{2m\\omega_0}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|0,0,1⟩\n\\end{align*}\n~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}", "expr2": "|\\psi'_0\\rangle = |001\\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|0,0,1⟩\n\\end{align*}\n~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{align*}\nE_1 &= \\frac{3\\hbar\\omega_0}{2} + \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_1⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ + |0,1,0⟩) \\\\\nE_2 &= \\frac{3\\hbar\\omega_0}{2} - \\frac{b\\hbar}{4m\\omega_0}, \\quad |ψ_2⟩ = \\frac{1}{\\sqrt{2}}(|1,0,0⟩ - |0,1,0⟩) \\\\\nE_3 &= \\frac{3\\hbar\\omega_0}{2}, \\quad |ψ_3⟩ = |0,0,1⟩\n\\end{align*}", "expr2": "|\\psi^{(1)}_{\\pm}\\rangle = \\frac{1}{\\sqrt{2}} (|100\\rangle \\pm |010\\rangle)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|0,0,1⟩\n\\end{align*}\n~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/1-1047", "solution": "Let's solve this step by step.\n\n1) First, let's define the wave numbers in different regions:\n   * Region I (x < 0): k₁ = √(2mE)/ℏ\n   * Region II (0 < x < a): k₂ = √[2m(E+V₀)]/ℏ\n   * Region III (x > a): k₃ = k₁ = √(2mE)/ℏ\n\n2) The wave functions in each region:\n   * Region I: ψ₁ = A(e^(ik₁x) + Re^(-ik₁x))\n   * Region II: ψ₂ = B(e^(ik₂x) + Ce^(-ik₂x))\n   * Region III: ψ₃ = Te^(ik₁x)\n\n3) The transmission probability T is given by |t|², where t is the transmission amplitude.\n\n4) After matching wave functions and their derivatives at boundaries (x=0 and x=a), the transmission probability is:\n\nT = 1/[1 + (k₁² + k₂²)²sin²(k₂a)/(4k₁²k₂²)]\n\n5) The transmission probability will be unity (T=1) when sin²(k₂a) = 0\n   This means: k₂a = nπ, where n is an integer\n\n6) Substituting k₂ = √[2m(E+V₀)]/ℏ:\n   √[2m(E+V₀)]/ℏ × a = nπ\n\n7) Solving for E:\n   E = (n²ℏ²π²)/(2ma²) - V₀\n\nTherefore, the transmission probability will be unity when the energy takes these discrete values.\n\n\\[\\boxed{E_n = \\frac{n^2\\hbar^2\\pi^2}{2ma^2} - V_0, \\quad n = 1,2,3,...}\\]\n\nThis is known as resonant transmission, occurring at specific energies where the wave perfectly matches the well dimensions.", "final_answers": ["E_n = \\frac{n^2\\hbar^2\\pi^2}{2ma^2} - V_0, \\quad n = 1,2,3,..."], "equivalency_results": [{"input_expressions": {"expr1": "E_n = \\frac{n^2\\hbar^2\\pi^2}{2ma^2} - V_0, \\quad n = 1,2,3,...", "expr2": "P = \\frac{4k^2k'^2}{4(kk' \\cos k'a)^2 + (k^2 - k'^2)^2 \\sin^2(k'a)}"}, "preprocessed_expressions": {"expr1": "1", "expr2": "4*k**2*k'**2/(k**4*sin(a*k')**2 - 6*k**2*k'**2*sin(a*k')**2 + 4*k**2*k'**2 + k'**4*sin(a*k')**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_n = \\frac{n^2\\hbar^2\\pi^2}{2ma^2} - V_0, \\quad n = 1,2,3,...", "expr2": "E = \\frac{n^2 \\pi^2 \\hbar^2}{2ma^2} - V_0"}, "preprocessed_expressions": {"expr1": "1", "expr2": "-V + hbar**2*n**2*pi**2/(2*a**2*m)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5069", "solution": "Let's solve this step by step.\n\n(a) For a particle in electromagnetic field:\n1) The Hamiltonian includes kinetic and potential energy terms\n2) The canonical momentum p is replaced by (p - qA)\n3) The scalar potential φ contributes qφ\n4) Therefore, H = (p - qA)²/2m + qφ\n5) Expanding: H = p²/2m - (q/m)(p·A) + q²A²/2m + qφ\n\n(b) For hydrogen atom:\n1) Using A = -½(r × B)\n2) The electron charge q = -e\n3) The Coulomb potential V = -e²/r\n4) The Schrödinger equation becomes:\n   H = p²/2m + (e/2m)(p·(r × B)) + (e²/8m)(r × B)² - e²/r\n\n(c) For ground state energy shift:\n1) First-order perturbation vanishes due to symmetry\n2) Second-order term from (e/2m)(p·(r × B)) also vanishes\n3) The diamagnetic term (e²/8m)(r × B)² contributes\n4) For B along z-axis: (r × B)² = B²(x² + y²)\n5) For ground state: ⟨x²⟩ = ⟨y²⟩ = ⟨z²⟩ = a₀²/3\n   where a₀ is Bohr radius\n6) Energy shift ΔE = (e²B²/24m)⟨r²⟩ = (e²B²a₀²/12m)\n\n(d) Induced magnetic moment:\n1) μ = -∂ΔE/∂B\n2) μ = -(e²Ba₀²/6m)\n3) This is negative, confirming diamagnetic behavior\n4) Substituting a₀ = ℏ²/me²\n\nThe final answer for the induced diamagnetic moment is:\n\n\\[\\boxed{\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}}\\]\n\nThis shows the diamagnetic moment is proportional to B and always opposes the applied field.", "final_answers": ["\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}", "expr2": "H = \\frac{1}{2m} \\left( \\mathbf{p} - \\frac{q}{c} \\mathbf{A} \\right)^2 + q \\phi"}, "preprocessed_expressions": {"expr1": "-B*hbar**2/(6*c**2*m**2)", "expr2": "A**2*mathbf**2*q**2/(2*c**2*m) - A*mathbf**2*p*q/(c*m) + phi*q + mathbf**2*p**2/(2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}", "expr2": "\\left( -\\frac{\\hbar^2}{2m_e} \\nabla^2 - \\frac{e^2}{r} - \\frac{ieB\\hbar}{2m_ec} \\frac{\\partial}{\\partial \\varphi} + \\frac{e^2B^2}{8m_ec^2} r^2 \\sin^2 \\theta \\right) \\psi(r, \\theta, \\varphi) = E\\psi(r, \\theta, \\varphi)"}, "preprocessed_expressions": {"expr1": "-B*hbar**2/(6*c**2*m**2)", "expr2": "E*psi(r, theta, varphi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}", "expr2": "\\Delta E = \\frac{a^2e^2B^2}{4m_ec^2}"}, "preprocessed_expressions": {"expr1": "-B*hbar**2/(6*c**2*m**2)", "expr2": "B**2*a**2*e**2/(4*c**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mu = -\\frac{e^2B a_0^2}{6m} = -\\frac{e^2B\\hbar^2}{6m^3e^4} = -\\frac{\\hbar^2B}{6m^2c^2}", "expr2": "\\mu = - \\frac{e^2 a^2}{4 m_e c^2} \\mathbf{B}"}, "preprocessed_expressions": {"expr1": "-B*hbar**2/(6*c**2*m**2)", "expr2": "-B*a**2*e**2*mathbf/(4*c**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3023", "solution": "Let's solve this step by step.\n\n1) First, recall that for a spin-1/2 particle in a magnetic field B, the Hamiltonian is:\n   H = -μ⋅B = -(gqℏ/2m)S⋅B = -ωS_z\n   where ω = gqB/2m is the Larmor frequency\n\n2) At t=0, the spin is along +x direction. This means:\n   |ψ(0)⟩ = |+x⟩ = (|+z⟩ + |-z⟩)/√2\n\n3) Using Ehrenfest theorem:\n   d⟨S_i⟩/dt = (i/ℏ)[H,S_i] + ∂S_i/∂t\n   where i = x,y,z\n\n4) The commutation relations for spin operators are:\n   [S_x,S_y] = iℏS_z\n   [S_y,S_z] = iℏS_x\n   [S_z,S_x] = iℏS_y\n\n5) Solving for expectation values:\n   ⟨S_x(t)⟩ = (ℏ/2)cos(ωt)\n   ⟨S_y(t)⟩ = (ℏ/2)sin(ωt)\n   ⟨S_z(t)⟩ = 0\n\n6) The probability of finding the system in a particular state is related to the expectation values by:\n   P(s_i = +ℏ/2) = (1 + 2⟨S_i⟩/ℏ)/2\n   P(s_i = -ℏ/2) = (1 - 2⟨S_i⟩/ℏ)/2\n\n7) Therefore:\n   a) P(s_x = +ℏ/2) = (1 + cos(ωt))/2\n   b) P(s_x = -ℏ/2) = (1 - cos(ωt))/2\n   c) P(s_y = +ℏ/2) = (1 + sin(ωt))/2\n   d) P(s_y = -ℏ/2) = (1 - sin(ωt))/2\n   e) P(s_z = +ℏ/2) = 1/2\n   f) P(s_z = -ℏ/2) = 1/2\n\nThe final answer combining all probabilities:\n\n\\[\\boxed{\n\\begin{align*}\nP(s_x = +\\frac{\\hbar}{2}) &= \\frac{1 + \\cos(\\omega t)}{2} \\\\\nP(s_x = -\\frac{\\hbar}{2}) &= \\frac{1 - \\cos(\\omega t)}{2} \\\\\nP(s_y = +\\frac{\\hbar}{2}) &= \\frac{1 + \\sin(\\omega t)}{2} \\\\\nP(s_y = -\\frac{\\hbar}{2}) &= \\frac{1 - \\sin(\\omega t)}{2} \\\\\nP(s_z = +\\frac{\\hbar}{2}) &= \\frac{1}{2} \\\\\nP(s_z = -\\frac{\\hbar}{2}) &= \\frac{1}{2}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nP(s_x = +\\frac{\\hbar}{2}) &= \\frac{1 + \\cos(\\omega t)}{2} \\\\\nP(s_x = -\\frac{\\hbar}{2}) &= \\frac{1 - \\cos(\\omega t)}{2} \\\\\nP(s_y = +\\frac{\\hbar}{2}) &= \\frac{1 + \\sin(\\omega t)}{2} \\\\\nP(s_y = -\\frac{\\hbar}{2}) &= \\frac{1 - \\sin(\\omega t)}{2} \\\\\nP(s_z = +\\frac{\\hbar}{2}) &= \\frac{1}{2} \\\\\nP(s_z = -\\frac{\\hbar}{2}) &= \\frac{1}{2}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nP(s_x = +\\frac{\\hbar}{2}) &= \\frac{1 + \\cos(\\omega t)}{2} \\\\\nP(s_x = -\\frac{\\hbar}{2}) &= \\frac{1 - \\cos(\\omega t)}{2} \\\\\nP(s_y = +\\frac{\\hbar}{2}) &= \\frac{1 + \\sin(\\omega t)}{2} \\\\\nP(s_y = -\\frac{\\hbar}{2}) &= \\frac{1 - \\sin(\\omega t)}{2} \\\\\nP(s_z = +\\frac{\\hbar}{2}) &= \\frac{1}{2} \\\\\nP(s_z = -\\frac{\\hbar}{2}) &= \\frac{1}{2}\n\\end{align*}", "expr2": "\\mathbf{P}(s_x = 1/2) = \\cos^2\\left(\\frac{\\omega t}{2}\\right)"}, "preprocessed_expressions": {"expr1": "end/2", "expr2": "cos(omega*t/2)**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nP(s_x = +\\frac{\\hbar}{2}) &= \\frac{1 + \\cos(\\omega t)}{2} \\\\\nP(s_x = -\\frac{\\hbar}{2}) &= \\frac{1 - \\cos(\\omega t)}{2} \\\\\nP(s_y = +\\frac{\\hbar}{2}) &= \\frac{1 + \\sin(\\omega t)}{2} \\\\\nP(s_y = -\\frac{\\hbar}{2}) &= \\frac{1 - \\sin(\\omega t)}{2} \\\\\nP(s_z = +\\frac{\\hbar}{2}) &= \\frac{1}{2} \\\\\nP(s_z = -\\frac{\\hbar}{2}) &= \\frac{1}{2}\n\\end{align*}", "expr2": "\\mathbf{P}(s_x = -1/2) = \\sin^2\\left(\\frac{\\omega t}{2}\\right)"}, "preprocessed_expressions": {"expr1": "end/2", "expr2": "sin(omega*t/2)**2"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1049", "solution": "Let's solve this step by step.\n\n1) First, let's identify the two regions:\n   * Region 1 (x < 0): V = 0\n   * Region 2 (x > 0): V = V₀\n\n2) The wave functions in each region will be:\n   * Region 1: ψ₁(x) = Ae^{ikx} + Be^{-ikx} (incident + reflected)\n   * Region 2: ψ₂(x) = Ce^{ik'x} (transmitted)\n   where k = √(2mE)/ℏ and k' = √[2m(E-V₀)]/ℏ\n\n3) We need to consider two cases:\n   Case 1: E > V₀\n   Case 2: E < V₀\n\n4) For E > V₀:\n   * k' is real\n   * Transmission coefficient T = |C/A|² = 4kk'/[(k+k')²]\n   * Reflection coefficient R = |B/A|² = [(k-k')/(k+k')]²\n   * T + R = 1\n\n5) For E < V₀:\n   * k' becomes imaginary: k' = iκ where κ = √[2m(V₀-E)]/ℏ\n   * The wave function in region 2 becomes evanescent\n   * T = 0 (total reflection)\n   * R = 1\n\n6) Final answer:\nFor E > V₀:\nT = 4√[E(E-V₀)]/[E + (E-V₀)]\nR = [√E - √(E-V₀)]²/[√E + √(E-V₀)]²\n\nFor E < V₀:\nT = 0\nR = 1\n\n\\[\\boxed{\n\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}\n}\\]", "final_answers": ["\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}", "expr2": "R = 1"}, "preprocessed_expressions": {"expr1": "a*c*e*end*s**2", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}", "expr2": "T = 0"}, "preprocessed_expressions": {"expr1": "a*c*e*end*s**2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}", "expr2": "R = \\left(\\frac{k' - k}{k' + k}\\right)^2"}, "preprocessed_expressions": {"expr1": "a*c*e*end*s**2", "expr2": "(k**2 - 2*k*k' + k'**2)/(k**2 + 2*k*k' + k'**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{cases}\nE > V_0: & T = \\frac{4\\sqrt{E(E-V_0)}}{E + (E-V_0)}, \\; R = \\frac{(\\sqrt{E} - \\sqrt{E-V_0})^2}{(\\sqrt{E} + \\sqrt{E-V_0})^2} \\\\\nE < V_0: & T = 0, \\; R = 1\n\\end{cases}", "expr2": "T = \\frac{4kk'}{(k + k')^2}"}, "preprocessed_expressions": {"expr1": "a*c*e*end*s**2", "expr2": "4*k*k'/(k**2 + 2*k*k' + k'**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5060", "solution": "Let me solve this step by step.\n\n1) In a weak magnetic field, the interaction energy is given by the Zeeman effect. Since we're told the interaction is small compared to fine structure, we can use the weak-field Zeeman effect formula.\n\n2) The interaction Hamiltonian with a magnetic field in the z-direction is:\n   $H = -\\vec{\\mu} \\cdot \\vec{B} = -\\mu_z B$\n\n3) The magnetic moment $\\vec{\\mu}$ of the atom has contributions from both orbital and spin angular momenta:\n   $\\vec{\\mu} = -g_L \\mu_B \\vec{L}/\\hbar - g_S \\mu_B \\vec{S}/\\hbar$\n   where:\n   - $\\mu_B$ is the Bohr magneton\n   - $g_L = 1$ is the orbital g-factor\n   - $g_S \\approx 2$ is the electron spin g-factor\n\n4) In the weak field case, $\\vec{L}$ and $\\vec{S}$ are not good quantum numbers, but $\\vec{J}$ is. We need to use the Landé g-factor:\n   $g_J = 1 + \\frac{J(J+1) + S(S+1) - L(L+1)}{2J(J+1)}$\n\n5) The energy shift is then:\n   $\\Delta E = g_J \\mu_B B J_z$\n\n6) Substituting the expression for $g_J$:\n   $\\Delta E = \\mu_B B J_z [1 + \\frac{J(J+1) + S(S+1) - L(L+1)}{2J(J+1)}]$\n\nThis is the final answer:\n\n\\[ \\boxed{\\Delta E = \\mu_B B J_z [1 + \\frac{J(J+1) + S(S+1) - L(L+1)}{2J(J+1)}]} \\]", "final_answers": ["\\Delta E = \\mu_B B J_z [1 + \\frac{J(J+1) + S(S+1) - L(L+1)}{2J(J+1)}]"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = \\mu_B B J_z [1 + \\frac{J(J+1) + S(S+1) - L(L+1)}{2J(J+1)}]", "expr2": "\\Delta E = M_J \\hbar \\omega_l + \\sum_{M_L} (M_J - M_L) \\hbar \\omega_l \\left[\\langle L M_L S, M_J - M_L | J M_J \\rangle\\right]^2"}, "preprocessed_expressions": {"expr1": "B*J*mu*(3*J(J + 1) - L(L + 1) + S(S + 1))/(2*J(J + 1))", "expr2": "M*hbar*omega"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5067", "solution": "Let me solve this step by step.\n\n(a) For the radius and binding energy:\n\n1) Positronium is similar to hydrogen atom, but with reduced mass μ different:\n   * For hydrogen: μ = (me*mp)/(me+mp) ≈ me\n   * For positronium: μ = (me*me)/(me+me) = me/2\n\n2) The Bohr radius formula needs to be modified:\n   * a₀(positronium) = ℏ²/(μe²)\n   * This is twice the hydrogen Bohr radius\n   * a₀(positronium) = 2 * 0.529 Å = 1.058 Å\n\n3) The ground state energy:\n   * E₁ = -μe⁴/(2ℏ²)\n   * Since μ is half of electron mass, energy is half of hydrogen\n   * E₁ = -13.6 eV/2 = -6.8 eV\n\n(b) For the spin-spin interaction:\n\n1) The total spin can be:\n   * Singlet state (S=0): antiparallel spins\n   * Triplet state (S=1): parallel spins\n\n2) In a magnetic field B:\n   * Singlet state (S=0): remains unchanged\n   * Triplet state (S=1) splits into three levels due to Zeeman effect:\n     - Ms = +1: Energy increases with B\n     - Ms = 0: Remains constant\n     - Ms = -1: Energy decreases with B\n\n3) Energy level diagram:\n   ```\n   Energy\n     ^\n     |           Ms = +1\n     |          /\n     |  -------/------ Ms = 0    } Triplet\n     |        /        \n     |       /         Ms = -1\n     |      /\n     |     /\n     |    /\n     |------- Singlet\n     |\n     +----------------> B\n   ```\n\nFinal answers:\n\n\\[ \\boxed{\\text{Ground state radius} = 1.058 \\text{ Å}} \\]\n\\[ \\boxed{\\text{Ground state binding energy} = -6.8 \\text{ eV}} \\]", "final_answers": ["\\text{Ground state radius} = 1.058 \\text{ Å}", "\\text{Ground state binding energy} = -6.8 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Ground state radius} = 1.058 \\text{ Å}", "expr2": "a_0' = 2 a_0 \\approx 1 \\text{ A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state radius} = 1.058 \\text{ Å}", "expr2": "E_1' \\approx 6.8 \\text{ eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state radius} = 1.058 \\text{ Å}", "expr2": "E_1 = E_2 = A \\hbar^2 / 4"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state radius} = 1.058 \\text{ Å}", "expr2": "E_3 = -A \\hbar^2 / 4 + \\sqrt{\\left(\\frac{A \\hbar^2}{2}\\right)^2 + \\hbar^2 \\left(\\frac{eB}{mc}\\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state radius} = 1.058 \\text{ Å}", "expr2": "E_4 = -A \\hbar^2 / 4 - \\sqrt{\\left(\\frac{A \\hbar^2}{2}\\right)^2 + \\hbar^2 \\left(\\frac{eB}{mc}\\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state binding energy} = -6.8 \\text{ eV}", "expr2": "a_0' = 2 a_0 \\approx 1 \\text{ A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state binding energy} = -6.8 \\text{ eV}", "expr2": "E_1' \\approx 6.8 \\text{ eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state binding energy} = -6.8 \\text{ eV}", "expr2": "E_1 = E_2 = A \\hbar^2 / 4"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state binding energy} = -6.8 \\text{ eV}", "expr2": "E_3 = -A \\hbar^2 / 4 + \\sqrt{\\left(\\frac{A \\hbar^2}{2}\\right)^2 + \\hbar^2 \\left(\\frac{eB}{mc}\\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state binding energy} = -6.8 \\text{ eV}", "expr2": "E_4 = -A \\hbar^2 / 4 - \\sqrt{\\left(\\frac{A \\hbar^2}{2}\\right)^2 + \\hbar^2 \\left(\\frac{eB}{mc}\\right)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6040", "solution": "Let's solve this step by step.\n\n1) First, let's understand how the states evolve with time. For states with definite lifetimes and energies:\n   * |K_L(t)⟩ = e^(-iE_Lt/ℏ - γ_Lt/2)|K_L(0)⟩\n   * |K_S(t)⟩ = e^(-iE_St/ℏ - γ_St/2)|K_S(0)⟩\n   where E_L = m_Lc² and E_S = m_Sc²\n\n2) At t=0, |ψ(0)⟩ = |K⁰⟩ = 1/√2(|K_L⟩ + |K_S⟩)\n\n3) Therefore, at time t:\n   |ψ(t)⟩ = 1/√2[e^(-iE_Lt/ℏ - γ_Lt/2)|K_L⟩ + e^(-iE_St/ℏ - γ_St/2)|K_S⟩]\n\n4) To find P₀(t), we need |⟨K⁰|ψ(t)⟩|²\n   ⟨K⁰|ψ(t)⟩ = 1/2[e^(-iE_Lt/ℏ - γ_Lt/2) + e^(-iE_St/ℏ - γ_St/2)]\n\n5) Similarly, for P̄₀(t), we need |⟨K̄⁰|ψ(t)⟩|²\n   ⟨K̄⁰|ψ(t)⟩ = 1/2[e^(-iE_Lt/ℏ - γ_Lt/2) - e^(-iE_St/ℏ - γ_St/2)]\n\n6) Therefore:\n   P₀(t) = |⟨K⁰|ψ(t)⟩|² = 1/4[e^(-γ_Lt) + e^(-γ_St) + 2e^(-(γ_L+γ_S)t/2)cos((E_L-E_S)t/ℏ)]\n\n7) And:\n   P̄₀(t) = |⟨K̄⁰|ψ(t)⟩|² = 1/4[e^(-γ_Lt) + e^(-γ_St) - 2e^(-(γ_L+γ_S)t/2)cos((E_L-E_S)t/ℏ)]\n\n8) Therefore:\n   P₀(t) - P̄₀(t) = e^(-(γ_L+γ_S)t/2)cos((E_L-E_S)t/ℏ)\n\nThe final answer is:\n\n\\[\\boxed{P_0(t) - \\bar{P}_0(t) = e^{-(\\gamma_L+\\gamma_S)t/2}\\cos\\left(\\frac{(m_L-m_S)c^2t}{\\hbar}\\right)}\\]", "final_answers": ["P_0(t) - \\bar{P}_0(t) = e^{-(\\gamma_L+\\gamma_S)t/2}\\cos\\left(\\frac{(m_L-m_S)c^2t}{\\hbar}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "P_0(t) - \\bar{P}_0(t) = e^{-(\\gamma_L+\\gamma_S)t/2}\\cos\\left(\\frac{(m_L-m_S)c^2t}{\\hbar}\\right)", "expr2": "P_0(t) - \\bar{P}_0(t) = e^{-(\\gamma_L + \\gamma_S) t/2} \\cos\\left( \\frac{(m_L - m_S) c^2 t}{\\hbar} \\right)"}, "preprocessed_expressions": {"expr1": "e**(-gamma*t)", "expr2": "e**(-gamma*t)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6014", "solution": "Let me solve this step by step.\n\n1) First, recall that the Schrödinger equation for scattering is:\n   $(-\\frac{\\hbar^2}{2m}\\nabla^2 + V(r))\\psi = E\\psi$\n\n2) The energy E for a free particle is:\n   $E = \\frac{\\hbar^2k^2}{2m}$\n\n3) Substitute the wave function $\\psi = e^{ikz} + v(r)$ into the Schrödinger equation:\n   $(-\\frac{\\hbar^2}{2m}\\nabla^2 + V(r))(e^{ikz} + v(r)) = \\frac{\\hbar^2k^2}{2m}(e^{ikz} + v(r))$\n\n4) Expand the left side:\n   $-\\frac{\\hbar^2}{2m}\\nabla^2e^{ikz} - \\frac{\\hbar^2}{2m}\\nabla^2v(r) + V(r)e^{ikz} + V(r)v(r) = \\frac{\\hbar^2k^2}{2m}e^{ikz} + \\frac{\\hbar^2k^2}{2m}v(r)$\n\n5) Note that $\\nabla^2e^{ikz} = -k^2e^{ikz}$\n\n6) In the Born approximation, we assume that the scattered wave is small compared to the incident wave, so $V(r)v(r)$ is negligible (second-order term).\n\n7) After canceling terms involving $e^{ikz}$ (they satisfy the free-particle equation), we get:\n   $-\\frac{\\hbar^2}{2m}\\nabla^2v(r) - \\frac{\\hbar^2k^2}{2m}v(r) = -V(r)e^{ikz}$\n\n8) Rearrange to standard form:\n   $(\\nabla^2 + k^2)v(r) = \\frac{2m}{\\hbar^2}V(r)e^{ikz}$\n\nThis is the differential equation for the scattered wave v(r) in the first Born approximation.\n\n\\[ \\boxed{(\\nabla^2 + k^2)v(r) = \\frac{2m}{\\hbar^2}V(r)e^{ikz}} \\]", "final_answers": ["(\\nabla^2 + k^2)v(r) = \\frac{2m}{\\hbar^2}V(r)e^{ikz}"], "equivalency_results": [{"input_expressions": {"expr1": "(\\nabla^2 + k^2)v(r) = \\frac{2m}{\\hbar^2}V(r)e^{ikz}", "expr2": "(\\nabla^2 + k^2) v(\\mathbf{r}) = \\frac{2m}{\\hbar^2} V(\\mathbf{r}) e^{ikz}"}, "preprocessed_expressions": {"expr1": "2*e**(i*k*z)*m*V(r)/hbar**2", "expr2": "2*e**(i*k*z)*m*V(mathbf*r)/hbar**2"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1025", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have a potential with two delta functions at x = +a and x = -a\n   * The potential is attractive (negative) at these points\n   * We're looking for the ground state, which will be symmetric\n\n2) The time-independent Schrödinger equation is:\n   $$-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi}{dx^2} - g[\\delta(x-a) + \\delta(x+a)]\\psi = E\\psi$$\n\n3) In regions where x ≠ ±a, the equation becomes:\n   $$-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi}{dx^2} = E\\psi$$\n\n4) For bound states (E < 0), the general solution is:\n   $$\\psi(x) = Ae^{\\kappa x} + Be^{-\\kappa x}$$\n   where $\\kappa = \\sqrt{-2mE}/\\hbar$\n\n5) Due to symmetry of the ground state:\n   * For |x| > a: $\\psi(x) = Ce^{-\\kappa|x|}$\n   * For |x| < a: $\\psi(x) = D\\cosh(\\kappa x)$\n\n6) At x = ±a, we need continuity:\n   $$Ce^{-\\kappa a} = D\\cosh(\\kappa a)$$\n\n7) The discontinuity in the derivative at x = a due to delta function:\n   $$\\left.\\frac{d\\psi}{dx}\\right|_{a+} - \\left.\\frac{d\\psi}{dx}\\right|_{a-} = -\\frac{2mg}{\\hbar^2}\\psi(a)$$\n\n8) This gives:\n   $$-\\kappa Ce^{-\\kappa a} - \\kappa D\\sinh(\\kappa a) = -\\frac{2mg}{\\hbar^2}Ce^{-\\kappa a}$$\n\n9) Combining equations from steps 6 and 8:\n   $$\\kappa + \\kappa\\tanh(\\kappa a) = \\frac{2mg}{\\hbar^2}$$\n\nThis is the equation relating the energy (through κ) to the constant g.\n\nThe final answer is:\n\n\\[\\boxed{\\kappa(1 + \\tanh(\\kappa a)) = \\frac{2mg}{\\hbar^2}, \\text{ where } \\kappa = \\sqrt{-2mE}/\\hbar}\\]\n\nThe ground state wavefunction is:\n\\[\\boxed{\\psi(x) = \\begin{cases} \nCe^{-\\kappa|x|} & |x| > a \\\\\nC\\frac{e^{-\\kappa a}}{\\cosh(\\kappa a)}\\cosh(\\kappa x) & |x| < a\n\\end{cases}}\\]\nwhere C is the normalization constant.", "final_answers": ["\\kappa(1 + \\tanh(\\kappa a)) = \\frac{2mg}{\\hbar^2}, \\text{ where } \\kappa = \\sqrt{-2mE}/\\hbar", "\\psi(x) = \\begin{cases} \nCe^{-\\kappa|x|} & |x| > a \\\\\nC\\frac{e^{-\\kappa a}}{\\cosh(\\kappa a)}\\cosh(\\kappa x) & |x| < a\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "\\kappa(1 + \\tanh(\\kappa a)) = \\frac{2mg}{\\hbar^2}, \\text{ where } \\kappa = \\sqrt{-2mE}/\\hbar", "expr2": "\\psi(x) = \\begin{cases} \n   B e^{ka} \\cosh (ka) e^{-k |x|}, & |x| > a, \\\\\n   B \\cosh(kx), & |x| \\le a.\n   \\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\kappa(1 + \\tanh(\\kappa a)) = \\frac{2mg}{\\hbar^2}, \\text{ where } \\kappa = \\sqrt{-2mE}/\\hbar", "expr2": "k \\left[1 + \\tanh(ka) \\right] = \\frac{2mg}{\\hbar^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\begin{cases} \nCe^{-\\kappa|x|} & |x| > a \\\\\nC\\frac{e^{-\\kappa a}}{\\cosh(\\kappa a)}\\cosh(\\kappa x) & |x| < a\n\\end{cases}", "expr2": "\\psi(x) = \\begin{cases} \n   B e^{ka} \\cosh (ka) e^{-k |x|}, & |x| > a, \\\\\n   B \\cosh(kx), & |x| \\le a.\n   \\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\begin{cases} \nCe^{-\\kappa|x|} & |x| > a \\\\\nC\\frac{e^{-\\kappa a}}{\\cosh(\\kappa a)}\\cosh(\\kappa x) & |x| < a\n\\end{cases}\n~~~~~~~~~~~~~~~~^"}], "accuracy": 1.0}
{"id": "quantum/1-1022", "solution": "Let me solve this step by step.\n\n1) For a delta function potential well, there is only one bound state. The wavefunction for this state is:\n\n   $\\psi(x) = \\sqrt{\\kappa} e^{-\\kappa|x|}$\n\n   where $\\kappa = \\frac{ma}{\\hbar^2}$\n\n2) The wavefunction is normalized, meaning:\n   \n   $\\int_{-\\infty}^{\\infty} |\\psi(x)|^2 dx = 1$\n\n3) The probability of finding the particle between $-x_0$ and $x_0$ is:\n\n   $P(|x| < x_0) = \\int_{-x_0}^{x_0} |\\psi(x)|^2 dx$\n\n4) Substituting the wavefunction:\n\n   $\\int_{-x_0}^{x_0} \\kappa e^{-2\\kappa|x|} dx = \\frac{1}{2}$\n\n5) Due to symmetry, this is equivalent to:\n\n   $2\\int_{0}^{x_0} \\kappa e^{-2\\kappa x} dx = \\frac{1}{2}$\n\n6) Solving the integral:\n\n   $2\\kappa[-\\frac{1}{2\\kappa}e^{-2\\kappa x}]_0^{x_0} = \\frac{1}{2}$\n\n   $2\\kappa[-\\frac{1}{2\\kappa}e^{-2\\kappa x_0} + \\frac{1}{2\\kappa}] = \\frac{1}{2}$\n\n   $[-e^{-2\\kappa x_0} + 1] = \\frac{1}{2}$\n\n   $e^{-2\\kappa x_0} = \\frac{1}{2}$\n\n7) Taking the natural logarithm of both sides:\n\n   $-2\\kappa x_0 = -\\ln(2)$\n\n   $x_0 = \\frac{\\ln(2)}{2\\kappa} = \\frac{\\hbar^2\\ln(2)}{2ma}$\n\nTherefore, the value of $x_0$ is:\n\n\\[ \\boxed{x_0 = \\frac{\\hbar^2\\ln(2)}{2ma}} \\]", "final_answers": ["x_0 = \\frac{\\hbar^2\\ln(2)}{2ma}"], "equivalency_results": [{"input_expressions": {"expr1": "x_0 = \\frac{\\hbar^2\\ln(2)}{2ma}", "expr2": "x_0 = \\frac{\\hbar^2}{2ma} \\ln 2"}, "preprocessed_expressions": {"expr1": "hbar**2*log(2)/(2*a*m)", "expr2": "hbar**2*log(2)/(2*a*m)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6013", "solution": "Let me solve this step by step.\n\n1) For low energy scattering, we need to solve the radial Schrödinger equation:\n   - Inside (r < a): $\\frac{d^2u}{dr^2} + (k^2 + \\frac{2mV_0}{\\hbar^2})u = 0$\n   - Outside (r > a): $\\frac{d^2u}{dr^2} + k^2u = 0$\n\n2) Let's define $K^2 = k^2 + \\frac{2mV_0}{\\hbar^2}$\n   The solutions are:\n   - Inside: $u(r) = A\\sin(Kr)$\n   - Outside: $u(r) = B\\sin(kr + \\delta_0)$\n\n3) For low energy (k→0), only s-wave (l=0) contributes significantly.\n   The phase shift δ₀ determines the scattering cross section:\n   $\\sigma = \\frac{4\\pi}{k^2}\\sin^2\\delta_0$\n\n4) Matching conditions at r = a:\n   - $A\\sin(Ka) = B\\sin(ka + \\delta_0)$\n   - $AK\\cos(Ka) = Bk\\cos(ka + \\delta_0)$\n\n5) For low energy, ka << 1:\n   $\\tan\\delta_0 = \\frac{ka}{1 - ka\\cot(Ka)}$\n\n6) For small k:\n   $\\delta_0 \\approx -ka(1 - \\frac{Ka}{\\tan(Ka)})$\n\n7) The scattering cross section becomes:\n   $\\sigma = 4\\pi a^2(1 - \\frac{Ka}{\\tan(Ka)})^2$\n\n8) Born approximation result:\n   $\\sigma_{Born} = \\frac{4\\pi m^2V_0^2a^6}{\\hbar^4}$\n\n9) The exact result differs from Born approximation when $V_0$ is large or when ka is small.\n\nThe final answer for the exact scattering cross section is:\n\n\\[ \\boxed{\\sigma = 4\\pi a^2(1 - \\frac{Ka}{\\tan(Ka)})^2} \\]\n\nwhere $K = \\sqrt{k^2 + \\frac{2mV_0}{\\hbar^2}}$", "final_answers": ["\\sigma = 4\\pi a^2(1 - \\frac{Ka}{\\tan(Ka)})^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma = 4\\pi a^2(1 - \\frac{Ka}{\\tan(Ka)})^2", "expr2": "\\sigma = \\frac{16 \\pi a^6 m^2 V_0^2}{9 \\hbar^4}"}, "preprocessed_expressions": {"expr1": "4*a**2*pi*(K*a - tan(K*a))**2/tan(K*a)**2", "expr2": "16*V**2*a**6*m**2*pi/(9*hbar**4)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2015", "solution": "Let's solve this step by step.\n\n(a) First, let's solve for the energy splitting relation:\n\n1) The Schrödinger equation for this system is:\n   $-\\frac{\\hbar^2}{2m}\\nabla^2\\psi + (A + Br)\\psi = E\\psi$\n\n2) For dimensional analysis, let's identify the units:\n   * $E$ has units of energy\n   * $r$ has units of length\n   * $B$ must have units of energy/length\n   * $\\hbar^2/m$ has units of energy·length²\n\n3) The characteristic length scale $L$ can be found by equating the kinetic and potential terms:\n   $\\frac{\\hbar^2}{mL^2} \\sim \\frac{B}{L}$\n   Therefore, $L \\sim (\\frac{\\hbar^2}{mB})^{1/3}$\n\n4) The energy splitting $\\Delta E$ scales as:\n   $\\Delta E \\sim (\\frac{\\hbar^2}{m})^{1/3}B^{2/3}$\n\n5) For two different quark systems (charm and bottom), the ratio of energy splittings is:\n   $\\frac{\\Delta E_1}{\\Delta E_2} = (\\frac{m_2}{m_1})^{1/3}$\n\n6) For charmonium: $\\Delta E_{\\psi} = 3.7 - 3.1 = 0.6$ GeV\n   For upsilon: $\\Delta E_{\\Upsilon} = E_{\\Upsilon'} - 9.5$\n\n7) Using the mass ratio:\n   $\\frac{\\Delta E_{\\Upsilon}}{\\Delta E_{\\psi}} = (\\frac{m_c}{m_b})^{1/3} = (\\frac{1.5}{4.5})^{1/3} = 0.693$\n\n8) Therefore:\n   $\\Delta E_{\\Upsilon} = 0.6 \\times 0.693 = 0.416$ GeV\n   $E_{\\Upsilon'} = 9.5 + 0.416 = 9.916$ GeV\n\n(b) For the WKB approximation:\n\n1) For a linear potential, the WKB approximation gives:\n   $E_n \\propto (n + \\frac{3}{4})^{2/3}$\n\n2) Therefore:\n   $\\frac{E_{\\psi''} - E_{\\psi'}}{E_{\\psi'} - E_{\\psi}} = \\frac{(2 + \\frac{3}{4})^{2/3} - (1 + \\frac{3}{4})^{2/3}}{(1 + \\frac{3}{4})^{2/3} - (0 + \\frac{3}{4})^{2/3}} = 0.84$\n\n3) Thus:\n   $E_{\\psi''} - 3.7 = 0.84(3.7 - 3.1)$\n   $E_{\\psi''} - 3.7 = 0.84 \\times 0.6 = 0.504$\n   $E_{\\psi''} = 4.204$ GeV\n\nThe final answers are:\n\n\\[\\boxed{E_{\\Upsilon'} = 9.916 \\text{ GeV}, E_{\\psi''} = 4.204 \\text{ GeV}}\\]", "final_answers": ["E_{\\Upsilon'} = 9.916 \\text{ GeV}, E_{\\psi''} = 4.204 \\text{ GeV}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{\\Upsilon'} = 9.916 \\text{ GeV}, E_{\\psi''} = 4.204 \\text{ GeV}", "expr2": "E_{\\Upsilon'} = 9.9 \\, \\text{GeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{\\Upsilon'} = 9.916 \\text{ GeV}, E_{\\psi''} = 4.204 \\text{ GeV}", "expr2": "E_{\\psi''} = 4.2 \\, \\text{GeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3048", "solution": "Let's solve this step by step.\n\n(a) Physical significance of terms:\n\n1) First term (as_μ·s_e): \n- This represents the hyperfine interaction between the muon and electron spins\n- 'a' is the hyperfine coupling constant\n\n2) Second term ((|e|/mec)s_e·B):\n- Represents the interaction of electron magnetic moment with external field\n- Electron magnetic moment is proportional to e/me\n\n3) Third term (-(|e|/mμc)s_μ·B):\n- Represents the interaction of muon magnetic moment with external field\n- Muon magnetic moment is proportional to e/mμ\n\nThe electron term dominates because me << mμ, making |e|/mec >> |e|/mμc\n\n(b) For state (1, +1):\n\n1) In this state, F = 1 and M = +1 means the spins are aligned parallel\n2) For s_μ·s_e in this state:\n   - s_μ·s_e = 1/4 (for parallel spins)\n\n3) For magnetic field terms:\n   - sz_e = +1/2\n   - sz_μ = +1/2\n\n4) The eigenvalue is:\n   E = (a/4) + (|e|/2mec)B - (|e|/2mμc)B\n   = (a/4) + (|e|B/2c)(1/me - 1/mμ)\n\n(c) Detection of transition:\n\n1) The μ+ decay is parity violating\n2) In state (1,+1), the muon spin is aligned with B\n3) Positrons from μ+ decay are preferentially emitted along spin direction\n4) When transition occurs to (0,0):\n   - The spin alignment changes\n   - This changes the angular distribution of decay positrons\n5) Therefore, monitoring the angular distribution of decay positrons can detect transitions\n\nThe final answer for part (b) eigenvalue is:\n\n\\[\\boxed{E = \\frac{a}{4} + \\frac{|e|B}{2c}(\\frac{1}{m_e} - \\frac{1}{m_\\mu})}\\]", "final_answers": ["E = \\frac{a}{4} + \\frac{|e|B}{2c}(\\frac{1}{m_e} - \\frac{1}{m_\\mu})"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\frac{a}{4} + \\frac{|e|B}{2c}(\\frac{1}{m_e} - \\frac{1}{m_\\mu})", "expr2": "\\text{The second term, } \\frac{|e|}{m_e c} \\mathbf{s}_e \\cdot \\mathbf{B}, \\text{ dominates.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{a}{4} + \\frac{|e|B}{2c}(\\frac{1}{m_e} - \\frac{1}{m_\\mu})", "expr2": "\\frac{a \\hbar^2}{4} + \\frac{e \\hbar B}{2 m_e c} - \\frac{e \\hbar B}{2 m_\\mu c}"}, "preprocessed_expressions": {"expr1": "B*Abs(e)/(2*c*m) - B*Abs(e)/(2*c*m*u) + a/4", "expr2": "hbar*(2*B*e*u - 2*B*e + a*c*hbar*m*u)/(4*c*m*u)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{a}{4} + \\frac{|e|B}{2c}(\\frac{1}{m_e} - \\frac{1}{m_\\mu})", "expr2": "\\text{Detection of } e^+e^- \\rightarrow 2\\gamma \\text{ indicates the presence of } (0, 0) \\text{ state.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5002", "solution": "Let's solve this step by step.\n\n1) First, let's identify what we know:\n- Original system is an infinite square well of width a\n- The perturbation is a linear potential from 0 to V₀ over the width a\n- We need to use first-order perturbation theory\n\n2) The unperturbed wavefunctions for infinite square well are:\nψₙ(x) = √(2/a) sin(nπx/a)\n\n3) The unperturbed energies are:\nEₙ⁽⁰⁾ = (n²π²ℏ²)/(2ma²)\n\n4) The perturbation potential is:\nV(x) = (V₀x)/a\n\n5) First-order correction to energy is:\nΔEₙ⁽¹⁾ = ∫₀ᵃ ψₙ*(x) V(x) ψₙ(x) dx\n\n6) Substituting:\nΔEₙ⁽¹⁾ = ∫₀ᵃ (2/a)sin²(nπx/a)(V₀x/a)dx\n\n7) Solving this integral:\nΔEₙ⁽¹⁾ = V₀/2\n\n8) Therefore, for the first three states (n = 1,2,3):\n\nE₁ = (π²ℏ²)/(2ma²) + V₀/2\nE₂ = (4π²ℏ²)/(2ma²) + V₀/2\nE₃ = (9π²ℏ²)/(2ma²) + V₀/2\n\nThe final answer for all three states is:\n\n\\[\\boxed{E_n = \\frac{n^2\\pi^2\\hbar^2}{2ma^2} + \\frac{V_0}{2}, \\text{ where } n = 1,2,3}\\]\n\nThis shows that the perturbation adds the same constant energy V₀/2 to each energy level, effectively shifting all levels up by the same amount.", "final_answers": ["E_n = \\frac{n^2\\pi^2\\hbar^2}{2ma^2} + \\frac{V_0}{2}, \\text{ where } n = 1,2,3"], "equivalency_results": [{"input_expressions": {"expr1": "E_n = \\frac{n^2\\pi^2\\hbar^2}{2ma^2} + \\frac{V_0}{2}, \\text{ where } n = 1,2,3", "expr2": "E_1 = \\frac{\\pi^2 \\hbar^2}{2\\mu a^2} + \\frac{V_0}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_n = \\frac{n^2\\pi^2\\hbar^2}{2ma^2} + \\frac{V_0}{2}, \\text{ where } n = 1,2,3", "expr2": "E_2 = \\frac{2\\pi^2 \\hbar^2}{\\mu a^2} + \\frac{V_0}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_n = \\frac{n^2\\pi^2\\hbar^2}{2ma^2} + \\frac{V_0}{2}, \\text{ where } n = 1,2,3", "expr2": "E_3 = \\frac{9\\pi^2 \\hbar^2}{2\\mu a^2} + \\frac{V_0}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5005", "solution": "Let's solve this step by step using first-order perturbation theory.\n\n1) First, recall that for first-order perturbation theory, we need:\n   - The unperturbed ground state wavefunction\n   - The perturbation potential\n   - To calculate ⟨ψ₀|V'|ψ₀⟩, where V' is the perturbation\n\n2) The unperturbed ground state wavefunction for a particle in a box is:\n   ψ₀(x) = √(2/l) sin(πx/l)\n\n3) The perturbation potential V' is:\n   V' = -b for 0 < x < l/2\n   V' = 0 for l/2 < x < l\n\n4) The first-order correction to the energy is:\n   E₁ = ⟨ψ₀|V'|ψ₀⟩\n\n5) We need to calculate:\n   E₁ = ∫₀^(l/2) (-b)(√(2/l) sin(πx/l))² dx + ∫_(l/2)^l (0)(√(2/l) sin(πx/l))² dx\n\n6) Simplify the first integral (the second integral is zero):\n   E₁ = -b(2/l) ∫₀^(l/2) sin²(πx/l) dx\n\n7) Using the integral formula for sin²:\n   sin²(x) = (1 - cos(2x))/2\n\n8) Therefore:\n   E₁ = -b(2/l) ∫₀^(l/2) [(1 - cos(2πx/l))/2] dx\n   = -b(1/l) [x - (l/2π)sin(2πx/l)]₀^(l/2)\n   = -b(1/l) [(l/2) - (l/2π)sin(π)]\n   = -b(1/2)\n\n9) The first-order correction to the energy is -b/2\n\nTherefore, the first-order energy of the ground state is:\n\n\\[\\boxed{E_1 = -\\frac{b}{2}}\\]", "final_answers": ["E_1 = -\\frac{b}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_1 = -\\frac{b}{2}", "expr2": "E = \\frac{\\hbar^2 \\pi^2}{2m l^2} - \\frac{b}{2}"}, "preprocessed_expressions": {"expr1": "-b/2", "expr2": "-b/2 + hbar**2*pi**2/(2*l**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8001", "solution": "Let me solve this step by step.\n\n1) For a matrix A, e^A can be expressed as a power series:\n   e^A = I + A + A²/2! + A³/3! + A⁴/4! + ...\n\n2) Let's calculate the powers of our matrix A = [0 a; -a 0]:\n\n   A = [0 a; -a 0]\n   \n   A² = [-a² 0; 0 -a²]\n   \n   A³ = [0 -a³; a³ 0]\n   \n   A⁴ = [a⁴ 0; 0 a⁴]\n\n3) We can see a pattern:\n   - Even powers give diagonal matrices with same entries\n   - Odd powers give anti-diagonal matrices with opposite entries\n\n4) Grouping terms:\n   e^A = I + A + A²/2! + A³/3! + A⁴/4! + ...\n   = [1 0; 0 1] + [0 a; -a 0] + [-a²/2! 0; 0 -a²/2!] + [0 -a³/3!; a³/3! 0] + [a⁴/4! 0; 0 a⁴/4!] + ...\n\n5) Grouping diagonal and anti-diagonal terms:\n   Diagonal terms: 1 - a²/2! + a⁴/4! - ...\n   Anti-diagonal terms: a - a³/3! + a⁵/5! - ...\n\n6) These series are recognizable:\n   Diagonal terms = cos(a)\n   Anti-diagonal terms = sin(a)\n\nTherefore:\n\n\\[ \\boxed{e^{\\begin{pmatrix} 0 & a \\\\ -a & 0 \\end{pmatrix}} = \\begin{pmatrix} \\cos(a) & \\sin(a) \\\\ -\\sin(a) & \\cos(a) \\end{pmatrix}} \\]", "final_answers": ["e^{\\begin{pmatrix} 0 & a \\\\ -a & 0 \\end{pmatrix}} = \\begin{pmatrix} \\cos(a) & \\sin(a) \\\\ -\\sin(a) & \\cos(a) \\end{pmatrix}"], "equivalency_results": [{"input_expressions": {"expr1": "e^{\\begin{pmatrix} 0 & a \\\\ -a & 0 \\end{pmatrix}} = \\begin{pmatrix} \\cos(a) & \\sin(a) \\\\ -\\sin(a) & \\cos(a) \\end{pmatrix}", "expr2": "\\begin{pmatrix} \\cos a & \\sin a \\\\ -\\sin a & \\cos a \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\begin{pmatrix} \\cos(a) & \\sin(a) \\\\ -\\sin(a) & \\cos(a) \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 1.0}
{"id": "quantum/8006", "solution": "Let me solve these step by step:\n\n(a) For 5 equally-spaced lines in Stern-Gerlach:\n- Number of possible m values = 2j + 1 = 5\n- Therefore: 2j + 1 = 5\n- Solving for j: j = 2\nTotal angular momentum quantum number j = 2\n\n\\[\\boxed{j = 2}\\]\n\n(b) For state ³P₀:\n- L = 1 (P state)\n- S = 1 (triplet state)\n- J = 0 (subscript)\n- For J = 0, all magnetic moment components cancel\n- Therefore, magnetic moment = 0\n\n\\[\\boxed{\\mu = 0}\\]\n\n(c) Noble gases are chemically inert because:\n- They have completely filled outer electron shells\n- Electron configuration is stable and symmetric\n- High ionization energy\n- No tendency to gain or lose electrons\n\n\\[\\boxed{\\text{Filled outer shells}}\\]\n\n(d) Black body radiation energy density:\n- Using Stefan-Boltzmann law: u = aT⁴\n- Room temperature ≈ 300K\n- a = 7.56 × 10⁻¹⁵ erg cm⁻³ K⁻⁴\n- u = 7.56 × 10⁻¹⁵ × (300)⁴ ≈ 6.1 × 10⁻⁶ erg cm⁻³\n\n\\[\\boxed{6.1 × 10^{-6} \\text{ erg cm}^{-3}}\\]\n\n(e) For hydrogen transitions ratio:\n- Intensity ratio proportional to statistical weights\n- For j = 3/2 to 1/2: weight = 4\n- For j = 1/2 to 1/2: weight = 2\n- Ratio = 2:1\n\n\\[\\boxed{I_{3/2:1/2}/I_{1/2:1/2} = 2:1}\\]\n\n(f) Singlet and triplet systems in helium:\n- Due to electron spin coupling\n- Pauli exclusion principle\n- Different total spin states (S=0 for singlet, S=1 for triplet)\n- Exchange interaction splits energy levels\n\n\\[\\boxed{\\text{Electron spin coupling and exchange interaction}}\\]", "final_answers": ["j = 2", "\\mu = 0", "\\text{Filled outer shells}", "6.1 × 10^{-6} \\text{ erg cm}^{-3}", "I_{3/2:1/2}/I_{1/2:1/2} = 2:1", "\\text{Electron spin coupling and exchange interaction}"], "equivalency_results": [{"input_expressions": {"expr1": "j = 2", "expr2": "J = 2"}, "preprocessed_expressions": {"expr1": "2", "expr2": "2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\mu = 0", "expr2": "J = 2"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\mu = 0", "expr2": "\\mu = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{Filled outer shells}", "expr2": "J = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Filled outer shells}", "expr2": "\\mu = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Filled outer shells}", "expr2": "6 \\times 10^{-5} \\, \\text{erg/cm}^3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Filled outer shells}", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "6.1 × 10^{-6} \\text{ erg cm}^{-3}", "expr2": "J = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "6.1 × 10^{-6} \\text{ erg cm}^{-3}", "expr2": "\\mu = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "6.1 × 10^{-6} \\text{ erg cm}^{-3}", "expr2": "6 \\times 10^{-5} \\, \\text{erg/cm}^3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "6.1 × 10^{-6} \\text{ erg cm}^{-3}", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I_{3/2:1/2}/I_{1/2:1/2} = 2:1", "expr2": "J = 2"}, "preprocessed_expressions": {"expr1": "2", "expr2": "2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{Electron spin coupling and exchange interaction}", "expr2": "J = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Electron spin coupling and exchange interaction}", "expr2": "\\mu = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Electron spin coupling and exchange interaction}", "expr2": "6 \\times 10^{-5} \\, \\text{erg/cm}^3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Electron spin coupling and exchange interaction}", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/8008", "solution": "Let's solve this step by step.\n\n(a) First, let's establish the radial equation and WKB condition:\n\n1) For zero angular momentum (s-states), the radial Schrödinger equation is:\n   ```\n   -ℏ²/2m [1/r² d/dr(r² dR/dr)] + V(r)R = ER\n   ```\n\n2) Let's define u(r) = rR(r). This transforms the equation to:\n   ```\n   -ℏ²/2m d²u/dr² + V(r)u = Eu\n   ```\n\n3) Boundary conditions:\n   * u(0) = 0 (since R must be finite at origin)\n   * u(∞) = 0 (for bound states)\n\n4) The WKB quantization condition for a one-dimensional problem with turning points is:\n   ```\n   ∫(a→b) √(2m[E-V(r)]/ℏ²) dr = (n + ½)π\n   ```\n\n5) For radial motion, we need to add π/2 to account for the boundary condition at r=0:\n   ```\n   ∫(0→r₀) √(2m[E-V(r)]/ℏ²) dr = (n + 1)π\n   ```\nwhere r₀ is the classical turning point.\n\n(b) For V(r) = -V₀exp(-r/a):\n\n1) For the ground state (n=0), and for a state that's just barely bound (E≈0):\n   ```\n   ∫(0→∞) √(2mV₀exp(-r/a)/ℏ²) dr = π\n   ```\n\n2) Let's solve this integral:\n   * Let x = r/a\n   * The integral becomes:\n   ```\n   a√(2mV₀/ℏ²) ∫(0→∞) √(exp(-x)) dx = π\n   ```\n\n3) The integral ∫(0→∞) √(exp(-x)) dx = √π\n\n4) Therefore:\n   ```\n   a√(2mV₀/ℏ²) √π = π\n   ```\n\n5) Solving for V₀:\n   ```\n   2mV₀a²/ℏ² = 1\n   ```\n\nThe WKB approximation gives 2mV₀a²/ℏ² = 1, compared to the exact value of 1.44.\n\nThe final answer for the minimum value of V₀ according to WKB is:\n\n\\[\\boxed{\\frac{2mV_0a^2}{\\hbar^2} = 1}\\]\n\nThe WKB approximation underestimates the required potential depth by about 30% compared to the exact result.", "final_answers": ["\\frac{2mV_0a^2}{\\hbar^2} = 1"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{2mV_0a^2}{\\hbar^2} = 1", "expr2": "-\\frac{\\hbar^2}{2m} \\frac{d^2 \\chi}{dr^2} + V(r) \\chi = E \\chi \\quad (0 < r < \\infty)"}, "preprocessed_expressions": {"expr1": "1", "expr2": "E*chi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{2mV_0a^2}{\\hbar^2} = 1", "expr2": "\\oint \\sqrt{2m(E - V)} \\, dr = \\left( n + \\frac{3}{4} \\right) h, \\quad n = 0, 1, 2, \\ldots"}, "preprocessed_expressions": {"expr1": "1", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{2mV_0a^2}{\\hbar^2} = 1", "expr2": "\\frac{2mV_0 a^2}{\\hbar^2} \\approx 1.39"}, "preprocessed_expressions": {"expr1": "1", "expr2": "2.78*V*a**2*approx*m/hbar**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7014", "solution": "Let's solve this step by step.\n\n(a) First, let's find the energies:\n\n1) The Hamiltonian for this system is:\n   H = (p₁²/2M + p₂²/2M) + (½kx₁² + ½kx₂²) + K(x₁-x₂)²/2\n\n2) To solve this, we need to transform to center of mass (R) and relative (r) coordinates:\n   R = (x₁ + x₂)/2\n   r = x₁ - x₂\n\n3) The Hamiltonian separates into:\n   H = (P²/2M_total) + (½K_R R²) + (p²/2μ) + (½K_r r²)\n   where:\n   - M_total = 2M\n   - μ = M/2\n   - K_R = 2k\n   - K_r = 2k + 2K\n\n4) Each part is a harmonic oscillator with frequencies:\n   ω_R = √(2k/2M)\n   ω_r = √((2k + 2K)/M)\n\n5) The energy levels are:\n   E = (n_R + ½)ℏω_R + (n_r + ½)ℏω_r\n   where n_R, n_r = 0, 1, 2, ...\n\n6) For small K, ω_r ≈ ω_R = ω = √(k/M)\n\nThe three lowest states are:\n- Ground state (n_R=0, n_r=0): E₀ = ℏω\n- First excited states (n_R=1, n_r=0) or (n_R=0, n_r=1): E₁ = 2ℏω\n- Second excited state (n_R=2, n_r=0) or (n_R=1, n_r=1) or (n_R=0, n_r=2): E₂ = 3ℏω\n\n(b) For identical spinless particles:\n- The wavefunction must be symmetric\n- (n_R=0, n_r=0) is allowed (symmetric)\n- (n_R=1, n_r=0) is allowed (symmetric)\n- (n_R=0, n_r=1) is forbidden (antisymmetric)\n- Of the second excited states, only symmetric combinations are allowed\n\n(c) For spin-½ particles:\n- Total wavefunction must be antisymmetric\n- For symmetric spatial states (n_r even):\n  * Spin state must be antisymmetric (singlet, S=0)\n- For antisymmetric spatial states (n_r odd):\n  * Spin state must be symmetric (triplet, S=1)\n\nThe final answer for the energies is:\n\\[\\boxed{E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega}\\]", "final_answers": ["E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega"], "equivalency_results": [{"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "E_{00} = \\frac{1}{2} \\hbar (\\omega_1 + \\omega_2)"}, "preprocessed_expressions": {"expr1": "3*hbar*omega", "expr2": "hbar(2*omega)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "E_{10} = \\frac{1}{2} \\hbar (\\omega_1 + \\omega_2) + \\hbar \\omega_1"}, "preprocessed_expressions": {"expr1": "3*hbar*omega", "expr2": "hbar*omega + hbar(2*omega)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "E_{01} = \\frac{1}{2} \\hbar (\\omega_1 + \\omega_2) + \\hbar \\omega_2"}, "preprocessed_expressions": {"expr1": "3*hbar*omega", "expr2": "hbar*omega + hbar(2*omega)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "|00 \\rangle, |10 \\rangle"}, "preprocessed_expressions": {"expr1": "3*hbar*omega", "expr2": "|0>"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "S = 0 \\text{ for } |00 \\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "S = 0 \\text{ for } |10 \\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_0 = \\hbar\\omega, \\quad E_1 = 2\\hbar\\omega, \\quad E_2 = 3\\hbar\\omega", "expr2": "S = 1 \\text{ for } |01 \\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7013", "solution": "Let me solve this step by step.\n\n(a) For identical fermions:\n1. The wave function must be antisymmetric under particle exchange\n2. This means: ψ(1,2) = -ψ(2,1)\n3. This is the Pauli antisymmetry principle\n\n(b) The Pauli exclusion principle follows from antisymmetry:\n1. If two electrons had identical quantum numbers, they would be in the same state\n2. Let's call this state φ, then ψ(1,2) = φ(1)φ(2)\n3. But this is symmetric: φ(1)φ(2) = φ(2)φ(1)\n4. This contradicts the required antisymmetry\n5. Therefore, two electrons cannot have identical quantum numbers\n\n(c) For Mg (3s,3p) configuration:\n1. Two valence electrons: one in 3s, one in 3p\n2. Possible spin states:\n   - Singlet (S=0): antisymmetric spin function\n   - Triplet (S=1): symmetric spin function\n\n3. Orbital angular momentum:\n   - L=1 is possible (from s and p combination)\n\n4. Wave functions:\n   For S=0 (singlet):\n   - Spatial part must be symmetric\n   - ψspatial = [ψs(1)φp(2) + φp(1)ψs(2)]/√2\n\n   For S=1 (triplet):\n   - Spatial part must be antisymmetric\n   - ψspatial = [ψs(1)φp(2) - φp(1)ψs(2)]/√2\n\n5. Energy consideration:\n   - The triplet state (S=1) will have lower energy due to Hund's rule\n   - Exchange interaction favors parallel spins\n\n\\[\\boxed{\\text{Possible states: }^1P \\text{ and } ^3P \\text{, with } ^3P \\text{ being lower in energy}}\\]", "final_answers": ["\\text{Possible states: }^1P \\text{ and } ^3P \\text{, with } ^3P \\text{ being lower in energy}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Possible states: }^1P \\text{ and } ^3P \\text{, with } ^3P \\text{ being lower in energy}", "expr2": "\\hat{P}_{12} \\psi(1, 2) = \\psi(2, 1) = -\\psi(1, 2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Possible states: }^1P \\text{ and } ^3P \\text{, with } ^3P \\text{ being lower in energy}", "expr2": "\\psi(1, 2) = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Possible states: }^1P \\text{ and } ^3P \\text{, with } ^3P \\text{ being lower in energy}", "expr2": "L = 1, \\; S = 0, 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/7025", "solution": "Let me solve this step by step.\n\n1) First, let's understand what singlet and triplet states mean:\n   * Singlet state: Total spin S=0, antisymmetric spin function\n   * Triplet state: Total spin S=1, symmetric spin function\n\n2) Due to the Pauli principle, the total wavefunction must be antisymmetric. Therefore:\n   * Singlet state: Spatial part must be symmetric\n   * Triplet state: Spatial part must be antisymmetric\n\n3) The spatial wavefunctions are:\n   * Symmetric: $\\psi_S = \\frac{1}{\\sqrt{2}}[\\psi_{1s}(1)\\psi_{2s}(2) + \\psi_{1s}(2)\\psi_{2s}(1)]$\n   * Antisymmetric: $\\psi_A = \\frac{1}{\\sqrt{2}}[\\psi_{1s}(1)\\psi_{2s}(2) - \\psi_{1s}(2)\\psi_{2s}(1)]$\n\n4) The energy difference comes from the electron-electron repulsion term:\n   * The Coulomb integral (J): $J = \\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{1s}(1)\\psi_{2s}(2)d\\tau_1d\\tau_2$\n   * The exchange integral (K): $K = \\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{2s}(1)\\psi_{1s}(2)d\\tau_1d\\tau_2$\n\n5) The energies are:\n   * Singlet state: $E_S = E_0 + J + K$\n   * Triplet state: $E_T = E_0 + J - K$\n\n6) The exchange integral K is always positive. Therefore:\n   * The triplet state has lower energy than the singlet state\n   * The energy separation is $E_S - E_T = 2K$\n\nThe triplet state has lower energy due to the exchange interaction, which is a consequence of the Pauli principle and electron-electron repulsion.\n\nThe final answer for the energy separation is:\n\n\\[\\boxed{E_S - E_T = 2\\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{2s}(1)\\psi_{1s}(2)d\\tau_1d\\tau_2}\\]", "final_answers": ["E_S - E_T = 2\\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{2s}(1)\\psi_{1s}(2)d\\tau_1d\\tau_2"], "equivalency_results": [{"input_expressions": {"expr1": "E_S - E_T = 2\\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{2s}(1)\\psi_{1s}(2)d\\tau_1d\\tau_2", "expr2": "\\text{The triplet state has the lower energy.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_S - E_T = 2\\int\\int \\psi_{1s}(1)\\psi_{2s}(2)\\frac{e^2}{r_{12}}\\psi_{2s}(1)\\psi_{1s}(2)d\\tau_1d\\tau_2", "expr2": "\\Delta E = 2 \\int \\frac{e^2}{r_{12}}[\\psi_{1s}(\\mathbf r_1)\\psi_{2s}(\\mathbf r_1)\\psi_{1s}(\\mathbf r_2)\\psi_{2s}(\\mathbf r_2)]d\\mathbf{r}_1d\\mathbf{r}_2"}, "preprocessed_expressions": {"expr1": "2*e**2*tau*taud*x*psi(1)**2*psi(2)**2/r", "expr2": "2*dmathbf*e**2*r*Integral(psi(mathbf*r)**4, mathbf)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/4002", "solution": "Let me solve this step by step.\n\n(a) For the time-dependent Schrödinger equation:\n\n1) The Hamiltonian H = T + V where:\n   - T = -ℏ²/2m ∇²  (kinetic energy)\n   - V = qE·r (potential energy in electric field)\n\n2) Therefore, the time-dependent Schrödinger equation is:\n\n\\[ iℏ\\frac{\\partial \\psi}{\\partial t} = [-\\frac{ℏ^2}{2m}\\nabla^2 + q\\mathbf{E}\\cdot\\mathbf{r}]\\psi \\]\n\n(b) For Newton's second law:\n\n1) The expectation value of position is:\n   \\[ \\langle \\mathbf{r} \\rangle = \\int \\psi^* \\mathbf{r} \\psi d^3r \\]\n\n2) Take the second time derivative:\n   \\[ \\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{d}{dt}\\frac{d}{dt}\\langle \\mathbf{r} \\rangle \\]\n\n3) Using Ehrenfest's theorem:\n   \\[ \\frac{d}{dt}\\langle \\mathbf{r} \\rangle = \\frac{i}{ℏ}\\langle [H,\\mathbf{r}] \\rangle = \\frac{\\langle \\mathbf{p} \\rangle}{m} \\]\n\n4) Taking another time derivative:\n   \\[ \\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{1}{m}\\frac{d}{dt}\\langle \\mathbf{p} \\rangle = \\frac{1}{m}\\langle \\mathbf{F} \\rangle = \\frac{q\\mathbf{E}}{m} \\]\n\nThis is exactly Newton's second law: F = ma\n\n(c) Practical applications:\n\n1) This result shows that quantum expectation values follow classical trajectories in uniform fields.\n\n2) This validates the classical design principles used in:\n   - Mass spectrometers\n   - Particle accelerators\n   - Electron microscopes\n   - Ion traps\n\n3) The result means we can use classical mechanics to design these instruments, even though the particles are quantum mechanical.\n\n4) This is particularly important because:\n   - It simplifies design calculations\n   - Allows use of classical electromagnetic theory\n   - Validates particle trajectory calculations\n\nThe final answer summarizing the key result is:\n\n\\[ \\boxed{\\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{q\\mathbf{E}}{m}} \\]\n\nThis equation shows that quantum mechanical expectation values follow classical trajectories in uniform fields, validating classical design principles for particle manipulation devices.", "final_answers": ["\\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{q\\mathbf{E}}{m}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{q\\mathbf{E}}{m}", "expr2": "i \\hbar \\frac{\\partial \\psi}{\\partial t} = -\\frac{\\hbar^2}{2m} \\nabla^2 \\psi - q \\mathbf{E} \\cdot \\mathbf{r} \\, \\psi"}, "preprocessed_expressions": {"expr1": "E*mathbf*q/m", "expr2": "-E*mathbf**2*psi*q*r - hbar**2*nabla**2*psi/(2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d^2}{dt^2}\\langle \\mathbf{r} \\rangle = \\frac{q\\mathbf{E}}{m}", "expr2": "m \\frac{d^2}{dt^2} \\langle \\mathbf{r} \\rangle = q \\mathbf{E}"}, "preprocessed_expressions": {"expr1": "E*mathbf*q/m", "expr2": "E*mathbf*q"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/7022", "solution": "Let me solve this step by step.\n\n1) First, let's understand what determines the intensity of spectral lines:\n   * The intensity is proportional to the population of molecules in the initial state\n   * For rotational transitions, this depends on both the rotational state and nuclear spin state\n\n2) For N₂ molecule:\n   * Each N nucleus has spin I = 1\n   * Total nuclear spin can couple in different ways\n   * We need to consider nuclear spin statistics\n\n3) For identical nuclei (homonuclear molecule):\n   * Total wavefunction must be antisymmetric for fermions (N-14 is a boson)\n   * Total wavefunction = Nuclear spin wavefunction × Rotational wavefunction\n\n4) For I = 1 nuclei:\n   * Total nuclear spin can be: I_total = 2, 1, 0\n   * Number of states for each I_total:\n     - I_total = 2: 5 states\n     - I_total = 1: 3 states\n     - I_total = 0: 1 state\n\n5) Due to symmetry requirements:\n   * Even J states pair with symmetric nuclear spin states\n   * Odd J states pair with antisymmetric nuclear spin states\n\n6) Counting states:\n   * Symmetric nuclear spin states: I_total = 0, 2 (6 states total)\n   * Antisymmetric nuclear spin states: I_total = 1 (3 states total)\n\n7) Therefore:\n   * Even J levels have statistical weight of 6\n   * Odd J levels have statistical weight of 3\n\n8) The ratio of intensities between adjacent lines:\n   * For transitions between even and odd J levels\n   * Ratio will be 6:3 = 2:1\n\n\\[\\boxed{\\text{Intensity ratio} = 2:1}\\]\n\nThis 2:1 alternation in intensity is a direct consequence of nuclear spin statistics and the symmetry requirements of the total molecular wavefunction.", "final_answers": ["\\text{Intensity ratio} = 2:1"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Intensity ratio} = 2:1", "expr2": "2:1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/8009", "solution": "Let me solve this step by step.\n\n(a) For the vibrational state probability:\n\n1) First, let's find the vibrational energy levels:\n   * $E_v = hν(v + \\frac{1}{2})$ where $v = 0,1,2,...$\n   * $ν = \\frac{1}{2π}\\sqrt{\\frac{k}{μ}}$\n   * $k = 470$ N/m\n   * For HCl, reduced mass $μ = \\frac{m_H m_{Cl}}{m_H + m_{Cl}}$\n   * $μ ≈ 1.6 × 10^{-27}$ kg\n\n2) Calculate frequency:\n   * $ν = \\frac{1}{2π}\\sqrt{\\frac{470}{1.6 × 10^{-27}}} ≈ 8.6 × 10^{13}$ Hz\n\n3) Energy difference between ground and first excited state:\n   * $ΔE = hν = (6.63 × 10^{-34})(8.6 × 10^{13}) = 5.7 × 10^{-21}$ J\n\n4) Using Boltzmann distribution:\n   * $\\frac{N_1}{N_0} = e^{-ΔE/kT}$\n   * $T = 300$ K\n   * $k_B = 1.38 × 10^{-23}$ J/K\n   * $\\frac{N_1}{N_0} = e^{-5.7 × 10^{-21}/(1.38 × 10^{-23} × 300)} = 0.0016$\n\n(c) For rotational states:\n\n1) Rotational energy levels:\n   * $E_r = \\frac{\\hbar^2}{2I}J(J+1)$ where $J = 0,1,2,...$\n   * $I = 2.3 × 10^{-47}$ kg·m²\n\n2) Energy difference between J=0 and J=1:\n   * $ΔE = \\frac{\\hbar^2}{2I}(2)$\n   * $ΔE = \\frac{(1.05 × 10^{-34})^2}{2(2.3 × 10^{-47})}(2) = 4.8 × 10^{-23}$ J\n\n3) Using Boltzmann distribution and accounting for degeneracy (2J+1):\n   * $\\frac{N_1}{N_0} = \\frac{3e^{-ΔE/kT}}{1}$\n   * $\\frac{N_0}{N_1} = \\frac{1}{3e^{-4.8 × 10^{-23}/(1.38 × 10^{-23} × 300)}} = 0.35$\n\nFinal answers:\n\\[ \\boxed{P(v=1) = 0.0016} \\]\n\\[ \\boxed{\\frac{N_0}{N_1} = 0.35} \\]", "final_answers": ["P(v=1) = 0.0016", "\\frac{N_0}{N_1} = 0.35"], "equivalency_results": [{"input_expressions": {"expr1": "P(v=1) = 0.0016", "expr2": "P_1 = 1.37 \\times 10^{-6}"}, "preprocessed_expressions": {"expr1": "0.00160000000000000", "expr2": "1.37000000000000e-6"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(v=1) = 0.0016", "expr2": "\\frac{N(J = 0)}{N(J = 1)} = 0.37"}, "preprocessed_expressions": {"expr1": "0.00160000000000000", "expr2": "0.370000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{N_0}{N_1} = 0.35", "expr2": "P_1 = 1.37 \\times 10^{-6}"}, "preprocessed_expressions": {"expr1": "0.350000000000000", "expr2": "1.37000000000000e-6"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{N_0}{N_1} = 0.35", "expr2": "\\frac{N(J = 0)}{N(J = 1)} = 0.37"}, "preprocessed_expressions": {"expr1": "0.350000000000000", "expr2": "0.370000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8007", "solution": "Let me solve this step by step.\n\n(a) WKB Approximation Validity:\n\n1) The WKB approximation assumes a wavefunction of the form:\n   ψ(x) = A(x)exp[iS(x)/ℏ]\n\n2) Substituting this into the Schrödinger equation:\n   -ℏ²/2m d²ψ/dx² + V(x)ψ = Eψ\n\n3) For the approximation to be valid, we require:\n   |dλ/dx| << 2π\n   where λ = 2πℏ/p(x) is the local de Broglie wavelength\n   and p(x) = √[2m(E-V(x))]\n\n4) This leads to the condition:\n   |d/dx[1/√(2m(E-V(x)))]| << 1\n\n5) At a classical turning point, E = V(x), so:\n   p(x) = 0 and λ → ∞\n\n6) Therefore, |dλ/dx| becomes very large near turning points, violating the WKB condition.\n\n(b) Electric Field Effect:\n\n1) For an atom in an electric field E, the perturbation is:\n   H' = -eEz\n\n2) The first-order energy correction is zero due to parity:\n   E¹ = ⟨ψ₀|H'|ψ₀⟩ = 0\n\n3) The second-order correction is:\n   E² = -Σₙ|⟨n|eEz|0⟩|²/(Eₙ-E₀)\n\n4) Since Eₙ > E₀ for all n ≠ 0:\n   - The denominator is always positive\n   - The numerator is always positive (squared term)\n   - The negative sign makes E² negative\n\n5) Therefore, the total energy shift is:\n   ΔE = E¹ + E² = E² < 0\n\nThe final answer for part (b) can be expressed as:\n\n\\[\\boxed{\\Delta E = -\\sum_{n\\neq 0}\\frac{|\\langle n|eEz|0\\rangle|^2}{E_n-E_0} < 0}\\]\n\nThis shows that the ground state energy always decreases in an external electric field due to the second-order Stark effect.", "final_answers": ["\\Delta E = -\\sum_{n\\neq 0}\\frac{|\\langle n|eEz|0\\rangle|^2}{E_n-E_0} < 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\sum_{n\\neq 0}\\frac{|\\langle n|eEz|0\\rangle|^2}{E_n-E_0} < 0", "expr2": "\\left| \\frac{\\hbar}{p^{2}} \\frac{dp}{dx} \\right| \\ll 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '_' '^'\n-\\sum\\frac{|\\langle n|eEz|0\\rangle|^2}{E-E} < 0\n~~~~~^"}, {"input_expressions": {"expr1": "\\Delta E = -\\sum_{n\\neq 0}\\frac{|\\langle n|eEz|0\\rangle|^2}{E_n-E_0} < 0", "expr2": "\\Delta E_0 < 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '_' '^'\n-\\sum\\frac{|\\langle n|eEz|0\\rangle|^2}{E-E} < 0\n~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/7023", "solution": "Let me solve this step by step.\n\n(a) For the potential energy sketch:\n1. The potential energy will have two deep wells at the positions of the protons (-1.06/2 Å and +1.06/2 Å)\n2. Due to Coulomb's law, V(r) ∝ -1/r for each proton\n3. The total potential is the sum of contributions from both protons\n4. The potential will be symmetric about the midpoint between protons\n5. It will have a local maximum at the midpoint and approach zero at large distances\n\n(b) For the electron wave functions:\n1. The two lowest states are:\n   - Symmetric (bonding) state: ψ₁ ≈ ψₐ + ψᵦ\n   - Antisymmetric (antibonding) state: ψ₂ ≈ ψₐ - ψᵦ\n   where ψₐ and ψᵦ are 1s hydrogenic wave functions centered on each proton\n\n2. The ground state is the symmetric state because:\n   - Constructive interference between wave functions in the middle region\n   - Lower energy due to increased electron density between protons\n   - Creates stronger bonding effect\n\n(c) As protons are moved far apart:\n1. The wave functions become degenerate 1s states centered on each proton\n2. The energy levels approach the energy of a single hydrogen atom (-13.6 eV)\n3. The energy difference between symmetric and antisymmetric states approaches zero\n4. The molecule dissociates into a proton and a hydrogen atom\n\nThe final answer summarizing the key points:\n\n\\[\\boxed{\\begin{array}{l} \n\\text{Ground state: Symmetric combination } ψ₁ ≈ ψₐ + ψᵦ \\\\\n\\text{First excited state: Antisymmetric } ψ₂ ≈ ψₐ - ψᵦ \\\\\n\\text{Limiting energy as R → ∞: -13.6 eV}\n\\end{array}}\\]", "final_answers": ["\\begin{array}{l} \n\\text{Ground state: Symmetric combination } ψ₁ ≈ ψₐ + ψᵦ \\\\\n\\text{First excited state: Antisymmetric } ψ₂ ≈ ψₐ - ψᵦ \\\\\n\\text{Limiting energy as R → ∞: -13.6 eV}\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{Ground state: Symmetric combination } ψ₁ ≈ ψₐ + ψᵦ \\\\\n\\text{First excited state: Antisymmetric } ψ₂ ≈ ψₐ - ψᵦ \\\\\n\\text{Limiting energy as R → ∞: -13.6 eV}\n\\end{array}", "expr2": "V = -\\frac{e^2}{|x|} - \\frac{e^2}{|R - x|}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{Ground state: Symmetric combination } ψ₁ ≈ ψₐ + ψᵦ \\\\\n\\text{First excited state: Antisymmetric } ψ₂ ≈ ψₐ - ψᵦ \\\\\n\\text{Limiting energy as R → ∞: -13.6 eV}\n\\end{array}", "expr2": "\\psi_\\pm = \\frac{1}{\\sqrt{2}} [\\phi(\\mathbf r_1) \\pm \\phi(\\mathbf r_2)]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{Ground state: Symmetric combination } ψ₁ ≈ ψₐ + ψᵦ \\\\\n\\text{First excited state: Antisymmetric } ψ₂ ≈ ψₐ - ψᵦ \\\\\n\\text{Limiting energy as R → ∞: -13.6 eV}\n\\end{array}", "expr2": "\\text{Energy of both states} \\to \\text{ground state energy of hydrogen atom}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/4004", "solution": "Let's solve this step by step.\n\n(a) Setting up the Schrödinger equation:\n\n1) The Hamiltonian for a charged particle in a magnetic field is:\n   $H = \\frac{1}{2m}(\\mathbf{p} + e\\mathbf{A})^2$\n\n2) For a uniform magnetic field in z-direction, $\\mathbf{B} = B\\hat{z}$\n   We can choose the vector potential $\\mathbf{A} = (-By,0,0)$ (Landau gauge)\n\n3) The Schrödinger equation is:\n   $\\frac{1}{2m}(\\mathbf{p} + e\\mathbf{A})^2\\psi = E\\psi$\n\n4) Expanding in rectangular coordinates:\n   $\\frac{1}{2m}[(-iℏ\\frac{\\partial}{\\partial x} - eBy)^2 + (-iℏ\\frac{\\partial}{\\partial y})^2 + (-iℏ\\frac{\\partial}{\\partial z})^2]\\psi = E\\psi$\n\n(b) Solving for energy levels:\n\n1) Due to translational invariance in x and z, we can write:\n   $\\psi(x,y,z) = e^{ik_xx}e^{ik_zz}f(y)$\n\n2) Substituting this into the Schrödinger equation:\n   $\\frac{1}{2m}[(ℏk_x - eBy)^2 - ℏ^2\\frac{d^2}{dy^2} + ℏ^2k_z^2]f(y) = Ef(y)$\n\n3) This is equivalent to a harmonic oscillator equation with:\n   - Cyclotron frequency $\\omega_c = \\frac{eB}{m}$\n   - Center of oscillation $y_0 = \\frac{ℏk_x}{eB}$\n\n4) The energy levels are:\n   $E_n = ℏ\\omega_c(n + \\frac{1}{2}) + \\frac{ℏ^2k_z^2}{2m}$\n   where n = 0, 1, 2, ...\n\n(c) Motion discussion:\n\n1) The energy levels are known as Landau levels\n2) Each level is highly degenerate due to the k_x dependence\n3) The electron performs circular motion in the x-y plane (cyclotron motion)\n4) Free motion along z-direction\n5) The radius of the circular orbit is quantized: $R_n = \\sqrt{\\frac{2n+1}{eB/ℏ}}$\n\nThe final answer for the energy levels is:\n\n\\[\\boxed{E_n = ℏ\\omega_c(n + \\frac{1}{2}) + \\frac{ℏ^2k_z^2}{2m}, \\quad n = 0,1,2,...}\\]\n\nwhere $\\omega_c = \\frac{eB}{m}$ is the cyclotron frequency.", "final_answers": ["E_n = ℏ\\omega_c(n + \\frac{1}{2}) + \\frac{ℏ^2k_z^2}{2m}, \\quad n = 0,1,2,..."], "equivalency_results": [{"input_expressions": {"expr1": "E_n = ℏ\\omega_c(n + \\frac{1}{2}) + \\frac{ℏ^2k_z^2}{2m}, \\quad n = 0,1,2,...", "expr2": "\\hat{H} \\psi = \\frac{1}{2m} \\left[ \\hat{P}_x^2 + \\left( \\hat{P}_y + \\frac{eBx}{c} \\right)^2 + \\hat{P}_z^2 \\right] \\psi = E \\psi"}, "preprocessed_expressions": {"expr1": "0", "expr2": "E*psi"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/7024", "solution": "Let me solve this step by step.\n\n1) The Schrödinger equation has the general form:\n   Ĥψ = Eψ\n   where Ĥ is the Hamiltonian operator\n\n2) For atomic helium, we need to consider:\n   - Two electrons (labeled 1 and 2)\n   - A nucleus with charge Z=2\n   - The kinetic energy of both electrons\n   - The potential energy between:\n     * electron 1 and nucleus\n     * electron 2 and nucleus\n     * electron 1 and electron 2\n\n3) The Hamiltonian will include:\n   - Kinetic energy terms: -ℏ²/2m∇₁² and -ℏ²/2m∇₂²\n   - Potential energy terms:\n     * -(2e²/4πε₀)(1/r₁) for electron 1-nucleus\n     * -(2e²/4πε₀)(1/r₂) for electron 2-nucleus\n     * +(e²/4πε₀)(1/r₁₂) for electron-electron repulsion\n\n4) Putting it all together, the Schrödinger equation is:\n\n\\[ \\boxed{ [-\\frac{\\hbar^2}{2m}(\\nabla_1^2 + \\nabla_2^2) - \\frac{2e^2}{4\\pi\\epsilon_0}(\\frac{1}{r_1} + \\frac{1}{r_2}) + \\frac{e^2}{4\\pi\\epsilon_0}\\frac{1}{r_{12}}]\\psi = E\\psi } \\]\n\nwhere:\n- r₁ and r₂ are the distances of electrons 1 and 2 from the nucleus\n- r₁₂ is the distance between the electrons\n- ∇₁² and ∇₂² are the Laplacian operators for electrons 1 and 2\n- ε₀ is the permittivity of free space\n- e is the elementary charge\n- ℏ is the reduced Planck constant\n- m is the electron mass", "final_answers": ["[-\\frac{\\hbar^2}{2m}(\\nabla_1^2 + \\nabla_2^2) - \\frac{2e^2}{4\\pi\\epsilon_0}(\\frac{1}{r_1} + \\frac{1}{r_2}) + \\frac{e^2}{4\\pi\\epsilon_0}\\frac{1}{r_{12}}]\\psi = E\\psi"], "equivalency_results": [{"input_expressions": {"expr1": "[-\\frac{\\hbar^2}{2m}(\\nabla_1^2 + \\nabla_2^2) - \\frac{2e^2}{4\\pi\\epsilon_0}(\\frac{1}{r_1} + \\frac{1}{r_2}) + \\frac{e^2}{4\\pi\\epsilon_0}\\frac{1}{r_{12}}]\\psi = E\\psi", "expr2": "\\left( \\frac{p_1^2}{2m_e} + \\frac{p_2^2}{2m_e} - \\frac{2e^2}{R_1} - \\frac{2e^2}{R_2} + \\frac{e^2}{|\\mathbf{R_1} - \\mathbf{R_2}|} \\right) \\psi(\\mathbf{R_1}, \\mathbf{R_2}) = E \\psi(\\mathbf{R_1}, \\mathbf{R_2})"}, "preprocessed_expressions": {"expr1": "E*psi", "expr2": "E*psi(R*mathbf, R*mathbf)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/7012", "solution": "Let me solve this step by step.\n\n(a) First, let's express E/A in terms of total spin S:\n\n1) We need to expand $\\mathbf{s}_1 \\cdot \\mathbf{s}_2 - 3s_{1z}s_{2z}$\n\n2) The total spin operator is $\\mathbf{S} = \\mathbf{s}_1 + \\mathbf{s}_2$\n   Therefore, $\\mathbf{S}^2 = (\\mathbf{s}_1 + \\mathbf{s}_2)^2$\n   \n3) Expanding $\\mathbf{S}^2$:\n   $\\mathbf{S}^2 = \\mathbf{s}_1^2 + \\mathbf{s}_2^2 + 2\\mathbf{s}_1 \\cdot \\mathbf{s}_2$\n\n4) For spin-1/2 particles, $\\mathbf{s}_1^2 = \\mathbf{s}_2^2 = \\frac{3}{4}$\n\n5) Therefore:\n   $\\mathbf{s}_1 \\cdot \\mathbf{s}_2 = \\frac{1}{2}(\\mathbf{S}^2 - \\frac{3}{2})$\n\n6) The original expression becomes:\n   $\\mathbf{E}/A = \\frac{1}{2}(\\mathbf{S}^2 - \\frac{3}{2}) - 3s_{1z}s_{2z}$\n\n(b) For eigenvalues:\n\n1) For two spin-1/2 particles:\n   - Total spin S can be 0 (singlet) or 1 (triplet)\n   - For S = 0: $\\mathbf{S}^2 = 0$\n   - For S = 1: $\\mathbf{S}^2 = 2$\n\n2) For $s_{1z}s_{2z}$:\n   - For singlet (S = 0): $s_{1z}s_{2z} = -\\frac{1}{4}$\n   - For triplet (S = 1): $s_{1z}s_{2z} = \\frac{1}{4}$ for $m_s = ±1$\n                                         $s_{1z}s_{2z} = -\\frac{1}{4}$ for $m_s = 0$\n\n3) Therefore, eigenvalues are:\n   - For singlet (S = 0): $\\mathbf{E}/A = -\\frac{3}{4} + \\frac{3}{4} = 0$ (degeneracy = 1)\n   - For triplet (S = 1): \n     * When $m_s = ±1$: $\\mathbf{E}/A = \\frac{1}{4} - \\frac{3}{4} = -\\frac{1}{2}$ (degeneracy = 2)\n     * When $m_s = 0$: $\\mathbf{E}/A = \\frac{1}{4} + \\frac{3}{4} = 1$ (degeneracy = 1)\n\n\\[\\boxed{\\text{Eigenvalues: } 0 \\text{ (×1), } -\\frac{1}{2} \\text{ (×2), } 1 \\text{ (×1)}}\\]", "final_answers": ["\\text{Eigenvalues: } 0 \\text{ (×1), } -\\frac{1}{2} \\text{ (×2), } 1 \\text{ (×1)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Eigenvalues: } 0 \\text{ (×1), } -\\frac{1}{2} \\text{ (×2), } 1 \\text{ (×1)}", "expr2": "\\frac{\\mathbf{E}}{A} = \\frac{1}{2} (\\mathbf{S}^2 - 3S_z^2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenvalues: } 0 \\text{ (×1), } -\\frac{1}{2} \\text{ (×2), } 1 \\text{ (×1)}", "expr2": "\\begin{array}{|c|c|c|}\n\\hline\n\\vert S, M \\rangle & \\frac{\\mathbf{E}}{A} & D(\\mathbf{E}/A) \\\\\n\\hline\n\\vert 0, 0 \\rangle & 0 & 1 \\\\\n\\vert 1, \\pm 1 \\rangle & -\\frac{1}{2} & 2 \\\\\n\\vert 1, 0 \\rangle & 1 & 1 \\\\\n\\hline\n\\end{array}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/7015", "solution": "Let's solve this step by step for each case.\n\n(a) Two distinguishable spin-1/2 particles:\n\n1) For distinguishable particles, we can assign them independently.\n2) Lowest energy states will use ψₐ and ψᵦ\n3) For spin-1/2 particles, each can be in |↑⟩ or |↓⟩\n\nLowest energy (2Eₐ):\n- Wave function: ψₐ(x₁)ψₐ(x₂)|↑↑⟩, ψₐ(x₁)ψₐ(x₂)|↑↓⟩, ψₐ(x₁)ψₐ(x₂)|↓↑⟩, ψₐ(x₁)ψₐ(x₂)|↓↓⟩\n- Degeneracy: 4\n\nSecond lowest (Eₐ + Eᵦ):\n- Wave function: ψₐ(x₁)ψᵦ(x₂)|↑↑⟩, ψₐ(x₁)ψᵦ(x₂)|↑↓⟩, ψₐ(x₁)ψᵦ(x₂)|↓↑⟩, ψₐ(x₁)ψᵦ(x₂)|↓↓⟩\n- Degeneracy: 4\n\n(b) Two identical spin-1/2 particles (fermions):\n\n1) Must use antisymmetric total wave function\n2) Can be symmetric in space and antisymmetric in spin, or vice versa\n\nLowest energy (2Eₐ):\n- Wave function: ψₐ(x₁)ψₐ(x₂)|S=0,m_s=0⟩\n- Degeneracy: 1\n\nSecond lowest (Eₐ + Eᵦ):\n- Wave function: 1/√2[ψₐ(x₁)ψᵦ(x₂) ± ψᵦ(x₁)ψₐ(x₂)]|S=1,m_s=1,0,-1⟩\n- Degeneracy: 3\n\n(c) Two identical spin-0 particles (bosons):\n\n1) Must use symmetric total wave function\n2) Only spatial part matters as there's no spin\n\nLowest energy (2Eₐ):\n- Wave function: ψₐ(x₁)ψₐ(x₂)\n- Degeneracy: 1\n\nSecond lowest (Eₐ + Eᵦ):\n- Wave function: 1/√2[ψₐ(x₁)ψᵦ(x₂) + ψᵦ(x₁)ψₐ(x₂)]\n- Degeneracy: 1\n\nThe final answer can be summarized as:\n\n\\[\\boxed{\n\\begin{array}{l}\n\\text{(a) E₁=2E_a, d₁=4; E₂=E_a+E_b, d₂=4} \\\\\n\\text{(b) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=3} \\\\\n\\text{(c) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=1}\n\\end{array}\n}\\]", "final_answers": ["\\begin{array}{l}\n\\text{(a) E₁=2E_a, d₁=4; E₂=E_a+E_b, d₂=4} \\\\\n\\text{(b) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=3} \\\\\n\\text{(c) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=1}\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{(a) E₁=2E_a, d₁=4; E₂=E_a+E_b, d₂=4} \\\\\n\\text{(b) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=3} \\\\\n\\text{(c) E₁=2E_a, d₁=1; E₂=E_a+E_b, d₂=1}\n\\end{array}", "expr2": "\\begin{aligned}\n(a) & \\quad \\text{Two distinguishable spin-}\\frac{1}{2} \\text{ particles:} \\\\\n& \\quad \\begin{aligned}\n\\text{(i) Total energy} & = E_a + E_a, \\ \\text{degeneracy} = 4, \\\\\n\\text{Wave functions:} \\ & \n\\begin{cases}\n\\psi_a(x_1) \\psi_a(x_2) \\lvert 0, 0 \\rangle, \\\\\n\\psi_a(x_1) \\psi_a(x_2) \\lvert 1, m \\rangle, \\ (m = 0, \\pm 1)\n\\end{cases} \\\\\n\\text{(ii) Total energy} & = E_a + E_b, \\ \\text{degeneracy} = 8, \\\\\n\\text{Wave functions:} \\ &\n\\begin{cases}\n\\psi_a(x_1) \\psi_b(x_2) \\lvert 0, 0 \\rangle, \\\\\n\\psi_a(x_1) \\psi_b(x_2) \\lvert 1, m \\rangle, \\ (m = 0, \\pm 1)\n\\end{cases}\n\\end{aligned} \\\\\n(b) & \\quad \\text{Two identical spin-}\\frac{1}{2} \\text{ particles:} \\\\\n& \\quad \\begin{aligned}\n\\text{(i) Total energy} & = E_a + E_a, \\ \\text{degeneracy} = 1, \\\\\n\\text{Wave function:} \\ & \\psi_a(x_1)\\psi_a(x_2) |0, 0\\rangle, \\\\\n\\text{(ii) Total energy} & = E_a + E_b, \\ \\text{degeneracy} = 4, \\\\\n\\text{Wave functions:} \\ &\n\\left\\{ \n  \\begin{aligned}\n    & \\frac{1}{\\sqrt{2}}[\\psi_a(x_1)\\psi_b(x_2) + \\psi_b(x_1)\\psi_a(x_2)] |0, 0\\rangle, \\\\\n    & \\frac{1}{\\sqrt{2}}[\\psi_a(x_1)\\psi_b(x_2) - \\psi_b(x_1)\\psi_a(x_2)] |1, m\\rangle, \\ (m = 0, \\pm 1)\n  \\end{aligned} \n\\right.\n\\end{aligned} \\\\\n(c) & \\quad \\text{Two identical spin-0 particles:} \\\\\n& \\quad \\begin{aligned}\n\\text{(i) Total energy} & = E_a + E_a, \\ \\text{degeneracy} = 1, \\\\\n\\text{Wave function:} \\ & \\psi_a(x_1)\\psi_a(x_2) |0, 0\\rangle, \\\\\n\\text{(ii) Total energy} & = E_a + E_b, \\ \\text{degeneracy} = 1, \\\\\n\\text{Wave function:} \\ & \\frac{1}{\\sqrt{2}}[\\psi_a(x_1)\\psi_b(x_2) + \\psi_b(x_1)\\psi_a(x_2)] |0, 0\\rangle.\n\\end{aligned}\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7008", "solution": "Let me solve this step by step.\n\n1) First, recall that for an infinite square well, the energy levels are given by:\n   $E_n = \\frac{n^2h^2}{8mL^2}$ where n is the quantum number\n\n2) Due to the Pauli exclusion principle and electron spin, each energy level can hold 2 electrons with opposite spins.\n\n3) For 3 electrons at T = 0 K:\n   - Two electrons will occupy the ground state (n=1)\n   - One electron will occupy the first excited state (n=2)\n   - Average energy = $(2E_1 + E_2)/3$\n   - Given that this equals 12.4 eV\n\n4) Let's call the ground state energy $E_1 = k$\n   Then: $E_2 = 4k$ (since energy is proportional to n²)\n   \n5) From the given information:\n   $(2k + 4k)/3 = 12.4$\n   $6k/3 = 12.4$\n   $k = 6.2$ eV\n\n6) Now for 4 electrons at T = 0 K:\n   - Two electrons in ground state (n=1): $2E_1 = 2(6.2)$\n   - Two electrons in first excited state (n=2): $2E_2 = 2(24.8)$\n   - Average energy = $(2E_1 + 2E_2)/4$\n   - = $(12.4 + 49.6)/4$\n   - = $62/4$\n   - = 15.5\n\nTherefore, the average energy for 4 electrons is 15.5 eV.\n\n\\[\\boxed{15.5 \\text{ eV}}\\]", "final_answers": ["15.5 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "15.5 \\text{ eV}", "expr2": "E = 15.5 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/4010", "solution": "Let's solve this step by step.\n\n(a) The Hamiltonian:\n1) For a charged particle in a magnetic field, the kinetic term is $(\\mathbf{P}-q\\mathbf{A})^2/2m$\n2) The magnetic dipole interaction term is $-\\mathbf{\\mu}\\cdot\\mathbf{B}$\n3) Substituting $\\mathbf{\\mu} = gqs/2mc$ and $\\mathbf{A} = \\mathbf{B} \\times \\mathbf{r}/2$:\n\nH = $\\frac{1}{2m}(\\mathbf{P}-\\frac{q}{2}\\mathbf{B}\\times\\mathbf{r})^2 - \\frac{gq}{2mc}\\mathbf{s}\\cdot\\mathbf{B}$\n\n(b) Using Heisenberg equations:\n1) For momentum: $\\dot{\\mathbf{P}} = \\frac{i}{\\hbar}[H,\\mathbf{P}]$\n2) For spin: $\\dot{\\mathbf{s}} = \\frac{i}{\\hbar}[H,\\mathbf{s}]$\n\nAfter calculations (neglecting $A^2$ term):\n$\\dot{\\mathbf{P}} = \\frac{q}{2mc}(\\mathbf{P}\\times\\mathbf{B} + \\mathbf{B}\\times\\mathbf{P})$\n$\\dot{\\mathbf{s}} = \\frac{gq}{2mc}\\mathbf{s}\\times\\mathbf{B}$\n\n(c) For helicity to remain constant:\n1) Helicity = $\\frac{\\mathbf{P}\\cdot\\mathbf{s}}{|\\mathbf{P}||\\mathbf{s}|}$\n2) For this to be constant, $\\mathbf{P}$ and $\\mathbf{s}$ must precess at the same rate\n3) From equations in (b), this means:\n   $\\frac{q}{2mc} = \\frac{gq}{2mc}$\n4) Therefore: g = 2\n\n(d) For electrons (e):\nThe actual value of g for electrons is approximately 2.002319\n\n\\[\\boxed{g \\approx 2.002319 \\text{ for electrons}}\\]\n\nThis is known as the electron g-factor, and its deviation from exactly 2 is explained by quantum electrodynamics (QED). The fact that g ≈ 2 was first predicted by Dirac's relativistic theory of the electron.", "final_answers": ["g \\approx 2.002319 \\text{ for electrons}"], "equivalency_results": [{"input_expressions": {"expr1": "g \\approx 2.002319 \\text{ for electrons}", "expr2": "H = \\frac{1}{2m} \\mathbf{P}^2 - \\frac{q}{mc} \\mathbf{A} \\cdot \\mathbf{P} - \\frac{gq}{2mc} \\mathbf{s} \\cdot \\mathbf{B}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g \\approx 2.002319 \\text{ for electrons}", "expr2": "\\frac{dP_i}{dt} = \\frac{q}{mc} (\\partial_i A_j) P_j"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g \\approx 2.002319 \\text{ for electrons}", "expr2": "\\frac{ds_i}{dt} = -\\frac{gq}{2mc} (\\mathbf{B} \\times \\mathbf{s})_i"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g \\approx 2.002319 \\text{ for electrons}", "expr2": "g = 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g \\approx 2.002319 \\text{ for electrons}", "expr2": "\\begin{array}{lcl}\ne & : & -2.0 \\\\\np & : & 5.6 \\\\\nn & : & -3.8 \\\\\n\\pi & : & 0 \\\\\n\\end{array}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7006", "solution": "Let's solve this step by step.\n\n1) First, let's understand what this equation represents:\n   * It's a two-particle system\n   * The particles are connected by a harmonic potential (spring-like)\n   * Each particle has position vector rᵢ\n\n2) For part (a), let's identify the symmetries:\n   * Translational invariance of center of mass (CM)\n   * Rotational invariance (spherical symmetry)\n   * Exchange symmetry between particles 1 and 2\n   * Time-reversal symmetry\n   * Parity symmetry (r → -r)\n\n3) For part (b), constants of motion are related to symmetries:\n   * Total momentum of CM (from translational invariance)\n   * Total angular momentum (from rotational invariance)\n   * Total energy (from time independence)\n\n4) For part (c), let's find the ground state:\n   * We can separate CM and relative coordinates:\n   R = (r₁ + r₂)/2 (CM)\n   r = r₁ - r₂ (relative)\n\n   * The Hamiltonian separates into:\n     H = H_CM + H_rel\n\n   * Ground state will be product of CM and relative parts:\n     ψ₀(r₁,r₂) = ψ_CM(R) × ψ_rel(r)\n\n   * Since both parts are harmonic oscillators and we know 1D oscillator has Gaussian ground state:\n     ψ₀(r₁,r₂) = N exp(-α|R|²) × exp(-β|r|²)\n     where N is normalization and α,β are constants depending on m,k,ℏ\n\nThe final answer in the requested format:\n\n\\[\\boxed{\\psi_0(\\mathbf{r}_1,\\mathbf{r}_2) = N \\exp\\left(-\\alpha|\\mathbf{R}|^2 - \\beta|\\mathbf{r}|^2\\right)}\\]\n\nwhere N is normalization constant, α and β are positive constants determined by system parameters, R = (r₁ + r₂)/2, and r = r₁ - r₂.", "final_answers": ["\\psi_0(\\mathbf{r}_1,\\mathbf{r}_2) = N \\exp\\left(-\\alpha|\\mathbf{R}|^2 - \\beta|\\mathbf{r}|^2\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi_0(\\mathbf{r}_1,\\mathbf{r}_2) = N \\exp\\left(-\\alpha|\\mathbf{R}|^2 - \\beta|\\mathbf{r}|^2\\right)", "expr2": "\\text{time translation, space inversion, translation of the whole system, exchange of } \\mathbf{r}_1 \\text{ and } \\mathbf{r}_2, \\text{ Galilean transformation}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0(\\mathbf{r}_1,\\mathbf{r}_2) = N \\exp\\left(-\\alpha|\\mathbf{R}|^2 - \\beta|\\mathbf{r}|^2\\right)", "expr2": "P_R^2, P_x, P_y, P_z, E_R, L_R^2, L_x, L_y, L_z, E_r, L_r^2, L_z, \\text{parity of the wave function}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0(\\mathbf{r}_1,\\mathbf{r}_2) = N \\exp\\left(-\\alpha|\\mathbf{R}|^2 - \\beta|\\mathbf{r}|^2\\right)", "expr2": "\\begin{align*}\n\\psi(\\mathbf{R}, \\mathbf{r}) &= \\phi(\\mathbf{R}) \\varphi(\\mathbf{r}) \\\\\n\\varphi(\\mathbf{r}) &\\sim \\exp \\left( -\\frac{1}{2} \\alpha^2 r^2 \\right), \\quad \\alpha^2 = \\sqrt{\\frac{mk}{2\\hbar^2}} \\\\\n\\phi(\\mathbf{R}) &\\sim \\exp(-i \\mathbf{p} \\cdot \\mathbf{R} / \\hbar), \\quad |\\mathbf{p}| = \\sqrt{4mE_R}, \\, E_R = E - \\frac{1}{2} \\hbar \\sqrt{\\frac{2k}{m}}\n\\end{align*}"}, "preprocessed_expressions": {"expr1": "N*exp(-alpha*Abs(R*mathbf)**2 - beta*Abs(mathbf*r)**2)", "expr2": "E - sqrt(2)*end*hbar*sqrt(k/m)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8025", "solution": "Let's solve this step by step.\n\n(a) First, let's show that u(x,t) satisfies a diffusion-type equation.\n\n1) For a free electron, the energy eigenvalues are:\n   $\\varepsilon_k = \\frac{\\hbar^2k^2}{2m}$\n\n2) The eigenfunctions are:\n   $\\phi_k(x) = Ae^{ikx}$\n\n3) Let's take the time derivative of u(x,t):\n   $\\frac{\\partial u}{\\partial t} = \\sum_k \\phi^*_k(x)\\phi_k(0) \\left(-\\frac{\\varepsilon_k}{\\hbar}\\right) \\exp \\left(-\\frac{\\varepsilon_k t}{\\hbar}\\right)$\n   $= -\\sum_k \\phi^*_k(x)\\phi_k(0) \\frac{\\hbar k^2}{2m} \\exp \\left(-\\frac{\\varepsilon_k t}{\\hbar}\\right)$\n\n4) Take the second spatial derivative:\n   $\\frac{\\partial^2 u}{\\partial x^2} = \\sum_k (-k^2)\\phi^*_k(x)\\phi_k(0) \\exp \\left(-\\frac{\\varepsilon_k t}{\\hbar}\\right)$\n\n5) Comparing these equations:\n   $\\frac{\\partial u}{\\partial t} = \\frac{\\hbar}{2m}\\frac{\\partial^2 u}{\\partial x^2}$\n\nThis is a diffusion equation with diffusion coefficient:\n$D = \\frac{\\hbar}{2m}$\n\n(b) From diffusion theory:\n1) The characteristic diffusion time over distance l is:\n   $t_{diff} \\approx \\frac{l^2}{D} = \\frac{2ml^2}{\\hbar}$\n\n2) The boundary would NOT be felt immediately. The influence would propagate with a finite speed, taking approximately time t_diff to be felt.\n\n(c) At time t_diff:\n1) The exponential term in u(x,t) is:\n   $\\exp \\left(-\\frac{\\hbar k^2 t_{diff}}{2m}\\right)$\n\n2) This term becomes significant when:\n   $\\frac{\\hbar k^2 t_{diff}}{2m} \\approx 1$\n\n3) Substituting t_diff:\n   $k^2 \\approx \\frac{1}{l^2}$\n\n4) Therefore, the significant energies are:\n   $\\varepsilon_k \\approx \\frac{\\hbar^2}{2ml^2}$\n\nThe final answer for the diffusion coefficient is:\n\\[\\boxed{D = \\frac{\\hbar}{2m}}\\]", "final_answers": ["D = \\frac{\\hbar}{2m}"], "equivalency_results": [{"input_expressions": {"expr1": "D = \\frac{\\hbar}{2m}", "expr2": "\\frac{\\hbar}{2m}"}, "preprocessed_expressions": {"expr1": "hbar/(2*m)", "expr2": "hbar/(2*m)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/8013", "solution": "Let's solve this step by step.\n\n1) First, let's recall the Bohr-Sommerfeld quantization rule for large quantum numbers:\n   ∮ p dq = nh\n\n2) For an oscillating system, this is equivalent to:\n   ∫_0^T E dt = nh\n   where T is the period of oscillation\n\n3) Since ν = 1/T, we can write:\n   E/ν = nh\n\n4) We're given that ν(E) = α(E/E_0)^(-β)\n   Substituting this:\n   E/[α(E/E_0)^(-β)] = nh\n\n5) Simplify:\n   E · (E/E_0)^β/α = nh\n   E^(1+β) · E_0^(-β)/α = nh\n\n6) Solve for E:\n   E^(1+β) = nhα · E_0^β\n   E = (nhα · E_0^β)^[1/(1+β)]\n\n7) This gives us the energy levels E_n:\n   E_n = [nαh · E_0^β]^[1/(1+β)]\n\nTherefore, the quantum energy levels for large n are:\n\n\\[ \\boxed{E_n = (nαhE_0^β)^{1/(1+β)}} \\]\n\nThis shows that the energy levels follow a power law with n, where the power is 1/(1+β).", "final_answers": ["E_n = (nαhE_0^β)^{1/(1+β)}"], "equivalency_results": [{"input_expressions": {"expr1": "E_n = (nαhE_0^β)^{1/(1+β)}", "expr2": "E_n = \\left[ h\\alpha(\\beta + 1) n E_0^\\beta \\right]^{\\frac{1}{1+\\beta}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n(nαhE^β)^{1/(1+β)}\n~~^"}], "accuracy": 0.0}
{"id": "quantum/7007", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're looking for:\n   * We need the first-order correction to the ground state energy\n   * The unperturbed system is two identical bosons in a harmonic oscillator\n   * The perturbation is the interaction potential V_int\n\n2) For identical bosons in the ground state:\n   * The spatial wavefunction must be symmetric\n   * The unperturbed ground state is both particles in the HO ground state\n   * The ground state wavefunction is:\n   ψ₀(x₁,x₂) = ψ₀(x₁)ψ₀(x₂)\n\n3) The harmonic oscillator ground state wavefunction is:\n   ψ₀(x) = (mω/πℏ)^(1/4) exp(-mωx²/2ℏ)\n\n4) The unperturbed ground state energy is:\n   E₀ = 2 × (ℏω/2) = ℏω\n\n5) The first-order correction to the energy is:\n   ΔE = ⟨ψ₀|V_int|ψ₀⟩\n   = ∫∫ ψ₀*(x₁)ψ₀*(x₂) α exp(-β(x₁-x₂)²) ψ₀(x₁)ψ₀(x₂) dx₁dx₂\n\n6) Substituting the wavefunctions:\n   ΔE = α(mω/πℏ)^(1/2) ∫∫ exp(-mωx₁²/ℏ)exp(-mωx₂²/ℏ)exp(-β(x₁-x₂)²) dx₁dx₂\n\n7) This integral can be solved by changing variables to:\n   X = (x₁+x₂)/√2 (center of mass)\n   x = (x₁-x₂)/√2 (relative coordinate)\n\n8) After the transformation and integration:\n   ΔE = α/√(1 + 2βℏ/mω)\n\nTherefore, the ground state energy to first order in α is:\nE = E₀ + ΔE = ℏω + α/√(1 + 2βℏ/mω)\n\n\\[ \\boxed{E = \\hbar\\omega + \\frac{\\alpha}{\\sqrt{1 + 2\\beta\\hbar/m\\omega}}} \\]", "final_answers": ["E = \\hbar\\omega + \\frac{\\alpha}{\\sqrt{1 + 2\\beta\\hbar/m\\omega}}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\hbar\\omega + \\frac{\\alpha}{\\sqrt{1 + 2\\beta\\hbar/m\\omega}}", "expr2": "E = \\hbar \\omega + \\frac{\\alpha_0 \\alpha}{(\\alpha_0^2 + 2\\beta)^{1/2}}"}, "preprocessed_expressions": {"expr1": "alpha/sqrt(2*beta*hbar/(m*omega) + 1) + hbar*omega", "expr2": "alpha**2/sqrt(alpha**2 + 2*beta) + hbar*omega"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7009", "solution": "Let's solve this step by step.\n\n(a) First, let's write down all possible two-electron wavefunctions:\n\n1) For fermions (electrons), the total wavefunction must be antisymmetric under particle exchange.\n\n2) For two electrons, we need to use the Slater determinant:\n   $\\psi(r_1, r_2) = \\frac{1}{\\sqrt{2}} \\begin{vmatrix} \\psi_a(r_1) & \\psi_b(r_1) \\\\ \\psi_a(r_2) & \\psi_b(r_2) \\end{vmatrix}$\n   $= \\frac{1}{\\sqrt{2}}[\\psi_a(r_1)\\psi_b(r_2) - \\psi_a(r_2)\\psi_b(r_1)]$\n\n3) The possible combinations using $\\psi_1, \\psi_2, \\psi_3$ are:\n   * $\\psi_{12} = \\frac{1}{\\sqrt{2}}[\\psi_1(r_1)\\psi_2(r_2) - \\psi_1(r_2)\\psi_2(r_1)]$\n   * $\\psi_{13} = \\frac{1}{\\sqrt{2}}[\\psi_1(r_1)\\psi_3(r_2) - \\psi_1(r_2)\\psi_3(r_1)]$\n   * $\\psi_{23} = \\frac{1}{\\sqrt{2}}[\\psi_2(r_1)\\psi_3(r_2) - \\psi_2(r_2)\\psi_3(r_1)]$\n\n(b) For the matrix element:\n\n1) Using the given wavefunctions:\n   $\\langle \\psi_{13} | \\delta H | \\psi_{12} \\rangle = \\frac{1}{2}\\langle [\\psi_1(r_1)\\psi_3(r_2) - \\psi_1(r_2)\\psi_3(r_1)] | V'(r_1, r_2) | [\\psi_1(r_1)\\psi_2(r_2) - \\psi_1(r_2)\\psi_2(r_1)] \\rangle$\n\n2) Expanding this:\n   * First term: $\\langle \\psi_3(r_1)\\psi_1(r_2) | V'(r_1, r_2) | \\psi_2(r_1)\\psi_1(r_2) \\rangle$\n   * Second term: $-\\langle \\psi_1(r_1)\\psi_3(r_2) | V'(r_1, r_2) | \\psi_2(r_1)\\psi_1(r_2) \\rangle$\n\n3) This matches exactly with the given expression.\n\nThe final answer is:\n\n\\[\\boxed{\\text{The three possible antisymmetric wavefunctions are } \\psi_{12}, \\psi_{13}, \\psi_{23}, \\text{ and the matrix element expression is verified.}}\\]", "final_answers": ["\\text{The three possible antisymmetric wavefunctions are } \\psi_{12}, \\psi_{13}, \\psi_{23}, \\text{ and the matrix element expression is verified.}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The three possible antisymmetric wavefunctions are } \\psi_{12}, \\psi_{13}, \\psi_{23}, \\text{ and the matrix element expression is verified.}", "expr2": "\\begin{aligned}\n\\psi_{12} &= \\frac{1}{\\sqrt{2}} \\left( \\psi_1(r_1) \\psi_2(r_2) - \\psi_1(r_2) \\psi_2(r_1) \\right), \\\\\n\\psi_{13} &= \\frac{1}{\\sqrt{2}} \\left( \\psi_1(r_1) \\psi_3(r_2) - \\psi_1(r_2) \\psi_3(r_1) \\right), \\\\\n\\psi_{23} &= \\frac{1}{\\sqrt{2}} \\left( \\psi_2(r_1) \\psi_3(r_2) - \\psi_2(r_2) \\psi_3(r_1) \\right).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The three possible antisymmetric wavefunctions are } \\psi_{12}, \\psi_{13}, \\psi_{23}, \\text{ and the matrix element expression is verified.}", "expr2": "\\begin{aligned}\n\\langle \\psi_{13} | \\delta H | \\psi_{12} \\rangle &= \\langle \\psi_3(r_1) \\psi_1(r_2) | V'(r_1, r_2) | \\psi_2(r_1) \\psi_1(r_2) \\rangle \\\\\n&\\quad - \\langle \\psi_1(r_1) \\psi_3(r_2) | V'(r_1, r_2) | \\psi_2(r_1) \\psi_1(r_2) \\rangle.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/4011", "solution": "Let's solve this step by step.\n\n1) First, recall that when a neutron passes through a magnetic field, it experiences a potential energy:\n   * U = ±μₙB, where μₙ is the neutron magnetic moment\n   * The ± sign depends on whether the neutron spin is parallel (+) or anti-parallel (-) to B\n\n2) This potential energy affects the neutron's wave vector k:\n   * k = 2π/λ = √(2mE)/ℏ\n   * In the magnetic field region, E → E ± μₙB\n   * Therefore, k → k' = √(2m(E ± μₙB))/ℏ\n\n3) The phase difference Δφ between the two paths will be:\n   * Δφ = (k' - k)l\n   * = [√(2m(E ± μₙB))/ℏ - √(2mE)/ℏ]l\n\n4) For small magnetic fields (μₙB << E):\n   * Using Taylor expansion: √(1 ± x) ≈ 1 ± x/2\n   * k' ≈ k(1 ± μₙB/2E)\n   * Δφ ≈ ±klμₙB/2E\n\n5) The energy E of the neutron is related to its wavelength:\n   * E = h²/2mλ²\n   * k = 2π/λ\n\n6) The intensity at point D will follow interference pattern:\n   * I = I₀cos²(Δφ/2)\n   * Where I₀ is the initial intensity\n\n7) Substituting all relations:\n   * Δφ = ±2πlμₙB/hv\n   * Where v is the neutron velocity\n\nTherefore, the intensity at point D is:\n\nFor parallel spin:\nI = I₀cos²(πlμₙB/hv)\n\nFor anti-parallel spin:\nI = I₀cos²(-πlμₙB/hv)\n\n\\[\\boxed{I = I₀\\cos^2(\\pm\\pi l\\mu_n B/hv)}\\]\n\nwhere the + sign is for parallel spin and the - sign is for anti-parallel spin. The intensity shows an oscillatory behavior with respect to B and l, with a period depending on the neutron wavelength through its velocity v.", "final_answers": ["I = I₀\\cos^2(\\pm\\pi l\\mu_n B/hv)"], "equivalency_results": [{"input_expressions": {"expr1": "I = I₀\\cos^2(\\pm\\pi l\\mu_n B/hv)", "expr2": "\\cos^2 \\left( \\frac{\\pi \\mu ml\\lambda B}{\\hbar^2} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nI₀\\cos^2(\\pm\\pi l\\mu B/hv)\n~^"}], "accuracy": 0.0}
{"id": "quantum/8015", "solution": "Let's solve this step by step.\n\n1) In the Born approximation, the scattering amplitude is proportional to the Fourier transform of the potential:\n   \n   $f(\\mathbf{k}_f, \\mathbf{k}_i) \\propto \\int e^{-i(\\mathbf{k}_f - \\mathbf{k}_i)\\cdot\\mathbf{r}} V(\\mathbf{r}) d^3r$\n\n2) Let's define the momentum transfer vector:\n   $\\mathbf{Q} = \\mathbf{k}_f - \\mathbf{k}_i$\n\n3) The potential is a sum over lattice points:\n   $V(\\mathbf{r}) = \\sum_j V(|\\mathbf{r} - \\mathbf{r}_j|)$\n\n4) Substituting this into the scattering amplitude:\n   $f(\\mathbf{Q}) \\propto \\int e^{-i\\mathbf{Q}\\cdot\\mathbf{r}} \\sum_j V(|\\mathbf{r} - \\mathbf{r}_j|) d^3r$\n\n5) We can change variables for each term in the sum using $\\mathbf{r}' = \\mathbf{r} - \\mathbf{r}_j$:\n   $f(\\mathbf{Q}) \\propto \\sum_j e^{-i\\mathbf{Q}\\cdot\\mathbf{r}_j} \\int e^{-i\\mathbf{Q}\\cdot\\mathbf{r}'} V(|\\mathbf{r}'|) d^3r'$\n\n6) The integral is now the same for each j, let's call it $v(\\mathbf{Q})$:\n   $f(\\mathbf{Q}) \\propto v(\\mathbf{Q}) \\sum_j e^{-i\\mathbf{Q}\\cdot\\mathbf{r}_j}$\n\n7) For a regular lattice, $\\mathbf{r}_j = n_1\\mathbf{a} + n_2\\mathbf{b} + n_3\\mathbf{c}$\n   where $n_1, n_2, n_3$ are integers.\n\n8) The sum becomes:\n   $\\sum_j e^{-i\\mathbf{Q}\\cdot\\mathbf{r}_j} = \\sum_{n_1,n_2,n_3} e^{-i\\mathbf{Q}\\cdot(n_1\\mathbf{a} + n_2\\mathbf{b} + n_3\\mathbf{c})}$\n\n9) This sum is non-zero only when:\n   $\\mathbf{Q}\\cdot\\mathbf{a} = 2\\pi h$\n   $\\mathbf{Q}\\cdot\\mathbf{b} = 2\\pi k$\n   $\\mathbf{Q}\\cdot\\mathbf{c} = 2\\pi l$\n   where h, k, l are integers.\n\n10) These conditions are equivalent to the Bragg law:\n    $\\mathbf{Q} = \\mathbf{G}$\n    where $\\mathbf{G}$ is a reciprocal lattice vector.\n\nTherefore, the scattering amplitude is significant only when the momentum transfer equals a reciprocal lattice vector, which is equivalent to the Bragg condition:\n\n\\[ \\boxed{2\\mathbf{k}_i\\cdot\\mathbf{G} = G^2} \\]\n\nThis is the Bragg law in its reciprocal space form, equivalent to the more familiar $2d\\sin\\theta = n\\lambda$.", "final_answers": ["2\\mathbf{k}_i\\cdot\\mathbf{G} = G^2"], "equivalency_results": [{"input_expressions": {"expr1": "2\\mathbf{k}_i\\cdot\\mathbf{G} = G^2", "expr2": "\\begin{align*}\n\\mathbf{a} \\cdot (\\mathbf{k} - \\mathbf{k}_0) &= 2\\pi l_1 \\,, \\\\\n\\mathbf{b} \\cdot (\\mathbf{k} - \\mathbf{k}_0) &= 2\\pi l_2 \\,, \\\\\n\\mathbf{c} \\cdot (\\mathbf{k} - \\mathbf{k}_0) &= 2\\pi l_3 \\,,\n\\end{align*}"}, "preprocessed_expressions": {"expr1": "G**2", "expr2": "2*l*pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8024", "solution": "Let's solve this step by step.\n\n(a) First, let's establish some basics:\n- We have 2 particles\n- 3 energy levels: n = 0 (doubly degenerate), n = 1, n = 2\n- β = 1/(kT)\n- Let's denote x = e^(-βε)\n\n(1) For Fermi statistics:\n- Particles cannot occupy the same quantum state\n- For n = 0 level (doubly degenerate), we can put:\n  * Both particles in n = 0 (different states): 1\n  * One in n = 0, one in n = 1: 2x\n  * One in n = 0, one in n = 2: 2x²\n  * Both in n = 1: x²\n  * One in n = 1, one in n = 2: 2x³\n  * Both in n = 2: x⁴\n\nPartition function ZF = 1 + 2x + 2x² + x² + 2x³ + x⁴\nZF = 1 + 2x + 3x² + 2x³ + x⁴\n\n(2) For Bose statistics:\n- Particles can occupy the same quantum state\nConfigurations:\n- Both in n = 0: 3 ways (due to degeneracy)\n- One in n = 0, one in n = 1: 2x\n- One in n = 0, one in n = 2: 2x²\n- Both in n = 1: x²\n- One in n = 1, one in n = 2: 2x³\n- Both in n = 2: x⁴\n\nPartition function ZB = 3 + 2x + 2x² + x² + 2x³ + x⁴\nZB = 3 + 2x + 3x² + 2x³ + x⁴\n\n(3) For Boltzmann statistics:\n- Particles are distinguishable\n- Each configuration from Bose case gets multiplied by 2! (if particles are in different states)\n\nPartition function ZC = 3 + 4x + 4x² + 2x² + 4x³ + 2x⁴\nZC = 3 + 4x + 6x² + 4x³ + 2x⁴\n\n(b) Boltzmann statistics can be used when:\n1. The thermal energy kT is much larger than the spacing between energy levels\n2. The particle density is low enough that quantum effects are negligible\n3. Mathematically, when λ³/V << 1, where λ is the thermal de Broglie wavelength and V is the volume per particle\n\nThe final answer for the partition functions is:\n\\[\\boxed{\n\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "Z = 1 + 2e^{-\\varepsilon} + 2e^{-2\\varepsilon} + e^{-3\\varepsilon}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "1 + 2/e**varepsilon + 2/e**(2*varepsilon) + e**(-3*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "\\bar{\\varepsilon} = \\frac{2\\varepsilon e^{-\\varepsilon} + 4\\varepsilon e^{-2\\varepsilon} + 3\\varepsilon e^{-3\\varepsilon}}{Z}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "varepsilon*(2*e**(2*varepsilon) + 4*e**varepsilon + 3)/(Z*e**(3*varepsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "Z = 3 + 2e^{-\\varepsilon} + 3e^{-2\\varepsilon} + e^{-3\\varepsilon} + e^{-4\\varepsilon}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "3 + 2/e**varepsilon + 3/e**(2*varepsilon) + e**(-3*varepsilon) + e**(-4*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "\\bar{\\varepsilon} = \\frac{2\\varepsilon e^{-\\varepsilon} + 6\\varepsilon e^{-2\\varepsilon} + 3\\varepsilon e^{-3\\varepsilon} + 4\\varepsilon e^{-4\\varepsilon}}{Z}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "varepsilon*(2*e**(3*varepsilon) + 6*e**(2*varepsilon) + 3*e**varepsilon + 4)/(Z*e**(4*varepsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "Z = 4 + 4e^{-\\varepsilon} + 5e^{-2\\varepsilon} + 2e^{-3\\varepsilon} + e^{-4\\varepsilon}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "4 + 4/e**varepsilon + 5/e**(2*varepsilon) + 2/e**(3*varepsilon) + e**(-4*varepsilon)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "\\bar{\\varepsilon} = \\frac{4\\varepsilon e^{-\\varepsilon} + 10\\varepsilon e^{-2\\varepsilon} + 6\\varepsilon e^{-3\\varepsilon} + 4\\varepsilon e^{-4\\varepsilon}}{Z}"}, "preprocessed_expressions": {"expr1": "2*end*x**4 + 4*x**3 + 6*x**2 + 4*x + 3", "expr2": "2*varepsilon*(2*e**(3*varepsilon) + 5*e**(2*varepsilon) + 3*e**varepsilon + 2)/(Z*e**(4*varepsilon))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nZ_F &= 1 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_B &= 3 + 2x + 3x^2 + 2x^3 + x^4 \\\\\nZ_C &= 3 + 4x + 6x^2 + 4x^3 + 2x^4\n\\end{align*}", "expr2": "\\text{Fermions and bosons can be treated as Boltzmann particles when the number of particles is much less than the number of energy levels.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2006", "solution": "Let's solve this step by step:\n\n(a) First, let's show the ground state energy is minimum:\n\n1) The uncertainty principle states: ΔxΔp ≥ ℏ/2\n2) For ground state: ⟨x²⟩ = (Δx)² and ⟨p²⟩ = (Δp)²\n3) Energy E = ⟨p²⟩/2m + k⟨x²⟩/2 = (Δp)²/2m + k(Δx)²/2\n4) Using uncertainty principle: (Δp)(Δx) = ℏ/2\n5) Therefore: Δp = ℏ/2Δx\n6) Substituting: E = ℏ²/8m(Δx)² + k(Δx)²/2\n7) Minimize E by dE/d(Δx) = 0\n8) This gives: Δx = (ℏ/2mω)^(1/2) where ω = (k/m)^(1/2)\n9) Ground state energy: E₀ = ℏω/2\n\n(b) For the Gaussian wave function:\n\n1) ψ₀ = exp(-αx²)\n2) From (a), we know Δx = (ℏ/2mω)^(1/2)\n3) For Gaussian: Δx = 1/(2α)^(1/2)\n4) Therefore: α = mω/2ℏ\n\n(c) For first excited state:\n\n1) Using raising operator a† = √(mω/2ℏ)x - i√(1/2mωℏ)p\n2) ψ₁ ∝ a†ψ₀\n3) ψ₁ ∝ (2αx)exp(-αx²)\n\n(d) In 3D with polar coordinates:\n\n1) First excited state has n=1, l=0,±1\n2) For l=±1: ψ₁,±₁ ∝ r exp(-αr²)exp(±iφ)\n3) For l=0: ψ₁,₀ ∝ z exp(-αr²)\n\nThe final answers are:\n\n\\[ \\boxed{\n\\begin{align*}\n&(a) \\: E_0 = \\frac{\\hbar\\omega}{2} \\\\\n&(b) \\: \\alpha = \\frac{m\\omega}{2\\hbar} \\\\\n&(c) \\: \\psi_1 \\propto (2\\alpha x)e^{-\\alpha x^2} \\\\\n&(d) \\: \\psi_{1,\\pm1} \\propto re^{-\\alpha r^2}e^{\\pm i\\phi}, \\: \\psi_{1,0} \\propto ze^{-\\alpha r^2}\n\\end{align*}\n} \\]", "final_answers": ["\\begin{align*}\n&(a) \\: E_0 = \\frac{\\hbar\\omega}{2} \\\\\n&(b) \\: \\alpha = \\frac{m\\omega}{2\\hbar} \\\\\n&(c) \\: \\psi_1 \\propto (2\\alpha x)e^{-\\alpha x^2} \\\\\n&(d) \\: \\psi_{1,\\pm1} \\propto re^{-\\alpha r^2}e^{\\pm i\\phi}, \\: \\psi_{1,0} \\propto ze^{-\\alpha r^2}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a) \\: E_0 = \\frac{\\hbar\\omega}{2} \\\\\n&(b) \\: \\alpha = \\frac{m\\omega}{2\\hbar} \\\\\n&(c) \\: \\psi_1 \\propto (2\\alpha x)e^{-\\alpha x^2} \\\\\n&(d) \\: \\psi_{1,\\pm1} \\propto re^{-\\alpha r^2}e^{\\pm i\\phi}, \\: \\psi_{1,0} \\propto ze^{-\\alpha r^2}\n\\end{align*}", "expr2": "E_0 = \\frac{\\hbar \\omega}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\frac{m\\omega}{2\\hbar} \\\\\n&(c) \\: \\psi \\propto (2\\alpha x)e^{-\\alpha x^2} \\\\\n&(d) \\: \\psi \\propto re^{-\\alpha r^2}e^{\\pm i\\phi}, \\: \\psi \\propto ze^{-\\alpha r^2}\n\\end{align*}\n~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 1.0}
{"id": "quantum/5027", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're calculating:\n   * We need to find the difference in energy between states when considering a point proton vs an extended proton\n   * The difference will come from the modified Coulomb potential inside the proton\n\n2) For a uniformly charged sphere of radius R:\n   * Inside (r < R): V(r) = -Ze²(3R² - r²)/(2R³)\n   * Outside (r > R): V(r) = -Ze²/r\n   where Z=1 for proton\n\n3) The energy shift can be calculated using first-order perturbation theory:\n   ΔE = ∫ ψ*(ΔV)ψ dτ\n   where ΔV is the difference between the actual and point-charge potentials\n\n4) For r < rp:\n   ΔV = -e²/r + e²(3rp² - r²)/(2rp³)\n   = e²(3rp² - r²)/(2rp³) - e²/r\n\n5) For 1s state:\n   * Wavefunction: ψ₁ₛ = (1/√π)(1/a₀)³/² e^(-r/a₀)\n   * Most contribution comes from r < rp\n   * After integration:\n   ΔE₁ₛ = (2πe²/3)(rp/a₀)²\n\n6) For 2p state:\n   * Wavefunction has r·cos(θ) dependence\n   * Vanishes at r = 0\n   * Much smaller overlap with proton\n   * After integration:\n   ΔE₂ₘ ≈ 0\n\n7) Numerical calculation:\n   * rp = 10⁻¹³ cm = 10⁻¹⁵ m\n   * a₀ = 5.29×10⁻¹¹ m\n   * e² = 1.44×10⁻⁹ eV·m\n\n8) For 1s state:\n   ΔE₁ₛ = (2π/3)(1.44×10⁻⁹)(10⁻¹⁵/5.29×10⁻¹¹)² ≈ 0.02 eV\n\nThe final answer for the energy shifts is:\n\n\\[ \\boxed{\\Delta E_{1s} \\approx 0.02 \\text{ eV}, \\Delta E_{2p} \\approx 0 \\text{ eV}} \\]", "final_answers": ["\\Delta E_{1s} \\approx 0.02 \\text{ eV}, \\Delta E_{2p} \\approx 0 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_{1s} \\approx 0.02 \\text{ eV}, \\Delta E_{2p} \\approx 0 \\text{ eV}", "expr2": "E'_{10} = \\frac{2e^2 r_p^2}{5a^3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{1s} \\approx 0.02 \\text{ eV}, \\Delta E_{2p} \\approx 0 \\text{ eV}", "expr2": "E'_{21} = \\frac{e^2 r_p^4}{1120a^5}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1009", "solution": "Let me solve this step by step.\n\n(a) To show that the time derivative of the probability integral is zero:\n\n1) Let's start with the time derivative:\n   $\\frac{d}{dt} \\int_{-\\infty}^{\\infty} \\psi^*(x, t) \\psi(x, t) \\, dx$\n\n2) Using the product rule:\n   $\\int_{-\\infty}^{\\infty} [\\frac{\\partial \\psi^*}{\\partial t}\\psi + \\psi^*\\frac{\\partial \\psi}{\\partial t}] \\, dx$\n\n3) From Schrödinger equation:\n   $i\\hbar\\frac{\\partial \\psi}{\\partial t} = -\\frac{\\hbar^2}{2m}\\frac{\\partial^2 \\psi}{\\partial x^2} + V\\psi$\n   $-i\\hbar\\frac{\\partial \\psi^*}{\\partial t} = -\\frac{\\hbar^2}{2m}\\frac{\\partial^2 \\psi^*}{\\partial x^2} + V\\psi^*$\n\n4) Substituting these:\n   $\\int_{-\\infty}^{\\infty} [\\frac{i}{\\hbar}(-\\frac{\\hbar^2}{2m}\\frac{\\partial^2 \\psi^*}{\\partial x^2} + V\\psi^*)\\psi + \\psi^*\\frac{-i}{\\hbar}(-\\frac{\\hbar^2}{2m}\\frac{\\partial^2 \\psi}{\\partial x^2} + V\\psi)] \\, dx = 0$\n\n(b) For a stationary state:\n\n1) A stationary state has the form:\n   $\\psi(x,t) = \\phi(x)e^{-iEt/\\hbar}$\n\n2) If it starts in this form, the time evolution operator will only add a phase factor:\n   $e^{-iHt/\\hbar}\\psi(x,0) = \\psi(x,0)e^{-iEt/\\hbar}$\n\n3) Therefore, it remains in the same stationary state.\n\n(c) For the initial wave function:\n\n1) The wave function at t=0:\n   $\\psi(x,0) = \\begin{cases} C & -a<x<a \\\\ 0 & \\text{otherwise} \\end{cases}$\n\n2) Express in terms of eigenstates:\n   $\\psi(x,t) = \\sum_n c_n\\phi_n(x)e^{-iE_nt/\\hbar}$\n\n3) Where:\n   $c_n = \\int_{-a}^{a} C\\phi_n^*(x)dx$\n\nThe final answer for part (c) is:\n\n\\[\\boxed{\\psi(x,t) = \\sum_n \\left(\\int_{-a}^{a} C\\phi_n^*(x)dx\\right)\\phi_n(x)e^{-iE_nt/\\hbar}}\\]\n\nwhere $\\phi_n(x)$ are the normalized eigenfunctions of the system and $E_n$ are the corresponding energy eigenvalues.", "final_answers": ["\\psi(x,t) = \\sum_n \\left(\\int_{-a}^{a} C\\phi_n^*(x)dx\\right)\\phi_n(x)e^{-iE_nt/\\hbar}"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi(x,t) = \\sum_n \\left(\\int_{-a}^{a} C\\phi_n^*(x)dx\\right)\\phi_n(x)e^{-iE_nt/\\hbar}", "expr2": "\\frac{d}{dt} \\int_{-\\infty}^{\\infty} \\psi^*(x, t) \\psi(x, t) \\, dx = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '_' '^'\n\\sum (\\int^{a} C\\phi^*(x)dx)\\phi(x)e^{-iEt/\\hbar}\n~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,t) = \\sum_n \\left(\\int_{-a}^{a} C\\phi_n^*(x)dx\\right)\\phi_n(x)e^{-iE_nt/\\hbar}", "expr2": "\\hat{H} \\psi(x, t) = E \\psi(x, t)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected one of these: '_' '^'\n\\sum (\\int^{a} C\\phi^*(x)dx)\\phi(x)e^{-iEt/\\hbar}\n~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,t) = \\sum_n \\left(\\int_{-a}^{a} C\\phi_n^*(x)dx\\right)\\phi_n(x)e^{-iE_nt/\\hbar}", "expr2": "\\psi(x, t) = \\sum_n a_n \\psi_n(x) \\exp\\left(-i \\frac{E_n}{\\hbar} t\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I expected one of these: '_' '^'\n\\sum (\\int^{a} C\\phi^*(x)dx)\\phi(x)e^{-iEt/\\hbar}\n~~~~~^"}], "accuracy": 1.0}
{"id": "quantum/6038", "solution": "Let's solve this step by step:\n\n1) In the Born approximation, the scattering amplitude is proportional to the Fourier transform of the potential weighted by the initial and final state wavefunctions:\n\nf(q) ∝ ∫∫ ψ₁*(r) ψ₁(r') V(r-r') exp(iq·[r-r']) dr dr'\n\n2) With the contact potential V(r-r') = V₀b³δ³(r-r'), one of the integrals is immediately done due to the delta function:\n\nf(q) ∝ V₀b³ ∫ |ψ₁(r)|² exp(iq·r) dr\n\n3) The wavefunction given is:\nψ₁(r) = (πa)^(-3/2) exp(-r²/2a²)\n\n4) Therefore |ψ₁(r)|² = (πa)^(-3) exp(-r²/a²)\n\n5) The Fourier transform of a Gaussian is another Gaussian. After performing the integration:\n\nf(q) ∝ V₀b³ exp(-q²a²/4)\n\n6) The differential cross section is proportional to |f(q)|²:\n\ndσ/dΩ ∝ |V₀|²b⁶ exp(-q²a²/2)\n\n7) For elastic scattering, q = 2k sin(θ/2), where k is the wave number of P₂.\nTherefore:\ndσ/dΩ ∝ exp(-2k²a²sin²(θ/2))\n\nThe angular distribution characteristics:\n\n- It peaks at θ = 0 and falls off exponentially\n- The fall-off becomes steeper with increasing energy (k²)\n- The width of the forward peak is inversely related to the size parameter 'a'\n\nThe minimum energy needed to measure the size:\n- The de Broglie wavelength λ = 2π/k should be comparable to or smaller than 'a'\n- Therefore, E_min ∼ ℏ²/2ma², where m is the mass of P₂\n\nThe final form of the differential cross section is:\n\n\\[\\boxed{\\frac{d\\sigma}{d\\Omega} \\propto |V_0|^2b^6 \\exp(-2k^2a^2\\sin^2(\\theta/2))}\\]", "final_answers": ["\\frac{d\\sigma}{d\\Omega} \\propto |V_0|^2b^6 \\exp(-2k^2a^2\\sin^2(\\theta/2))"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} \\propto |V_0|^2b^6 \\exp(-2k^2a^2\\sin^2(\\theta/2))", "expr2": "f(\\theta) \\propto b^3 \\exp\\left[ -\\frac{1}{4} (qa)^2 \\right]"}, "preprocessed_expressions": {"expr1": "0", "expr2": "b**3*propto*f(theta)*exp(-a**2*q**2/4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} \\propto |V_0|^2b^6 \\exp(-2k^2a^2\\sin^2(\\theta/2))", "expr2": "\\frac{d\\sigma}{d\\Omega} = \\sigma_0 \\exp \\left[ -2(ka)^2 \\sin^2 \\frac{\\theta}{2} \\right]"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sigma*exp(-2*a**2*k**2*sin(theta/2)**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} \\propto |V_0|^2b^6 \\exp(-2k^2a^2\\sin^2(\\theta/2))", "expr2": "\\ln \\frac{d\\sigma}{d\\Omega} = -2k^2a^2 \\sin^2 \\frac{\\theta}{2} + c"}, "preprocessed_expressions": {"expr1": "0", "expr2": "-2*a**2*k**2*sin(theta/2)**2 + c"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/2-2001", "solution": "Let's solve this step by step.\n\n(a) For the Schrödinger equation:\n\n1) The time-independent Schrödinger equation in 3D is:\n   -ℏ²/2m (∂²ψ/∂x² + ∂²ψ/∂y² + ∂²ψ/∂z²) = Eψ\n\n2) Inside the well (0 ≤ x,y,z ≤ L), V = 0\n   Outside the well, V = ∞\n\n\\[ \\boxed{-\\frac{\\hbar^2}{2m}\\left(\\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} + \\frac{\\partial^2\\psi}{\\partial z^2}\\right) = E\\psi} \\]\n\n(b) For the ground state wave function:\n\n1) The solution is a product of three independent 1D solutions:\n   ψ(x,y,z) = ψ₁(x)ψ₂(y)ψ₃(z)\n\n2) For each dimension, the ground state (n=1) solution is:\n   ψ = √(2/L)sin(πx/L)\n\n3) Therefore, the complete ground state wave function is:\n\n\\[ \\boxed{\\psi(x,y,z) = \\left(\\frac{2}{L}\\right)^{3/2}\\sin\\left(\\frac{\\pi x}{L}\\right)\\sin\\left(\\frac{\\pi y}{L}\\right)\\sin\\left(\\frac{\\pi z}{L}\\right)} \\]\n\n(c) For the number of states below energy E:\n\n1) The energy levels are:\n   E = (ℏ²π²/2mL²)(nx² + ny² + nz²)\n   where nx, ny, nz are positive integers\n\n2) For large N, this is equivalent to finding the number of lattice points in the first octant of a sphere with radius R where:\n   R² = (2mEL²)/(ℏ²π²)\n\n3) The number of states is approximately 1/8 of the volume of this sphere:\n   N = (1/8)(4/3)πR³\n\n4) Substituting for R:\n\n\\[ \\boxed{N = \\frac{1}{6\\pi^2}\\left(\\frac{2mEL^2}{\\hbar^2}\\right)^{3/2}} \\]", "final_answers": ["-\\frac{\\hbar^2}{2m}\\left(\\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} + \\frac{\\partial^2\\psi}{\\partial z^2}\\right) = E\\psi", "\\psi(x,y,z) = \\left(\\frac{2}{L}\\right)^{3/2}\\sin\\left(\\frac{\\pi x}{L}\\right)\\sin\\left(\\frac{\\pi y}{L}\\right)\\sin\\left(\\frac{\\pi z}{L}\\right)", "N = \\frac{1}{6\\pi^2}\\left(\\frac{2mEL^2}{\\hbar^2}\\right)^{3/2}"], "equivalency_results": [{"input_expressions": {"expr1": "-\\frac{\\hbar^2}{2m}\\left(\\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} + \\frac{\\partial^2\\psi}{\\partial z^2}\\right) = E\\psi", "expr2": "i \\hbar \\frac{\\partial \\psi (r, t)}{\\partial t} = - \\frac{\\hbar^2}{2m} \\nabla^2 \\psi (r, t)"}, "preprocessed_expressions": {"expr1": "E*psi", "expr2": "-hbar**2*nabla**2*psi(r, t)/(2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "-\\frac{\\hbar^2}{2m}\\left(\\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} + \\frac{\\partial^2\\psi}{\\partial z^2}\\right) = E\\psi", "expr2": "\\psi_{111}(x, y, z) = \\left( \\frac{2}{L} \\right)^{3/2} \\sin \\left( \\frac{\\pi x}{L} \\right) \\sin \\left( \\frac{\\pi y}{L} \\right) \\sin \\left( \\frac{\\pi z}{L} \\right)"}, "preprocessed_expressions": {"expr1": "E*psi", "expr2": "2*sqrt(2)*(1/L)**(3/2)*sin(pi*x/L)*sin(pi*y/L)*sin(pi*z/L)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "-\\frac{\\hbar^2}{2m}\\left(\\frac{\\partial^2\\psi}{\\partial x^2} + \\frac{\\partial^2\\psi}{\\partial y^2} + \\frac{\\partial^2\\psi}{\\partial z^2}\\right) = E\\psi", "expr2": "N = \\frac{4 \\pi}{3} \\left( \\frac{mL^2}{2 \\hbar^2 \\pi^2} E \\right)^{3/2}"}, "preprocessed_expressions": {"expr1": "E*psi", "expr2": "sqrt(2)*pi*(E*L**2*m/(hbar**2*pi**2))**(3/2)/3"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,y,z) = \\left(\\frac{2}{L}\\right)^{3/2}\\sin\\left(\\frac{\\pi x}{L}\\right)\\sin\\left(\\frac{\\pi y}{L}\\right)\\sin\\left(\\frac{\\pi z}{L}\\right)", "expr2": "i \\hbar \\frac{\\partial \\psi (r, t)}{\\partial t} = - \\frac{\\hbar^2}{2m} \\nabla^2 \\psi (r, t)"}, "preprocessed_expressions": {"expr1": "2*sqrt(2)*(1/L)**(3/2)*sin(pi*x/L)*sin(pi*y/L)*sin(pi*z/L)", "expr2": "-hbar**2*nabla**2*psi(r, t)/(2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,y,z) = \\left(\\frac{2}{L}\\right)^{3/2}\\sin\\left(\\frac{\\pi x}{L}\\right)\\sin\\left(\\frac{\\pi y}{L}\\right)\\sin\\left(\\frac{\\pi z}{L}\\right)", "expr2": "\\psi_{111}(x, y, z) = \\left( \\frac{2}{L} \\right)^{3/2} \\sin \\left( \\frac{\\pi x}{L} \\right) \\sin \\left( \\frac{\\pi y}{L} \\right) \\sin \\left( \\frac{\\pi z}{L} \\right)"}, "preprocessed_expressions": {"expr1": "2*sqrt(2)*(1/L)**(3/2)*sin(pi*x/L)*sin(pi*y/L)*sin(pi*z/L)", "expr2": "2*sqrt(2)*(1/L)**(3/2)*sin(pi*x/L)*sin(pi*y/L)*sin(pi*z/L)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "N = \\frac{1}{6\\pi^2}\\left(\\frac{2mEL^2}{\\hbar^2}\\right)^{3/2}", "expr2": "i \\hbar \\frac{\\partial \\psi (r, t)}{\\partial t} = - \\frac{\\hbar^2}{2m} \\nabla^2 \\psi (r, t)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*(E*L**2*m/hbar**2)**(3/2)/(3*pi**2)", "expr2": "-hbar**2*nabla**2*psi(r, t)/(2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "N = \\frac{1}{6\\pi^2}\\left(\\frac{2mEL^2}{\\hbar^2}\\right)^{3/2}", "expr2": "\\psi_{111}(x, y, z) = \\left( \\frac{2}{L} \\right)^{3/2} \\sin \\left( \\frac{\\pi x}{L} \\right) \\sin \\left( \\frac{\\pi y}{L} \\right) \\sin \\left( \\frac{\\pi z}{L} \\right)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*(E*L**2*m/hbar**2)**(3/2)/(3*pi**2)", "expr2": "2*sqrt(2)*(1/L)**(3/2)*sin(pi*x/L)*sin(pi*y/L)*sin(pi*z/L)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "N = \\frac{1}{6\\pi^2}\\left(\\frac{2mEL^2}{\\hbar^2}\\right)^{3/2}", "expr2": "N = \\frac{4 \\pi}{3} \\left( \\frac{mL^2}{2 \\hbar^2 \\pi^2} E \\right)^{3/2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*(E*L**2*m/hbar**2)**(3/2)/(3*pi**2)", "expr2": "sqrt(2)*pi*(E*L**2*m/(hbar**2*pi**2))**(3/2)/3"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.3333333333333333}
{"id": "quantum/5016", "solution": "Let's solve this step by step.\n\n(a) The Hamiltonian consists of two parts:\n1) The unperturbed part H₀ is the rotational energy: H₀ = L²/2I\n2) The perturbation H' is the interaction with electric field: H' = -d·E = -dE cos θ\nTherefore, total Hamiltonian is:\n\\[ H = \\frac{L^2}{2I} - dE\\cos\\theta \\]\n\n(b) For the unperturbed problem (H₀):\n1) The eigenfunctions are spherical harmonics Y_{lm}(θ,φ)\n2) The eigenvalues are E₀ = l(l+1)ℏ²/2I\n3) For each l, m can take (2l+1) values from -l to +l\n4) Therefore, each energy level is (2l+1)-fold degenerate\n\n(c) First-order correction using non-degenerate perturbation theory:\nΔE = ⟨ψ|H'|ψ⟩ = -dE⟨Y_{lm}|cos θ|Y_{lm}⟩\n\nUsing the given relation and orthogonality of spherical harmonics:\n⟨Y_{lm}|cos θ|Y_{lm}⟩ = 0\n\nTherefore, the first-order correction is:\n\\[ \\Delta E^{(1)} = 0 \\]\n\n(d) The non-degenerate perturbation method is applicable because:\n1) Although the levels are degenerate in m, the perturbation H' = -dE cos θ doesn't mix states with different m values\n2) The matrix elements between states with same l but different m are zero\n3) This makes the perturbation \"diagonal\" in the degenerate subspace\n4) Therefore, we can treat each state independently despite the degeneracy\n\nThe final answer for the first-order energy correction is:\n\n\\[ \\boxed{\\Delta E^{(1)} = 0 \\text{ for all states}} \\]\n\nThis means the linear Stark effect vanishes for rigid rotator, and the first non-zero correction would appear in second-order perturbation theory.", "final_answers": ["\\Delta E^{(1)} = 0 \\text{ for all states}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E^{(1)} = 0 \\text{ for all states}", "expr2": "H = \\frac{J^2}{2I} - dE \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E^{(1)} = 0 \\text{ for all states}", "expr2": "H_0 = \\frac{J^2}{2I}, \\quad H' = -dE \\cos \\theta"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E^{(1)} = 0 \\text{ for all states}", "expr2": "E_{jm}^{(0)} = \\frac{j(j+1)\\hbar^2}{2I}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E^{(1)} = 0 \\text{ for all states}", "expr2": "(2j + 1)\\text{-fold degenerate}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E^{(1)} = 0 \\text{ for all states}", "expr2": "E^{(2)} = \\frac{Id^2E^2[j(j + 1) - 3m^2]}{\\hbar^2 j(j + 1)(2j - 1)(2j + 3)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6009", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n- We have α-α scattering\n- There are two resonant states: J=0 (ground state) and J=2 (excited state)\n- Both states have even parity\n- The resonances are at E₁ ≈ 95 keV and E₂ ≈ 3 MeV\n\n2) For part (a), the asymptotic wave function:\n- The partial wave expansion for r → ∞ is:\nψ(r,θ) = ∑ᵢ (2l+1)Pₗ(cosθ)[e^(iδₗ)sin(kr - lπ/2 + δₗ)]/kr\nwhere:\n- Pₗ are Legendre polynomials\n- δₗ are phase shifts\n- k is the wave number\n- l is the angular momentum quantum number\n\n3) For part (b), phase shift behavior:\n- Near J=0 resonance (l=0):\n  * δ₀ increases rapidly through π/2 at E ≈ 95 keV\n  * Other phase shifts remain small\n- Near J=2 resonance (l=2):\n  * δ₂ increases rapidly through π/2 at E ≈ 3 MeV\n  * Other phase shifts remain relatively unchanged\n\n4) For part (c), angular distribution effects:\n- At E ≈ 95 keV:\n  * s-wave (l=0) dominates\n  * Distribution is nearly isotropic\n  * Cross-section shows resonant peak\n- At E ≈ 3 MeV:\n  * d-wave (l=2) dominates\n  * Angular distribution shows characteristic P₂(cosθ) pattern\n  * Strong forward-backward peaking\n\nThe final answer can be summarized as:\n\n\\[\\boxed{\\begin{align*}\n\\psi(r,θ) &= \\sum_{l=0}^{\\infty} \\frac{(2l+1)}{kr}P_l(\\cos\\theta)e^{i\\delta_l}\\sin(kr-\\frac{l\\pi}{2}+\\delta_l) \\\\\n\\delta_l(E) &\\approx \\frac{\\Gamma/2}{E-E_R} \\text{ near resonances} \\\\\n\\frac{d\\sigma}{d\\Omega} &\\propto |f(\\theta)|^2 \\propto |\\sum_l (2l+1)P_l(\\cos\\theta)e^{i\\delta_l}\\sin\\delta_l|^2\n\\end{align*}}\\]", "final_answers": ["\\begin{align*}\n\\psi(r,θ) &= \\sum_{l=0}^{\\infty} \\frac{(2l+1)}{kr}P_l(\\cos\\theta)e^{i\\delta_l}\\sin(kr-\\frac{l\\pi}{2}+\\delta_l) \\\\\n\\delta_l(E) &\\approx \\frac{\\Gamma/2}{E-E_R} \\text{ near resonances} \\\\\n\\frac{d\\sigma}{d\\Omega} &\\propto |f(\\theta)|^2 \\propto |\\sum_l (2l+1)P_l(\\cos\\theta)e^{i\\delta_l}\\sin\\delta_l|^2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\psi(r,θ) &= \\sum_{l=0}^{\\infty} \\frac{(2l+1)}{kr}P_l(\\cos\\theta)e^{i\\delta_l}\\sin(kr-\\frac{l\\pi}{2}+\\delta_l) \\\\\n\\delta_l(E) &\\approx \\frac{\\Gamma/2}{E-E_R} \\text{ near resonances} \\\\\n\\frac{d\\sigma}{d\\Omega} &\\propto |f(\\theta)|^2 \\propto |\\sum_l (2l+1)P_l(\\cos\\theta)e^{i\\delta_l}\\sin\\delta_l|^2\n\\end{align*}", "expr2": "\\psi = \\sum_{l=0,2,4,\\ldots} (2l + 1) i^l \\exp[i(\\delta_l^C + \\delta_l^N)](kr)^{-1} \\sin\\left(kr - \\frac{l\\pi}{2} + \\delta_l^C + \\delta_l^N - \\gamma \\ln 2kr\\right) P_l(\\cos \\theta)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\psi(r,θ) &= \\sum_{l=0}^{\\infty} \\frac{(2l+1)}{kr}P_l(\\cos\\theta)e^{i\\delta_l}\\sin(kr-\\frac{l\\pi}{2}+\\delta_l) \\\\\n\\delta_l(E) &\\approx \\frac{\\Gamma/2}{E-E_R} \\text{ near resonances} \\\\\n\\frac{d\\sigma}{d\\Omega} &\\propto |f(\\theta)|^2 \\propto |\\sum_l (2l+1)P_l(\\cos\\theta)e^{i\\delta_l}\\sin\\delta_l|^2\n\\end{align*}", "expr2": "\\text{The phase shifts, particularly }\\delta_0^N \\text{ and }\\delta_2^N, \\text{ vary rapidly near 95 keV and 3 MeV, respectively.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\psi(r,θ) &= \\sum_{l=0}^{\\infty} \\frac{(2l+1)}{kr}P_l(\\cos\\theta)e^{i\\delta_l}\\sin(kr-\\frac{l\\pi}{2}+\\delta_l) \\\\\n\\delta_l(E) &\\approx \\frac{\\Gamma/2}{E-E_R} \\text{ near resonances} \\\\\n\\frac{d\\sigma}{d\\Omega} &\\propto |f(\\theta)|^2 \\propto |\\sum_l (2l+1)P_l(\\cos\\theta)e^{i\\delta_l}\\sin\\delta_l|^2\n\\end{align*}", "expr2": "\\text{The angular distribution is affected by the interference between nuclear and Coulomb scattering, specifically when }\\delta_l^N \\text{ deviates from } n\\pi."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5011", "solution": "Let me solve this step by step.\n\n1) The Hamiltonian of the system will be:\n   H = H₀ + H'\n   where H₀ = p²/2m + ½kx² (unperturbed harmonic oscillator)\n   and H' = qEx (perturbation from electric field)\n\n2) For second-order perturbation theory, the energy shift is given by:\n   ΔE = ⟨0|H'|0⟩ + ∑ₙ≠₀ |⟨n|H'|0⟩|²/(E₀-Eₙ)\n\n3) First term (first order):\n   ⟨0|qEx|0⟩ = qE⟨0|x|0⟩ = 0\n   (because the expectation value of x in any eigenstate of harmonic oscillator is 0)\n\n4) For second term, we need matrix elements:\n   ⟨n|x|0⟩ = √(ℏ/2mω)(√n δₙ,₁)\n   where ω = √(k/m)\n   Only n=1 state contributes due to selection rules.\n\n5) Energy difference:\n   E₀-E₁ = -ℏω\n\n6) Therefore:\n   ΔE = (qE)²|⟨1|x|0⟩|²/(-ℏω)\n   = -(qE)²(ℏ/2mω)/ℏω\n   = -(q²E²)/(2mω²)\n   = -(q²E²)/(2k)\n\nThe negative sign indicates that the energy decreases, as expected for a polarizable system in an electric field.\n\n\\[ \\boxed{\\Delta E = -\\frac{q^2E^2}{2k}} \\]", "final_answers": ["\\Delta E = -\\frac{q^2E^2}{2k}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\frac{q^2E^2}{2k}", "expr2": "-\\frac{q^2 E^2}{2m\\omega^2}"}, "preprocessed_expressions": {"expr1": "-E**2*q**2/(2*k)", "expr2": "-E**2*q**2/(2*m*omega**2)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1007", "solution": "Let's solve this step by step.\n\n1) First, let's recall that in quantum mechanics, the momentum-space wave function is related to the position-space wave function through a Fourier transform.\n\n2) The standard momentum-space Schrödinger equation is:\n   $\\frac{p^2}{2m}\\varphi(\\mathbf{p}, t) + V(i\\nabla_p)\\varphi(\\mathbf{p}, t) = i\\frac{\\partial}{\\partial t}\\varphi(\\mathbf{p}, t)$\n\n3) Comparing this with the given equation:\n   $(p^2/2m - a\\nabla_p^2)\\varphi(\\mathbf{p}, t) = i\\partial\\varphi(\\mathbf{p}, t)/\\partial t$\n\n4) We can identify that the potential term in momentum space is $-a\\nabla_p^2$\n\n5) To find $\\mathbf{F}(\\mathbf{r})$, we need to find $V(\\mathbf{r})$ first, since $\\mathbf{F}(\\mathbf{r}) = -\\nabla V(\\mathbf{r})$\n\n6) The term $-a\\nabla_p^2$ in momentum space corresponds to $-ar^2$ in position space.\n   This is because $\\nabla_p^2$ in momentum space transforms to $-r^2$ in position space.\n\n7) Therefore:\n   $V(\\mathbf{r}) = ar^2 = a(x^2 + y^2 + z^2)$\n\n8) Now we can find $\\mathbf{F}(\\mathbf{r})$:\n   $\\mathbf{F}(\\mathbf{r}) = -\\nabla V(\\mathbf{r})$\n   $\\mathbf{F}(\\mathbf{r}) = -\\nabla[a(x^2 + y^2 + z^2)]$\n   $\\mathbf{F}(\\mathbf{r}) = -2a(x\\hat{i} + y\\hat{j} + z\\hat{k})$\n   $\\mathbf{F}(\\mathbf{r}) = -2a\\mathbf{r}$\n\nTherefore, the force is proportional to the position vector and points toward the origin, characteristic of a harmonic oscillator.\n\n\\[\\boxed{\\mathbf{F}(\\mathbf{r}) = -2a\\mathbf{r}}\\]", "final_answers": ["\\mathbf{F}(\\mathbf{r}) = -2a\\mathbf{r}"], "equivalency_results": [{"input_expressions": {"expr1": "\\mathbf{F}(\\mathbf{r}) = -2a\\mathbf{r}", "expr2": "\\mathbf{F}(\\mathbf{r}) = -2a\\mathbf{r}"}, "preprocessed_expressions": {"expr1": "-2*a*mathbf*r", "expr2": "-2*a*mathbf*r"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3030", "solution": "Let's solve this step by step.\n\n(a) For j = 3/2, m = 3/2:\n- When j₁ = 1 and j₂ = 1/2, the maximum m value possible is m = 3/2\n- This can only be achieved with m₁ = 1 and m₂ = 1/2\n- For maximum j and m, the Clebsch-Gordan coefficient is 1\nTherefore: ⟨1,1;1/2,1/2|3/2,3/2⟩ = 1\n\n(b) For j = 3/2, m = 1/2:\n- This can be achieved in two ways:\n1. m₁ = 1, m₂ = -1/2\n2. m₁ = 0, m₂ = 1/2\n- Using standard CG coefficient tables:\n⟨1,1;1/2,-1/2|3/2,1/2⟩ = √(2/3)\n⟨1,0;1/2,1/2|3/2,1/2⟩ = √(1/3)\n\n(c) For I = 1 resonance:\n- Initial states: K⁻(I=1/2) + N(I=1/2)\n- Final states: Σ(I=1) + π(I=1)\n- Using CG coefficients and isospin conservation:\nK⁻p → Σ⁺π⁻ : 1\nK⁻p → Σ⁰π⁰ : 1\nK⁻p → Σ⁻π⁺ : 1\nK⁻n → Σ⁻π⁰ : √2\nK⁻n → Σ⁰π⁻ : 1\n\n(d) For I = 0 resonance:\n- Only K⁻p can form I = 0 state\n- Relative rates:\nK⁻p → Σ⁺π⁻ : 1\nK⁻p → Σ⁰π⁰ : 2\nK⁻p → Σ⁻π⁺ : 1\nK⁻n reactions: 0 (forbidden)\n\nThe final answer for relative rates can be expressed as:\n\n\\[\\boxed{\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}}\\]", "final_answers": ["\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}", "expr2": "|3/2, 3/2\\rangle = |1, 1\\rangle |1/2, 1/2\\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}", "expr2": "|3/2, 1/2\\rangle = \\sqrt{2/3} \\, |1, 0\\rangle \\, |1/2, 1/2\\rangle + \\sqrt{1/3} \\, |1, 1\\rangle \\, |1/2, -1/2\\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}", "expr2": "\\sigma(\\Sigma^- \\pi^+) : \\sigma(\\Sigma^+ \\pi^-) : \\sigma(\\Sigma^0 \\pi^0) = 1 : 1 : 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{ll} \nI=1: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:1:1 \\\\\n& K^-n(\\Sigma^-\\pi^0:\\Sigma^0\\pi^-) = 2:1 \\\\\nI=0: & K^-p(\\Sigma^+\\pi^-:\\Sigma^0\\pi^0:\\Sigma^-\\pi^+) = 1:2:1 \\\\\n& K^-n\\text{ reactions forbidden}\n\\end{array}", "expr2": "\\sigma(\\Sigma^- \\pi^+) : \\sigma(\\Sigma^+ \\pi^-) : \\sigma(\\Sigma^0 \\pi^0) = 1 : 1 : 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3008", "solution": "Let me solve this step by step.\n\n1) First, we know that we're looking for states where m = l - 1/2. This means we're dealing with the coupling of orbital angular momentum (l) and spin (s = 1/2).\n\n2) For a given l and s = 1/2, the total angular momentum j can take values:\n   * j = l + 1/2 or j = l - 1/2\n\n3) Since we want m = l - 1/2, we need to consider which j states can give this m value.\n\n4) For j = l + 1/2:\n   * m can range from -(l + 1/2) to (l + 1/2)\n   * l - 1/2 is within this range\n\n5) For j = l - 1/2:\n   * m can range from -(l - 1/2) to (l - 1/2)\n   * l - 1/2 is at the maximum value\n\n6) We can write |j, m⟩ as a linear combination of |l, ml; 1/2, ms⟩ states.\n   For m = l - 1/2, the possible combinations are:\n   * |l, l; 1/2, -1/2⟩\n   * |l, l-1; 1/2, +1/2⟩\n\n7) Using the raising operator J₊ on |j, m-1⟩ and comparing coefficients:\n   For j = l + 1/2:\n   |l + 1/2, l - 1/2⟩ = √(2l)/(2l+1) |l, l; 1/2, -1/2⟩ + 1/√(2l+1) |l, l-1; 1/2, +1/2⟩\n\n   For j = l - 1/2:\n   |l - 1/2, l - 1/2⟩ = -1/√(2l+1) |l, l; 1/2, -1/2⟩ + √(2l)/(2l+1) |l, l-1; 1/2, +1/2⟩\n\nThe final answer is:\n\n\\[\\boxed{|j=l+\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = \\sqrt{\\frac{2l}{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\frac{1}{\\sqrt{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle}\\]\n\n\\[\\boxed{|j=l-\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = -\\frac{1}{\\sqrt{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\sqrt{\\frac{2l}{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle}\\]", "final_answers": ["|j=l+\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = \\sqrt{\\frac{2l}{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\frac{1}{\\sqrt{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle", "|j=l-\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = -\\frac{1}{\\sqrt{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\sqrt{\\frac{2l}{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle"], "equivalency_results": [{"input_expressions": {"expr1": "|j=l+\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = \\sqrt{\\frac{2l}{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\frac{1}{\\sqrt{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle", "expr2": "\\left| l + \\frac{1}{2}, l - \\frac{1}{2} \\right\\rangle = \\sqrt{\\frac{2l}{2l + 1}} \\left| l, l - 1; \\frac{1}{2}, \\frac{1}{2} \\right\\rangle + \\sqrt{\\frac{1}{2l + 1}} \\left| l, l; \\frac{1}{2}, -\\frac{1}{2} \\right\\rangle"}, "preprocessed_expressions": {"expr1": "sqrt(2)*sqrt(l/(2*l + 1))", "expr2": "sqrt(2)*sqrt(l/(2*l + 1))"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "|j=l-\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = -\\frac{1}{\\sqrt{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\sqrt{\\frac{2l}{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle", "expr2": "\\left| l + \\frac{1}{2}, l - \\frac{1}{2} \\right\\rangle = \\sqrt{\\frac{2l}{2l + 1}} \\left| l, l - 1; \\frac{1}{2}, \\frac{1}{2} \\right\\rangle + \\sqrt{\\frac{1}{2l + 1}} \\left| l, l; \\frac{1}{2}, -\\frac{1}{2} \\right\\rangle"}, "preprocessed_expressions": {"expr1": "-1/sqrt(2*l + 1)", "expr2": "sqrt(2)*sqrt(l/(2*l + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "|j=l-\\frac{1}{2}, m=l-\\frac{1}{2}\\rangle = -\\frac{1}{\\sqrt{2l+1}}|l,l;\\frac{1}{2},-\\frac{1}{2}\\rangle + \\sqrt{\\frac{2l}{2l+1}}|l,l-1;\\frac{1}{2},+\\frac{1}{2}\\rangle", "expr2": "\\left| l - \\frac{1}{2}, l - \\frac{1}{2} \\right\\rangle = -\\sqrt{\\frac{1}{2l + 1}} \\left| l, l - 1; \\frac{1}{2}, \\frac{1}{2} \\right\\rangle + \\sqrt{\\frac{2l}{2l + 1}} \\left| l, l; \\frac{1}{2}, -\\frac{1}{2} \\right\\rangle"}, "preprocessed_expressions": {"expr1": "-1/sqrt(2*l + 1)", "expr2": "-sqrt(1/(2*l + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/1-1062", "solution": "Let's solve this step by step.\n\n1) First, let's understand what this Hamiltonian represents:\n   * The first term represents the on-site energy E₀\n   * The second term represents hopping between adjacent sites with strength W\n   * The system has periodic boundary conditions\n\n2) Due to periodic boundary conditions, we can use Bloch's theorem. Let's try a solution of the form:\n   * |ψ(k)⟩ = ∑ₙ eⁱᵏⁿ|n⟩\n   * where k is the wave vector\n\n3) For this to be an eigenstate, we need:\n   * H|ψ(k)⟩ = E(k)|ψ(k)⟩\n\n4) Let's apply H to our trial wavefunction:\n   * First term: E₀∑ₙ eⁱᵏⁿ|n⟩\n   * Second term: W∑ₙ eⁱᵏⁿ(|n+1⟩ + |n-1⟩)\n   * = W∑ₙ eⁱᵏⁿ(eⁱᵏ + e⁻ⁱᵏ)|n⟩\n   * = 2W cos(k)∑ₙ eⁱᵏⁿ|n⟩\n\n5) Therefore:\n   * E(k) = E₀ + 2W cos(k)\n\n6) Due to periodic boundary conditions:\n   * kₙ = (2πn)/N, where n = 0, ±1, ±2, ..., ±(N/2)\n   * This gives N distinct energy levels\n\n7) The corresponding eigenstates are:\n   * |ψₙ⟩ = (1/√N)∑ₘ exp(2πinm/N)|m⟩\n\nTherefore, the energy levels are:\n\n\\[\\boxed{E_n = E_0 + 2W \\cos\\left(\\frac{2\\pi n}{N}\\right), \\quad n = 0, \\pm1, \\pm2, ..., \\pm\\frac{N}{2}}\\]\n\nAnd the normalized eigenstates are:\n\n\\[\\boxed{|\\psi_n\\rangle = \\frac{1}{\\sqrt{N}}\\sum_{m=1}^N \\exp\\left(\\frac{2\\pi i n m}{N}\\right)|m\\rangle}\\]", "final_answers": ["E_n = E_0 + 2W \\cos\\left(\\frac{2\\pi n}{N}\\right), \\quad n = 0, \\pm1, \\pm2, ..., \\pm\\frac{N}{2}", "|\\psi_n\\rangle = \\frac{1}{\\sqrt{N}}\\sum_{m=1}^N \\exp\\left(\\frac{2\\pi i n m}{N}\\right)|m\\rangle"], "equivalency_results": [{"input_expressions": {"expr1": "E_n = E_0 + 2W \\cos\\left(\\frac{2\\pi n}{N}\\right), \\quad n = 0, \\pm1, \\pm2, ..., \\pm\\frac{N}{2}", "expr2": "E_j = E_0 + 2W \\cos \\left( \\frac{2\\pi}{N} j \\right)"}, "preprocessed_expressions": {"expr1": "0", "expr2": "E + 2*W*cos(2*j*pi/N)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "|\\psi_n\\rangle = \\frac{1}{\\sqrt{N}}\\sum_{m=1}^N \\exp\\left(\\frac{2\\pi i n m}{N}\\right)|m\\rangle", "expr2": "E_j = E_0 + 2W \\cos \\left( \\frac{2\\pi}{N} j \\right)"}, "preprocessed_expressions": {"expr1": "1/sqrt(N)", "expr2": "E + 2*W*cos(2*j*pi/N)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "|\\psi_n\\rangle = \\frac{1}{\\sqrt{N}}\\sum_{m=1}^N \\exp\\left(\\frac{2\\pi i n m}{N}\\right)|m\\rangle", "expr2": "|E_j\\rangle = \\frac{1}{\\sqrt{N}} \\sum_{n=1}^{N} e^{i(n-1)\\frac{2\\pi}{N} j} | n \\rangle"}, "preprocessed_expressions": {"expr1": "1/sqrt(N)", "expr2": "1/sqrt(N)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6053", "solution": "Let's solve this step by step.\n\n(a) First, let's find the wavelength of the photon:\n\n1) For a hydrogen-like atom, the energy levels are given by:\n   $E_n = -\\frac{Z^2\\alpha^2\\mu c^2}{2n^2}$\n   where μ is the reduced mass.\n\n2) Since the muon mass is much larger than the nuclear mass, μ ≈ mμ\n   mμ = 105.7 MeV/c²\n\n3) For the 3d → 2p transition:\n   ΔE = E_2 - E_3 = -\\frac{Z^2\\alpha^2m_μc^2}{2}(\\frac{1}{2^2} - \\frac{1}{3^2})\n\n4) Substituting values:\n   Z = 13\n   α = 1/137\n   ΔE = -(13)²(1/137)²(105.7 MeV)(\\frac{1}{4} - \\frac{1}{9})\n   ΔE ≈ 66.3 keV\n\n5) Using E = hc/λ:\n   λ = hc/ΔE = (12400 eV·Å)/(66.3×10³ eV) = 0.187 Å\n\n(b) For the mean life calculation:\n\n1) The mean life scales as (m/m')³(Z⁻⁴), where m is the electron mass and m' is the muon mass.\n\n2) τ = (1.6×10⁻⁸)×(0.511/105.7)³×(1/13⁴)\n\n3) τ = (1.6×10⁻⁸)×(1.14×10⁻⁷)×(3.5×10⁻⁵)\n   τ ≈ 6.4×10⁻¹⁹ seconds\n\nTherefore:\n\n\\[\\boxed{\\text{(a) } \\lambda = 0.187 \\text{ Å}}\\]\n\\[\\boxed{\\text{(b) } \\tau = 6.4 \\times 10^{-19} \\text{ seconds}}\\]", "final_answers": ["\\text{(a) } \\lambda = 0.187 \\text{ Å}", "\\text{(b) } \\tau = 6.4 \\times 10^{-19} \\text{ seconds}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\lambda = 0.187 \\text{ Å}", "expr2": "1.88 \\times 10^{-9} \\, \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\lambda = 0.187 \\text{ Å}", "expr2": "6.3 \\times 10^{-20} \\, \\text{s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } \\tau = 6.4 \\times 10^{-19} \\text{ seconds}", "expr2": "1.88 \\times 10^{-9} \\, \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } \\tau = 6.4 \\times 10^{-19} \\text{ seconds}", "expr2": "6.3 \\times 10^{-20} \\, \\text{s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5080", "solution": "Let me solve this step by step.\n\n1) This is a case of beta decay where a tritium atom transforms into a helium ion. The key is to understand that the electron wave function suddenly experiences a different nuclear charge.\n\n2) Before decay:\n   * Tritium has Z = 1\n   * Electron is in 1s state of hydrogen-like atom\n   * Initial wave function ψᵢ is 1s state for Z = 1\n\n3) After decay:\n   * Helium-3 has Z = 2\n   * Need to find overlap with possible final states\n   * Final states are eigenstates of He⁺ (Z = 2)\n\n4) The probability of finding the electron in any final state is given by the square of the overlap integral:\n   P = |⟨ψf|ψᵢ⟩|²\n\n5) For 1s → 1s transition (part a):\n   * Using known formula for sudden approximation between same n states but different Z:\n   * P₁ₛ = 4(Z₁Z₂)³/²/(Z₁ + Z₂)⁴\n   * Z₁ = 1 (Tritium), Z₂ = 2 (Helium)\n   * P₁ₛ = 4(1×2)³/²/(1 + 2)⁴\n   * P₁ₛ = 4×2√2/81 ≈ 0.7\n\n6) For 1s → 2p transition (part b):\n   * Due to selection rules and symmetry\n   * Transition from 1s to 2p is forbidden\n   * P₂ₚ = 0\n\nTherefore:\n(a) The probability of finding He⁺ in 1s state is approximately 0.7 or 70%\n(b) The probability of finding He⁺ in 2p state is 0\n\n\\[ \\boxed{ (a) \\approx 0.7 \\\\ (b) = 0 } \\]", "final_answers": ["(a) \\approx 0.7 \\\\ (b) = 0"], "equivalency_results": [{"input_expressions": {"expr1": "(a) \\approx 0.7 \\\\ (b) = 0", "expr2": "0.702"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0.702000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(a) \\approx 0.7 \\\\ (b) = 0", "expr2": "0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5074", "solution": "Let's solve this step by step.\n\n1) First, let's understand what happens:\n   * Initially, particle is in state |n⟩ with length l\n   * Box is suddenly expanded to 2l\n   * We need to find probability of finding particle in state with same energy En\n\n2) When the box is suddenly expanded:\n   * The wavefunction doesn't have time to change (sudden approximation)\n   * But it needs to be renormalized for the new length\n   * The original wavefunction becomes:\n   * ψn(x) = √(1/l) sin(nπx/l) for 0 ≤ x ≤ l\n   * ψn(x) = 0 for l ≤ x ≤ 2l\n\n3) In the new box (length 2l), the eigenfunctions are:\n   * φm(x) = √(1/2l) sin(mπx/2l)\n   * With energies Em = (1/2m)(mπℏ/2l)²\n\n4) To find probability, we need:\n   * Overlap integral between initial state and new eigenstates\n   * |⟨φm|ψn⟩|²\n\n5) The overlap integral is:\n   * ⟨φm|ψn⟩ = ∫₀²ˡ φm*(x)ψn(x)dx\n   * = ∫₀ˡ √(1/2l)√(1/l) sin(mπx/2l)sin(nπx/l)dx\n   * = 0 for m even\n   * = 4/π for m = n\n   * = 0 for other odd m\n\n6) Therefore:\n   * Only states with m = n have non-zero probability\n   * Probability = |4/π|² = 16/π²\n\nThe probability of finding the particle in a state with the same energy En is 16/π².\n\n\\[\\boxed{\\frac{16}{\\pi^2}}\\]", "final_answers": ["\\frac{16}{\\pi^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{16}{\\pi^2}", "expr2": "P = \\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "16/pi**2", "expr2": "1/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3001", "solution": "Let's solve this step by step.\n\n(a) To prove Tr(σᵢ) = 0:\n1) From σᵢσᵢ + σᵢσᵢ = 2I (when i=j), we get σᵢ² = I\n2) Since σᵢ is Hermitian, it has real eigenvalues. Let's call them λ₁ and λ₂\n3) From σᵢ² = I, we know λ₁² = λ₂² = 1\n4) Therefore λ₁ = -λ₂\n5) Since Tr(σᵢ) = λ₁ + λ₂, and λ₁ = -λ₂, we have Tr(σᵢ) = 0\n\n(b) For eigenvalues and determinant:\n1) From σᵢ² = I, we already showed eigenvalues must be ±1\n2) Since det(σᵢ) = λ₁λ₂ and λ₁ = -λ₂ = ±1\n3) Therefore det(σᵢ) = -1\n\n(c) For linear independence:\n1) Let's assume aI + b₁σ₁ + b₂σ₂ + b₃σ₃ = 0\n2) Take trace of both sides: 2a + 0 = 0 (using result from (a))\n3) Therefore a = 0\n4) Multiply both sides by σᵢ and take trace:\n   2bᵢ = 0 (using σᵢ² = I and Tr(σᵢσⱼ) = 0 for i≠j)\n5) Therefore bᵢ = 0 for all i\n6) This proves linear independence\n7) Since space of 2×2 matrices is 4-dimensional, these form a basis\n\n(d) For coefficients mᵢ:\n1) Multiply both sides by I and take trace:\n   Tr(M) = 2m₀ + 0\n2) Therefore m₀ = Tr(M)/2\n3) Multiply both sides by σⱼ and take trace:\n   Tr(Mσⱼ) = 0 + 2mⱼ\n4) Therefore mⱼ = Tr(Mσⱼ)/2\n\nThe final answer for the coefficients is:\n\n\\[\\boxed{m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)}\\]", "final_answers": ["m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)"], "equivalency_results": [{"input_expressions": {"expr1": "m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)", "expr2": "Tr(\\sigma_i) = 0"}, "preprocessed_expressions": {"expr1": "T*r(M*sigma)/2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)", "expr2": "\\pm 1"}, "preprocessed_expressions": {"expr1": "T*r(M*sigma)/2", "expr2": "pm"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)", "expr2": "-1"}, "preprocessed_expressions": {"expr1": "T*r(M*sigma)/2", "expr2": "-1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)", "expr2": "m_0 = \\frac{1}{2} \\text{Tr}(M)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "m_0 = \\frac{1}{2}Tr(M), \\quad m_i = \\frac{1}{2}Tr(M\\sigma_i)", "expr2": "m_j = \\frac{1}{2} \\text{Tr}(\\sigma_j M) \\quad \\text{for } j = 1, 2, 3"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5073", "solution": "Let's solve this step by step:\n\n1) First, let's identify the perturbation Hamiltonian:\n   * H' = eEx (where e is the electron charge)\n\n2) For a square well, the unperturbed wavefunctions are:\n   * ψₙ(x) = √(2/a) sin[nπ(x+a/2)/a]\n\n3) The transition amplitude from state 1 to state n is given by:\n   * cₙ(t) = -i/ℏ ∫₀ᵗ ⟨n|H'|1⟩ exp(iωₙ₁t')dt'\n   where ωₙ₁ = (Eₙ - E₁)/ℏ\n\n4) Calculate the matrix elements:\n   * ⟨n|H'|1⟩ = eE ∫₋ₐ/₂ᵃ/² x ψₙ*(x)ψ₁(x)dx\n   * For odd n: ⟨n|H'|1⟩ = 8eEa/(π²) × n/[n²-1]\n   * For even n: ⟨n|H'|1⟩ = 0\n\n5) For short times (τ ≪ ℏ/ΔE):\n   * exp(iωₙ₁t) ≈ 1\n   * cₙ(τ) ≈ -i/ℏ ⟨n|H'|1⟩τ\n\n6) The probability is |cₙ(τ)|²:\n   * Pₙ = |cₙ(τ)|² = (⟨n|H'|1⟩τ/ℏ)²\n\n7) For n = 2:\n   * P₂ = 0 (because matrix element is zero for even n)\n\n8) For n = 3:\n   * P₃ = (8eEaτ/ℏπ²)² × (3/8)² = 9(eEaτ/ℏπ²)²\n\nRequirements for validity:\n1) τ ≪ ℏ/(E₂-E₁) = ma²/8ℏπ²\n2) The total probability of transition should be small: P₃ + P₅ + ... ≪ 1\n3) eEa ≪ ℏ²/ma² (perturbation smaller than level spacing)\n\nThe final answer for the probabilities is:\n\n\\[ \\boxed{ P_2 = 0, \\quad P_3 = 9\\left(\\frac{eEa\\tau}{\\hbar\\pi^2}\\right)^2 } \\]", "final_answers": ["P_2 = 0, \\quad P_3 = 9\\left(\\frac{eEa\\tau}{\\hbar\\pi^2}\\right)^2"], "equivalency_results": [{"input_expressions": {"expr1": "P_2 = 0, \\quad P_3 = 9\\left(\\frac{eEa\\tau}{\\hbar\\pi^2}\\right)^2", "expr2": "P_2 \\approx \\left( \\frac{16}{9\\pi^2} \\frac{eEa}{\\hbar} \\tau \\right)^2"}, "preprocessed_expressions": {"expr1": "9*E**2*a**2*e**2*tau**2/(hbar**2*pi**4)", "expr2": "P*approx(16*E*a*e*tau/(9*hbar*pi**2))**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_2 = 0, \\quad P_3 = 9\\left(\\frac{eEa\\tau}{\\hbar\\pi^2}\\right)^2", "expr2": "P_3 = 0"}, "preprocessed_expressions": {"expr1": "9*E**2*a**2*e**2*tau**2/(hbar**2*pi**4)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1065", "solution": "Let's solve this step by step.\n\n(a) At each interpotential point, we have waves moving right (φ₊) and left (φ₋). Using the transmission and reflection coefficients:\n\nFor right-moving waves:\nφ₊ⁿ⁺¹ = Tφ₊ⁿ + Rφ₋ⁿ⁺¹\n\nFor left-moving waves:\nφ₋ⁿ = Tφ₋ⁿ⁺¹ + Rφ₊ⁿ\n\n(b) To eliminate φ₋, substitute the second equation into the first:\nφ₊ⁿ⁺¹ = Tφ₊ⁿ + R(Tφ₋ⁿ⁺¹ + Rφ₊ⁿ)\n= (T + R²)φ₊ⁿ + RTφ₋ⁿ⁺¹\n\nUsing T² + R² = 1 (conservation of probability), we get:\nφ₊ⁿ⁺¹ = e^(ikl)[cos(δₑ - δ₀)]φ₊ⁿ\n\n(c) The ratio of amplitudes at successive points is:\nφ₊ⁿ⁺¹/φ₊ⁿ = e^(ikl)[cos(δₑ - δ₀)]\n\n(d) For traveling waves to exist, the solution must be of the form:\nφ₊ⁿ = e^(iKnl)\n\nwhere K is the Bloch wave vector. This means:\ne^(iKl) = e^(ikl)[cos(δₑ - δ₀)]\n\nTherefore, the condition is:\n|cos(Kl)| = |cos(kl + δₑ - δ₀)| ≤ 1\n\n(e) This condition means that for certain values of k (and thus energy, since E ∝ k²), there are no real solutions for K. These represent forbidden energy bands where electrons cannot propagate. The allowed energies form bands separated by gaps, explaining why conduction in metals occurs only in specific energy bands.\n\nThe final answer for the condition on traveling waves is:\n\n\\[\\boxed{|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1}\\]", "final_answers": ["|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1"], "equivalency_results": [{"input_expressions": {"expr1": "|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1", "expr2": "\\begin{align*}\n\\phi^n_+ &= e^{i2kl} r'_n \\phi^n_- + t \\phi^{n-1}_+, \\\\\n\\phi^n_- &= r_n \\phi^n_+ + t \\phi^{n+1}_-.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|cos(kl + δₑ - δ₀)| \\leq 1\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1", "expr2": "\\phi^n_+ = \\frac{t(\\phi^{n-1}_+ + e^{i2kl} \\phi^{n+1}_+)}{1 + t^2 e^{i2kl} - rr' e^{i2kl}}."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|cos(kl + δₑ - δ₀)| \\leq 1\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1", "expr2": "c_n = \\frac{(1 + rr' e^{i2kl} - t^2 e^{i2kl}) \\pm \\sqrt{\\Delta}}{2r_n}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|cos(kl + δₑ - δ₀)| \\leq 1\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "|cos(Kl)| = |cos(kl + δₑ - δ₀)| \\leq 1", "expr2": "\\left| \\frac{\\cos (\\delta_e + \\delta_0 + kl)}{\\cos (\\delta_e - \\delta_0)} \\right| \\leq 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|cos(kl + δₑ - δ₀)| \\leq 1\n~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/3-3006", "solution": "Let me solve this step by step.\n\n(a) First, let's analyze the wave function structure:\n- The wave function has the form $(x + y + 2z)e^{-\\alpha r}$\n- In spherical coordinates:\n  * x = r sin θ cos φ\n  * y = r sin θ sin φ\n  * z = r cos θ\n- This is a p-orbital type wave function (linear in coordinates)\n- For p-orbitals, l = 1\n- Therefore, the total angular momentum is L = ℏ√(l(l+1)) = ℏ√2\n\n(b) For t-component:\n- Since the wave function is a superposition of l = 1 states\n- The expectation value of any component must be zero due to the real nature of the coefficients\n- Therefore, ⟨Lt⟩ = 0\n\n(c) For Lz = +ℏ probability:\n- We need to decompose the wave function into spherical harmonics\n- (x + y + 2z) ∝ (Y₁¹ - Y₁⁻¹)/√2 + iY₁⁰\n- The wave function has no component with m = +1\n- Therefore, P(Lz = +ℏ) = 0\n\n(d) For probability in solid angle:\n- |ψ|² = K²(x + y + 2z)²e⁻²αr\n- In spherical coordinates:\n- P(θ,φ)dΩ = K²r²(sin θ cos φ + sin θ sin φ + 2cos θ)²e⁻²αr dΩ\n- = K²r²(sin² θ + 4cos² θ + 2sin θ cos θ(cos φ + sin φ))e⁻²αr dΩ\n\nThe final answers are:\n\n\\[ \\boxed{L = \\hbar\\sqrt{2}} \\]\n\\[ \\boxed{\\langle L_t \\rangle = 0} \\]\n\\[ \\boxed{P(L_z = +\\hbar) = 0} \\]\n\\[ \\boxed{P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega} \\]", "final_answers": ["L = \\hbar\\sqrt{2}", "\\langle L_t \\rangle = 0", "P(L_z = +\\hbar) = 0", "P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega"], "equivalency_results": [{"input_expressions": {"expr1": "L = \\hbar\\sqrt{2}", "expr2": "\\sqrt{2} \\hbar"}, "preprocessed_expressions": {"expr1": "sqrt(2)*hbar", "expr2": "sqrt(2)*hbar"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\langle L_t \\rangle = 0", "expr2": "\\sqrt{2} \\hbar"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*hbar"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\langle L_t \\rangle = 0", "expr2": "0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "P(L_z = +\\hbar) = 0", "expr2": "\\sqrt{2} \\hbar"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*hbar"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(L_z = +\\hbar) = 0", "expr2": "0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega", "expr2": "\\sqrt{2} \\hbar"}, "preprocessed_expressions": {"expr1": "K**2*dOmega*r**2*s*theta*(2*c*i*n*o*s*theta(phi*s*(c*o + i*n)) + 4*c*o*s + i*n**2)/e**(2*alpha*r)", "expr2": "sqrt(2)*hbar"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega", "expr2": "0"}, "preprocessed_expressions": {"expr1": "K**2*dOmega*r**2*s*theta*(2*c*i*n*o*s*theta(phi*s*(c*o + i*n)) + 4*c*o*s + i*n**2)/e**(2*alpha*r)", "expr2": "0"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega", "expr2": "\\frac{1}{6}"}, "preprocessed_expressions": {"expr1": "K**2*dOmega*r**2*s*theta*(2*c*i*n*o*s*theta(phi*s*(c*o + i*n)) + 4*c*o*s + i*n**2)/e**(2*alpha*r)", "expr2": "1/6"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(\\theta,\\phi)d\\Omega = K^2r^2(sin^2 \\theta + 4cos^2 \\theta + 2sin \\theta cos \\theta(cos \\phi + sin \\phi))e^{-2\\alpha r} d\\Omega", "expr2": "\\frac{1}{8\\pi} \\left[ \\sin \\theta (\\sin \\phi + \\cos \\phi) + 2 \\cos \\theta \\right]^2 \\mathrm{d}\\Omega"}, "preprocessed_expressions": {"expr1": "K**2*dOmega*r**2*s*theta*(2*c*i*n*o*s*theta(phi*s*(c*o + i*n)) + 4*c*o*s + i*n**2)/e**(2*alpha*r)", "expr2": "Omega*d*mathrm*(sin(theta(sqrt(2)*sin(phi + pi/4))) + 2*cos(theta))**2/(8*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.75}
{"id": "quantum/1-1006", "solution": "Let's solve this step by step:\n\n1) First, let's understand what happens in each case:\n\na) With only slit A open:\n- This creates a single-slit diffraction pattern\n- The pattern will be a central maximum with decreasing intensity on either side\n- Graph would show a bell-shaped curve centered behind slit A\n\nb) With only slit B open:\n- Similar to case (a) but centered behind slit B\n- Same bell-shaped diffraction pattern\n\nc) Both slits open (no spin selection):\n- Creates the famous double-slit interference pattern\n- Shows alternating maxima and minima\n- Pattern shows interference fringes due to wave nature of electrons\n\nd) With spin selection ($s_z = ±ħ/2$):\n- Since these are orthogonal spin states\n- No interference occurs between electrons from different slits\n- Result is sum of two single-slit patterns\n- Graph shows two overlapping bell curves\n\ne) Case with $s_z = ħ/2$ and $s_z = R/2$:\n- R/2 is not a valid spin state\n- This case is physically impossible\n\n2) Effect of low beam intensity:\n\n- Even with one electron at a time:\n- Pattern builds up gradually\n- Each electron appears as a single point\n- Over time, same interference pattern emerges\n- Demonstrates wave-particle duality\n- Shows quantum behavior is inherent to individual particles\n\nThe final answer regarding the effect of low beam intensity can be expressed as:\n\n\\[\\boxed{\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}}\\]\n\nThis is one of the most profound demonstrations of quantum mechanics, showing that each electron interferes with itself, and the wave-like behavior is not due to interactions between multiple electrons.", "final_answers": ["\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}", "expr2": "I_1 = I_A(x)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}", "expr2": "I_2 = I_B(x)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}", "expr2": "I_c = I_{12}(x) = I_1 + I_2 + \\text{interference term} \\neq I_1 + I_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}", "expr2": "I_d = I_1 + I_2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{The interference pattern remains unchanged but builds up gradually, demonstrating that quantum interference is a property of individual particles}", "expr2": "I_e = \\frac{I_c}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5010", "solution": "Let's solve this step by step.\n\n(a) For a particle in a 1D box of length a, the normalized wave functions are:\nψₙ(x) = √(2/a) sin(nπx/a)\n\nFor a = 1 Å = 10⁻¹⁰ m, the first 4 wave functions are:\nn = 1: ψ₁(x) = √2 sin(πx/a)\nn = 2: ψ₂(x) = √2 sin(2πx/a)\nn = 3: ψ₃(x) = √2 sin(3πx/a)\nn = 4: ψ₄(x) = √2 sin(4πx/a)\n\nThe wave functions will look like half, one, one and a half, and two complete sine waves respectively.\n\n(b) Energy levels are given by:\nEₙ = (n²h²)/(8ma²)\n\nFor an electron (m = 9.11 × 10⁻³¹ kg):\nE₁ = 37.6 eV\nE₂ = 150.4 eV\nE₃ = 338.4 eV\nE₄ = 601.6 eV\n\n(c) For this time-dependent perturbation problem:\n1) The transition probability is given by:\nP(1→n) = |Vₙ₁|²[sin²(ωₙ₁τ/2)]/(ℏωₙ₁)²\n\nwhere:\n- Vₙ₁ is the matrix element ⟨n|V|1⟩\n- ωₙ₁ = (Eₙ - E₁)/ℏ\n- τ = 5 × 10⁻¹⁸ s\n\n2) For a narrow potential well at a/2:\nVₙ₁ ≈ -V₀(10⁻¹² cm/a)ψₙ(a/2)ψ₁(a/2)\n\n3) At x = a/2:\nψ₁(a/2) = √2 sin(π/2) = √2\nψ₂(a/2) = √2 sin(π) = 0\nψ₃(a/2) = √2 sin(3π/2) = -√2\nψ₄(a/2) = √2 sin(2π) = 0\n\n4) Therefore:\nP(1→2) = 0 (due to zero matrix element)\nP(1→3) ≈ 0.15\nP(1→4) = 0 (due to zero matrix element)\n\n\\[\\boxed{P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0}\\]\n\nThe probability is highest for n=3 because:\n1) The matrix element is non-zero\n2) The wave functions have significant overlap at x=a/2\n3) The energy difference is not too large to make the denominator overwhelming", "final_answers": ["P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0"], "equivalency_results": [{"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "\\psi_1(x) = \\sqrt{\\frac{2}{a}} \\sin \\frac{\\pi x}{a}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*sqrt(1/a)*sin(pi*x/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "\\psi_2(x) = \\sqrt{\\frac{2}{a}} \\sin \\frac{2\\pi x}{a}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*sqrt(1/a)*sin(2*pi*x/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "\\psi_3(x) = \\sqrt{\\frac{2}{a}} \\sin \\frac{3\\pi x}{a}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*sqrt(1/a)*sin(3*pi*x/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "\\psi_4(x) = \\sqrt{\\frac{2}{a}} \\sin \\frac{4\\pi x}{a}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sqrt(2)*sqrt(1/a)*sin(4*pi*x/a)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "E_1 = 37.4 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "E_2 = 149.6 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "E_3 = 336.6 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "E_4 = 598.4 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(1→2) = 0, P(1→3) ≈ 0.15, P(1→4) = 0", "expr2": "P_2 = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1001", "solution": "Let's solve this step by step for each case.\n\n(a) Zero-point oscillation amplitude:\n\n1) For a harmonic oscillator, the zero-point amplitude is given by:\n   $x_0 = \\sqrt{\\frac{\\hbar}{m\\omega}}$\n\n2) For a pendulum, $\\omega = \\sqrt{\\frac{g}{l}}$\n\n3) Substituting values:\n   * $\\hbar = 1.055 × 10^{-34} \\text{ J⋅s}$\n   * $m = 1 \\text{ kg}$\n   * $l = 1 \\text{ m}$\n   * $g = 9.81 \\text{ m/s}^2$\n\n4) $x_0 = \\sqrt{\\frac{1.055 × 10^{-34}}{1 × \\sqrt{9.81}}} ≈ 10^{-17} \\text{ m}$\n\n(b) Tunneling probability:\n\n1) The WKB tunneling probability is approximately:\n   $P ≈ \\exp(-\\frac{2}{\\hbar}\\sqrt{2m(V-E)}w)$\n\n2) Here:\n   * $E = \\frac{1}{2}mv^2 = \\frac{1}{2}(0.005)(0.1)^2 = 2.5 × 10^{-5} \\text{ J}$\n   * $V = mgH = (0.005)(9.81)(0.05) = 2.45 × 10^{-3} \\text{ J}$\n   * $w = 0.01 \\text{ m}$\n\n3) Substituting:\n   $P ≈ \\exp(-\\frac{2}{1.055 × 10^{-34}}\\sqrt{2(0.005)(2.45 × 10^{-3} - 2.5 × 10^{-5})}(0.01))$\n   $P ≈ \\exp(-10^{15})$\n\n(c) Diffraction angle:\n\n1) Using de Broglie wavelength: $λ = \\frac{h}{mv}$\n\n2) For a tennis ball:\n   $λ = \\frac{6.626 × 10^{-34}}{0.1 × 0.5} = 1.325 × 10^{-32} \\text{ m}$\n\n3) Diffraction angle: $θ ≈ \\frac{λ}{d} = \\frac{1.325 × 10^{-32}}{1} = 1.325 × 10^{-32} \\text{ rad}$\n\nThe final answers showing quantum effects are negligible:\n\n\\[\\boxed{\n\\begin{align*}\nx_0 &≈ 10^{-17} \\text{ m (amplitude)} \\\\\nP &≈ \\exp(-10^{15}) \\text{ (tunneling)} \\\\\nθ &≈ 10^{-32} \\text{ rad (diffraction)}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nx_0 &≈ 10^{-17} \\text{ m (amplitude)} \\\\\nP &≈ \\exp(-10^{15}) \\text{ (tunneling)} \\\\\nθ &≈ 10^{-32} \\text{ rad (diffraction)}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nx_0 &≈ 10^{-17} \\text{ m (amplitude)} \\\\\nP &≈ \\exp(-10^{15}) \\text{ (tunneling)} \\\\\nθ &≈ 10^{-32} \\text{ rad (diffraction)}\n\\end{align*}", "expr2": "A = 0.41 \\times 10^{-17} \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nx_0 &≈ 10^{-17} \\text{ m (amplitude)} \\\\\nP &≈ \\exp(-10^{15}) \\text{ (tunneling)} \\\\\nθ &≈ 10^{-32} \\text{ rad (diffraction)}\n\\end{align*}", "expr2": "T \\approx 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\nx_0 &≈ 10^{-17} \\text{ m (amplitude)} \\\\\nP &≈ \\exp(-10^{15}) \\text{ (tunneling)} \\\\\nθ &≈ 10^{-32} \\text{ rad (diffraction)}\n\\end{align*}", "expr2": "\\theta_1 \\approx 1.3 \\times 10^{-32} \\, \\text{rad}, \\quad \\theta_2 \\approx 9 \\times 10^{-33} \\, \\text{rad}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6039", "solution": "Let's solve this step by step:\n\n(a) Electric-dipole selection rules:\n- Change in angular momentum quantum number: Δl = ±1\n- Change in magnetic quantum number: Δm = 0, ±1\n- No change in spin quantum number: Δs = 0\n\n(b) Interpretation:\n1. The photon carries angular momentum of 1ℏ (spin-1 particle)\n2. Conservation of angular momentum requires Δl = ±1\n3. Photon helicity (±1) corresponds to Δm = ±1\n4. Parity changes by (-1) due to odd parity of electric dipole operator\n5. Spin selection rule reflects spin conservation in EM interactions\n\n(c) Semi-classical estimate:\n1. For circular orbit in 2p state:\n   - Radius r = 4a (2nd Bohr orbit)\n   - Angular velocity w\n   - Linear velocity v = wr\n   - Centripetal acceleration: a = w²r = v²/r\n\n2. Using the power formula:\n   P = (2/3)(e²/c³)(w⁴r²)\n\n3. Energy of state:\n   E = ½mv² = ½m(wr)² = FL/2\n\n4. Lifetime τ:\n   τ = E/P = (3mc³/4e²w²)\n\n(d) Width calculation:\n1. Width Γ = ℏ/τ\n2. Converting to eV:\n   Γ = (4e²w²ℏ/3mc³)\n3. Substituting values:\n   w = FL/(2mℏ) for n=2 state\n   \nFinal answer for width:\n\n\\[\\boxed{\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}}\\]", "final_answers": ["\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}", "expr2": "\\Delta l = \\pm 1, \\quad \\Delta m = \\pm 1, 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}", "expr2": "\\Delta l = f l, \\quad \\Delta m = \\pm 1, 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}", "expr2": "T = 2.2 \\times 10^{-8} \\, \\text{s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Gamma = \\frac{4e^2}{3mc^3}\\left(\\frac{F_L}{2m\\hbar}\\right)^2\\hbar \\approx 10^{-7} \\text{ eV}", "expr2": "\\Gamma = 3.0 \\times 10^{-8} \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1008", "solution": "Let me solve this step by step.\n\n1) First, let's understand what degeneracy means:\n   - If a state is degenerate, there exist two or more linearly independent wavefunctions with the same energy E.\n\n2) Let's proceed by contradiction:\n   - Assume we have two different solutions ψ₁(x) and ψ₂(x) with the same energy E\n   - Both solutions satisfy the Schrödinger equation:\n   - (-ℏ²/2m)d²ψᵢ/dx² + V(x)ψᵢ = Eψᵢ where i = 1,2\n\n3) The Wronskian W(x) of these solutions is:\n   W(x) = ψ₁(x)ψ₂'(x) - ψ₁'(x)ψ₂(x)\n\n4) A key property of the Wronskian for the Schrödinger equation:\n   - dW/dx = 0 (the Wronskian is constant)\n   - This can be proven by direct differentiation and using the Schrödinger equation\n\n5) Now, let's examine the Wronskian at x → ±∞:\n   - Given that ψ₁(x) → 0 and ψ₂(x) → 0 as x → ±∞\n   - The derivatives ψ₁'(x) → 0 and ψ₂'(x) → 0 as x → ±∞ (for bound states)\n   - Therefore, W(x) → 0 as x → ±∞\n\n6) Since the Wronskian is constant (from step 4) and approaches zero at infinity:\n   - W(x) must be zero everywhere\n\n7) If W(x) = 0 everywhere, then ψ₁ and ψ₂ are linearly dependent:\n   - This means ψ₂ = cψ₁ for some constant c\n   - This contradicts our assumption that they were different solutions\n\n8) Therefore:\n   - Our initial assumption of degeneracy must be wrong\n   - The solution must be nondegenerate\n\n9) For a nondegenerate state:\n   - If ψ is a solution, then ψ* is also a solution (complex conjugate)\n   - They must be proportional: ψ = eiθψ* for some real θ\n   - This means ψ can be made real by absorbing the phase factor\n\nThe final answer can be stated as:\n\n\\[\\boxed{\\text{The solution } \\psi(x) \\text{ must be nondegenerate and can be chosen to be real}}\\]\n\nThis proof shows that bound states (states where ψ → 0 as x → ±∞) in one-dimensional quantum mechanics are always nondegenerate and can be chosen to be real-valued functions, up to an overall phase factor.", "final_answers": ["\\text{The solution } \\psi(x) \\text{ must be nondegenerate and can be chosen to be real}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{The solution } \\psi(x) \\text{ must be nondegenerate and can be chosen to be real}", "expr2": "\\text{The solution is real and nondegenerate apart from a possible overall phase factor.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5021", "solution": "Let's solve this step by step.\n\n(a) First, let's find the k-values for antiperiodic condition:\n\n1) For antiperiodic condition: φ(x+a) = -φ(x)\n   * e^{ik(x+a)} = -e^{ikx}\n   * e^{ika} = -1\n\n2) This means:\n   * ka = (2n+1)π, where n is an integer\n   * k = (2n+1)π/a\n\n3) For free particle (V₀ = 0), energy is:\n   * E = ℏ²k²/2m\n   * E = ℏ²(2n+1)²π²/2ma²\n\nTherefore, the energy spectrum for θ = π when V₀ = 0 is:\nE_n = ℏ²(2n+1)²π²/2ma², where n = 0, ±1, ±2, ...\n\n(b) For small V₀, let's use first-order perturbation theory:\n\n1) The unperturbed states are plane waves:\n   * ψₙ(x) = e^{ikₙx}, where kₙ = (2n+1)π/a\n\n2) The lowest two states correspond to n = 0 and n = -1:\n   * k₀ = π/a\n   * k₋₁ = -π/a\n\n3) First-order correction is:\n   * ΔE = ⟨ψ|V(x)|ψ⟩\n   * V(x) = V₀cos(2πx/a)\n\n4) Calculate matrix element:\n   * ΔE = V₀∫₀ᵃ e^{-ikx}cos(2πx/a)e^{ikx}dx/a\n   * = V₀∫₀ᵃ cos(2πx/a)dx/a\n   * = 0\n\n5) Therefore, first-order correction is zero.\n\nThe lowest two energy eigenvalues are:\nE₁ = ℏ²π²/2ma²\nE₂ = ℏ²π²/2ma²\n\n\\[\\boxed{E_{1,2} = \\frac{\\hbar^2\\pi^2}{2ma^2}}\\]\n\nNote: These states are degenerate at first order. To lift the degeneracy, we would need to go to second-order perturbation theory.", "final_answers": ["E_{1,2} = \\frac{\\hbar^2\\pi^2}{2ma^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{1,2} = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "k = \\frac{(2n+1)\\pi}{a}, \\, (n = 0, \\pm1, \\pm2, \\ldots)"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{1,2} = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "E_n = \\frac{\\hbar^2 \\pi^2}{2ma^2} (2n + 1)^2, \\quad (n = 0, \\pm 1, \\pm 2, \\ldots)"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "0"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5019", "solution": "Let me solve this step by step.\n\n(a) For a symmetric top:\n\n1) The energy levels are characterized by three quantum numbers:\n   * J (total angular momentum)\n   * K (projection of J on the symmetry axis)\n   * M (projection of J on space-fixed z-axis)\n\n2) The energy formula for a symmetric top is:\n   * E(J,K) = BJ(J+1) + (C-B)K²\n   where B = ℏ²/2I and C = ℏ²/2I₃\n\n3) Constraints on quantum numbers:\n   * J ≥ 0\n   * -J ≤ K ≤ J\n   * -J ≤ M ≤ J\n\n(b) For the asymmetric top:\n\n1) For J = 0:\n   * Only one state exists\n   * E₀ = 0 (ground state)\n\n2) For J = 1:\n   * Without asymmetry, states would be triply degenerate\n   * With asymmetry, need to solve secular equation\n\n3) The energy matrix for J = 1 in the |J,K⟩ basis:\n   * Diagonal elements: B + (C-B)K²\n   * Off-diagonal elements: (A/4)(J±K)(J∓K+1)\n\n4) For J = 1, the energies are:\n   * E₁ = B\n   * E₂ = B ± A/2\n\nTherefore, the final answer including both parts is:\n\n\\[\\boxed{\n\\begin{align*}\n&\\text{(a) } E(J,K) = BJ(J+1) + (C-B)K² \\\\\n&\\text{(b) } J=0: E_0 = 0 \\\\\n&\\quad\\quad J=1: E = B, B \\pm A/2\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&\\text{(a) } E(J,K) = BJ(J+1) + (C-B)K² \\\\\n&\\text{(b) } J=0: E_0 = 0 \\\\\n&\\quad\\quad J=1: E = B, B \\pm A/2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&\\text{(a) } E(J,K) = BJ(J+1) + (C-B)K² \\\\\n&\\text{(b) } J=0: E_0 = 0 \\\\\n&\\quad\\quad J=1: E = B, B \\pm A/2\n\\end{align*}", "expr2": "E = \\frac{\\hbar^2}{2I} J(J + 1) + \\frac{\\hbar^2}{2} \\left( \\frac{1}{I_3} - \\frac{1}{I} \\right) m^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6001", "solution": "Let me solve this step by step.\n\n1) For a hard sphere potential, we have:\n   V(r) = ∞ for r ≤ R\n   V(r) = 0 for r > R\n\n2) Due to the infinite potential barrier at r = R, the wavefunction must vanish at r = R:\n   ψ(R) = 0\n\n3) For s-wave scattering (l = 0), the radial wavefunction outside the sphere (r > R) is:\n   ψ(r) = sin(kr + δ₀)/r\n   where k is the wave number and δ₀ is the s-wave phase shift\n\n4) The boundary condition at r = R gives:\n   sin(kR + δ₀) = 0\n\n5) This means:\n   kR + δ₀ = nπ\n   where n is an integer\n\n6) For low energy scattering, n = 1, so:\n   δ₀ = π - kR\n\n7) The s-wave cross section is related to the phase shift by:\n   σ = 4π/k² * sin²(δ₀)\n\n8) Substituting the phase shift:\n   σ = 4π/k² * sin²(π - kR)\n   σ = 4π/k² * sin²(kR)\n\n9) For low energies (kR << 1):\n   sin²(kR) ≈ k²R²\n\n10) Therefore, the final result for the s-wave cross section is:\n    σ = 4πR²\n\nThe cross section is independent of energy in the low-energy limit and equals four times the geometric cross section.\n\n\\[ \\boxed{\\sigma = 4\\pi R^2} \\]", "final_answers": ["\\sigma = 4\\pi R^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma = 4\\pi R^2", "expr2": "\\sigma_t = \\frac{4\\pi}{k^2} \\sin^2 kR"}, "preprocessed_expressions": {"expr1": "4*R**2*pi", "expr2": "4*pi*sin(R*k)**2/k**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1030", "solution": "Let me solve this step by step.\n\n1) First, let's recall what $\\sqrt{\\langle (x - \\langle x \\rangle)^2 \\rangle}$ represents:\n   * This is the standard deviation of position, often denoted as Δx\n   * For a harmonic oscillator, $\\langle x \\rangle = 0$\n   * So, $\\Delta x = 10^{-10}$ m\n\n2) For a quantum harmonic oscillator in the ground state (n=0):\n   * $\\Delta x = \\sqrt{\\frac{\\hbar}{2m\\omega}}$\n   * where m is the mass of electron and ω is the angular frequency\n\n3) Using the given value:\n   * $10^{-10} = \\sqrt{\\frac{\\hbar}{2m\\omega}}$\n   * $10^{-20} = \\frac{\\hbar}{2m\\omega}$\n   * $\\omega = \\frac{\\hbar}{2m(10^{-20})}$\n\n4) Let's substitute the values:\n   * $\\hbar = 1.055 \\times 10^{-34}$ J⋅s\n   * $m_e = 9.109 \\times 10^{-31}$ kg\n   * $\\omega = \\frac{1.055 \\times 10^{-34}}{2(9.109 \\times 10^{-31})(10^{-20})}$\n   * $\\omega = 5.79 \\times 10^{15}$ rad/s\n\n5) For a quantum harmonic oscillator:\n   * Energy levels are given by $E_n = \\hbar\\omega(n + \\frac{1}{2})$\n   * Energy difference between ground state and first excited state is:\n   * $\\Delta E = E_1 - E_0 = \\hbar\\omega$\n\n6) Calculate ΔE:\n   * $\\Delta E = (1.055 \\times 10^{-34})(5.79 \\times 10^{15})$\n   * $\\Delta E = 6.11 \\times 10^{-19}$ J\n\n7) Convert to eV:\n   * 1 eV = 1.602 × 10^-19 J\n   * $\\Delta E = \\frac{6.11 \\times 10^{-19}}{1.602 \\times 10^{-19}}$ eV\n   * $\\Delta E = 3.81$ eV\n\nTherefore, the energy required to excite the electron from ground state to first excited state is:\n\n\\[\\boxed{3.81 \\text{ eV}}\\]", "final_answers": ["3.81 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "3.81 \\text{ eV}", "expr2": "3.8 \\text{ eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5026", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're calculating:\n   * We need to find ΔE = ⟨ψ|ΔV|ψ⟩\n   * where ΔV is the difference between the potential of a spherical shell and a point charge\n   * ψ is the ground state wavefunction of hydrogen\n\n2) For r > R, the potential of a spherical shell is identical to that of a point charge:\n   * V(r) = -e²/r\n\n3) For r < R, the potential of a spherical shell is constant:\n   * V(r) = -e²/R\n\n4) Therefore, ΔV(r) = V_shell(r) - V_point(r):\n   * For r > R: ΔV(r) = 0\n   * For r < R: ΔV(r) = -e²/R + e²/r\n\n5) The ground state wavefunction is:\n   * ψ₁₀₀(r) = (1/√(πa₀³))e^(-r/a₀)\n\n6) The perturbation is:\n   * ΔE = ∫ψ*ΔV(r)ψ dV\n   * Only need to integrate from 0 to R since ΔV=0 beyond R\n\n7) Setting up the integral:\n   * ΔE = ∫₀ᴿ (1/πa₀³)e^(-2r/a₀) (-e²/R + e²/r) 4πr² dr\n\n8) Given R ≪ a₀, we can approximate e^(-2r/a₀) ≈ 1 in the range [0,R]\n\n9) Evaluating:\n   * ΔE = (4e²/a₀³)[-r³/3R + r²/2]₀ᴿ\n   * ΔE = (4e²/a₀³)([-R³/3R + R²/2])\n   * ΔE = (2e²R²/3a₀³)\n\nThe final answer is:\n\n\\[ \\boxed{\\Delta E = \\frac{2e^2R^2}{3a_0^3}} \\]\n\nPhysical interpretation:\nThe positive sign makes physical sense because:\n1) When the proton is a finite sphere rather than a point, the average distance between the electron and proton charge increases\n2) This increased average separation means less binding (higher energy)\n3) Therefore, the energy correction should be positive, making the system less bound\n\nThis matches our result, confirming the physical reasonableness of our calculation.", "final_answers": ["\\Delta E = \\frac{2e^2R^2}{3a_0^3}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = \\frac{2e^2R^2}{3a_0^3}", "expr2": "\\Delta E = \\frac{2e^2 R^2}{3a_0^3}"}, "preprocessed_expressions": {"expr1": "2*R**2*e**2/(3*a**3)", "expr2": "2*R**2*e**2/(3*a**3)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1064", "solution": "Let's solve this step by step.\n\n(a) For boundary conditions:\n\n1) Due to the periodic potential, Bloch's theorem applies. The wavefunction must have the form:\n   ψ(x) = e^(ikx)u(x) where u(x) is periodic with period a+b\n\n2) The wavefunction must be continuous everywhere (even at potential jumps)\n\n3) The first derivative of the wavefunction must be continuous except at the potential jumps, where it has a discontinuity proportional to V₀\n\n(b) For the transcendental equation:\n\n1) In regions where V=0, the wavefunction has form:\n   ψ(x) = Ae^(ikx) + Be^(-ikx)\n\n2) In narrow regions where V=V₀, the wavefunction decays exponentially:\n   ψ(x) = Ce^(-κx) + De^(κx) where κ = √(2m(V₀-E)/ℏ²)\n\n3) Applying continuity conditions and Bloch's theorem:\n   cos(ka) = cos(k₀a) + (mV₀b/ℏ²k₀)sin(k₀a)\n\n4) For E=E₀, k=k₀, giving:\n   1 = cos(k₀a) + (mV₀b/ℏ²k₀)sin(k₀a)\n\n(c) The wavefunction for 0 ≤ x ≤ a:\nψ(x) = cos(k₀x) + (mV₀b/ℏ²k₀)sin(k₀x)\n\nBetween x=a and x=a+b:\nThe wavefunction decays exponentially due to the high potential barrier.\n\n(d) For energy gaps:\n\n1) The general dispersion relation is:\n   cos(ka) = cos(k'a) + (mV₀b/ℏ²k')sin(k'a)\n   where k' = √(2mE/ℏ²)\n\n2) The first gap begins when ka = π, or when:\n   -1 = cos(k'a) + (mV₀b/ℏ²k')sin(k'a)\n\n3) The energy at which this occurs is:\n   E = ℏ²π²/2ma²\n\nThe final answer for the energy at which the first gap begins is:\n\n\\[\\boxed{E = \\frac{\\hbar^2\\pi^2}{2ma^2}}\\]", "final_answers": ["E = \\frac{\\hbar^2\\pi^2}{2ma^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "\\psi'(a^+) - \\psi'(a^-) = 2\\Omega \\psi(a), \\quad \\psi(a^+) - \\psi(a^-) = 0"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "\\cos ka + \\frac{\\Omega}{k} \\sin ka = \\cos Ka"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "cos(K*a)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "\\psi(x) = (e^{iK a} - e^{-ik_0 a}) \\frac{\\sin k_0 x}{\\sin k_0 a} + e^{-ik_0 x}"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "(e**(i*(K*a + a*k + k*x))*sin(k*x) + e**(a*i*k)*sin(a*k) - e**(i*k*x)*sin(k*x))/(e**(i*k*(a + x))*sin(a*k))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "\\exp(\\pm k_1 x), \\quad \\text{where } k_1 = \\sqrt{\\frac{2m(V_0 - E_0)}{\\hbar^2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{2ma^2}", "expr2": "E = \\frac{\\pi^2 \\hbar^2}{2ma^2}"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*a**2*m)", "expr2": "hbar**2*pi**2/(2*a**2*m)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5072", "solution": "Let's solve this step by step:\n\n1) First, let's understand what we're dealing with:\n   * Initial state: electron spin in z direction\n   * Initial field: only Hz\n   * Hx increases linearly from 0 to Hx over time T\n   * Hx << Hz\n\n2) The Hamiltonian will be:\n   * H = -μ·B = -μB(Hx(t)σx + Hzσz)\n   * Where Hx(t) = (t/T)Hx for 0 ≤ t ≤ T\n   * μB is the Bohr magneton\n\n3) Let's define:\n   * ωz = μBHz\n   * ωx(t) = μBHx(t) = (t/T)μBHx\n\n4) The initial state is |↑⟩ in the z-basis.\n\n5) For adiabatic evolution, we need:\n   * |⟨n|dH/dt|m⟩| << |En - Em|²\n   * Where n,m are instantaneous eigenstates\n   * dH/dt ~ μBHx/T\n   * Energy gap ~ μBHz\n\n6) This gives us the adiabatic condition:\n   * Hx/(HzT) << μBHz\n   * Or T >> Hx/(μBHz²)\n\n7) When this condition is satisfied, the state will follow the instantaneous eigenstate of the Hamiltonian.\n\n8) The final Hamiltonian eigenstates are:\n   * |+⟩ ≈ |↑⟩ + (Hx/2Hz)|↓⟩\n   * |-⟩ ≈ |↓⟩ - (Hx/2Hz)|↑⟩\n\n9) Starting from |↑⟩, if T is sufficiently long, the state will evolve to:\n   * |ψ(T)⟩ ≈ |↑⟩ + (Hx/2Hz)|↓⟩\n\n10) This is indeed an eigenstate of the final Hamiltonian to first order in Hx/Hz.\n\nThe final answer for the state at t = T and the condition for \"sufficiently long\" is:\n\n\\[\\boxed{|\\psi(T)\\rangle = |{\\uparrow}\\rangle + \\frac{H_x}{2H_z}|{\\downarrow}\\rangle, \\quad T \\gg \\frac{H_x}{\\mu_B H_z^2}}\\]\n\nThis state is an eigenstate of the final Hamiltonian because it satisfies the time-independent Schrödinger equation to first order in Hx/Hz. The condition T >> Hx/(μBHz²) ensures adiabatic evolution, meaning the system stays in an instantaneous eigenstate throughout the evolution.", "final_answers": ["|\\psi(T)\\rangle = |{\\uparrow}\\rangle + \\frac{H_x}{2H_z}|{\\downarrow}\\rangle, \\quad T \\gg \\frac{H_x}{\\mu_B H_z^2}"], "equivalency_results": [{"input_expressions": {"expr1": "|\\psi(T)\\rangle = |{\\uparrow}\\rangle + \\frac{H_x}{2H_z}|{\\downarrow}\\rangle, \\quad T \\gg \\frac{H_x}{\\mu_B H_z^2}", "expr2": "\\psi(T) = \\exp \\left(-i \\frac{eH_z}{2mc} T \\right) \\left( \\left| \\frac{1}{2} \\right\\rangle + \\frac{1}{2} \\frac{H_x}{H_z} \\left| -\\frac{1}{2} \\right\\rangle \\right)"}, "preprocessed_expressions": {"expr1": "|downarrow>/2 + |uparrow>", "expr2": "exp(-H*T*e*i/(2*c*m))*(|-1/2> + 2*|1/2>)/2"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3007", "solution": "Let me solve this step by step.\n\n1) The spin-orbit interaction Hamiltonian is $H_{s0} = A \\mathbf{L} \\cdot \\mathbf{S}$\n\n2) For this system, we need to find the total angular momentum $\\mathbf{J} = \\mathbf{L} + \\mathbf{S}$\n\n3) The possible values of total angular momentum quantum number $j$ are given by:\n   |l - s| ≤ j ≤ l + s\n   Here, l = 2 and s = 1\n\n4) Therefore:\n   |2 - 1| ≤ j ≤ 2 + 1\n   1 ≤ j ≤ 3\n   So j can be 1, 2, or 3\n\n5) The eigenvalues of $\\mathbf{L} \\cdot \\mathbf{S}$ are given by:\n   $\\frac{1}{2}[j(j+1) - l(l+1) - s(s+1)]\\hbar^2$\n\n6) Let's calculate for each j value:\n\n   For j = 3:\n   $\\frac{1}{2}[3(4) - 2(3) - 1(2)]\\hbar^2 = \\frac{1}{2}[12 - 6 - 2]\\hbar^2 = 2\\hbar^2$\n\n   For j = 2:\n   $\\frac{1}{2}[2(3) - 2(3) - 1(2)]\\hbar^2 = \\frac{1}{2}[6 - 6 - 2]\\hbar^2 = -1\\hbar^2$\n\n   For j = 1:\n   $\\frac{1}{2}[1(2) - 2(3) - 1(2)]\\hbar^2 = \\frac{1}{2}[2 - 6 - 2]\\hbar^2 = -3\\hbar^2$\n\n7) Therefore, the energy levels are:\n   E₃ = 2A\\hbar^2 (degeneracy = 2j + 1 = 7)\n   E₂ = -A\\hbar^2 (degeneracy = 5)\n   E₁ = -3A\\hbar^2 (degeneracy = 3)\n\nThe final answer in terms of energy levels and their degeneracies is:\n\n\\[\\boxed{E = \\begin{cases} \n2A\\hbar^2 & \\text{(7-fold degenerate)} \\\\\n-A\\hbar^2 & \\text{(5-fold degenerate)} \\\\\n-3A\\hbar^2 & \\text{(3-fold degenerate)}\n\\end{cases}}\\]", "final_answers": ["E = \\begin{cases} \n2A\\hbar^2 & \\text{(7-fold degenerate)} \\\\\n-A\\hbar^2 & \\text{(5-fold degenerate)} \\\\\n-3A\\hbar^2 & \\text{(3-fold degenerate)}\n\\end{cases}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\begin{cases} \n2A\\hbar^2 & \\text{(7-fold degenerate)} \\\\\n-A\\hbar^2 & \\text{(5-fold degenerate)} \\\\\n-3A\\hbar^2 & \\text{(3-fold degenerate)}\n\\end{cases}", "expr2": "\\begin{align*}\nE_{j=3} &= 2 A \\hbar^2, \\quad &d_{j=3} = 7, \\\\\nE_{j=2} &= -A \\hbar^2, \\quad &d_{j=2} = 5, \\\\\nE_{j=1} &= -3A \\hbar^2, \\quad &d_{j=1} = 3.\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5075", "solution": "Let's solve this step by step.\n\n(a) For the probability of finding the particle in the ground state:\n\n1) The initial wavefunction (ground state in [0,L]):\n   ψ₁(x) = √(2/L) sin(πx/L) for 0 ≤ x ≤ L\n   ψ₁(x) = 0 for x > L\n\n2) The ground state of expanded box [0,2L]:\n   φ₁(x) = √(1/2L) sin(πx/2L)\n\n3) The probability is |⟨φ₁|ψ₁⟩|²:\n   ∫₀ᴸ √(2/L)√(1/2L) sin(πx/L)sin(πx/2L)dx\n   = 8/(3π) ≈ 0.849\n\n\\[ \\boxed{P_{ground} = \\frac{8}{3\\pi} \\approx 0.849} \\]\n\n(b) For the most likely state:\n\n1) For any state n in the expanded box:\n   φₙ(x) = √(1/2L) sin(nπx/2L)\n\n2) The overlap is:\n   |⟨φₙ|ψ₁⟩|² = 4n²/[π²(4n²-1)²]\n\n3) Maximum occurs at n=2:\n\n\\[ \\boxed{n = 2 \\text{ is the most probable state}} \\]\n\n(c) For the momentum distribution:\n\n1) The initial wavefunction in momentum space is:\n   ψ(p) = ∫₀ᴸ √(2/L) sin(πx/L) e^(-ipx/ℏ)dx\n\n2) This gives:\n   ψ(p) ∝ 1/[(p/ℏ)² - (π/L)²]\n\n3) The probability distribution is |ψ(p)|²:\n\n\\[ \\boxed{P(p) \\propto \\frac{1}{(p^2 - \\pi^2\\hbar^2/L^2)^2}} \\]\n\nThis shows peaks at p = ±πℏ/L, corresponding to the momentum components of the original confined state.", "final_answers": ["P_{ground} = \\frac{8}{3\\pi} \\approx 0.849", "n = 2 \\text{ is the most probable state}", "P(p) \\propto \\frac{1}{(p^2 - \\pi^2\\hbar^2/L^2)^2}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{ground} = \\frac{8}{3\\pi} \\approx 0.849", "expr2": "\\frac{32}{9\\pi^2}"}, "preprocessed_expressions": {"expr1": "2.264*approx/pi", "expr2": "32/(9*pi**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{ground} = \\frac{8}{3\\pi} \\approx 0.849", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "2.264*approx/pi", "expr2": "1/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{ground} = \\frac{8}{3\\pi} \\approx 0.849", "expr2": "\\frac{2\\pi \\hbar^3 L}{(\\hbar^2 \\pi^2 - p^2 L^2)^2} \\left( 1 + \\cos \\frac{pL}{\\hbar} \\right)"}, "preprocessed_expressions": {"expr1": "2.264*approx/pi", "expr2": "2*L*hbar**3*pi*(cos(L*p/hbar) + 1)/(L**4*p**4 - 2*L**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n = 2 \\text{ is the most probable state}", "expr2": "\\frac{32}{9\\pi^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n = 2 \\text{ is the most probable state}", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n = 2 \\text{ is the most probable state}", "expr2": "\\frac{2\\pi \\hbar^3 L}{(\\hbar^2 \\pi^2 - p^2 L^2)^2} \\left( 1 + \\cos \\frac{pL}{\\hbar} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(p) \\propto \\frac{1}{(p^2 - \\pi^2\\hbar^2/L^2)^2}", "expr2": "\\frac{32}{9\\pi^2}"}, "preprocessed_expressions": {"expr1": "L**4*propto*P(p)/(L**4*p**4 - 2*L**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)", "expr2": "32/(9*pi**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(p) \\propto \\frac{1}{(p^2 - \\pi^2\\hbar^2/L^2)^2}", "expr2": "\\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "L**4*propto*P(p)/(L**4*p**4 - 2*L**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)", "expr2": "1/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(p) \\propto \\frac{1}{(p^2 - \\pi^2\\hbar^2/L^2)^2}", "expr2": "\\frac{2\\pi \\hbar^3 L}{(\\hbar^2 \\pi^2 - p^2 L^2)^2} \\left( 1 + \\cos \\frac{pL}{\\hbar} \\right)"}, "preprocessed_expressions": {"expr1": "L**4*propto*P(p)/(L**4*p**4 - 2*L**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)", "expr2": "2*L*hbar**3*pi*(cos(L*p/hbar) + 1)/(L**4*p**4 - 2*L**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6052", "solution": "Let's solve this step by step.\n\n1) First, let's understand what happens during the decay:\n- Initial state: $\\psi_0(x)\\phi_1$\n- Final state: Some superposition of $\\psi_n(x)\\phi_0$ states\n- A photon is emitted in the -x direction\n\n2) For part (a):\n- When the photon is emitted, momentum conservation must be satisfied\n- The photon momentum is $p_γ = E^*/c$ in the -x direction\n- The nucleus must recoil with momentum $p_N = E^*/c$ in the +x direction\n- The final state must include this recoil effect\n- The recoil operator is $e^{ipx/ℏ}$\n- Therefore, the final state is: $e^{iE^*x/ℏc}\\psi_0(x)\\phi_0$\n\n3) For part (b):\n- We need to expand $e^{iE^*x/ℏc}\\psi_0(x)$ in terms of harmonic oscillator eigenstates\n- For harmonic oscillator states, we can use the relation:\n$x = \\sqrt{\\frac{ℏ}{2mω}}(a^† + a)$\n- The probability $P_n$ is the square of the coefficient of $\\psi_n(x)$ in this expansion\n- For small recoil, only $n=0$ and $n=1$ states are significant\n- The ratio $P_1/P_0$ is proportional to $(E^*/ℏω)^2$\n\n4) For part (c):\n- Given: $E^* = 840$ keV and $ℏω = 1$ keV\n- Therefore, $E^*/ℏω = 840$\n- Using the formula from part (b)\n\nThe final answers are:\n\n(a) \n\\[\\boxed{ψ_{final} = e^{iE^*x/ℏc}\\psi_0(x)\\phi_0}\\]\n\n(b) \n\\[\\boxed{P_1/P_0 = \\frac{1}{2}(E^*/ℏω)^2}\\]\n\n(c) \n\\[\\boxed{P_1/P_0 = \\frac{1}{2}(840)^2 ≈ 3.53 × 10^5}\\]", "final_answers": ["ψ_{final} = e^{iE^*x/ℏc}\\psi_0(x)\\phi_0", "P_1/P_0 = \\frac{1}{2}(E^*/ℏω)^2", "P_1/P_0 = \\frac{1}{2}(840)^2 ≈ 3.53 × 10^5"], "equivalency_results": [{"input_expressions": {"expr1": "ψ_{final} = e^{iE^*x/ℏc}\\psi_0(x)\\phi_0", "expr2": "\\psi(x, 0) = \\exp\\left(i \\frac{Mv}{\\hbar} x\\right) \\psi_0(x) \\phi_0"}, "preprocessed_expressions": {"expr1": "e", "expr2": "phi*psi(x)*exp(M*i*v*x/hbar)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "ψ_{final} = e^{iE^*x/ℏc}\\psi_0(x)\\phi_0", "expr2": "\\frac{P_1}{P_0} = \\frac{Mv^2}{2\\hbar\\omega}"}, "preprocessed_expressions": {"expr1": "e", "expr2": "M*v**2/(2*hbar*omega)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "ψ_{final} = e^{iE^*x/ℏc}\\psi_0(x)\\phi_0", "expr2": "1.4 \\times 10^{-2}"}, "preprocessed_expressions": {"expr1": "e", "expr2": "0.0140000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(E^*/ℏω)^2", "expr2": "\\psi(x, 0) = \\exp\\left(i \\frac{Mv}{\\hbar} x\\right) \\psi_0(x) \\phi_0"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "phi*psi(x)*exp(M*i*v*x/hbar)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(E^*/ℏω)^2", "expr2": "\\frac{P_1}{P_0} = \\frac{Mv^2}{2\\hbar\\omega}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "M*v**2/(2*hbar*omega)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(E^*/ℏω)^2", "expr2": "1.4 \\times 10^{-2}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "0.0140000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(840)^2 ≈ 3.53 × 10^5", "expr2": "\\psi(x, 0) = \\exp\\left(i \\frac{Mv}{\\hbar} x\\right) \\psi_0(x) \\phi_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{2}(840)^2 ≈ 3.53 × 10^5\n~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(840)^2 ≈ 3.53 × 10^5", "expr2": "\\frac{P_1}{P_0} = \\frac{Mv^2}{2\\hbar\\omega}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{2}(840)^2 ≈ 3.53 × 10^5\n~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "P_1/P_0 = \\frac{1}{2}(840)^2 ≈ 3.53 × 10^5", "expr2": "1.4 \\times 10^{-2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{2}(840)^2 ≈ 3.53 × 10^5\n~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/1-1063", "solution": "Let me explain the formation of energy bands in crystalline solids step by step using quantum mechanical concepts:\n\n1) First, recall that in a single atom, electrons occupy discrete energy levels according to quantum mechanics. These energy levels are well-defined and separated.\n\n2) When two identical atoms are brought close together (like in a molecule), the wavefunctions of their electrons overlap. Due to the Pauli Exclusion Principle, electrons can't occupy the same quantum state.\n\n3) This causes the original atomic energy levels to split into two closely spaced levels:\n   - One slightly higher in energy\n   - One slightly lower in energy\n   This is similar to the bonding and anti-bonding orbitals in molecular orbital theory.\n\n4) Now, consider what happens in a crystal, which contains an enormous number of atoms (typically ~10²³ atoms/cm³) arranged in a regular pattern:\n   - Each atomic energy level splits into a very large number of closely spaced levels\n   - These levels are so close together that they effectively form a continuous band of allowed energies\n\n5) The width of these bands depends on:\n   - The degree of overlap between atomic wavefunctions\n   - The spacing between atoms in the crystal\n   - The original atomic energy levels involved\n\n6) Between these bands, there can be ranges of energies that no electron can occupy (band gaps):\n   - These gaps arise because they correspond to energies that were not present in the original atomic levels\n   - The size of these gaps is crucial in determining whether a material is a conductor, semiconductor, or insulator\n\nThe key insight can be summarized as:\n\n\\[\\boxed{\\text{Energy bands form when large numbers of atomic orbitals overlap, splitting discrete energy levels into quasi-continuous bands}}\\]", "final_answers": ["\\text{Energy bands form when large numbers of atomic orbitals overlap, splitting discrete energy levels into quasi-continuous bands}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Energy bands form when large numbers of atomic orbitals overlap, splitting discrete energy levels into quasi-continuous bands}", "expr2": "\\text{Energy bands result from the periodicity and boundary conditions of the crystal lattice potential.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5081", "solution": "Let's solve this step by step.\n\n1) First, let's understand what happens when an electric field is applied:\n- The perturbation Hamiltonian is H' = eEz\n- For n=2, we have states 2s, 2p₀, 2p₁, and 2p₋₁\n\n(a) To find which states are connected:\n- Selection rules require Δl = ±1 and Δm = 0 for z-direction perturbation\n- 2s can only mix with 2p₀ (not with 2p₁ or 2p₋₁)\n- Therefore, only 2s and 2p₀ are connected\n\n(b) For the linear combination:\n- Let's call the mixed states |+⟩ and |-⟩\n- |+⟩ = (1/√2)(|2s⟩ + |2p₀⟩)\n- |-⟩ = (1/√2)(|2s⟩ - |2p₀⟩)\nThese are the states that diagonalize the perturbation.\n\n(c) For the time evolution:\n- Initial state is |2s⟩ = (1/√2)(|+⟩ + |-⟩)\n- Energy difference between |+⟩ and |-⟩ is ΔE = 3eEa₀\n- Time evolution gives:\nψ(t) = (1/√2)[|+⟩e^(-iE₊t/ħ) + |-⟩e^(-iE₋t/ħ)]\n= (1/√2)[|2s⟩cos(3eEa₀t/2ħ) - i|2p₀⟩sin(3eEa₀t/2ħ)]\n\n(d) For probabilities at t = ℓ/v:\n- P(2s) = cos²(3eEa₀ℓ/2ħv)\n- P(2p₀) = sin²(3eEa₀ℓ/2ħv)\n- P(2p₁) = P(2p₋₁) = 0\n\nThe final answer for the probabilities can be written as:\n\n\\[\\boxed{P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0}\\]", "final_answers": ["P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0"], "equivalency_results": [{"input_expressions": {"expr1": "P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0", "expr2": "\\text{The $2s$ and $2p$ states are connected via the perturbation in first order.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0", "expr2": "\\text{Eigenstates: } \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 \\\\ \\pm 1 \\end{pmatrix}, \\text{ Eigenvalues: } \\pm 3eEa"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0", "expr2": "|\\psi(t)\\rangle = \\cos\\left(\\frac{3eEat}{\\hbar}\\right)|2s\\rangle + i\\sin\\left(\\frac{3eEat}{\\hbar}\\right)|2p\\rangle"}, "preprocessed_expressions": {"expr1": "0", "expr2": "i*sin(3*E*a*e*t/hbar)*|2*p> + cos(3*E*a*e*t/hbar)*|2*s>"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(2s) = \\cos^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_0) = \\sin^2(\\frac{3eEa_0\\ell}{2\\hbar v}), P(2p_{\\pm1}) = 0", "expr2": "| \\langle 200|\\psi(t) \\rangle |^2 = \\cos^2 \\frac{3eEat}{\\hbar}, \\quad | \\langle 210|\\psi(t) \\rangle |^2 = \\sin^2 \\frac{3eEat}{\\hbar}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "sin(3*E*a*e*t/hbar)**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3009", "solution": "Let's solve this step by step.\n\n1) First, recall that:\n   * $L_z$ eigenvalues are given by $mℏ$ where m is the magnetic quantum number\n   * The eigenfunctions of $L_z$ are $e^{im\\phi}/\\sqrt{2\\pi}$\n   * $L_z = -iℏ\\frac{\\partial}{\\partial\\phi}$\n\n2) For part (a), let's analyze the wave function:\n   * The angular part can be written as: $\\frac{1}{\\sqrt{4\\pi}}(e^{i\\phi}\\sin\\theta + \\cos\\theta)$\n   * This is a superposition of terms with $m=1$ (from $e^{i\\phi}$) and $m=0$ (from the constant term)\n   * Therefore, the possible values of $L_z$ are:\n   * $ℏ$ (corresponding to $m=1$)\n   * $0$ (corresponding to $m=0$)\n\n3) For part (b), we need to find the probabilities:\n   * The probability is proportional to the square of the coefficient of each term\n   * For $m=1$: coefficient is $\\frac{\\sin\\theta}{\\sqrt{4\\pi}}$\n   * For $m=0$: coefficient is $\\frac{\\cos\\theta}{\\sqrt{4\\pi}}$\n   * We need to integrate over all angles:\n   * $P(m=1) = \\int_0^{2\\pi}\\int_0^\\pi |\\frac{\\sin\\theta}{\\sqrt{4\\pi}}|^2 \\sin\\theta d\\theta d\\phi = \\sin^2\\theta$\n   * $P(m=0) = \\int_0^{2\\pi}\\int_0^\\pi |\\frac{\\cos\\theta}{\\sqrt{4\\pi}}|^2 \\sin\\theta d\\theta d\\phi = \\cos^2\\theta$\n\n4) For part (c), the expectation value:\n   * $\\langle L_z \\rangle = ℏP(m=1) + 0P(m=0)$\n   * $= ℏ\\sin^2\\theta$\n\nTherefore:\n(a) The possible values are $ℏ$ and $0$\n(b) The probabilities are $\\sin^2\\theta$ for $ℏ$ and $\\cos^2\\theta$ for $0$\n(c) The expectation value is $ℏ\\sin^2\\theta$\n\n\\[\\boxed{\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}}\\]", "final_answers": ["\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}", "expr2": "+\\hbar, \\ 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}", "expr2": "\\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}", "expr2": "\\frac{1}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\text{(a) } L_z = ℏ \\text{ or } 0 \\\\\n&\\text{(b) } P(ℏ) = \\sin^2\\theta, P(0) = \\cos^2\\theta \\\\\n&\\text{(c) } \\langle L_z \\rangle = ℏ\\sin^2\\theta\n\\end{aligned}", "expr2": "\\frac{2}{3} \\hbar"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3031", "solution": "Let's solve this step by step.\n\n(a) For j₁ = 1 and j₂ = 1/2 coupling to j = 3/2 with M = 1/2:\n\nThe possible combinations of m₁ and m₂ that give M = 1/2 are:\n1) m₁ = 1, m₂ = -1/2\n2) m₁ = 0, m₂ = 1/2\n3) m₁ = -1, m₂ = 3/2\n\nUsing the Clebsch-Gordan formula:\n⟨j₁m₁ j₂m₂|JM⟩ = √((J+M)!(J-M)!(2J+1)/(j₁+m₁)!(j₁-m₁)!(j₂+m₂)!(j₂-m₂)!)\n\nFor j = 3/2, M = 1/2:\n⟨1,1; 1/2,-1/2|3/2,1/2⟩ = 1/3\n⟨1,0; 1/2,1/2|3/2,1/2⟩ = 2/3\n⟨1,-1; 1/2,3/2|3/2,1/2⟩ = 0\n\n(b) For isospin analysis:\n\nFor Δ resonance (I = 3/2):\n- Reaction (i): π⁺p → 3π⁺p involves I = 3/2\n- Reaction (ii): n-p → π⁻p involves I = 3/2\n- Reaction (iii): π⁻p → π⁰n involves I = 3/2\n\nUsing Clebsch-Gordan coefficients and isospin conservation:\nFor Δ(3/2): σᵢ:σᵢᵢ:σᵢᵢᵢ = 9:1:2\n\nFor N*(1/2):\nUsing similar analysis but with I = 1/2:\nσᵢ:σᵢᵢ:σᵢᵢᵢ = 0:2:1\n\nThe final answer for both parts:\n\n\\[\\boxed{\\begin{array}{l} \n\\text{(a) CG coefficients: } \\frac{1}{3}, \\frac{2}{3}, 0 \\\\\n\\text{(b) } \\Delta(3/2): 9:1:2 \\\\\n\\text{    } N^*(1/2): 0:2:1\n\\end{array}}\\]", "final_answers": ["\\begin{array}{l} \n\\text{(a) CG coefficients: } \\frac{1}{3}, \\frac{2}{3}, 0 \\\\\n\\text{(b) } \\Delta(3/2): 9:1:2 \\\\\n\\text{    } N^*(1/2): 0:2:1\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{(a) CG coefficients: } \\frac{1}{3}, \\frac{2}{3}, 0 \\\\\n\\text{(b) } \\Delta(3/2): 9:1:2 \\\\\n\\text{    } N^*(1/2): 0:2:1\n\\end{array}", "expr2": "\\left( \\begin{array}{c|c}\n(m_1, m_2) & \\langle j_1, m_1, j_2, m_2 | j, M \\rangle \\\\ \\hline\n(1, -1/2) & \\frac{1}{\\sqrt{3}} \\\\\n(0, 1/2) & \\sqrt{\\frac{2}{3}} \\\\\n\\end{array} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{(a) CG coefficients: } \\frac{1}{3}, \\frac{2}{3}, 0 \\\\\n\\text{(b) } \\Delta(3/2): 9:1:2 \\\\\n\\text{    } N^*(1/2): 0:2:1\n\\end{array}", "expr2": "1 : \\frac{1}{9} : \\frac{2}{9}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l} \n\\text{(a) CG coefficients: } \\frac{1}{3}, \\frac{2}{3}, 0 \\\\\n\\text{(b) } \\Delta(3/2): 9:1:2 \\\\\n\\text{    } N^*(1/2): 0:2:1\n\\end{array}", "expr2": "0 : \\frac{4}{9} : \\frac{2}{9}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6018", "solution": "Let's solve this step by step.\n\n(a) For high energy scattering using Born approximation:\n\n1) The Born approximation for the scattering amplitude is:\n   $f(θ) = -\\frac{m}{2π\\hbar^2}\\int V(r)e^{i\\vec{q}\\cdot\\vec{r}}d^3r$\n\n2) For a delta function potential at r = a:\n   $V(r) = B\\delta(r-a)$\n\n3) The momentum transfer is:\n   $\\vec{q} = \\vec{k}_f - \\vec{k}_i$\n   $q = 2k\\sin(θ/2)$ where $k = \\sqrt{2mE}/\\hbar$\n\n4) Due to spherical symmetry, we can write:\n   $f(θ) = -\\frac{m}{2π\\hbar^2}B\\int \\delta(r-a)e^{iqr\\cos\\beta}\\sin\\beta\\,d\\beta\\,dr\\,d\\phi$\n\n5) Integrating over φ gives 2π, and the delta function handles the r integral:\n   $f(θ) = -\\frac{mBa^2}{2\\hbar^2}\\int_0^π e^{iqa\\cos\\beta}\\sin\\beta\\,d\\beta$\n\n6) This integral gives:\n   $f(θ) = -\\frac{mBa}{\\hbar^2}\\frac{\\sin(qa)}{qa}$\n\n7) The differential cross section is $|f(θ)|^2$:\n   $\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}\\frac{\\sin^2(2ka\\sin(θ/2))}{4k^2a^2\\sin^2(θ/2)}$\n\n\\[ \\boxed{\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}\\frac{\\sin^2(2ka\\sin(θ/2))}{4k^2a^2\\sin^2(θ/2)}} \\]\n\n(b) For low energy scattering (λ > a):\n\n1) At low energies, we need to solve the radial Schrödinger equation:\n   $\\frac{d^2u}{dr^2} + [k^2 - \\frac{2mB}{\\hbar^2}\\delta(r-a)]u = 0$\n\n2) The solution should be of the form:\n   $u(r) = \\begin{cases} \n   A\\sin(kr) & r < a \\\\\n   B\\sin(kr + δ_0) & r > a\n   \\end{cases}$\n\n3) Matching conditions at r = a:\n   - Continuity of wavefunction\n   - Discontinuity in derivative due to delta function\n\n4) The phase shift δ_0 determines the scattering:\n   $\\frac{dσ}{dΩ} = |f(θ)|^2 = \\frac{1}{k^2}\\sin^2(δ_0)$\n\nFor low energy, ka << 1, leading to:\n\n\\[ \\boxed{\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}} \\]\n\nThis is isotropic scattering, characteristic of s-wave dominance at low energies.", "final_answers": ["\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}\\frac{\\sin^2(2ka\\sin(θ/2))}{4k^2a^2\\sin^2(θ/2)}", "\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}\\frac{\\sin^2(2ka\\sin(θ/2))}{4k^2a^2\\sin^2(θ/2)}", "expr2": "\\frac{d\\sigma}{d\\Omega} = \\left( \\frac{2m \\sin qa}{\\hbar^2 q} Ba \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "I don't understand this\n\\frac{m^2B^2a^2}{\\hbar^4}\\frac{\\sin^2(2ka\\sin(θ/2))}{4k^2a^2\\sin^2(θ/2)}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}", "expr2": "\\frac{d\\sigma}{d\\Omega} = \\left( \\frac{2m \\sin qa}{\\hbar^2 q} Ba \\right)^2"}, "preprocessed_expressions": {"expr1": "B**2*a**2*m**2/hbar**4", "expr2": "4*B**2*a**2*m**2*sin(a*q)**2/(hbar**4*q**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{dσ}{dΩ} = \\frac{m^2B^2a^2}{\\hbar^4}", "expr2": "\\frac{d\\sigma}{d\\Omega} \\approx \\left( \\frac{1}{\\frac{2m}{\\hbar^2} B + \\frac{1}{a}} \\right)^2"}, "preprocessed_expressions": {"expr1": "B**2*a**2*m**2/hbar**4", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/1-1029", "solution": "Let me solve this step by step.\n\n1) For a simple harmonic oscillator, the total energy E is:\n   E = p²/2m + ½kx²\n   where k = mω²\n\n2) The average energy can be written as:\n   ⟨E⟩ = ⟨p²⟩/2m + ½kx²\n\n3) For a quantum state, ⟨p⟩ = 0, so:\n   (Δp)² = ⟨p²⟩ - ⟨p⟩² = ⟨p²⟩\n\n4) Similarly, (Δx)² = ⟨x²⟩ - ⟨x⟩²\n   For the ground state, ⟨x⟩ = 0, so:\n   (Δx)² = ⟨x²⟩\n\n5) Therefore:\n   ⟨E⟩ = (Δp)²/2m + ½k(Δx)²\n\n6) Given that ΔxΔp = ℏ/2, we can write:\n   Δp = ℏ/2Δx\n\n7) Substituting this into the energy equation:\n   ⟨E⟩ = (ℏ)²/8m(Δx)² + ½k(Δx)²\n\n8) To find the minimum energy, differentiate with respect to Δx and set to zero:\n   d⟨E⟩/d(Δx) = -(ℏ)²/4m(Δx)³ + k(Δx) = 0\n\n9) Solving:\n   (ℏ)²/4m(Δx)³ = k(Δx)\n   (Δx)⁴ = (ℏ)²/4mk = (ℏ)²/4m(mω²)\n   (Δx)² = ℏ/2mω\n\n10) Substituting back:\n    ⟨E⟩ = (ℏω/2) + (ℏω/2) = ℏω/2\n\nTherefore, the minimum energy is ℏω/2.\n\n\\[ \\boxed{E_{min} = \\frac{\\hbar\\omega}{2}} \\]", "final_answers": ["E_{min} = \\frac{\\hbar\\omega}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{min} = \\frac{\\hbar\\omega}{2}", "expr2": "\\frac{\\hbar \\omega}{2}"}, "preprocessed_expressions": {"expr1": "hbar*omega/2", "expr2": "hbar*omega/2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6020", "solution": "Let's solve this step by step:\n\n1) In the Born approximation, the scattering amplitude is given by:\n   $f(\\theta) = -\\frac{m}{2\\pi\\hbar^2}\\int V(\\mathbf{r})e^{i\\mathbf{q}\\cdot\\mathbf{r}}d^3x$\n   where $\\mathbf{q} = \\mathbf{k}_f - \\mathbf{k}_i$ is the momentum transfer.\n\n2) For Coulomb potential from a charge distribution:\n   $V(\\mathbf{r}) = e\\int\\frac{\\rho(\\mathbf{r'})}{|\\mathbf{r}-\\mathbf{r'}|}d^3x'$\n\n3) For forward scattering, $\\theta = 0$, meaning $\\mathbf{q} = 0$\n   Therefore, $e^{i\\mathbf{q}\\cdot\\mathbf{r}} = 1$\n\n4) The differential cross section is related to the scattering amplitude by:\n   $\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2$\n\n5) For $\\theta = 0$:\n   $f(0) = -\\frac{m}{2\\pi\\hbar^2}\\int V(\\mathbf{r})d^3x$\n\n6) Using multipole expansion for $\\frac{1}{|\\mathbf{r}-\\mathbf{r'}|}$ and given that $\\int \\rho \\, d^3x = 0$:\n   The leading term will be the quadrupole term, proportional to $\\frac{1}{r^3}$\n\n7) The potential at large distances becomes:\n   $V(r) \\approx \\frac{e}{2r^3}\\int r'^2\\rho(\\mathbf{r'})d^3x' = \\frac{eA}{2r^3}$\n\n8) Therefore:\n   $f(0) = -\\frac{meA}{4\\pi\\hbar^2}\\int\\frac{1}{r^3}d^3x$\n\n9) The integral diverges at both $r=0$ and $r\\to\\infty$, but since we're told $\\rho$ vanishes rapidly at infinity, we should get zero.\n\nTherefore, the differential cross section for forward scattering is:\n\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega}\\big|_{\\theta=0} = 0} \\]\n\nThis makes physical sense because when $\\int \\rho \\, d^3x = 0$, there is no net charge, and for forward scattering (no momentum transfer), the particle doesn't \"see\" the detailed structure of the charge distribution.", "final_answers": ["\\frac{d\\sigma}{d\\Omega}\\big|_{\\theta=0} = 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega}\\big|_{\\theta=0} = 0", "expr2": "\\frac{d\\sigma}{d\\Omega}\\Big|_{\\theta=0} = \\frac{A^2 m^2 e^2}{9 \\hbar^4}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "A**2*e**2*m**2/(9*hbar**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5007", "solution": "Let's solve this step by step.\n\n1) First, let's recall the unperturbed system (flat box of length 6a):\n   * The normalized wavefunction for the ground state (n=1) is:\n   * ψ₁⁰(x) = √(1/6a) sin(πx/6a + π/2) for -3a ≤ x ≤ 3a\n   * The unperturbed ground state energy is E₁⁰ = (ℏ²π²)/(2m(6a)²)\n\n2) The perturbation potential is:\n   V'(x) = V₀ for -a < x < a\n   V'(x) = 0 elsewhere within the box\n\n3) According to first-order perturbation theory:\n   E₁¹ = ∫ ψ₁⁰*(x) V'(x) ψ₁⁰(x) dx\n\n4) We need to integrate only over the region where V'(x) ≠ 0:\n   E₁¹ = V₀ ∫₍₋ₐ₎ᵃ (1/6a) sin²(πx/6a + π/2) dx\n\n5) Using the identity sin²(x) = (1 - cos(2x))/2:\n   E₁¹ = V₀/6a ∫₍₋ₐ₎ᵃ [1 - cos(πx/3a + π)] dx\n\n6) Evaluating the integral:\n   E₁¹ = V₀/6a [x - (3a/π)sin(πx/3a + π)]₍₋ₐ₎ᵃ\n   E₁¹ = V₀/6a [2a]\n   E₁¹ = V₀/3\n\n7) The total energy to first order is:\n   E₁ = E₁⁰ + E₁¹ = (ℏ²π²)/(72ma²) + V₀/3\n\n\\[\\boxed{E_1 = \\frac{\\hbar^2\\pi^2}{72ma^2} + \\frac{V_0}{3}}\\]", "final_answers": ["E_1 = \\frac{\\hbar^2\\pi^2}{72ma^2} + \\frac{V_0}{3}"], "equivalency_results": [{"input_expressions": {"expr1": "E_1 = \\frac{\\hbar^2\\pi^2}{72ma^2} + \\frac{V_0}{3}", "expr2": "E = \\frac{\\pi^2 \\hbar^2}{72ma^2} + V_0 \\left( \\frac{1}{3} + \\frac{\\sqrt{3}}{2\\pi} \\right)"}, "preprocessed_expressions": {"expr1": "V/3 + hbar**2*pi**2/(72*a**2*m)", "expr2": "V(1/3 + sqrt(3)/(2*pi)) + hbar**2*pi**2/(72*a**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6016", "solution": "Let's solve this step by step.\n\n(a) First, let's verify that G_E(x) is the Green's function:\n\n1) The Green's function should satisfy:\n   $(E - H_0)G_E(x-x') = \\delta(x-x')$\n   where $H_0 = -\\frac{\\hbar^2}{2m}\\frac{d^2}{dx^2}$\n\n2) Let's apply $(E - H_0)$ to $G_E(x)$:\n   $(E + \\frac{\\hbar^2}{2m}\\frac{d^2}{dx^2})\\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} dk \\frac{e^{ikx}}{E - \\frac{\\hbar^2 k^2}{2m} + i\\varepsilon}$\n\n3) The derivative brings down factors of $ik$:\n   $\\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} dk e^{ikx}(E - \\frac{\\hbar^2 k^2}{2m})\\frac{1}{E - \\frac{\\hbar^2 k^2}{2m} + i\\varepsilon}$\n   $= \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} dk e^{ikx} = \\delta(x)$\n\n4) The outgoing wave condition is satisfied due to the $i\\varepsilon$ term.\n\n(b) The integral equation for the wavefunction is:\n\n1) $\\psi(x) = e^{ikx} + \\int_{-\\infty}^{\\infty} dx' G_E(x-x')V(x')\\psi(x')$\n\n2) In Born approximation, we replace $\\psi(x')$ in the integral with $e^{ikx'}$\n\n3) For the given potential:\n   $\\psi(x) \\approx e^{ikx} + \\int_{-a/2}^{a/2} dx' G_E(x-x')V_0e^{ikx'}$\n\n4) The reflection amplitude in Born approximation is:\n   $r = -\\frac{mV_0}{\\hbar^2k}\\frac{\\sin(ka)}{k}$\n\n5) The reflection probability is:\n   $R = |r|^2 = (\\frac{mV_0}{\\hbar^2k^2})^2\\sin^2(ka)$\n\n6) This approximation is valid when:\n   - The energy E is much larger than V₀ (E >> V₀)\n   - The wavelength is much larger than the potential width (ka << 1)\n\nThe final answer for the reflection probability in Born approximation is:\n\n\\[\\boxed{R = (\\frac{mV_0}{\\hbar^2k^2})^2\\sin^2(ka)}\\]\n\nThis is valid when E >> V₀ and ka << 1.", "final_answers": ["R = (\\frac{mV_0}{\\hbar^2k^2})^2\\sin^2(ka)"], "equivalency_results": [{"input_expressions": {"expr1": "R = (\\frac{mV_0}{\\hbar^2k^2})^2\\sin^2(ka)", "expr2": "G_E(x) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} dk \\frac{e^{ikx}}{E - \\frac{\\hbar^2 k^2}{2m} + i\\varepsilon}"}, "preprocessed_expressions": {"expr1": "V**2*m**2*sin(a*k)**2/(hbar**4*k**4)", "expr2": "1/(2*pi)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R = (\\frac{mV_0}{\\hbar^2k^2})^2\\sin^2(ka)", "expr2": "R = \\frac{m^2 V_0^2}{\\hbar^4 k^4} \\sin^2(ka)"}, "preprocessed_expressions": {"expr1": "V**2*m**2*sin(a*k)**2/(hbar**4*k**4)", "expr2": "V**2*m**2*sin(a*k)**2/(hbar**4*k**4)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1027", "solution": "Let me solve this step by step.\n\n1) First, let's understand what the classical region means:\n   * In a classical harmonic oscillator, the particle oscillates between turning points where potential energy equals total energy\n   * For ground state, E₀ = ℏω₀/2\n   * The classical turning points are at x = ±√(ℏ/mω₀)\n\n2) The probability of finding the particle outside the classical region is:\n   * P = P(|x| > √(ℏ/mω₀))\n   * P = ∫_{-∞}^{-a} |ψ₀(x)|² dx + ∫_{a}^{∞} |ψ₀(x)|² dx\n   where a = √(ℏ/mω₀)\n\n3) The probability density is:\n   |ψ₀(x)|² = (α/π)^(1/2) e^{-αx²}\n\n4) Therefore:\n   P = 2∫_{a}^{∞} (α/π)^(1/2) e^{-αx²} dx\n   where a = √(ℏ/mω₀) = 1/√α\n\n5) Let's make a substitution:\n   u = √α x\n   du = √α dx\n   When x = a, u = 1\n\n6) The integral becomes:\n   P = (2/√π) ∫_{1}^{∞} e^{-u²} du\n\n7) This is related to the error function:\n   erfc(1) = (2/√π) ∫_{1}^{∞} e^{-u²} du\n\n8) Therefore:\n   P = erfc(1)\n\n9) The numerical value of erfc(1) is approximately 0.1573\n\nThe probability of finding the particle outside the classical region is:\n\n\\[ \\boxed{P = \\text{erfc}(1) \\approx 0.1573} \\]\n\nThis means about 15.73% of the time, the particle can be found in the classically forbidden region, demonstrating quantum tunneling.", "final_answers": ["P = \\text{erfc}(1) \\approx 0.1573"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\text{erfc}(1) \\approx 0.1573", "expr2": "P \\simeq 16\\%"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5031", "solution": "Let's solve this step by step.\n\n(a) Qualitative analysis:\n1) The modified potential is less attractive than the point-nucleus potential for r < R\n2) States with higher probability of being close to the nucleus (lower l) will be affected more\n3) Order of effect: 1s > 2s > 2p > 3s > 3p > 3d\n4) All states will shift upward (less negative) because the potential is less attractive\n5) This leads to splitting between states with same n but different l\n\n(b) For the 1s state:\n1) First-order energy shift is:\nΔE = ∫[V_new(r) - V_old(r)]|ψ₁ₛ|²r²dr (over r < R)\n2) Difference in potential:\nΔV = Ze²/r - Ze²/R(3/2 - r²/2R²)\n3) Substituting ψ₁ₛ and integrating from 0 to R:\nΔE₁ₛ = 4πZe²N₀² ∫₀ᴿ[1/r - 3/2R + r/2R²]e⁻²ʳ/ᵃᵘr²dr\n\n\\[ \\boxed{\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2} \\]\n\n(c) For 2s-2p splitting:\n1) Calculate ΔE₂ₛ and ΔE₂ₚ separately\n2) For R/aμ << 1, the main contribution comes from near r = 0\n3) The 2p wavefunction vanishes at r = 0, so ΔE₂ₚ is much smaller\n4) Therefore:\n\\[ \\boxed{\\Delta E_{2s-2p} \\approx \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2} \\]\n\n(d) The method fails when:\n1) R becomes comparable to aμ\n2) First-order perturbation theory assumes small perturbation\n3) When R/aμ is not small, the method underestimates the shift because:\n   - Higher-order terms become important\n   - Wavefunction distortion is not accounted for\n   - The actual wavefunction would avoid the nuclear region more\n\nThe final answer combining all parts:\n\\[ \\boxed{\\begin{aligned}\n&\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2 \\\\\n&\\Delta E_{2s-2p} = \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2\n\\end{aligned}} \\]", "final_answers": ["\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2", "\\Delta E_{2s-2p} \\approx \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2", "\\begin{aligned}\n&\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2 \\\\\n&\\Delta E_{2s-2p} = \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2\n\\end{aligned}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{1s} = \\frac{2}{5} \\left( \\frac{R}{a_\\mu} \\right)^2 \\frac{Z e^2}{a_\\mu}"}, "preprocessed_expressions": {"expr1": "2*R**2*Z*e**2/(3*a**2*u**2)", "expr2": "2*R**2*Z*e**2/(5*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_\\mu} \\left( \\frac{R}{a_\\mu} \\right)^2"}, "preprocessed_expressions": {"expr1": "2*R**2*Z*e**2/(3*a**2*u**2)", "expr2": "R**2*Z*e**2/(20*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_0} \\left( \\frac{R}{a_0} \\right)^2 \\left( \\frac{m_\\mu}{m_e} \\right)^3"}, "preprocessed_expressions": {"expr1": "2*R**2*Z*e**2/(3*a**2*u**2)", "expr2": "R**2*Z*e**2*u**3/(20*a**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{2s-2p} \\approx \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{1s} = \\frac{2}{5} \\left( \\frac{R}{a_\\mu} \\right)^2 \\frac{Z e^2}{a_\\mu}"}, "preprocessed_expressions": {"expr1": "Delta*E*R**2*Z*approx*e**2/(12*a**2*u**2)", "expr2": "2*R**2*Z*e**2/(5*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{2s-2p} \\approx \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_\\mu} \\left( \\frac{R}{a_\\mu} \\right)^2"}, "preprocessed_expressions": {"expr1": "Delta*E*R**2*Z*approx*e**2/(12*a**2*u**2)", "expr2": "R**2*Z*e**2/(20*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{2s-2p} \\approx \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_0} \\left( \\frac{R}{a_0} \\right)^2 \\left( \\frac{m_\\mu}{m_e} \\right)^3"}, "preprocessed_expressions": {"expr1": "Delta*E*R**2*Z*approx*e**2/(12*a**2*u**2)", "expr2": "R**2*Z*e**2*u**3/(20*a**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2 \\\\\n&\\Delta E_{2s-2p} = \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2\n\\end{aligned}", "expr2": "\\Delta E_{1s} = \\frac{2}{5} \\left( \\frac{R}{a_\\mu} \\right)^2 \\frac{Z e^2}{a_\\mu}"}, "preprocessed_expressions": {"expr1": "R**2*Z*d*e**3*end*g*i*l*n/(12*a*u**2)", "expr2": "2*R**2*Z*e**2/(5*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2 \\\\\n&\\Delta E_{2s-2p} = \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2\n\\end{aligned}", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_\\mu} \\left( \\frac{R}{a_\\mu} \\right)^2"}, "preprocessed_expressions": {"expr1": "R**2*Z*d*e**3*end*g*i*l*n/(12*a*u**2)", "expr2": "R**2*Z*e**2/(20*a**3*u**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{aligned}\n&\\Delta E_{1s} = \\frac{2Ze^2}{3} \\left(\\frac{R}{a_\\mu}\\right)^2 \\\\\n&\\Delta E_{2s-2p} = \\frac{Ze^2}{12} \\left(\\frac{R}{a_\\mu}\\right)^2\n\\end{aligned}", "expr2": "\\Delta E_{2s} - \\Delta E_{2p} = \\frac{1}{20} \\frac{Z e^2}{a_0} \\left( \\frac{R}{a_0} \\right)^2 \\left( \\frac{m_\\mu}{m_e} \\right)^3"}, "preprocessed_expressions": {"expr1": "R**2*Z*d*e**3*end*g*i*l*n/(12*a*u**2)", "expr2": "R**2*Z*e**2*u**3/(20*a**3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6011", "solution": "Let's solve this step by step:\n\n(a) The phase shift δ is related to the Schrödinger equation solution through:\n- The wavefunction outside the potential region (r > R) has the form:\n  ψ(r) ∝ sin(kr + δ)/r\n- δ is determined by matching this solution with the solution inside the potential region\n- The phase shift represents how much the scattered wave is shifted compared to the free particle solution\n\n(b) For low energy scattering (kR ≪ 1), s-wave scattering dominates. The differential cross section is:\n- dσ/dΩ = |f(θ)|²\n- For s-wave: f(θ) = (1/k)sin(δ)exp(iδ)\n- Therefore: dσ/dΩ = (1/k²)sin²(δ)\nThis has the correct dimensions of area.\n\n(c) For purely attractive potential:\n- The wavefunction oscillates more rapidly inside the potential well\n- At certain energies, the phase shift can be exactly nπ\n- When δ = nπ, sin²(δ) = 0, resulting in no scattering\n[Draw wave matching smoothly at r = R with no phase shift]\n\n(d) For potential attractive at short range and repulsive at long range:\n- Creates a quasi-bound state\n- When k matches the energy of this quasi-bound state, resonance occurs\n- Phase shift rapidly changes by π near resonance\n- Results in Breit-Wigner resonance shape\n[Draw wave with large amplitude inside potential well]\n\n(e) At resonance:\n- Phase shift δ = π/2\n- sin²(δ) = 1\n- Maximum total cross section = ∫(dσ/dΩ)dΩ = 4π/k²\n\nThe maximum total cross section at resonance is:\n\n\\[\\boxed{\\sigma_{max} = \\frac{4\\pi}{k^2}}\\]\n\nThis is the unitarity limit for s-wave scattering.", "final_answers": ["\\sigma_{max} = \\frac{4\\pi}{k^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma_{max} = \\frac{4\\pi}{k^2}", "expr2": "\\psi(r) \\rightarrow \\frac{\\sin(kr + \\delta)}{kr}"}, "preprocessed_expressions": {"expr1": "4*pi/k**2", "expr2": "a*o*r*w*psi(r)*sin(delta + k*r)/k"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma_{max} = \\frac{4\\pi}{k^2}", "expr2": "\\sigma(\\theta) = \\frac{\\sin^2 \\delta}{k^2}"}, "preprocessed_expressions": {"expr1": "4*pi/k**2", "expr2": "sin(delta)**2/k**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma_{max} = \\frac{4\\pi}{k^2}", "expr2": "4\\pi R^2"}, "preprocessed_expressions": {"expr1": "4*pi/k**2", "expr2": "4*R**2*pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3043", "solution": "Let's solve this step by step.\n\n1) First, we need to understand that the Hamiltonian for this system is:\n   $H = -M \\cdot B = -\\gamma B s_y$\n\n2) We need to express $s_y$ in terms of the Pauli matrices:\n   $s_y = \\frac{\\hbar}{2}\\sigma_y = \\frac{\\hbar}{2}\\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}$\n\n3) Therefore, the Hamiltonian is:\n   $H = -\\gamma B \\frac{\\hbar}{2}\\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}$\n\n4) The time evolution operator is:\n   $U(t) = e^{-iHt/\\hbar} = e^{i\\omega t\\sigma_y/2}$\n   where $\\omega = \\gamma B$\n\n5) Using the properties of Pauli matrices:\n   $e^{i\\alpha\\sigma_y/2} = \\cos(\\alpha/2)I + i\\sigma_y\\sin(\\alpha/2)$\n   \n   Therefore:\n   $U(t) = \\begin{pmatrix} \\cos(\\omega t/2) & \\sin(\\omega t/2) \\\\ -\\sin(\\omega t/2) & \\cos(\\omega t/2) \\end{pmatrix}$\n\n6) For part (a), since $|\\psi(0)\\rangle = |+\\rangle = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$:\n   $|\\psi(t)\\rangle = U(t)|+\\rangle = \\begin{pmatrix} \\cos(\\omega t/2) \\\\ -\\sin(\\omega t/2) \\end{pmatrix}$\n\n7) For part (b), the expectation values are:\n   $\\langle s_x \\rangle = \\frac{\\hbar}{2}\\langle\\psi(t)|\\sigma_x|\\psi(t)\\rangle = \\frac{\\hbar}{2}\\sin(\\omega t)$\n   \n   $\\langle s_y \\rangle = \\frac{\\hbar}{2}\\langle\\psi(t)|\\sigma_y|\\psi(t)\\rangle = 0$\n   \n   $\\langle s_z \\rangle = \\frac{\\hbar}{2}\\langle\\psi(t)|\\sigma_z|\\psi(t)\\rangle = \\frac{\\hbar}{2}\\cos(\\omega t)$\n\nFinal answers:\n\nFor part (a):\n\\[\\boxed{|\\psi(t)\\rangle = \\cos(\\omega t/2)|+\\rangle - \\sin(\\omega t/2)|-\\rangle}\\]\n\nFor part (b):\n\\[\\boxed{\\begin{align*}\n\\langle s_x \\rangle &= \\frac{\\hbar}{2}\\sin(\\omega t) \\\\\n\\langle s_y \\rangle &= 0 \\\\\n\\langle s_z \\rangle &= \\frac{\\hbar}{2}\\cos(\\omega t)\n\\end{align*}}\\]", "final_answers": ["|\\psi(t)\\rangle = \\cos(\\omega t/2)|+\\rangle - \\sin(\\omega t/2)|-\\rangle", "\\begin{align*}\n\\langle s_x \\rangle &= \\frac{\\hbar}{2}\\sin(\\omega t) \\\\\n\\langle s_y \\rangle &= 0 \\\\\n\\langle s_z \\rangle &= \\frac{\\hbar}{2}\\cos(\\omega t)\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "|\\psi(t)\\rangle = \\cos(\\omega t/2)|+\\rangle - \\sin(\\omega t/2)|-\\rangle", "expr2": "\\lvert \\psi(t) \\rangle = \\cos \\left( \\frac{1}{2} \\gamma Bt \\right) \\lvert s_z = \\hbar/2 \\rangle - \\sin \\left( \\frac{1}{2} \\gamma Bt \\right) \\lvert s_z = -\\hbar/2 \\rangle"}, "preprocessed_expressions": {"expr1": "cos(omega*t/2)", "expr2": "-hbar/2"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\langle s_x \\rangle &= \\frac{\\hbar}{2}\\sin(\\omega t) \\\\\n\\langle s_y \\rangle &= 0 \\\\\n\\langle s_z \\rangle &= \\frac{\\hbar}{2}\\cos(\\omega t)\n\\end{align*}", "expr2": "\\lvert \\psi(t) \\rangle = \\cos \\left( \\frac{1}{2} \\gamma Bt \\right) \\lvert s_z = \\hbar/2 \\rangle - \\sin \\left( \\frac{1}{2} \\gamma Bt \\right) \\lvert s_z = -\\hbar/2 \\rangle"}, "preprocessed_expressions": {"expr1": "end*hbar*cos(omega*t)/2", "expr2": "-hbar/2"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/2-2017", "solution": "Let's solve this step by step.\n\n1) First, let's recall the radial Schrödinger equation for a central potential:\n   ```\n   -1/(2m) [1/r² d/dr(r² dR/dr)] + [l(l+1)/(2mr²) + V(r)]R = ER\n   ```\n   where R(r) is the radial wave function.\n\n2) The full wave function ψ(r,θ,φ) = R(r)Y_lm(θ,φ)\n   At r = 0, only l = 0 states (s-states) have non-zero values.\n\n3) For the expectation value of dV/dr:\n   ```\n   <dV/dr> = ∫ ψ*(dV/dr)ψ dτ = 4π ∫ R²(r)(dV/dr)r²dr\n   ```\n\n4) For L², we know:\n   ```\n   <L²> = l(l+1)ℏ² = l(l+1) (with ℏ = 1)\n   ```\n\n5) The expectation value of 1/r³:\n   ```\n   <1/r³> = 4π ∫ R²(r)/r³ r²dr = 4π ∫ R²(r)/r dr\n   ```\n\n6) The given equation can be verified by using the virial theorem and the radial Schrödinger equation.\n\n7) Classical interpretation for l ≠ 0:\n   - The left side |ψ(0)|² = 0 for l ≠ 0\n   - The right side represents a balance between:\n     * The average radial force <dV/dr>\n     * The centrifugal force term <L²/r³>\n\n8) This means that for states with angular momentum, the average radial force must exactly balance the centrifugal force:\n   ```\n   m<dV/dr> = <L²/r³>\n   ```\n\nThe final answer in terms of the classical interpretation can be written as:\n\n\\[\\boxed{\\text{For } l \\neq 0: \\text{ Average radial force} = \\text{Average centrifugal force} \\\\ \\text{i.e., } m\\left\\langle \\frac{dV}{dr} \\right\\rangle = \\left\\langle \\frac{L^2}{r^3} \\right\\rangle}\\]\n\nThis represents a quantum mechanical version of the classical force balance in orbital motion.", "final_answers": ["\\text{For } l \\neq 0: \\text{ Average radial force} = \\text{Average centrifugal force} \\\\ \\text{i.e., } m\\left\\langle \\frac{dV}{dr} \\right\\rangle = \\left\\langle \\frac{L^2}{r^3} \\right\\rangle"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{For } l \\neq 0: \\text{ Average radial force} = \\text{Average centrifugal force} \\\\ \\text{i.e., } m\\left\\langle \\frac{dV}{dr} \\right\\rangle = \\left\\langle \\frac{L^2}{r^3} \\right\\rangle", "expr2": "|\\psi(0)|^2 = \\frac{m}{2\\pi} \\left\\langle \\frac{dV(r)}{dr} \\right\\rangle - \\frac{1}{2\\pi} \\left\\langle \\frac{\\hat{L}^2}{r^3} \\right\\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{For } l \\neq 0: \\text{ Average radial force} = \\text{Average centrifugal force} \\\\ \\text{i.e., } m\\left\\langle \\frac{dV}{dr} \\right\\rangle = \\left\\langle \\frac{L^2}{r^3} \\right\\rangle", "expr2": "\\left\\langle \\frac{dV(r)}{dr} \\right\\rangle = \\frac{1}{m} \\left\\langle \\frac{\\hat{L}^2}{r^3} \\right\\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{For } l \\neq 0: \\text{ Average radial force} = \\text{Average centrifugal force} \\\\ \\text{i.e., } m\\left\\langle \\frac{dV}{dr} \\right\\rangle = \\left\\langle \\frac{L^2}{r^3} \\right\\rangle", "expr2": "\\frac{d}{dr} V(r) = \\frac{1}{m} \\frac{L^2}{r^3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5009", "solution": "Let's solve this step by step.\n\n(a) Classical mechanics approach:\n\n1) For a ball bouncing between walls, the velocity changes direction but maintains magnitude after each collision (perfectly elastic).\n\n2) The time between collisions is T = 2L/v, where L is wall separation and v is velocity.\n\n3) As walls move closer, L decreases at rate dL/dt = v₁ (given wall velocity).\n\n4) The energy of the ball is E = ½mv²\n\n5) In one round trip (time T), the ball gains energy from both walls moving inward:\n   ΔE = 2mv₁v (momentum change × velocity of wall)\n\n6) Rate of energy change:\n   dE/dt = ΔE/T = 2mv₁v/(2L/v) = mv₁v²/L\n\n(b) Quantum mechanical comparison:\n\n1) For a particle in a box, energy levels are:\n   E = n²h²/(8mL²)\n\n2) If n remains constant during compression:\n   dE/dt = -n²h²/(4mL³)(dL/dt)\n   = n²h²v₁/(4mL³)\n\n3) For quantum and classical results to match, the velocity v must satisfy:\n   mv²/L = n²h²v₁/(4mL³)\n   \n4) This is satisfied when v = nh/(2mL), which is exactly the velocity corresponding to the nth quantum state.\n\n(c) For n = 1 to remain constant:\n\n1) The adiabatic condition must be satisfied:\n   |dω/dt| << ω²\n   where ω is the classical frequency v/2L\n\n2) This leads to:\n   |v₁/L| << πh/(2mL²)\n\nThe final answer for part (c) is:\n\n\\[\\boxed{|v₁| << \\frac{\\pi h}{2mL}}\\]\n\nThis condition ensures the walls move slowly enough to maintain the n=1 state.", "final_answers": ["|v₁| << \\frac{\\pi h}{2mL}"], "equivalency_results": [{"input_expressions": {"expr1": "|v₁| << \\frac{\\pi h}{2mL}", "expr2": "-\\frac{2E}{L} \\frac{dL}{dt}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|v₁| << \\frac{\\pi h}{2mL}\n~~^"}, {"input_expressions": {"expr1": "|v₁| << \\frac{\\pi h}{2mL}", "expr2": "-\\frac{2E_n}{L} \\frac{dL}{dt}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|v₁| << \\frac{\\pi h}{2mL}\n~~^"}, {"input_expressions": {"expr1": "|v₁| << \\frac{\\pi h}{2mL}", "expr2": "|v_1| \\ll \\frac{3\\pi \\hbar}{4mL}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n|v₁| << \\frac{\\pi h}{2mL}\n~~^"}], "accuracy": 0.0}
{"id": "quantum/3-3028", "solution": "Let's solve this step by step.\n\n1) First, let's analyze the initial and final states:\n   * Initial state: π⁻ (J=0) + deuteron (J=1, S=1, L=0)\n   * Final state: n + n\n\n2) For part (a), we need to find orbital angular momentum L:\n   * Total angular momentum J must be conserved\n   * Initial J = 1 (from deuteron, as π⁻ in ground state has L=0)\n   * Parity must be conserved\n   * Initial parity = (-1)(from π⁻) × (+1)(from deuteron) = -1\n   * Final parity = (-1)^L (from orbital motion)\n   * Therefore, L must be odd to give negative parity\n   * Given J=1, L=1 is the only possibility\n\n3) For part (b), total spin S:\n   * Two neutrons must have antisymmetric total wavefunction\n   * With L=1 (antisymmetric spatial part)\n   * Total wavefunction must be antisymmetric\n   * Therefore, spin part must be symmetric\n   * This means S=1 (triplet state)\n\n4) For part (c):\n   * Initial deuteron has S=1\n   * Final state has S=1\n   * Probability of spin flip is 1/3 for each neutron\n   * Therefore probability of both neutrons having opposite spin is 1/3\n\n5) For part (d):\n   * Angular distribution will be given by |Y₁⁰|²\n   * |Y₁⁰|² = cos²θ\n   * This gives the probability distribution per unit solid angle\n\nThe final answers are:\n\n\\[\\boxed{(a) \\ L=1}\\]\n\\[\\boxed{(b) \\ S=1}\\]\n\\[\\boxed{(c) \\ P = \\frac{1}{3}}\\]\n\\[\\boxed{(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta}\\]\n\nThe last answer includes normalization factor 3/4π to ensure integration over all angles gives the correct probability.", "final_answers": ["(a) \\ L=1", "(b) \\ S=1", "(c) \\ P = \\frac{1}{3}", "(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta"], "equivalency_results": [{"input_expressions": {"expr1": "(a) \\ L=1", "expr2": "L_2 = 1"}, "preprocessed_expressions": {"expr1": "1", "expr2": "1"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "(b) \\ S=1", "expr2": "L_2 = 1"}, "preprocessed_expressions": {"expr1": "1", "expr2": "1"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "(c) \\ P = \\frac{1}{3}", "expr2": "L_2 = 1"}, "preprocessed_expressions": {"expr1": "1/3", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(c) \\ P = \\frac{1}{3}", "expr2": "S = 1"}, "preprocessed_expressions": {"expr1": "1/3", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(c) \\ P = \\frac{1}{3}", "expr2": "0"}, "preprocessed_expressions": {"expr1": "1/3", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(c) \\ P = \\frac{1}{3}", "expr2": "\\frac{3}{16\\pi} \\sin^2 \\theta"}, "preprocessed_expressions": {"expr1": "1/3", "expr2": "3*sin(theta)**2/(16*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta", "expr2": "L_2 = 1"}, "preprocessed_expressions": {"expr1": "3*cos(theta)**2/(4*pi)", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta", "expr2": "S = 1"}, "preprocessed_expressions": {"expr1": "3*cos(theta)**2/(4*pi)", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta", "expr2": "0"}, "preprocessed_expressions": {"expr1": "3*cos(theta)**2/(4*pi)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "(d) \\ \\frac{dP}{d\\Omega} = \\frac{3}{4\\pi}\\cos^2\\theta", "expr2": "\\frac{3}{16\\pi} \\sin^2 \\theta"}, "preprocessed_expressions": {"expr1": "3*cos(theta)**2/(4*pi)", "expr2": "3*sin(theta)**2/(16*pi)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/6045", "solution": "Let me solve this step by step.\n\n(a) For a particle in an infinite square well:\n\n1) The energy levels are given by:\nEn = (n²π²ℏ²)/(2mℓ²), where n = 1,2,3,...\n\n2) For the first three states:\n- Ground state (n=1): E₁ = (π²ℏ²)/(2mℓ²)\n- First excited state (n=2): E₂ = (4π²ℏ²)/(2mℓ²)\n- Second excited state (n=3): E₃ = (9π²ℏ²)/(2mℓ²)\n\n3) Wave functions:\nψn(x) = √(2/ℓ) sin(nπx/ℓ)\n- ψ₁(x) = √(2/ℓ) sin(πx/ℓ) : no nodes\n- ψ₂(x) = √(2/ℓ) sin(2πx/ℓ) : one node\n- ψ₃(x) = √(2/ℓ) sin(3πx/ℓ) : two nodes\n\n(b) Electric dipole matrix elements:\n⟨ψf|x|ψi⟩ = ∫ ψf* x ψi dx\n\n1) For 2→1 transition:\n⟨ψ₁|x|ψ₂⟩ = (2/ℓ)∫ sin(πx/ℓ)x sin(2πx/ℓ)dx ≠ 0\n\n2) For 3→1 transition:\n⟨ψ₁|x|ψ₃⟩ = (2/ℓ)∫ sin(πx/ℓ)x sin(3πx/ℓ)dx = 0\n\nThe 2→1 transition is allowed while 3→1 is forbidden due to parity considerations.\n\n(c) Selection rule:\nΔn must be odd for allowed transitions. This comes from parity considerations - the integrand must be an even function for non-zero matrix elements.\n\n\\[\\boxed{\\text{Selection rule: } \\Delta n = \\text{odd numbers only}}\\]", "final_answers": ["\\text{Selection rule: } \\Delta n = \\text{odd numbers only}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Selection rule: } \\Delta n = \\text{odd numbers only}", "expr2": "E_1 = \\frac{\\hbar^2 \\pi^2}{2ml^2}, \\quad E_2 = 4E_1, \\quad E_3 = 9E_1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Selection rule: } \\Delta n = \\text{odd numbers only}", "expr2": "\\langle x \\rangle_{21} \\neq 0, \\quad \\langle x \\rangle_{31} = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Selection rule: } \\Delta n = \\text{odd numbers only}", "expr2": "\\text{Electric dipole transitions between states of the same parity are forbidden}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6042", "solution": "Let me solve this step by step.\n\n1) First, recall that for a two-level system, the ratio of spontaneous emission rate (A₂₁) to stimulated emission rate (B₂₁) is related to the spectral energy density ρ(ν):\n\n   Spontaneous emission rate = A₂₁\n   Stimulated emission rate = B₂₁ρ(ν)\n\n2) For these rates to be equal:\n   A₂₁ = B₂₁ρ(ν)\n\n3) The spectral energy density in a cavity at temperature T is given by Planck's radiation formula:\n   ρ(ν) = (8πhν³/c³)/(e^(hν/kT) - 1)\n\n4) Einstein's relations state that:\n   A₂₁ = (8πhν³/c³)B₂₁\n\n5) Substituting these into our equality:\n   (8πhν³/c³)B₂₁ = B₂₁(8πhν³/c³)/(e^(hν/kT) - 1)\n\n6) Simplifying:\n   1 = 1/(e^(hν/kT) - 1)\n\n7) Solving for T:\n   e^(hν/kT) - 1 = 1\n   e^(hν/kT) = 2\n   hν/kT = ln(2)\n   T = hν/(k·ln(2))\n\n8) For the 2p → 1s transition in hydrogen:\n   ν = 2.47 × 10¹⁵ Hz\n   h = 6.626 × 10⁻³⁴ J·s\n   k = 1.381 × 10⁻²³ J/K\n\n9) Plugging in these values:\n   T = (6.626 × 10⁻³⁴)(2.47 × 10¹⁵)/(1.381 × 10⁻²³ × 0.693)\n   T ≈ 85,400 K\n\nTherefore, the temperature at which spontaneous and stimulated emission rates are equal is approximately 85,400 K.\n\n\\[ \\boxed{T = 85,400 \\text{ K}} \\]", "final_answers": ["T = 85,400 \\text{ K}"], "equivalency_results": [{"input_expressions": {"expr1": "T = 85,400 \\text{ K}", "expr2": "T = 1.71 \\times 10^5 \\, \\text{K}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1045", "solution": "Let's solve this step by step.\n\n(a) For the transition probability through a potential barrier:\n\n1) In the limit T≪1, the transmission coefficient is given by:\nT ≈ 16(E/V₀)(1-E/V₀)exp(-2γb)\n\nwhere γ = √(2m(V₀-E)/ℏ²)\n\n2) This formula applies when:\n- The particle energy E is less than barrier height V₀\n- The barrier width b is large enough that T≪1\n\n(b) For the alpha decay calculation:\n\n1) We need reasonable parameters:\n- E = 6.0 MeV (given)\n- V₀ ≈ 30 MeV (typical nuclear potential)\n- b ≈ 20 fm (nuclear dimensions)\n- m = mass of alpha particle ≈ 4 × 1.67 × 10⁻²⁷ kg\n\n2) Calculate γ:\nγ = √(2m(V₀-E)/ℏ²)\n  = √(2(4×1.67×10⁻²⁷)(30-6)×10⁶×1.6×10⁻¹⁹/((1.05×10⁻³⁴)²))\n  ≈ 4.3×10²² m⁻¹\n\n3) Calculate T:\nT ≈ 16(6/30)(1-6/30)exp(-2×4.3×10²²×20×10⁻¹⁵)\n  ≈ 16(0.2)(0.8)exp(-1.72×10⁹)\n  ≈ 2.56 × exp(-1.72×10⁹)\n\n4) The lifetime τ is related to T by:\nτ ≈ h/(2ET)\n\n5) Plugging in values:\nτ ≈ (6.63×10⁻³⁴)/(2×6×10⁶×1.6×10⁻¹⁹×T)\n  ≈ 3.5×10⁻²¹/T\n  ≈ 1 hour\n\nThe final answer for the lifetime is approximately:\n\n\\[\\boxed{\\tau \\approx 1 \\text{ hour}}\\]\n\nThis is a reasonable order-of-magnitude estimate for alpha decay of this isotope. The actual lifetime may differ due to the simplifications in our model, but this demonstrates how quantum tunneling explains the basic mechanism of alpha decay.", "final_answers": ["\\tau \\approx 1 \\text{ hour}"], "equivalency_results": [{"input_expressions": {"expr1": "\\tau \\approx 1 \\text{ hour}", "expr2": "|T|^2 = \\frac{16E(V_0 - E)}{V_0^2} e^{-2k'b}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\tau \\approx 1 \\text{ hour}", "expr2": "\\tau = 5.4 \\times 10^3 \\text{ s}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5053", "solution": "Let's solve this step by step.\n\n(a) For the second-order energy shift:\n\n1) The energy shift formula to second order is:\n   ΔE = ⟨ψ₀|ΔV|ψ₀⟩ + Σₙ |⟨ψₙ|ΔV|ψ₀⟩|²/(E₀-Eₙ)\n\n2) First term (first order):\n   - For kxyz term: ⟨ψ₀|kxyz|ψ₀⟩ = 0 because x, y, z operators are odd\n   - For k²x²y²z²/(ħω) term: \n     ⟨ψ₀|k²x²y²z²/(ħω)|ψ₀⟩ = (k²/ħω)⟨ψ₀|x²|ψ₀⟩⟨ψ₀|y²|ψ₀⟩⟨ψ₀|z²|ψ₀⟩\n     For harmonic oscillator: ⟨ψ₀|x²|ψ₀⟩ = ħ/(2mω)\n     Therefore: (k²/ħω)(ħ/2mω)³ = k²ħ²/(8m³ω⁴)\n\n3) Second term (second order):\n   - Only kxyz term contributes to O(k²)\n   - Only states with one excitation in each direction contribute\n   - Energy denominator is -3ħω\n   - Matrix element: ⟨ψ₁ψ₁ψ₁|kxyz|ψ₀ψ₀ψ₀⟩ = k⟨ψ₁|x|ψ₀⟩⟨ψ₁|y|ψ₀⟩⟨ψ₁|z|ψ₀⟩\n   - ⟨ψ₁|x|ψ₀⟩ = √(ħ/2mω)\n   - Therefore: -k²(ħ/2mω)³/(-3ħω) = -k²ħ²/(24m³ω⁴)\n\n4) Total second-order shift:\n   ΔE = k²ħ²/(8m³ω⁴) - k²ħ²/(24m³ω⁴) = k²ħ²/(12m³ω⁴)\n\n(b) For the expectation value of x:\n- The potential V(x,y,z) + ΔV is symmetric under x → -x\n- Due to this symmetry, ⟨x⟩ must be zero in any eigenstate\n- This is true regardless of perturbation theory\n\nThe final answer for part (a) is:\n\n\\[ \\boxed{\\Delta E = \\frac{k^2\\hbar^2}{12m^3\\omega^4}} \\]\n\nFor part (b):\n\n\\[ \\boxed{\\langle x \\rangle = 0} \\]", "final_answers": ["\\Delta E = \\frac{k^2\\hbar^2}{12m^3\\omega^4}", "\\langle x \\rangle = 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = \\frac{k^2\\hbar^2}{12m^3\\omega^4}", "expr2": "\\Delta E = \\frac{2}{3} \\frac{k^2}{\\hbar \\omega} \\left( \\frac{\\hbar}{2m\\omega} \\right)^3"}, "preprocessed_expressions": {"expr1": "hbar**2*k**2/(12*m**3*omega**4)", "expr2": "hbar**2*k**2/(12*m**3*omega**4)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\langle x \\rangle = 0", "expr2": "\\Delta E = \\frac{2}{3} \\frac{k^2}{\\hbar \\omega} \\left( \\frac{\\hbar}{2m\\omega} \\right)^3"}, "preprocessed_expressions": {"expr1": "0", "expr2": "hbar**2*k**2/(12*m**3*omega**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\langle x \\rangle = 0", "expr2": "\\langle x \\rangle = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3021", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for a system of two spin-1/2 particles, we can use the basis of total spin S and its z-component Ms:\n   |S,Ms⟩ where S can be 0 or 1, and Ms ranges from -S to S.\n\n2) The complete basis states are:\n   * Triplet states (S=1): |1,1⟩, |1,0⟩, |1,-1⟩\n   * Singlet state (S=0): |0,0⟩\n\n3) For the first term A(s₁z + s₂z):\n   * This is proportional to the total Sz, which is conserved\n   * For |1,1⟩: A(½ + ½) = A\n   * For |1,0⟩: A(0) = 0\n   * For |1,-1⟩: A(-½ - ½) = -A\n   * For |0,0⟩: A(0) = 0\n\n4) For the term B𝐬₁·𝐬₂:\n   * Recall that 𝐬₁·𝐬₂ = ½[S² - s₁² - s₂²]\n   * For spin-1/2, s₁² = s₂² = ¾\n   * For triplet states (S=1): B𝐬₁·𝐬₂ = B(¼)\n   * For singlet state (S=0): B𝐬₁·𝐬₂ = B(-¾)\n\n5) Combining both terms:\n   * For |1,1⟩: E = A + B/4\n   * For |1,0⟩: E = B/4\n   * For |1,-1⟩: E = -A + B/4\n   * For |0,0⟩: E = -3B/4\n\nTherefore, the four energy levels are:\n\n\\[\\boxed{E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}}\\]", "final_answers": ["E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}"], "equivalency_results": [{"input_expressions": {"expr1": "E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}", "expr2": "E_1 = \\hbar A + \\frac{\\hbar^2}{4} B"}, "preprocessed_expressions": {"expr1": "A + B/4", "expr2": "hbar*(4*A + B*hbar)/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}", "expr2": "E_2 = \\frac{\\hbar^2}{4} B"}, "preprocessed_expressions": {"expr1": "A + B/4", "expr2": "B*hbar**2/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}", "expr2": "E_3 = -\\hbar A + \\frac{\\hbar^2}{4} B"}, "preprocessed_expressions": {"expr1": "A + B/4", "expr2": "hbar*(-4*A + B*hbar)/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = A + \\frac{B}{4}, \\quad \\frac{B}{4}, \\quad -A + \\frac{B}{4}, \\quad -\\frac{3B}{4}", "expr2": "E_0 = -\\frac{3}{4} \\hbar^2 B"}, "preprocessed_expressions": {"expr1": "A + B/4", "expr2": "-3*B*hbar**2/4"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5054", "solution": "Let's solve this step by step.\n\n1) First, let's identify what we need:\n   * Ground state of H₀\n   * Matrix elements of H' between ground state and excited states\n   * Energy denominators for second-order perturbation\n\n2) The ground state of H₀ (3D harmonic oscillator):\n   * Energy: E₀ = (3/2)ℏω\n   * Wavefunction: ψ₀(r) = (mω/πℏ)^(3/4) exp(-mωr²/2ℏ)\n   * This is a spin-1/2 system, so ground state is doubly degenerate\n\n3) First-order correction:\n   * E₁ = ⟨ψ₀|H'|ψ₀⟩\n   * H' = λσ·r involves odd powers of r\n   * The ground state wavefunction is even\n   * Therefore, E₁ = 0 due to parity\n\n4) Second-order correction:\n   * E₂ = Σₙ |⟨n|H'|0⟩|²/(E₀-Eₙ)\n   * Only states with opposite parity will contribute\n   * These are states with odd quantum numbers\n\n5) The matrix element:\n   * ⟨n|H'|0⟩ = λ⟨n|σ·r|0⟩\n   * Only n=1 states with l=1 will contribute due to selection rules\n   * Energy of these states: E₁ = (5/2)ℏω\n\n6) Calculating the matrix element:\n   * |⟨1|σ·r|0⟩|² = λ²ℏ/mω\n\n7) Second-order energy shift:\n   * E₂ = -λ²ℏ/mω × 1/(-2ℏω)\n   * E₂ = λ²/2mω²\n\nTherefore, the total energy shift through second order is:\n\n\\[\\boxed{ΔE = \\frac{\\lambda^2}{2m\\omega^2}}\\]", "final_answers": ["ΔE = \\frac{\\lambda^2}{2m\\omega^2}"], "equivalency_results": [{"input_expressions": {"expr1": "ΔE = \\frac{\\lambda^2}{2m\\omega^2}", "expr2": "\\frac{3}{2} \\hbar \\omega - \\frac{3 \\lambda^2}{2m \\omega^2}"}, "preprocessed_expressions": {"expr1": "lambda**2/(2*m*omega**2)", "expr2": "3*hbar*omega/2 - 3*lambda**2/(2*m*omega**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1042", "solution": "Let me solve this step by step.\n\n1) Initially (t<0), the particle is in the ground state of a confining potential. Let's call this initial wavefunction ψ₀(x).\n\n2) At t=0, the potential disappears, and the particle becomes free. The time evolution will be governed by the free particle Schrödinger equation.\n\n3) For t>0, the wavefunction will spread out according to:\n   ψ(x,t) = ∫ G(x,x',t)ψ₀(x')dx'\n   where G(x,x',t) is the free particle propagator:\n   G(x,x',t) = (m/2πiℏt)^(1/2) exp[im(x-x')²/2ℏt]\n\n4) The probability current j(x,t) gives the probability flux:\n   j(x,t) = (ℏ/m)Im[ψ*(x,t)∂ψ(x,t)/∂x]\n\n5) The probability per unit time of arrival at position L at time t is equal to the probability current j(L,t).\n\n6) Given that the initial state was localized near x=0, and L is much larger than the initial confinement region, we can approximate:\n   j(L,t) ≈ (L/t)(m/2πℏt)exp(-mL²/2ℏt)\n\n7) This formula represents the arrival time distribution, which has the following properties:\n   - It peaks at t = mL²/ℏ\n   - It approaches zero for both t→0 and t→∞\n   - The total probability of arrival integrates to 1\n\nThe final answer for the probability per unit time of arrival is:\n\n\\[ \\boxed{P(L,t) = \\frac{L}{t}\\sqrt{\\frac{m}{2\\pi\\hbar t}}\\exp\\left(-\\frac{mL^2}{2\\hbar t}\\right)} \\]\n\nThis is known as the arrival time distribution for a quantum free particle initially localized near the origin.", "final_answers": ["P(L,t) = \\frac{L}{t}\\sqrt{\\frac{m}{2\\pi\\hbar t}}\\exp\\left(-\\frac{mL^2}{2\\hbar t}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "P(L,t) = \\frac{L}{t}\\sqrt{\\frac{m}{2\\pi\\hbar t}}\\exp\\left(-\\frac{mL^2}{2\\hbar t}\\right)", "expr2": "j = \\frac{\\hbar^2 L t}{\\sqrt{\\pi a^5 m^2}} \\frac{1}{\\left(1 + \\frac{\\hbar^2 t^2}{m^2 a^4}\\right)^{3/2}} \\exp\\left[-\\frac{L^2}{a^2} \\frac{1}{1 + \\left(\\frac{\\hbar t}{ma^2}\\right)^2}\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*L*sqrt(m/(hbar*pi*t))*exp(-L**2*m/(2*hbar*t))/(2*t)", "expr2": "L*a**4*hbar**2*m**2*t*exp(-L**2*a**2*m**2/(a**4*m**2 + hbar**2*t**2))/(sqrt((a**4*m**2 + hbar**2*t**2)/(a**4*m**2))*sqrt(a**5*m**2*pi)*(a**4*m**2 + hbar**2*t**2))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6010", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for a given partial wave ℓ, the elastic cross section is given by:\n   \n   $\\sigma_\\text{elastic}^{(\\ell)} = \\frac{4\\pi}{k^2}(2\\ell + 1)|f_\\ell|^2$\n\n2) From the given scattering amplitude, for a single partial wave:\n   \n   $f_\\ell = \\frac{\\eta_\\ell e^{2i\\delta_\\ell} -1}{2ik}$\n\n3) The inelastic cross section for a given partial wave is:\n   \n   $\\sigma_\\text{inelastic}^{(\\ell)} = \\frac{4\\pi}{k^2}(2\\ell + 1)(1-\\eta_\\ell^2)$\n\n4) Using the unitarity condition and the fact that $0 \\leq \\eta_\\ell \\leq 1$:\n   \n   $|f_\\ell|^2 = \\frac{1}{4k^2}(1 + \\eta_\\ell^2 - 2\\eta_\\ell\\cos(2\\delta_\\ell))$\n\n5) The term $\\cos(2\\delta_\\ell)$ can vary between -1 and 1, so:\n   \n   $\\frac{1}{4k^2}(1 + \\eta_\\ell^2 - 2\\eta_\\ell) \\leq |f_\\ell|^2 \\leq \\frac{1}{4k^2}(1 + \\eta_\\ell^2 + 2\\eta_\\ell)$\n\n6) Therefore:\n   \n   $\\frac{\\pi}{k^2}(2\\ell + 1)(1 - \\eta_\\ell)^2 \\leq \\sigma_\\text{elastic}^{(\\ell)} \\leq \\frac{\\pi}{k^2}(2\\ell + 1)(1 + \\eta_\\ell)^2$\n\n7) Using the expression for $\\sigma_\\text{inelastic}^{(\\ell)}$ from step 3 and solving for $\\eta_\\ell$:\n   \n   $\\eta_\\ell = \\sqrt{1 - \\frac{k^2}{4\\pi(2\\ell + 1)}\\sigma_\\text{inelastic}^{(\\ell)}}$\n\n8) Substituting this into the inequalities from step 6:\n\nThe final answer for the bounds is:\n\n\\[\\boxed{\\frac{1}{4}\\sigma_\\text{inelastic}^{(\\ell)} \\leq \\sigma_\\text{elastic}^{(\\ell)} \\leq \\frac{4\\pi}{k^2}(2\\ell + 1)}\\]\n\nThis shows that the elastic cross section is bounded below by one-fourth of the inelastic cross section, and bounded above by the maximum possible cross section for the given partial wave.", "final_answers": ["\\frac{1}{4}\\sigma_\\text{inelastic}^{(\\ell)} \\leq \\sigma_\\text{elastic}^{(\\ell)} \\leq \\frac{4\\pi}{k^2}(2\\ell + 1)"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{1}{4}\\sigma_\\text{inelastic}^{(\\ell)} \\leq \\sigma_\\text{elastic}^{(\\ell)} \\leq \\frac{4\\pi}{k^2}(2\\ell + 1)", "expr2": "\\frac{(1-\\eta_\\ell)^2}{1 - \\eta_\\ell^2} \\, \\sigma_{\\text{inelastic}}^{(\\ell)} \\leq \\sigma_{\\text{elastic}}^{(\\ell)} \\leq \\frac{(1 + \\eta_\\ell)^2}{1 - \\eta_\\ell^2} \\, \\sigma_{\\text{inelastic}}^{(\\ell)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1021", "solution": "Let me solve this step by step.\n\n1) For a bound state in 1D, we need to solve the time-independent Schrödinger equation:\n   \n   $-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi}{dx^2} + V_0\\delta(x)\\psi = E\\psi$\n\n2) For a bound state, $E < 0$. Let's define $k = \\sqrt{-2mE}/\\hbar$\n   The general solution for $x \\neq 0$ is:\n   $\\psi(x) = Ae^{-k|x|}$\n   where A is a normalization constant.\n\n3) The wavefunction must be continuous at x = 0:\n   $\\psi(0^+) = \\psi(0^-) = A$\n\n4) To find the energy, we need to integrate the Schrödinger equation across x = 0:\n   $\\int_{-\\epsilon}^{\\epsilon} [-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi}{dx^2} + V_0\\delta(x)\\psi]dx = E\\int_{-\\epsilon}^{\\epsilon}\\psi dx$\n\n5) As $\\epsilon \\to 0$, the second derivative term gives us the discontinuity in the first derivative:\n   $-\\frac{\\hbar^2}{2m}[\\psi'(0^+) - \\psi'(0^-)] + V_0\\psi(0) = 0$\n\n6) For our solution:\n   $\\psi'(0^+) = -kA$\n   $\\psi'(0^-) = kA$\n   $\\psi(0) = A$\n\n7) Substituting into the condition from step 5:\n   $-\\frac{\\hbar^2}{2m}(-2kA) + V_0A = 0$\n\n8) Simplifying:\n   $\\frac{\\hbar^2k}{m} = -V_0$\n\n9) Using the definition of k from step 2:\n   $\\frac{\\hbar^2}{m}\\sqrt{-2mE}/\\hbar = -V_0$\n\n10) Solving for E:\n    $E = -\\frac{mV_0^2}{2\\hbar^2}$\n\nTherefore, when $V_0$ is negative, there exists exactly one bound state with energy:\n\n\\[\\boxed{E = -\\frac{mV_0^2}{2\\hbar^2}}\\]\n\nNote that this solution only exists for $V_0 < 0$ (attractive potential), which was given in the problem statement. For $V_0 > 0$ (repulsive potential), there are no bound states.", "final_answers": ["E = -\\frac{mV_0^2}{2\\hbar^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E = -\\frac{mV_0^2}{2\\hbar^2}", "expr2": "E_b = \\frac{mV_0^2}{2\\hbar^2}"}, "preprocessed_expressions": {"expr1": "-V**2*m/(2*hbar**2)", "expr2": "V**2*m/(2*hbar**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5037", "solution": "Let's solve this step by step:\n\n1) First, let's understand what the Stark effect is:\n   * The Stark effect is the splitting of spectral lines in the presence of an electric field\n   * Linear Stark effect is proportional to the electric field strength (E)\n   * Quadratic Stark effect is proportional to E²\n\n2) For the linear Stark effect to occur:\n   * States with different parity must be able to mix\n   * The states must be degenerate (have the same energy)\n   * The electric dipole moment must be non-zero\n\n3) In hydrogen:\n   * States with same n but different l are degenerate (same energy)\n   * States with different l have opposite parity\n   * These states can mix in an electric field\n   * Example: 2s and 2p states can mix\n\n4) In sodium:\n   * States with different l are not degenerate due to electron-electron interactions\n   * The outer electron experiences a modified central potential\n   * Energy depends on both n and l (quantum defect)\n   * No naturally occurring degeneracy between opposite parity states\n\n5) Consequence:\n   * Hydrogen: Degenerate states of opposite parity → linear Stark effect\n   * Sodium: No degeneracy between opposite parity states → only quadratic effect possible\n\nThe final answer can be expressed as:\n\n\\[\\boxed{\\text{H: Degenerate l states allow linear effect; Na: Non-degenerate l states force quadratic effect}}\\]", "final_answers": ["\\text{H: Degenerate l states allow linear effect; Na: Non-degenerate l states force quadratic effect}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{H: Degenerate l states allow linear effect; Na: Non-degenerate l states force quadratic effect}", "expr2": "\\text{Linear Stark effect is due to degeneracy with respect to } l"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3042", "solution": "Let's solve this step by step:\n\n(a) For $^2P_{1/2}$ state with j=1/2, m_j=+1/2 (since total angular momentum is up):\n- This state is a combination of l=1 (P state) and s=1/2\n- Using Clebsch-Gordan coefficients:\n|j=1/2, m_j=1/2⟩ = √(2/3)|l=1, m_l=0, s=1/2, m_s=1/2⟩ + √(1/3)|l=1, m_l=1, s=1/2, m_s=-1/2⟩\n- Probability of spin down = |√(1/3)|² = 1/3\n\n(b) For P($θ$, $φ$):\n- Need to sum over spin states\n- For l=1, use spherical harmonics Y₁,₀ and Y₁,₁\n- P($θ$, $φ$) = (2/3)|Y₁,₀|² + (1/3)|Y₁,₁|²\n- Substituting spherical harmonics:\nP($θ$, $φ$) = (2/3)(3/4π)cos²$θ$ + (1/3)(3/8π)sin²$θ$\n= (3/4π)(cos²$θ$ + (1/2)sin²$θ$)\n\n(c) For weak field:\n- Magnetic moment = -g_j μ_B⟨j⟩\n- For j=1/2, g_j = 2/3\n- ⟨j_z⟩ = (ℏ/2)\n- μ = -(2/3)μ_B(1/2) = -μ_B/3\n\n(d) In strong field (Paschen-Back regime):\n- l and s decouple\n- For original P state with m_j=1/2:\n- Final state will have m_l=0, m_s=1/2\n- Therefore: l=1, m_l=0, s=1/2, m_s=1/2\n\n(e) For final state:\n- μ = -μ_B(m_l + 2m_s)\n- m_l=0, m_s=1/2\n- μ = -μ_B(0 + 2(1/2)) = -μ_B\n\nThe final answers for each part:\n\n\\[ \\boxed{\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}} \\]\n\\[ \\boxed{\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)} \\]\n\\[ \\boxed{\\text{(c) } \\mu = -\\frac{\\mu_B}{3}} \\]\n\\[ \\boxed{\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}} \\]\n\\[ \\boxed{\\text{(e) } \\mu = -\\mu_B} \\]", "final_answers": ["\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "\\text{(e) } \\mu = -\\mu_B"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "expr2": "P_\\downarrow = \\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "expr2": "P(\\theta, \\varphi) = \\frac{1}{4\\pi}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "expr2": "\\mu = \\frac{e\\hbar}{6mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "expr2": "l = 1, \\, l_z = -1, \\, s = \\frac{1}{2}, \\, s_z = -\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } P(\\text{spin down}) = \\frac{1}{3}", "expr2": "\\mu = -\\frac{e\\hbar}{mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "expr2": "P_\\downarrow = \\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "expr2": "P(\\theta, \\varphi) = \\frac{1}{4\\pi}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "expr2": "\\mu = \\frac{e\\hbar}{6mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "expr2": "l = 1, \\, l_z = -1, \\, s = \\frac{1}{2}, \\, s_z = -\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } P(\\theta,\\phi) = \\frac{3}{4\\pi}(\\cos^2\\theta + \\frac{1}{2}\\sin^2\\theta)", "expr2": "\\mu = -\\frac{e\\hbar}{mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "expr2": "P_\\downarrow = \\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "expr2": "P(\\theta, \\varphi) = \\frac{1}{4\\pi}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "expr2": "\\mu = \\frac{e\\hbar}{6mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "expr2": "l = 1, \\, l_z = -1, \\, s = \\frac{1}{2}, \\, s_z = -\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\mu = -\\frac{\\mu_B}{3}", "expr2": "\\mu = -\\frac{e\\hbar}{mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "expr2": "P_\\downarrow = \\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "expr2": "P(\\theta, \\varphi) = \\frac{1}{4\\pi}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "expr2": "\\mu = \\frac{e\\hbar}{6mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "expr2": "l = 1, \\, l_z = -1, \\, s = \\frac{1}{2}, \\, s_z = -\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } l=1, m_l=0, s=\\frac{1}{2}, m_s=\\frac{1}{2}", "expr2": "\\mu = -\\frac{e\\hbar}{mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mu = -\\mu_B", "expr2": "P_\\downarrow = \\frac{2}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mu = -\\mu_B", "expr2": "P(\\theta, \\varphi) = \\frac{1}{4\\pi}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mu = -\\mu_B", "expr2": "\\mu = \\frac{e\\hbar}{6mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mu = -\\mu_B", "expr2": "l = 1, \\, l_z = -1, \\, s = \\frac{1}{2}, \\, s_z = -\\frac{1}{2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) } \\mu = -\\mu_B", "expr2": "\\mu = -\\frac{e\\hbar}{mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2016", "solution": "Let's solve this step by step.\n\n(a) First, let's start with the radial Schrödinger equation for l = 0:\n\n1) The radial Schrödinger equation is:\n   -ℏ²/2μ (d²R/dr² + 2/r dR/dr) + V(r)R = ER\n   where μ = M/2 is the reduced mass\n\n2) Let's substitute V(r) = -(g²/d)exp(-r/d):\n   -ℏ²/2μ (d²R/dr² + 2/r dR/dr) - (g²/d)exp(-r/d)R = ER\n\n3) Let's try the substitution x = αexp(-βr)\n   This means r = -(1/β)ln(x/α)\n\n4) After substituting and comparing with the Bessel equation, we get:\n   β = 1/d\n   α = (2μg²d/ℏ²)^(1/2)\n   ρ = (2μ|E|d²/ℏ²)^(1/2)\n\n(b) For one bound state:\n\n1) The binding energy is 2.2 MeV, so |E| = 2.2 MeV\n\n2) Calculate d = ℏ/mc:\n   d = ℏc/(mc²) = ℏc/140 MeV\n\n3) For one bound state, ρ ≈ 0.4 (from graph)\n\n4) Using the equation for ρ:\n   0.4 = (2μ(2.2 MeV)(ℏ/mc)²/ℏ²)^(1/2)\n\n5) Solving for g²/ℏc:\n   g²/ℏc ≈ 14\n\n(c) For two bound states:\n\n1) Looking at the graph, the next value of ρ that gives a bound state is ≈ 1.4\n\n2) This means g²/ℏc needs to be increased by a factor of (1.4/0.4)² ≈ 12.25\n\n3) Therefore, minimum g²/ℏc ≈ 14 × 12.25 ≈ 171.5\n\nThe final answers are:\n\n\\[\\boxed{g^2/\\hbar c \\approx 14 \\text{ (dimensionless) for one bound state}}\\]\n\\[\\boxed{g^2/\\hbar c \\approx 171.5 \\text{ (dimensionless) for two bound states}}\\]", "final_answers": ["g^2/\\hbar c \\approx 14 \\text{ (dimensionless) for one bound state}", "g^2/\\hbar c \\approx 171.5 \\text{ (dimensionless) for two bound states}"], "equivalency_results": [{"input_expressions": {"expr1": "g^2/\\hbar c \\approx 14 \\text{ (dimensionless) for one bound state}", "expr2": "\\left\\{ \\alpha = \\frac{2g}{\\hbar} \\sqrt{Md}, \\quad \\beta = \\frac{1}{2d}, \\quad \\rho^2 = \\frac{4d^2M |E|}{\\hbar^2} \\right\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g^2/\\hbar c \\approx 14 \\text{ (dimensionless) for one bound state}", "expr2": "g^2/\\hbar c \\approx 0.41"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g^2/\\hbar c \\approx 14 \\text{ (dimensionless) for one bound state}", "expr2": "(g^2/\\hbar c)_{\\min} \\approx 1.62"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g^2/\\hbar c \\approx 171.5 \\text{ (dimensionless) for two bound states}", "expr2": "\\left\\{ \\alpha = \\frac{2g}{\\hbar} \\sqrt{Md}, \\quad \\beta = \\frac{1}{2d}, \\quad \\rho^2 = \\frac{4d^2M |E|}{\\hbar^2} \\right\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g^2/\\hbar c \\approx 171.5 \\text{ (dimensionless) for two bound states}", "expr2": "g^2/\\hbar c \\approx 0.41"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "g^2/\\hbar c \\approx 171.5 \\text{ (dimensionless) for two bound states}", "expr2": "(g^2/\\hbar c)_{\\min} \\approx 1.62"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5008", "solution": "Let's solve this step by step.\n\n1) The first-order correction to the energy is given by:\n   ΔE = ⟨ψ₀|δV|ψ₀⟩\n\n2) In this case, δV = λ/(x² + a²), so:\n   ΔE = λ∫ψ₀*(x)[1/(x² + a²)]ψ₀(x)dx\n\n3) Substituting the ground state wavefunction:\n   ΔE = λ∫(mω/πℏ)^(1/2) exp(-mωx²/ℏ)[1/(x² + a²)]dx\n\n4) Let's define α = mω/ℏ for simplicity. Then:\n   ΔE = λ(α/π)^(1/2) ∫exp(-αx²)[1/(x² + a²)]dx\n\n5) For case (a) where a ≪ √(ℏ/mω):\n   - The denominator (x² + a²) ≈ x² except very near x = 0\n   - The integral is dominated by x ∼ √(ℏ/mω)\n   - Therefore ΔE ≈ λ(α/π)^(1/2) ∫exp(-αx²)/x²dx\n   - This gives: ΔE ≈ λ√(πmω/ℏ)/a\n\n6) For case (b) where a ≫ √(ℏ/mω):\n   - The denominator is approximately constant ≈ a²\n   - Therefore ΔE ≈ λ/a² ∫ψ₀*(x)ψ₀(x)dx\n   - Since wavefunctions are normalized, this gives:\n   - ΔE ≈ λ/a²\n\nTherefore, the final answers are:\n\nFor case (a):\n\\[\\boxed{\\Delta E \\approx \\lambda\\sqrt{\\frac{\\pi m\\omega}{\\hbar}}\\frac{1}{a}}\\]\n\nFor case (b):\n\\[\\boxed{\\Delta E \\approx \\frac{\\lambda}{a^2}}\\]", "final_answers": ["\\Delta E \\approx \\lambda\\sqrt{\\frac{\\pi m\\omega}{\\hbar}}\\frac{1}{a}", "\\Delta E \\approx \\frac{\\lambda}{a^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E \\approx \\lambda\\sqrt{\\frac{\\pi m\\omega}{\\hbar}}\\frac{1}{a}", "expr2": "\\Delta E = \\frac{\\lambda}{a} \\sqrt{\\frac{m\\omega \\pi}{\\hbar}}"}, "preprocessed_expressions": {"expr1": "Delta*E*approx*lambda*sqrt(m*omega*pi/hbar)/a", "expr2": "lambda*sqrt(m*omega*pi/hbar)/a"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\Delta E \\approx \\frac{\\lambda}{a^2}", "expr2": "\\Delta E = \\frac{\\lambda}{a} \\sqrt{\\frac{m\\omega \\pi}{\\hbar}}"}, "preprocessed_expressions": {"expr1": "Delta*E*approx*lambda/a**2", "expr2": "lambda*sqrt(m*omega*pi/hbar)/a"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E \\approx \\frac{\\lambda}{a^2}", "expr2": "\\Delta E = \\frac{\\lambda}{a^2}"}, "preprocessed_expressions": {"expr1": "Delta*E*approx*lambda/a**2", "expr2": "lambda/a**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/1-1026", "solution": "Let's solve this step by step.\n\n1) First, let's recall what we know about delta function potentials:\n   * Without the wall, a delta potential -V₀δ(x) has exactly one bound state with energy E₀ = -mV₀²/2ℏ²\n   * The corresponding wavefunction is ψ₀(x) ∝ e^(-κ|x|) where κ = mV₀/ℏ²\n\n2) With the wall at x = -d:\n   * The wavefunction must vanish at x = -d\n   * For x > 0, the wavefunction still decays as e^(-κx)\n   * For -d < x < 0, we need a combination of e^(κx) and e^(-κx) to satisfy boundary conditions\n\n3) For part (a), when the wall is \"far away\":\n   * The wall is \"far away\" when d >> 1/κ = ℏ²/mV₀\n   * The wavefunction will be approximately:\n     ψ(x) ∝ (e^(-κ|x|) - e^(-κ(2d+x))) for x > -d\n\n4) The energy shift can be found using perturbation theory:\n   * ΔE ≈ -2E₀e^(-2κd)\n   * This shows the energy increases (becomes less negative) due to the wall\n   * The correction is exponentially small for large d\n\n5) For part (b), the exact condition:\n   * The bound state exists when the wavefunction can be properly normalized\n   * The wall creates an additional constraint\n   * The condition becomes: mV₀d/ℏ² > 1/2\n\nTherefore:\n\na) The energy shift is ΔE ≈ -2E₀e^(-2κd) = -(mV₀²/ℏ²)e^(-2mV₀d/ℏ²)\n   \"Far away\" means d >> ℏ²/mV₀\n\nb) The condition for at least one bound state is:\n\n\\[\\boxed{V_0d > \\frac{\\hbar^2}{2m}}\\]\n\nThis condition is less restrictive than the case without the wall, where any attractive delta potential creates a bound state.", "final_answers": ["V_0d > \\frac{\\hbar^2}{2m}"], "equivalency_results": [{"input_expressions": {"expr1": "V_0d > \\frac{\\hbar^2}{2m}", "expr2": "\\frac{mV_0^2}{\\hbar^2} \\exp \\left( -\\frac{2mV_0 d}{\\hbar^2} \\right)"}, "preprocessed_expressions": {"expr1": "V*d > hbar**2/(2*m)", "expr2": "V**2*m*exp(-2*V*d*m/hbar**2)/hbar**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'StrictGreaterThan' and 'Mul'"}, {"input_expressions": {"expr1": "V_0d > \\frac{\\hbar^2}{2m}", "expr2": "d \\gg \\frac{\\hbar^2}{mV_0}"}, "preprocessed_expressions": {"expr1": "V*d > hbar**2/(2*m)", "expr2": "dgg*hbar**2/(V*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'StrictGreaterThan' and 'Mul'"}, {"input_expressions": {"expr1": "V_0d > \\frac{\\hbar^2}{2m}", "expr2": "V_0 d > \\frac{\\hbar^2}{2m}"}, "preprocessed_expressions": {"expr1": "V*d > hbar**2/(2*m)", "expr2": "V*d > hbar**2/(2*m)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "unsupported operand type(s) for -: 'StrictGreaterThan' and 'StrictGreaterThan'"}], "accuracy": 1.0}
{"id": "quantum/6017", "solution": "Let me solve this step by step.\n\n1) The Born approximation for the differential cross section is given by:\n   \n   $\\frac{d\\sigma}{d\\Omega} = \\frac{m^2}{4\\pi^2\\hbar^4}|V(q)|^2$\n\n   where $V(q)$ is the Fourier transform of the potential and $q$ is the momentum transfer.\n\n2) For a δ-function potential $V(r) = g\\delta^3(r)$, we need to find $V(q)$:\n   \n   $V(q) = \\int e^{-i\\mathbf{q}\\cdot\\mathbf{r}} g\\delta^3(r) d^3r$\n\n3) The integral is straightforward because of the δ-function:\n   \n   $V(q) = g\\int e^{-i\\mathbf{q}\\cdot\\mathbf{r}} \\delta^3(r) d^3r = g$\n\n4) Therefore, the differential cross section is:\n   \n   $\\frac{d\\sigma}{d\\Omega} = \\frac{m^2g^2}{4\\pi^2\\hbar^4}$\n\n5) Note that this is independent of angle (isotropic scattering).\n\n6) To find the total cross section, we integrate over all solid angles:\n   \n   $\\sigma = \\int \\frac{d\\sigma}{d\\Omega} d\\Omega = \\frac{m^2g^2}{4\\pi^2\\hbar^4} \\int \\sin\\theta d\\theta d\\phi$\n   \n   $= \\frac{m^2g^2}{4\\pi^2\\hbar^4} (4\\pi)$\n   \n   $= \\frac{m^2g^2}{\\pi\\hbar^4}$\n\nThe final answer for both differential and total cross sections is:\n\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} = \\frac{m^2g^2}{4\\pi^2\\hbar^4}, \\quad \\sigma = \\frac{m^2g^2}{\\pi\\hbar^4}} \\]", "final_answers": ["\\frac{d\\sigma}{d\\Omega} = \\frac{m^2g^2}{4\\pi^2\\hbar^4}, \\quad \\sigma = \\frac{m^2g^2}{\\pi\\hbar^4}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\frac{m^2g^2}{4\\pi^2\\hbar^4}, \\quad \\sigma = \\frac{m^2g^2}{\\pi\\hbar^4}", "expr2": "\\sigma(\\theta) = \\frac{m^2 g^2}{4\\pi^2 \\hbar^4}"}, "preprocessed_expressions": {"expr1": "g**2*m**2/(hbar**4*pi)", "expr2": "g**2*m**2/(4*hbar**4*pi**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\frac{m^2g^2}{4\\pi^2\\hbar^4}, \\quad \\sigma = \\frac{m^2g^2}{\\pi\\hbar^4}", "expr2": "\\sigma_t = \\frac{m^2 g^2}{\\pi \\hbar^4}"}, "preprocessed_expressions": {"expr1": "g**2*m**2/(hbar**4*pi)", "expr2": "g**2*m**2/(hbar**4*pi)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5006", "solution": "Let's solve this step by step using first-order perturbation theory.\n\n1) First, recall the unperturbed wavefunctions for an infinite square well:\n   $\\psi_n(x) = \\sqrt{\\frac{2}{L}} \\sin(\\frac{n\\pi x}{L})$\n\n2) The first-order energy shift is given by:\n   $\\Delta E_n = \\int_0^L \\psi_n^*(x) V'(x) \\psi_n(x) dx$\n   where V'(x) is the perturbation potential\n\n3) In this case, V'(x) consists of two square barriers:\n   V'(x) = V for L/4-a/2 < x < L/4+a/2 and 3L/4-a/2 < x < 3L/4+a/2\n   V'(x) = 0 elsewhere\n\n4) For n=2:\n   At x = L/4: $\\sin^2(\\frac{2\\pi L/4}{L}) = \\sin^2(\\frac{\\pi}{2}) = 1$\n   At x = 3L/4: $\\sin^2(\\frac{2\\pi 3L/4}{L}) = \\sin^2(\\frac{3\\pi}{2}) = 1$\n\n5) For n=4:\n   At x = L/4: $\\sin^2(\\frac{4\\pi L/4}{L}) = \\sin^2(\\pi) = 0$\n   At x = 3L/4: $\\sin^2(\\frac{4\\pi 3L/4}{L}) = \\sin^2(3\\pi) = 0$\n\n6) The energy shift for n=2:\n   $\\Delta E_2 \\approx \\frac{2}{L}V(a + a) = \\frac{4Va}{L}$\n\n7) The energy shift for n=4:\n   $\\Delta E_4 \\approx 0$\n\n8) Therefore, the difference in energy shifts:\n   $\\Delta E_2 - \\Delta E_4 = \\frac{4Va}{L}$\n\n\\[ \\boxed{\\Delta E_2 - \\Delta E_4 = \\frac{4Va}{L}} \\]\n\nThe result shows that the n=2 state is affected by the perturbation while the n=4 state is essentially unaffected, due to the strategic placement of the barriers at nodes of the n=4 wavefunction.", "final_answers": ["\\Delta E_2 - \\Delta E_4 = \\frac{4Va}{L}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_2 - \\Delta E_4 = \\frac{4Va}{L}", "expr2": "\\frac{4Va}{L}"}, "preprocessed_expressions": {"expr1": "4*V*a/L", "expr2": "4*V*a/L"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/2-2018", "solution": "Let's solve this step by step:\n\n1) For a spherically symmetric square well potential:\n- V(r) = -V₀ for r < r₀\n- V(r) = 0 for r > r₀\n\n2) For l=0 (s-states), the radial wave function must satisfy:\n- Inside well (r < r₀): R(r) = A sin(kr)/r where k = √(2m(E+V₀)/ℏ²)\n- Outside well (r > r₀): R(r) = B exp(-αr)/r where α = √(-2mE/ℏ²)\n\n3) For part (a):\n- For bound states, E < 0\n- For two bound states, we need two negative energy solutions\n- The transcendental equation is: k cot(kr₀) = -α\n- For first state: kr₀ ≈ π/2\n- For second state: kr₀ ≈ 3π/2\n- Minimum depth occurs when second state just appears\n- This gives: V₀min = (9π²ℏ²)/(8mr₀²)\n\n4) For part (b):\n- Ground state: E₁ ≈ -V₀/4\n- First excited state: E₂ ≈ 0 (just bound)\n\n5) For part (c):\n- Ground state wave function:\n  * Inside: ψ(r) ∝ sin(kr)/r\n  * Outside: ψ(r) ∝ exp(-αr)/r\n- Probability distribution: P(r) = 4πr²|ψ(r)|²\n- Physical significance: gives probability of finding particle at distance r\n\n6) For part (d):\n- Kinetic energy expectation value:\n⟨T⟩ = -(ℏ²/2m)∫ψ*(∇²ψ)dV\n\n7) For part (e):\n- Uncertainty principle: ΔxΔp ≥ ℏ/2\n- Confined particle has well-defined position (within well)\n- Must have significant momentum uncertainty\n- Explains non-zero kinetic energy in ground state\n\nThe minimum depth of the potential needed is:\n\n\\[ \\boxed{V₀min = \\frac{9π²ℏ²}{8mr₀²}} \\]\n\nThe eigenvalues are:\n\n\\[ \\boxed{E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0} \\]", "final_answers": ["V₀min = \\frac{9π²ℏ²}{8mr₀²}", "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0"], "equivalency_results": [{"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "V_0 \\geq \\frac{9 \\pi^2 \\hbar^2}{8 m r_0^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "E = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "E = -\\frac{\\beta^2 \\hbar^2}{2m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "\\chi(r) = A \\sin \\alpha r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "\\chi(r) = A \\sin \\alpha r_0 \\exp[\\beta(r_0 - r)]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "\\bar{E}_T = E_1 + 2\\pi V_0 A^2 \\left( r_0 - \\frac{\\sin 2\\alpha r_0}{2\\alpha} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "V₀min = \\frac{9π²ℏ²}{8mr₀²}", "expr2": "\\Delta p \\Delta r \\geq \\hbar / 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{9π²ℏ²}{8mr₀²}\n~~~~~~~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "V_0 \\geq \\frac{9 \\pi^2 \\hbar^2}{8 m r_0^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "E = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "E = -\\frac{\\beta^2 \\hbar^2}{2m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "\\chi(r) = A \\sin \\alpha r"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "\\chi(r) = A \\sin \\alpha r_0 \\exp[\\beta(r_0 - r)]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "\\bar{E}_T = E_1 + 2\\pi V_0 A^2 \\left( r_0 - \\frac{\\sin 2\\alpha r_0}{2\\alpha} \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}, {"input_expressions": {"expr1": "E₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0", "expr2": "\\Delta p \\Delta r \\geq \\hbar / 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nE₁ ≈ -\\frac{V₀}{4}, E₂ ≈ 0\n~^"}], "accuracy": 0.0}
{"id": "quantum/1-1010", "solution": "Let me solve this step by step.\n\n(a) First, let's find the probability amplitude in momentum space at t=0.\n\n1) The probability amplitude in momentum space φ(p) is the Fourier transform of ψ(x,0):\n   \n   φ(p) = (1/√(2πℏ)) ∫ ψ(x,0) e^(-ipx/ℏ) dx\n\n2) Substituting ψ(x,0):\n   \n   φ(p) = (A/√(2πℏ)) ∫ exp(-x²/a²) exp(-ipx/ℏ) dx\n\n3) This is a Gaussian integral. Completing the square:\n   \n   φ(p) = (A/√(2πℏ)) ∫ exp(-x²/a² - ipx/ℏ) dx\n   \n   = (A/√(2πℏ)) √(πa²) exp(-p²a²/4ℏ²)\n\n4) Therefore:\n   \n   φ(p) = A'exp(-p²a²/4ℏ²)\n   \n   where A' = A√(a/√(2ℏ))\n\n(b) Now let's find ψ(x,t)\n\n1) For a free particle, the time evolution in momentum space is:\n   \n   φ(p,t) = φ(p,0)exp(-iEt/ℏ) = φ(p,0)exp(-ip²t/2mℏ)\n\n2) ψ(x,t) is the inverse Fourier transform:\n   \n   ψ(x,t) = (1/√(2πℏ)) ∫ φ(p)exp(-ip²t/2mℏ)exp(ipx/ℏ) dp\n\n3) Substituting φ(p) and completing the square in the exponent:\n   \n   After calculations, we get:\n\n   ψ(x,t) = A√(a/√(a² + 2iℏt/m)) exp(-x²/2(a² + 2iℏt/m))\n\nThe final answer for both parts is:\n\n\\[ \\boxed{\\begin{aligned} \nφ(p) &= A\\sqrt{\\frac{a}{\\sqrt{2ℏ}}}exp(-\\frac{p²a²}{4ℏ²}) \\\\\nψ(x,t) &= A\\sqrt{\\frac{a}{\\sqrt{a² + 2iℏt/m}}}exp(-\\frac{x²}{2(a² + 2iℏt/m)})\n\\end{aligned}} \\]", "final_answers": ["\\begin{aligned} \nφ(p) &= A\\sqrt{\\frac{a}{\\sqrt{2ℏ}}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{aligned} \nφ(p) &= A\\sqrt{\\frac{a}{\\sqrt{2ℏ}}", "expr2": "\\psi(p, 0) = \\frac{Aa}{\\sqrt{2\\hbar}} \\exp\\left(-\\frac{a^2p^2}{4\\hbar^2}\\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nA\\sqrt{\\frac{a}{\\sqrt{2ℏ}}\n~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{aligned} \nφ(p) &= A\\sqrt{\\frac{a}{\\sqrt{2ℏ}}", "expr2": "\\psi(x, t) = \\frac{Aa}{\\sqrt{a^2 + \\frac{2i\\hbar t}{m}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nA\\sqrt{\\frac{a}{\\sqrt{2ℏ}}\n~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/6021", "solution": "Let me solve this step by step using Born approximation.\n\n1) In Born approximation, the differential cross section is proportional to the square of the Fourier transform of the potential:\n\n   $\\frac{d\\sigma}{d\\Omega} \\propto |V(\\mathbf{q})|^2$\n\n2) The momentum transfer $\\mathbf{q}$ has magnitude:\n   \n   $q = 2k\\sin(\\theta/2)$\n\n   where $k$ is the incident wave number and $\\theta$ is the scattering angle.\n\n3) The Fourier transform of the potential is:\n\n   $V(\\mathbf{q}) = \\int V(\\mathbf{r})e^{i\\mathbf{q}\\cdot\\mathbf{r}}d^3r$\n\n4) Given the spherical symmetry of the potential, we can write:\n\n   $V(\\mathbf{q}) = 4\\pi\\int_0^\\infty Ae^{-r^2/a^2}r^2\\frac{\\sin(qr)}{qr}dr$\n\n5) This integral can be evaluated by completing the square in the exponent:\n\n   $V(\\mathbf{q}) = 4\\pi A\\int_0^\\infty e^{-r^2/a^2}r^2\\frac{\\sin(qr)}{qr}dr$\n\n6) The result of this integral is:\n\n   $V(\\mathbf{q}) = \\pi^{3/2}Aa^3e^{-q^2a^2/4}$\n\n7) Therefore, the differential cross section is proportional to:\n\n   $\\frac{d\\sigma}{d\\Omega} \\propto |V(\\mathbf{q})|^2 = \\pi^3A^2a^6e^{-q^2a^2/2}$\n\n8) Substituting $q = 2k\\sin(\\theta/2)$:\n\n   $\\frac{d\\sigma}{d\\Omega} \\propto \\pi^3A^2a^6e^{-2k^2a^2\\sin^2(\\theta/2)}$\n\nThe final answer, up to a multiplicative constant, is:\n\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} \\propto e^{-2k^2a^2\\sin^2(\\theta/2)}} \\]\n\nNote: The proportionality constant contains $\\pi^3A^2a^6$ and other factors depending on the mass and energy of the incident particle, but we were asked only for the functional form up to a multiplicative constant.", "final_answers": ["\\frac{d\\sigma}{d\\Omega} \\propto e^{-2k^2a^2\\sin^2(\\theta/2)}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} \\propto e^{-2k^2a^2\\sin^2(\\theta/2)}", "expr2": "\\sigma(\\theta) = \\frac{m^2 A^2 a^6}{4 \\hbar^4} \\pi e^{-q^2 a^2 / 2}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "A**2*a**6*m**2*pi/(4*e**(a**2*q**2/2)*hbar**4)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1028", "solution": "Let's solve this step by step.\n\n1) First, recall that for a linear harmonic oscillator:\n   * $\\psi_0$ is symmetric (even function)\n   * $\\psi_1$ is antisymmetric (odd function)\n   * They are orthonormal: $\\int \\psi_0\\psi_1 dx = 0$ and $\\int \\psi_0^2 dx = \\int \\psi_1^2 dx = 1$\n\n2) The expectation value of x is:\n   $\\langle x \\rangle = \\int (A\\psi_0 + B\\psi_1)x(A\\psi_0 + B\\psi_1)dx$\n\n3) Expanding this:\n   $\\langle x \\rangle = \\int (A^2\\psi_0x\\psi_0 + AB\\psi_0x\\psi_1 + AB\\psi_1x\\psi_0 + B^2\\psi_1x\\psi_1)dx$\n\n4) Due to symmetry properties:\n   * $\\int \\psi_0x\\psi_0 dx = 0$ (integral of odd function)\n   * $\\int \\psi_1x\\psi_1 dx = 0$ (integral of odd function)\n   * $\\int \\psi_0x\\psi_1 dx = \\int \\psi_1x\\psi_0 dx = C$ (some non-zero constant)\n\n5) Therefore:\n   $\\langle x \\rangle = 2ABC$\n   where C is a positive real number (can be calculated for specific oscillator)\n\n6) For normalization:\n   $A^2 + B^2 = 1$\n\n7) To maximize/minimize $\\langle x \\rangle$:\n   * Subject to constraint $A^2 + B^2 = 1$\n   * Maximum occurs when $A = B = \\frac{1}{\\sqrt{2}}$\n   * Minimum occurs when $A = -B = \\frac{1}{\\sqrt{2}}$\n\nThe final answer for the maximum and minimum values of A and B is:\n\n\\[\\boxed{A = \\pm\\frac{1}{\\sqrt{2}}, B = \\pm\\frac{1}{\\sqrt{2}} \\text{ where } A \\text{ and } B \\text{ have same sign for max, opposite for min}}\\]", "final_answers": ["A = \\pm\\frac{1}{\\sqrt{2}}, B = \\pm\\frac{1}{\\sqrt{2}} \\text{ where } A \\text{ and } B \\text{ have same sign for max, opposite for min}"], "equivalency_results": [{"input_expressions": {"expr1": "A = \\pm\\frac{1}{\\sqrt{2}}, B = \\pm\\frac{1}{\\sqrt{2}} \\text{ where } A \\text{ and } B \\text{ have same sign for max, opposite for min}", "expr2": "A = B = \\frac{1}{\\sqrt{2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "A = \\pm\\frac{1}{\\sqrt{2}}, B = \\pm\\frac{1}{\\sqrt{2}} \\text{ where } A \\text{ and } B \\text{ have same sign for max, opposite for min}", "expr2": "A = -B = \\frac{1}{\\sqrt{2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6019", "solution": "Let me solve this step by step.\n\n1) For elastic scattering from a fixed potential, we can use the Born approximation to calculate the differential cross section.\n\n2) In the Born approximation, the scattering amplitude is given by:\n   \n   $f(\\theta) = -\\frac{m}{2\\pi\\hbar^2}\\int e^{-i\\mathbf{q}\\cdot\\mathbf{r}}V(\\mathbf{r})d^3r$\n\n   where $\\mathbf{q} = \\mathbf{k_f} - \\mathbf{k_i}$ is the momentum transfer.\n\n3) For elastic scattering, $|\\mathbf{k_f}| = |\\mathbf{k_i}| = k$, and:\n   \n   $q = |\\mathbf{q}| = 2k\\sin(\\theta/2)$\n\n4) Due to the spherical symmetry of the potential, we can write:\n   \n   $f(\\theta) = -\\frac{m}{2\\pi\\hbar^2}\\int_0^R (-V_0)4\\pi r^2\\frac{\\sin(qr)}{qr}dr$\n\n5) Simplifying:\n   \n   $f(\\theta) = \\frac{mV_0}{2\\pi\\hbar^2q}\\int_0^R 4\\pi r\\sin(qr)dr$\n\n6) Solving the integral:\n   \n   $f(\\theta) = \\frac{2mV_0}{\\hbar^2q^2}[qR\\cos(qR) - \\sin(qR)]$\n\n7) The differential cross section is given by:\n   \n   $\\frac{d\\sigma}{d\\Omega} = |f(\\theta)|^2$\n\n8) To lowest order in $V_0$, this becomes:\n   \n   $\\frac{d\\sigma}{d\\Omega} = \\frac{4m^2V_0^2R^6}{\\hbar^4}\\left[\\frac{\\sin(qR/2)}{qR}\\right]^4$\n\nTherefore, the differential cross section to lowest order in $V_0$ is:\n\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} = \\frac{4m^2V_0^2R^6}{\\hbar^4}\\left[\\frac{\\sin(2kR\\sin(\\theta/2))}{2kR\\sin(\\theta/2)}\\right]^4} \\]", "final_answers": ["\\frac{d\\sigma}{d\\Omega} = \\frac{4m^2V_0^2R^6}{\\hbar^4}\\left[\\frac{\\sin(2kR\\sin(\\theta/2))}{2kR\\sin(\\theta/2)}\\right]^4"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\frac{4m^2V_0^2R^6}{\\hbar^4}\\left[\\frac{\\sin(2kR\\sin(\\theta/2))}{2kR\\sin(\\theta/2)}\\right]^4", "expr2": "\\sigma(\\theta) = \\frac{4\\mu^2 V_0^2}{\\hbar^4 (2k \\sin(\\theta/2))^6} \\left( \\sin(2k R \\sin(\\theta/2)) - 2k R \\sin(\\theta/2) \\cos(2k R \\sin(\\theta/2)) \\right)^2"}, "preprocessed_expressions": {"expr1": "R**2*V**2*m**2*sin(2*R*k*sin(theta/2))**4/(4*hbar**4*k**4*sin(theta/2)**4)", "expr2": "V**2*mu**2*(4*R**2*k**2*sin(theta/2)**2*cos(2*R*k*sin(theta/2))**2 - R*k*(cos(4*R*k*sin(theta/2) - theta/2) - cos(4*R*k*sin(theta/2) + theta/2)) + sin(2*R*k*sin(theta/2))**2)/(16*hbar**4*k**6*sin(theta/2)**6)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1043", "solution": "Let's solve this step by step.\n\n(a) First, let's recall how a free particle wave function evolves:\n\n1) The time evolution of a free particle is given by:\n   $$\\psi(x,t) = \\frac{1}{\\sqrt{2\\pi}} \\int_{-\\infty}^{\\infty} \\varphi(k) \\exp(ikx - i\\hbar k^2t/2m) \\, dk$$\n   where $\\varphi(k)$ is the Fourier transform of the initial wave function.\n\n2) Let's make a change of variables:\n   Let $u = k - \\frac{mx}{\\hbar t}$\n   Then $dk = du$\n\n3) Substituting:\n   $$\\psi(x,t) = \\frac{1}{\\sqrt{2\\pi}} \\exp(imx^2/2\\hbar t) \\int_{-\\infty}^{\\infty} \\varphi(u + \\frac{mx}{\\hbar t}) \\exp(-i\\hbar u^2t/2m) \\, du$$\n\n4) For large t, using the hint:\n   $$\\exp(-i\\hbar u^2t/2m) \\to \\sqrt{2\\pi m/\\hbar t} \\exp(-i\\pi/4) \\delta(u)$$\n\n5) Using the delta function property:\n   $$\\psi(x,t) = \\sqrt{m/\\hbar t} \\exp(-i\\pi/4) \\exp(imx^2/2\\hbar t) \\varphi(mx/\\hbar t)$$\n\n(b) Physical interpretation:\n\n1) The probability density is:\n   $$|\\psi(x,t)|^2 = \\frac{m}{\\hbar t} |\\varphi(mx/\\hbar t)|^2$$\n\n2) This shows that:\n   - The wave packet spreads out with time (factor $1/\\sqrt{t}$)\n   - The shape of the probability distribution is determined by the Fourier transform of the initial state\n   - The spreading is inversely proportional to the mass (heavier particles spread more slowly)\n   - The spreading rate is proportional to $\\hbar$ (quantum effects)\n\nThe final answer can be written as:\n\n\\[\\boxed{\\psi(x,t) = \\sqrt{m/\\hbar t} \\exp(-i\\pi/4) \\exp(imx^2/2\\hbar t) \\varphi(mx/\\hbar t)}\\]\n\nThis represents the asymptotic form of a free particle wave function, demonstrating quantum diffusion and wave packet spreading.", "final_answers": ["\\psi(x,t) = \\sqrt{m/\\hbar t} \\exp(-i\\pi/4) \\exp(imx^2/2\\hbar t) \\varphi(mx/\\hbar t)"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi(x,t) = \\sqrt{m/\\hbar t} \\exp(-i\\pi/4) \\exp(imx^2/2\\hbar t) \\varphi(mx/\\hbar t)", "expr2": "\\psi(x,t) = \\sqrt{\\frac{m}{\\hbar t}} \\exp \\left(-i\\frac{\\pi}{4} \\right) \\exp \\left(i \\frac{mx^2}{2\\hbar t}\\right) \\varphi \\left(\\frac{mx}{\\hbar t} \\right)"}, "preprocessed_expressions": {"expr1": "sqrt(m/(hbar*t))*varphi(m*x/(hbar*t))*exp(i*(-pi + 2*m*x**2/(hbar*t))/4)", "expr2": "sqrt(m/(hbar*t))*varphi(m*x/(hbar*t))*exp(i*(-pi + 2*m*x**2/(hbar*t))/4)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5052", "solution": "Let's solve this step by step.\n\n(a) First part:\n\n1) For a perturbed system, the first-order correction to an expectation value is given by:\n   $\\langle B \\rangle = \\langle B \\rangle_0 + \\lambda \\langle B^{(1)} \\rangle + O(\\lambda^2)$\n\n2) The first-order correction can be written as:\n   $\\langle B^{(1)} \\rangle = \\sum_{n\\neq 0} \\frac{\\langle 0|H|n\\rangle\\langle n|B|0\\rangle + \\langle 0|B|n\\rangle\\langle n|H|0\\rangle}{E_0 - E_n}$\n\n3) Given that $H = i\\lambda[A, H_0]$, we can use the identity:\n   $\\langle n|[A, H_0]|0\\rangle = (E_0 - E_n)\\langle n|A|0\\rangle$\n\n4) Substituting this:\n   $\\langle B^{(1)} \\rangle = i\\sum_{n\\neq 0} (\\langle 0|A|n\\rangle\\langle n|B|0\\rangle - \\langle 0|B|n\\rangle\\langle n|A|0\\rangle)$\n\n5) This sum is equal to $\\langle [B,A] \\rangle_0 = -i\\langle C \\rangle_0$\n\nTherefore:\n$\\langle B \\rangle = \\langle B \\rangle_0 - \\lambda\\langle C \\rangle_0$\n\n(b) Second part:\n\n1) For the given Hamiltonian, we need to identify $A$ and $B$.\n   Here, $H = \\lambda x_3$, so comparing with $H = i\\lambda[A, H_0]$:\n   $A = \\frac{ip_3}{m\\omega^2}$\n\n2) Taking $B = x_i$ for each $i$:\n   For $i = 1,2$: $[x_i, A] = 0$ so $C = 0$\n   For $i = 3$: $C = i[x_3, \\frac{ip_3}{m\\omega^2}] = \\frac{1}{m\\omega^2}$\n\n3) In the unperturbed ground state:\n   $\\langle x_i \\rangle_0 = 0$ for all $i$\n   $\\langle C \\rangle_0 = \\frac{1}{m\\omega^2}$ for $i = 3$\n\n4) Therefore:\n   For $i = 1,2$: $\\langle x_i \\rangle = 0$\n   For $i = 3$: $\\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}$\n\nThis matches the exact result because the Hamiltonian is quadratic plus a linear term.\n\nThe final answer is:\n\\[\\boxed{\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}}\\]", "final_answers": ["\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}", "expr2": "\\langle B \\rangle = \\langle B \\rangle_0 + \\lambda \\langle C \\rangle_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I expected something else here\n\\langle B \\rangle + \\lambda \\langle C \\rangle\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}", "expr2": "\\langle x_1 \\rangle = 0"}, "preprocessed_expressions": {"expr1": "-lambda/(m*omega**2)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}", "expr2": "\\langle x_2 \\rangle = 0"}, "preprocessed_expressions": {"expr1": "-lambda/(m*omega**2)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\langle x_1 \\rangle = \\langle x_2 \\rangle = 0, \\langle x_3 \\rangle = -\\frac{\\lambda}{m\\omega^2}", "expr2": "\\langle x_3 \\rangle = -\\frac{\\lambda}{m \\omega^2}"}, "preprocessed_expressions": {"expr1": "-lambda/(m*omega**2)", "expr2": "-lambda/(m*omega**2)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1044", "solution": "Let's solve this step by step.\n\n(a) For the lowest-energy normalized wave function at t=0:\n- In region I (-a < x < 0), it should be a sine function to satisfy the infinite wall at x=-a\n- The wave function must be zero at x=-a and x=0\n- The normalized solution is:\n\\[\\boxed{\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0}\\]\n\n(b) Boundary conditions:\n1. ψ(-a) = 0 (infinite wall)\n2. ψ(x) continuous at x=0\n3. ∂ψ/∂x discontinuous at x=0 due to δ-function:\n   (∂ψII/∂x - ∂ψI/∂x)|x=0 = (2mV0/ℏ²)ψ(0)\n4. ψ(x) → 0 as x → ∞\n\n(c) Energy eigenfunctions:\nRegion I (-a < x < 0):\n\\[\\psi_k^I(x) = A[\\sin(k(x+a))]\\]\n\nRegion II (x ≥ 0):\n\\[\\psi_k^{II}(x) = Be^{-ikx}\\]\n\nWhere A and B are related by the boundary conditions at x=0.\n\n(d) To determine f(k):\n- Use the orthogonality of energy eigenfunctions\n- Multiply both sides by ψk'*(x) and integrate over x\n- This gives:\n\\[f(k) = \\int_{-a}^{\\infty} \\psi(x,0)\\psi_k^*(x)dx\\]\n\n(e) Time development:\n\\[\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-iEt/\\hbar}dk\\]\nwhere E = ℏ²k²/2m\n\nAt large times:\n- The dominant contributions come from poles in f(k)\n- These correspond to bound states\n- The lowest energy states (smallest k values) will dominate\n- Specifically, k values near k = π/a will be most important\n\nFinal answer for time evolution:\n\\[\\boxed{\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk}\\]", "final_answers": ["\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "expr2": "\\psi(x) = \n\\begin{cases} \n\\sqrt{\\frac{2}{a}} \\sin \\left(\\frac{\\pi x}{a}\\right), & -a < x < 0, \\\\\n0, & \\text{outside } [-a, 0].\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "expr2": "\\begin{align*}\n\\psi^I(-a) &= 0, \\\\\n\\psi^I(0) &= \\psi^{II}(0), \\\\\n\\psi^{II}(+\\infty) &= \\text{finite}, \\\\\n\\psi^{II'}(0) - \\psi^{I'}(0) &= \\alpha \\psi^I(0).\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "expr2": "\\begin{cases} \n\\psi_k^I(x) = c_k \\sin k(x + a), & -a < x < 0, \\\\ \n\\psi^{II}_k(x) = c_k \\sin k(x + a) + A_k \\sin kx, & x \\geq 0,\n\\end{cases}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*sqrt(1/a)*sin(pi*(a + x)/a)", "expr2": "A*sin(k*x) + c*sin(k(a + x))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "expr2": "f(k) = \\int_{-\\infty}^{\\infty} \\psi_k^*(x) \\psi(x) \\, dx."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '_' at '\\psi'\n\\int^{\\infty} \\psi^*(x) \\psi(x) \\, dx.\n~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,0) = \\sqrt{\\frac{2}{a}}\\sin(\\frac{\\pi}{a}(x+a)), -a < x < 0", "expr2": "\\psi(x,t) = \\int_{-\\infty}^{+\\infty} f(k) \\, \\psi_k(x) \\, e^{-iE_kt/\\hbar} \\, dk."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '_' at 'f'\n\\int^{+\\infty} f(k) \\, \\psi(x) \\, e^{-iEt/\\hbar} \\, dk.\n~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk", "expr2": "\\psi(x) = \n\\begin{cases} \n\\sqrt{\\frac{2}{a}} \\sin \\left(\\frac{\\pi x}{a}\\right), & -a < x < 0, \\\\\n0, & \\text{outside } [-a, 0].\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk", "expr2": "\\begin{align*}\n\\psi^I(-a) &= 0, \\\\\n\\psi^I(0) &= \\psi^{II}(0), \\\\\n\\psi^{II}(+\\infty) &= \\text{finite}, \\\\\n\\psi^{II'}(0) - \\psi^{I'}(0) &= \\alpha \\psi^I(0).\n\\end{align*}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk", "expr2": "\\begin{cases} \n\\psi_k^I(x) = c_k \\sin k(x + a), & -a < x < 0, \\\\ \n\\psi^{II}_k(x) = c_k \\sin k(x + a) + A_k \\sin kx, & x \\geq 0,\n\\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '_' at 'f'\n\\int^{\\infty} f(k)\\psi(x)e^{-i\\hbar k^2t/2m}dk\n~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk", "expr2": "f(k) = \\int_{-\\infty}^{\\infty} \\psi_k^*(x) \\psi(x) \\, dx."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "missing '_' at 'f'\n\\int^{\\infty} f(k)\\psi(x)e^{-i\\hbar k^2t/2m}dk\n~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi(x,t) = \\int_{-\\infty}^{\\infty} f(k)\\psi_k(x)e^{-i\\hbar k^2t/2m}dk", "expr2": "\\psi(x,t) = \\int_{-\\infty}^{+\\infty} f(k) \\, \\psi_k(x) \\, e^{-iE_kt/\\hbar} \\, dk."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "missing '_' at 'f'\n\\int^{\\infty} f(k)\\psi(x)e^{-i\\hbar k^2t/2m}dk\n~~~~~~~~~~~~~~^"}], "accuracy": 0.5}
{"id": "quantum/6043", "solution": "Let's solve this step by step:\n\n1) For first-order transitions in time-dependent perturbation theory, we need to calculate:\n   \n   $P_{fi} = \\left|\\frac{1}{i\\hbar}\\int_{-\\infty}^{\\infty} \\langle f|V(t)|i\\rangle e^{i\\omega_{fi}t}dt\\right|^2$\n\n2) The perturbation potential is $V(t) = eE(t)z = eE_0e^{-\\Gamma t}\\theta(t)z$\n   where $z = r\\cos\\theta$\n\n3) The initial state is $|i\\rangle = |100\\rangle$ and final states are $|f\\rangle = |200\\rangle$ or $|210\\rangle$ or $|21\\pm1\\rangle$\n\n4) We need to calculate matrix elements $\\langle f|z|i\\rangle$ for each final state.\n\n5) Due to selection rules, only $|210\\rangle$ will give non-zero contribution as it has the same $m$ value (0) and differs in $l$ by ±1.\n\n6) The matrix element:\n   $\\langle 210|z|100\\rangle = \\int \\psi_{210}^* r\\cos\\theta \\psi_{100} r^2\\sin\\theta dr d\\theta d\\phi$\n\n7) After integration:\n   $\\langle 210|z|100\\rangle = \\frac{128}{243}a_0$\n\n8) The frequency $\\omega_{fi} = \\frac{3E_1}{4\\hbar}$ where $E_1 = \\frac{\\hbar^2}{2ma_0^2}$\n\n9) The time integral becomes:\n   $\\int_0^{\\infty} e^{-\\Gamma t}e^{i\\omega_{fi}t}dt = \\frac{1}{\\Gamma + i\\omega_{fi}}$\n\n10) Therefore:\n    $P_{2p} = \\left|\\frac{eE_0}{\\hbar}\\frac{128}{243}a_0\\frac{1}{\\Gamma + i\\omega_{fi}}\\right|^2$\n\n11) After simplification:\n    $P_{2p} = \\left(\\frac{128}{243}\\right)^2\\frac{e^2E_0^2a_0^2}{\\hbar^2}\\frac{1}{\\Gamma^2 + \\omega_{fi}^2}$\n\nThe final answer is:\n\n\\[\\boxed{P_{2p} = \\left(\\frac{128}{243}\\right)^2\\frac{e^2E_0^2a_0^2}{\\hbar^2}\\frac{1}{\\Gamma^2 + (3E_1/4\\hbar)^2}}\\]", "final_answers": ["P_{2p} = \\left(\\frac{128}{243}\\right)^2\\frac{e^2E_0^2a_0^2}{\\hbar^2}\\frac{1}{\\Gamma^2 + (3E_1/4\\hbar)^2}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{2p} = \\left(\\frac{128}{243}\\right)^2\\frac{e^2E_0^2a_0^2}{\\hbar^2}\\frac{1}{\\Gamma^2 + (3E_1/4\\hbar)^2}", "expr2": "P(1s \\rightarrow 2p) = \\frac{2^{15} a_0^2 e^2 E_0^2}{3^{10} \\hbar^2 (\\Gamma^2 + \\omega_{21}^2)}"}, "preprocessed_expressions": {"expr1": "262144*E**2*a**2*e**2/(59049*(9*E**2 + 16*Gamma**2*hbar**2))", "expr2": "32768*E**2*a**2*e**2/(59049*hbar**2*(Gamma**2 + omega**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6044", "solution": "Let's solve this step by step.\n\n(a) For the rotational energy:\n\n1) The moment of inertia I for two equal masses M separated by distance D about their center of mass is:\n   I = 2M(D/2)² = MD²/2\n\n2) The rotational energy for quantum number J is:\n   E_J = J(J+1)ℏ²/(2I)\n\n3) Substituting I:\n   E_J = J(J+1)ℏ²/(MD²)\n\n(b) For selection rules:\n\n1) The electric dipole moment operator has odd parity.\n\n2) Rotational wavefunctions have parity (-1)^J.\n\n3) For a transition between states J and J', the matrix element must be non-zero:\n   ⟨J'|μ|J⟩ ≠ 0\n\n4) This requires:\n   (-1)^J' × (-1) × (-1)^J = 1\n\n5) Therefore:\n   J' - J = ±1\n   ΔJ = ±1\n\n(c) For the radiation frequency:\n\n1) The energy difference between states is:\n   ΔE = E_(J+1) - E_J\n\n2) Substituting the energy formula:\n   ΔE = [(J+1)(J+2) - J(J+1)]ℏ²/(MD²)\n      = [J² + 3J + 2 - J² - J]ℏ²/(MD²)\n      = 2(J+1)ℏ²/(MD²)\n\n3) The frequency is related to energy by:\n   f = ΔE/h = 2(J+1)ℏ/(2πMD²)\n\nThe final answers are:\n\n(a) \\[\\boxed{E_J = \\frac{J(J+1)\\hbar^2}{MD^2}}\\]\n\n(b) \\[\\boxed{\\Delta J = \\pm 1}\\]\n\n(c) \\[\\boxed{f = \\frac{(J+1)\\hbar}{\\pi MD^2}}\\]", "final_answers": ["E_J = \\frac{J(J+1)\\hbar^2}{MD^2}", "\\Delta J = \\pm 1", "f = \\frac{(J+1)\\hbar}{\\pi MD^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_J = \\frac{J(J+1)\\hbar^2}{MD^2}", "expr2": "E_J = \\frac{\\hbar^2}{MD^2} J(J + 1)"}, "preprocessed_expressions": {"expr1": "hbar**2*J(J + 1)/(D**2*M)", "expr2": "hbar**2*J(J + 1)/(D**2*M)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\Delta J = \\pm 1", "expr2": "E_J = \\frac{\\hbar^2}{MD^2} J(J + 1)"}, "preprocessed_expressions": {"expr1": "pm", "expr2": "hbar**2*J(J + 1)/(D**2*M)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta J = \\pm 1", "expr2": "\\Delta J = \\pm 1, \\quad \\Delta m = 0"}, "preprocessed_expressions": {"expr1": "pm", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta J = \\pm 1", "expr2": "\\omega = \\frac{2J \\hbar}{MD^2}"}, "preprocessed_expressions": {"expr1": "pm", "expr2": "2*J*hbar/(D**2*M)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{(J+1)\\hbar}{\\pi MD^2}", "expr2": "E_J = \\frac{\\hbar^2}{MD^2} J(J + 1)"}, "preprocessed_expressions": {"expr1": "hbar*(J + 1)/(D**2*M*pi)", "expr2": "hbar**2*J(J + 1)/(D**2*M)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{(J+1)\\hbar}{\\pi MD^2}", "expr2": "\\Delta J = \\pm 1, \\quad \\Delta m = 0"}, "preprocessed_expressions": {"expr1": "hbar*(J + 1)/(D**2*M*pi)", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{(J+1)\\hbar}{\\pi MD^2}", "expr2": "\\omega = \\frac{2J \\hbar}{MD^2}"}, "preprocessed_expressions": {"expr1": "hbar*(J + 1)/(D**2*M*pi)", "expr2": "2*J*hbar/(D**2*M)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.3333333333333333}
{"id": "quantum/3-3029", "solution": "Let's solve this step by step.\n\n(a) First, let's analyze the initial and final states:\n\n1) Initial state: \n   * $\\Omega^-$ with $j=3/2$, $m_j=3/2$\n   * At rest, so no orbital angular momentum\n\n2) Final state:\n   * $\\Lambda$ with $j=1/2$\n   * $K^-$ with $j=0$\n   * Relative orbital angular momentum $L$ between them\n\n3) The angular distribution will be determined by:\n   * Conservation of angular momentum\n   * The possible values of $L$ in the final state\n   * The possible interference terms\n\n4) For angular momentum conservation:\n   * $\\vec{J}_{\\Omega} = \\vec{J}_{\\Lambda} + \\vec{L}$\n   * $3/2 = 1/2 + L$\n   * This means $L$ can be 1 or 2\n\n5) The most general angular distribution will be:\n   * $W(\\theta) = 1 + \\sum_{n=1}^{3} a_n P_n(\\cos\\theta)$\n   * Where $P_n$ are Legendre polynomials\n   * Maximum power is 3 because $2j=3$\n\nTherefore, the most general form is:\n$W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_2P_2(\\cos\\theta) + a_3P_3(\\cos\\theta)$\n\n(b) For parity conservation:\n\n1) Initial parity: $P_i = +1$\n\n2) Final parity: \n   * $P_f = P_{\\Lambda} \\cdot P_{K^-} \\cdot (-1)^L$\n   * $P_f = (+1) \\cdot (-1) \\cdot (-1)^L = (-1)^{L+1}$\n\n3) For parity conservation:\n   * $P_i = P_f$\n   * $+1 = (-1)^{L+1}$\n   * This requires $L$ to be odd\n\n4) Therefore:\n   * Only $L=1$ is allowed\n   * Terms with even $n$ in the distribution must vanish\n   * $a_2 = 0$\n\nThe parity-conserving form would be:\n$W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_3P_3(\\cos\\theta)$\n\nHowever, since weak interaction does not conserve parity, the actual distribution is:\n\n\\[\\boxed{W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_2P_2(\\cos\\theta) + a_3P_3(\\cos\\theta)}\\]", "final_answers": ["W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_2P_2(\\cos\\theta) + a_3P_3(\\cos\\theta)"], "equivalency_results": [{"input_expressions": {"expr1": "W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_2P_2(\\cos\\theta) + a_3P_3(\\cos\\theta)", "expr2": "I \\propto \\sin^2 \\theta (1 + \\alpha \\cos \\theta)"}, "preprocessed_expressions": {"expr1": "3*a*P(cos(theta)) + 1", "expr2": "I*propto*sin(theta(alpha*cos(theta) + 1))**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "W(\\theta) = 1 + a_1P_1(\\cos\\theta) + a_2P_2(\\cos\\theta) + a_3P_3(\\cos\\theta)", "expr2": "I \\propto (1 - \\cos^2 \\theta)"}, "preprocessed_expressions": {"expr1": "3*a*P(cos(theta)) + 1", "expr2": "I*propto(sin(theta)**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7010", "solution": "Let me solve this step by step.\n\n1) First, let's recall the basics:\n   * For a single particle in an infinite square well, energies are $E_n = \\frac{n^2\\pi^2\\hbar^2}{2mL^2}$\n   * Wavefunctions are $\\psi_n(x) = \\sqrt{\\frac{2}{L}}\\sin(\\frac{n\\pi x}{L})$\n\n2) Since these are identical fermions:\n   * Total wavefunction must be antisymmetric\n   * Must consider both spatial and spin parts\n   * Total wavefunction = (spatial part) × (spin part)\n\n3) For two fermions, possible spin states are:\n   * Singlet (S=0): antisymmetric spin state (↑↓-↓↑)/√2\n   * Triplet (S=1): three symmetric spin states\n\n4) The three lowest energy states:\n   * Ground state: Both particles in n=1, must have antisymmetric spin (singlet)\n   * First excited: One particle in n=1, one in n=2, must have symmetric spin (triplet)\n   * Second excited: One particle in n=1, one in n=2, antisymmetric spin (singlet)\n\n5) For the second and third states, the spatial wavefunctions are:\n   * Triplet: $\\frac{1}{\\sqrt{2}}[\\psi_1(x_1)\\psi_2(x_2) + \\psi_1(x_2)\\psi_2(x_1)]$\n   * Singlet: $\\frac{1}{\\sqrt{2}}[\\psi_1(x_1)\\psi_2(x_2) - \\psi_1(x_2)\\psi_2(x_1)]$\n\n6) First-order energy correction:\n   $\\Delta E = \\int_0^L\\int_0^L \\psi^*(x_1,x_2)V(x_1-x_2)\\psi(x_1,x_2)dx_1dx_2$\n\n7) For second state (triplet):\n   $\\Delta E_2 = \\int_0^L\\int_0^L \\frac{1}{2}[\\psi_1(x_1)\\psi_2(x_2) + \\psi_1(x_2)\\psi_2(x_1)]^* V(x_1-x_2)[\\psi_1(x_1)\\psi_2(x_2) + \\psi_1(x_2)\\psi_2(x_1)]dx_1dx_2$\n\n8) For third state (singlet):\n   $\\Delta E_3 = \\int_0^L\\int_0^L \\frac{1}{2}[\\psi_1(x_1)\\psi_2(x_2) - \\psi_1(x_2)\\psi_2(x_1)]^* V(x_1-x_2)[\\psi_1(x_1)\\psi_2(x_2) - \\psi_1(x_2)\\psi_2(x_1)]dx_1dx_2$\n\nThe final answer for the energy corrections:\n\n\\[\\boxed{\\begin{align*}\n\\Delta E_2 &= \\int_0^L\\int_0^L \\frac{2}{L}\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})V(x_1-x_2)\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})dx_1dx_2 \\\\\n\\Delta E_3 &= \\Delta E_2\n\\end{align*}}\\]\n\nNote: The energy corrections are actually equal for both states due to the form of the potential V(x₁-x₂) being spin-independent.", "final_answers": ["\\begin{align*}\n\\Delta E_2 &= \\int_0^L\\int_0^L \\frac{2}{L}\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})V(x_1-x_2)\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})dx_1dx_2 \\\\\n\\Delta E_3 &= \\Delta E_2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_2 &= \\int_0^L\\int_0^L \\frac{2}{L}\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})V(x_1-x_2)\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})dx_1dx_2 \\\\\n\\Delta E_3 &= \\Delta E_2\n\\end{align*}", "expr2": "\\Delta E_1^A = \\int dx_1 \\, dx_2 \\, |\\psi_{12}^A(x_1, x_2)|^2 \\, V(x_1 - x_2)"}, "preprocessed_expressions": {"expr1": "Delta*E*end", "expr2": "dx*x"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_2 &= \\int_0^L\\int_0^L \\frac{2}{L}\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})V(x_1-x_2)\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})dx_1dx_2 \\\\\n\\Delta E_3 &= \\Delta E_2\n\\end{align*}", "expr2": "\\Delta E_1^s = \\int dx_1 \\, dx_2 \\, |\\psi_{12}^s(x_1, x_2)|^2 \\, V(x_1 - x_2)"}, "preprocessed_expressions": {"expr1": "Delta*E*end", "expr2": "dx*x"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_2 &= \\int_0^L\\int_0^L \\frac{2}{L}\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})V(x_1-x_2)\\sin(\\frac{\\pi x_1}{L})\\sin(\\frac{2\\pi x_2}{L})dx_1dx_2 \\\\\n\\Delta E_3 &= \\Delta E_2\n\\end{align*}", "expr2": "\\Delta E_2 = \\int dx_1 \\, dx_2 \\, |\\psi_{22}^s(x_1, x_2)|^2 \\, V(x_1 - x_2)"}, "preprocessed_expressions": {"expr1": "Delta*E*end", "expr2": "dx*x"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/4008", "solution": "Let's solve this step by step.\n\n(a) First, let's find the ground state energy:\n\n1) The Hamiltonian for an electron in a magnetic field is:\n   $H = \\frac{1}{2m}(p - \\frac{e}{c}A)^2$\n\n2) For a circular loop with magnetic flux Φ, the vector potential is:\n   $A = \\frac{\\Phi}{2πR}$\n\n3) The angular momentum operator is:\n   $L_z = -iℏ\\frac{\\partial}{\\partial θ}$\n\n4) The energy eigenvalues are:\n   $E_n = \\frac{ℏ^2}{2mR^2}(n - \\frac{e\\Phi}{hc})^2$\n\n5) For ground state, n = 0:\n   $E_0 = \\frac{ℏ^2}{2mR^2}(\\frac{e\\Phi}{hc})^2$\n\nThis shows a parabolic dependence on the magnetic flux.\n\n(b) For the current:\n\n1) The current is related to the derivative of energy with respect to flux:\n   $I = -c\\frac{\\partial E}{\\partial \\Phi}$\n\n2) Substituting the ground state energy:\n   $I = -\\frac{e}{2πmR^2}\\frac{h}{2π}\\frac{e\\Phi}{hc}$\n   $I = -\\frac{e^2\\Phi}{2π^2mR^2c}$\n\n(c) For the numerical calculation:\n\n1) Using the given values:\n   R = 2 cm = 2 × 10⁻² m\n   Φ = 0.6 gauss·cm² = 0.6 × 10⁻⁸ weber\n\n2) Constants:\n   e = 1.6 × 10⁻¹⁹ C\n   m = 9.1 × 10⁻³¹ kg\n   c = 3 × 10⁸ m/s\n\n3) Plugging into our equation:\n   $I = \\frac{(1.6 × 10⁻¹⁹)^2(0.6 × 10⁻⁸)}{2π^2(9.1 × 10⁻³¹)(4 × 10⁻⁴)(3 × 10⁸)}$\n\nThe final answer in amperes is:\n\n\\[\\boxed{I = 1.4 × 10⁻¹⁰ \\text{ A}}\\]", "final_answers": ["I = 1.4 × 10⁻¹⁰ \\text{ A}"], "equivalency_results": [{"input_expressions": {"expr1": "I = 1.4 × 10⁻¹⁰ \\text{ A}", "expr2": "E_g = \\frac{\\hbar^2}{2mR^2} \\left[n^* + \\frac{\\phi}{\\phi_0}\\right]^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = 1.4 × 10⁻¹⁰ \\text{ A}", "expr2": "I \\approx \\frac{e^2 \\phi}{4\\pi^2 R^2 mc}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = 1.4 × 10⁻¹⁰ \\text{ A}", "expr2": "I = 1.1 \\times 10^{-14} \\, \\text{A}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7021", "solution": "Let me solve this step by step.\n\n1) For a diatomic molecule, the rotational energy levels are given by:\n   $E_J = \\frac{\\hbar^2}{2I}J(J+1)$\n   where J is the rotational quantum number and I is the moment of inertia.\n\n2) The moment of inertia I = μr², where:\n   * μ is the reduced mass\n   * r is the internuclear distance\n\n3) Calculate reduced mass μ:\n   * Mass of H = 1.008 u\n   * Mass of D = 2.014 u\n   * μ = (m₁m₂)/(m₁+m₂) = (1.008 × 2.014)/(1.008 + 2.014) = 0.672 u\n\n4) Convert units:\n   * 0.672 u = 0.672 × 1.66053 × 10⁻²⁷ kg\n   * r = 0.75 Å = 0.75 × 10⁻¹⁰ m\n\n5) Calculate moment of inertia:\n   I = (0.672 × 1.66053 × 10⁻²⁷)(0.75 × 10⁻¹⁰)² = 6.28 × 10⁻⁴⁸ kg·m²\n\n6) The energy difference between J=1 and J=0 is:\n   ΔE = E₁ - E₀ = \\frac{\\hbar^2}{2I}[2] - 0 = \\frac{\\hbar^2}{I}\n\n7) Substitute values:\n   * ℏ = 1.0546 × 10⁻³⁴ J·s\n   ΔE = (1.0546 × 10⁻³⁴)²/(6.28 × 10⁻⁴⁸) = 1.77 × 10⁻²² J\n\n8) Convert to eV:\n   * 1 eV = 1.602 × 10⁻¹⁹ J\n   * ΔE = (1.77 × 10⁻²²)/(1.602 × 10⁻¹⁹) = 0.0011 eV\n\nTherefore, the energy difference between the two lowest rotational levels is 0.0011 eV.\n\n\\[\\boxed{0.0011 \\text{ eV}}\\]", "final_answers": ["0.0011 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "0.0011 \\text{ eV}", "expr2": "1.11 \\times 10^{-2} \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7026", "solution": "Let me solve this step by step.\n\n(a)(1) For singly-ionized helium (He+), which has one electron and a nucleus with Z=2:\n- The wavefunctions φₙ(r) are similar to hydrogen atom wavefunctions\n- Main difference: Z=2 instead of Z=1\n- This means the wavefunctions are more \"compressed\" due to stronger nuclear attraction\n- They have the same angular dependence but radial part scales with Z\n\n(a)(2) To form eigenfunction of definite spin:\n- Total wavefunction = spatial part × spin part\n- ψ(r,s) = φₙ(r) × σ(s)\n- For spin up: ψ(r,↑) = φₙ(r)σ⁺\n- For spin down: ψ(r,↓) = φₙ(r)σ⁻\n\n(b)(1) For an excited state example:\n- Let's choose n=2 for first electron and n=1 for second electron\n- For a triplet state (symmetric spin function):\nψ(r₁,r₂) = 1/√2[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × 1/√2[σ⁺(1)σ⁺(2)]\n\n(b)(2) Total spin:\n- Using symmetric spin function 1/√2[σ⁺(1)σ⁺(2)]\n- This is a triplet state with S=1, Ms=1\n\n(b)(3) Pauli principle check:\n- Pauli principle requires total wavefunction to be antisymmetric\n- Spatial part is antisymmetric (due to minus sign)\n- Spin part is symmetric\n- Product is antisymmetric, satisfying Pauli principle\n\n(b)(4) Antisymmetry demonstration:\n- Exchange electrons (1↔2):\n- Spatial part changes sign: -1\n- Spin part remains same: +1\n- Total wavefunction changes sign: (-1)(+1) = -1\n- Therefore, wavefunction is antisymmetric under exchange\n\nFinal answer:\n\\[\\boxed{\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]}\\]", "final_answers": ["\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]", "expr2": "\\phi_N(\\mathbf{r}) \\text{ are hydrogen-like with } r_0 \\rightarrow a = \\frac{\\hbar^2}{\\mu Ze^2}, Z = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]", "expr2": "\\text{Eigenfunction} = \\phi_N(\\mathbf{r}) \\sigma^{\\pm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]", "expr2": "\\frac{1}{\\sqrt{2}} [\\phi_{N1}(1)\\phi_{N2}(2) - \\phi_{N2}(1)\\phi_{N1}(2)]\\sigma^+(1)\\sigma^+(2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]", "expr2": "S = 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{ψ(r₁,r₂) = \\frac{1}{\\sqrt{2}}[φ₂(r₁)φ₁(r₂) - φ₁(r₁)φ₂(r₂)] × \\frac{1}{\\sqrt{2}}[σ⁺(1)σ⁺(2)]", "expr2": "\\phi_{N1} = \\phi_{N2} \\Rightarrow \\text{Wave function vanishes}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/4001", "solution": "Let's solve this step by step.\n\n1) First, let's write the generalized Bohr-Sommerfeld relation with electromagnetic field:\n   $$\\oint (p - \\frac{e}{c}A) \\cdot dr = (n + \\frac{1}{2})h$$\n\n2) The equation of motion for a charged particle in a magnetic field is:\n   $$\\frac{dp}{dt} = \\frac{e}{c}(v \\times B)$$\n   where $v$ is the velocity of the particle.\n\n3) In a magnetic field, the vector potential $A$ is related to $B$ by:\n   $$B = \\nabla \\times A$$\n\n4) Using Stokes' theorem, we can convert the line integral involving $A$ to a surface integral:\n   $$\\oint A \\cdot dr = \\int\\int (\\nabla \\times A) \\cdot dS = \\int\\int B \\cdot dS = \\Phi$$\n   where $\\Phi$ is the magnetic flux through the orbit.\n\n5) For the momentum term:\n   $$\\oint p \\cdot dr = 0$$\n   This is because the momentum integral over a closed path in real space must vanish.\n\n6) Substituting these back into the Bohr-Sommerfeld relation:\n   $$0 - \\frac{e}{c}\\Phi = (n + \\frac{1}{2})h$$\n\n7) Therefore:\n   $$\\Phi = -\\frac{c}{e}(n + \\frac{1}{2})h$$\n\n8) For electrons in solids, the k-space orbit area $S$ is related to the magnetic flux by:\n   $$S = \\frac{2\\pi e}{c\\hbar}B\\Phi$$\n\n9) Substituting the flux quantization condition:\n   $$S = \\frac{2\\pi e}{c\\hbar}B\\left(-\\frac{c}{e}(n + \\frac{1}{2})h\\right)$$\n   $$S = 2\\pi(n + \\frac{1}{2})\\frac{eB}{c\\hbar}h$$\n\nTherefore, the quantization condition for the k-space orbit area is:\n\n\\[\\boxed{S = 2\\pi(n + \\frac{1}{2})\\frac{eB}{\\hbar c}h}\\]\n\nThis is the famous quantization condition that leads to the Landau levels in solid-state physics, showing that the area in k-space is quantized in units proportional to the magnetic field strength.", "final_answers": ["S = 2\\pi(n + \\frac{1}{2})\\frac{eB}{\\hbar c}h"], "equivalency_results": [{"input_expressions": {"expr1": "S = 2\\pi(n + \\frac{1}{2})\\frac{eB}{\\hbar c}h", "expr2": "S_n = \\frac{2\\pi B e (n + 1/2)}{\\hbar c}"}, "preprocessed_expressions": {"expr1": "2*B*e*h*pi(n + 1/2)/(c*hbar)", "expr2": "2*B*pi*e(n + 1/2)/(c*hbar)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7019", "solution": "Let me solve this step by step.\n\n(a) For electrons moving in a circular path:\n\n1) This is a particle on a ring problem with periodic boundary conditions\n2) The normalized wavefunctions must satisfy: ψ(φ + 2π) = ψ(φ)\n3) The normalized eigenfunctions are:\n   ψₘ(φ) = (1/√(2π))exp(imφ), where m = 0, ±1, ±2, ...\n4) The corresponding energy levels are:\n   Eₘ = (ℏ²m²)/(2MR²), where R = 4Å = 4 × 10⁻¹⁰ m\n\n(b) For the ground state:\n\n1) Each energy level can hold 2 electrons (spin up/down)\n2) m = 0 level has 2 electrons\n3) m = ±1 levels have 4 electrons\n4) m = ±2 levels have 4 electrons\n5) m = ±3 levels have 4 electrons\n6) m = ±4 levels have 4 electrons\n7) Total: 18 electrons are accommodated\n\n(c) For the lowest excitation:\n\n1) The lowest excitation would be from m = ±4 to m = ±5\n2) ΔE = E₅ - E₄ = (ℏ²/2MR²)(25 - 16) = (ℏ²/2MR²)(9)\n3) Substituting values:\n   ℏ = 1.055 × 10⁻³⁴ J·s\n   M = 9.109 × 10⁻³¹ kg (electron mass)\n   R = 4 × 10⁻¹⁰ m\n4) ΔE = (1.055 × 10⁻³⁴)²/(2 × 9.109 × 10⁻³¹ × (4 × 10⁻¹⁰)²) × 9\n5) ΔE ≈ 2.81 × 10⁻¹⁹ J = 1.75 eV\n6) For wavelength: λ = hc/ΔE\n   = (6.626 × 10⁻³⁴ × 3 × 10⁸)/(2.81 × 10⁻¹⁹)\n   = 707 nm\n\n\\[\\boxed{\\text{(a) } \\psi_m(\\phi) = \\frac{1}{\\sqrt{2\\pi}}e^{im\\phi}, \\text{ (b) } m = 0(\\times2), \\pm1(\\times4), \\pm2(\\times4), \\pm3(\\times4), \\pm4(\\times4), \\text{ (c) } \\lambda = 707 \\text{ nm}}\\]", "final_answers": ["\\text{(a) } \\psi_m(\\phi) = \\frac{1}{\\sqrt{2\\pi}}e^{im\\phi}, \\text{ (b) } m = 0(\\times2), \\pm1(\\times4), \\pm2(\\times4), \\pm3(\\times4), \\pm4(\\times4), \\text{ (c) } \\lambda = 707 \\text{ nm}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\psi_m(\\phi) = \\frac{1}{\\sqrt{2\\pi}}e^{im\\phi}, \\text{ (b) } m = 0(\\times2), \\pm1(\\times4), \\pm2(\\times4), \\pm3(\\times4), \\pm4(\\times4), \\text{ (c) } \\lambda = 707 \\text{ nm}", "expr2": "\\psi(\\theta) = \\frac{1}{\\sqrt{2\\pi}} e^{i k \\theta}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\psi_m(\\phi) = \\frac{1}{\\sqrt{2\\pi}}e^{im\\phi}, \\text{ (b) } m = 0(\\times2), \\pm1(\\times4), \\pm2(\\times4), \\pm3(\\times4), \\pm4(\\times4), \\text{ (c) } \\lambda = 707 \\text{ nm}", "expr2": "0^2 1^4 2^4 3^4 4^4"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/8005", "solution": "Let me address these questions one by one:\n\n(a) If Lz is constant in time, then:\n1) This means [H, Lz] = 0 (commutator is zero)\n2) The Hamiltonian must have rotational symmetry around the z-axis\n3) The potential energy term V(r) must be independent of the azimuthal angle φ\n\n\\[\\boxed{[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}}\\]\n\n(b) The optical theorem states:\n1) The total cross section is proportional to the imaginary part of the forward scattering amplitude\n2) Mathematically: σtot = (4π/k)Im[f(θ=0)]\n3) This relates absorption to forward scattering\n\n\\[\\boxed{\\sigma_{tot} = \\frac{4\\pi}{k}Im[f(0)]}\\]\n\n(c) The first Born approximation fails to satisfy the optical theorem because:\n1) It's a perturbative approximation that only includes lowest order terms\n2) The imaginary part of the forward scattering amplitude is not correctly reproduced\n3) It neglects multiple scattering effects which contribute to the imaginary part\n\n\\[\\boxed{\\text{Born approximation neglects higher-order terms needed for unitarity}}\\]\n\n(d) The proton cannot have an electric quadrupole moment because:\n1) The proton has spin 1/2\n2) For any spin-1/2 particle, the maximum difference in magnetic quantum numbers is 1\n3) Quadrupole moments require ΔM = 2\n4) Therefore, matrix elements of the quadrupole operator vanish\n\n\\[\\boxed{\\text{Spin-1/2 states cannot support quadrupole moments}}\\]\n\n(e) For a weak attractive potential:\n1) The phase shift δl is negative for low energies\n2) This can be shown using the Born approximation\n3) For attractive potential V(r) < 0, the phase shift is proportional to -∫V(r)r²dr\n4) This integral is positive for attractive potential, making δl negative\n\n\\[\\boxed{\\delta_l < 0 \\text{ for attractive potentials}}\\]", "final_answers": ["[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "\\sigma_{tot} = \\frac{4\\pi}{k}Im[f(0)]", "\\text{Born approximation neglects higher-order terms needed for unitarity}", "\\text{Spin-1/2 states cannot support quadrupole moments}", "\\delta_l < 0 \\text{ for attractive potentials}"], "equivalency_results": [{"input_expressions": {"expr1": "[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "expr2": "[H, L_z] = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "expr2": "\\sigma_t = \\frac{4\\pi}{k} \\text{Im} f(0)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "expr2": "\\text{The optical theorem does not apply to first Born approximation because } f(\\theta) \\text{ is real when } V(r) \\text{ is real.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "expr2": "\\text{The proton cannot have an electric quadrupole moment as it has spin } s = \\frac{1}{2} < 1."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "[H, L_z] = 0 \\text{ implies } V = V(r,\\theta) \\text{ only}", "expr2": "\\delta_l > 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma_{tot} = \\frac{4\\pi}{k}Im[f(0)]", "expr2": "[H, L_z] = 0"}, "preprocessed_expressions": {"expr1": "4*I*m*pi*f(0)/k", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma_{tot} = \\frac{4\\pi}{k}Im[f(0)]", "expr2": "\\sigma_t = \\frac{4\\pi}{k} \\text{Im} f(0)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{Born approximation neglects higher-order terms needed for unitarity}", "expr2": "[H, L_z] = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Born approximation neglects higher-order terms needed for unitarity}", "expr2": "\\sigma_t = \\frac{4\\pi}{k} \\text{Im} f(0)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Born approximation neglects higher-order terms needed for unitarity}", "expr2": "\\text{The optical theorem does not apply to first Born approximation because } f(\\theta) \\text{ is real when } V(r) \\text{ is real.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Born approximation neglects higher-order terms needed for unitarity}", "expr2": "\\text{The proton cannot have an electric quadrupole moment as it has spin } s = \\frac{1}{2} < 1."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Born approximation neglects higher-order terms needed for unitarity}", "expr2": "\\delta_l > 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Spin-1/2 states cannot support quadrupole moments}", "expr2": "[H, L_z] = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Spin-1/2 states cannot support quadrupole moments}", "expr2": "\\sigma_t = \\frac{4\\pi}{k} \\text{Im} f(0)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Spin-1/2 states cannot support quadrupole moments}", "expr2": "\\text{The optical theorem does not apply to first Born approximation because } f(\\theta) \\text{ is real when } V(r) \\text{ is real.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Spin-1/2 states cannot support quadrupole moments}", "expr2": "\\text{The proton cannot have an electric quadrupole moment as it has spin } s = \\frac{1}{2} < 1."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\delta_l < 0 \\text{ for attractive potentials}", "expr2": "[H, L_z] = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta_l < 0 \\text{ for attractive potentials}", "expr2": "\\sigma_t = \\frac{4\\pi}{k} \\text{Im} f(0)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta_l < 0 \\text{ for attractive potentials}", "expr2": "\\text{The optical theorem does not apply to first Born approximation because } f(\\theta) \\text{ is real when } V(r) \\text{ is real.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta_l < 0 \\text{ for attractive potentials}", "expr2": "\\text{The proton cannot have an electric quadrupole moment as it has spin } s = \\frac{1}{2} < 1."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\delta_l < 0 \\text{ for attractive potentials}", "expr2": "\\delta_l > 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.4}
{"id": "quantum/8002", "solution": "Let me solve this step by step:\n\n(a) For the series $ y = 1 + 2x + 3x^2 + 4x^3 + \\cdots $\n1) Let's write it as y = ∑(nx^(n-1)) where n starts from 1\n2) This is related to the geometric series derivative\n3) For geometric series: 1/(1-x) = 1 + x + x² + x³ + ...\n4) Differentiating: 1/(1-x)² = 1 + 2x + 3x² + 4x³ + ...\n5) Therefore, y = 1/(1-x)²\n\n\\[ \\boxed{y = \\frac{1}{(1-x)^2}, |x| < 1} \\]\n\n(b) For f(x) = xe^{-x/λ}:\n1) For mean: ⟨x⟩ = ∫₀^∞ xf(x)dx/∫₀^∞ f(x)dx\n2) For most probable value: df/dx = 0\n3) Solving df/dx = 0: e^{-x/λ}(1 - x/λ) = 0\n4) This gives x = λ for most probable value\n5) For mean, after integration: ⟨x⟩ = 2λ\n\n\\[ \\boxed{\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda} \\]\n\n(c) For the integral I:\n1) Use contour integration in complex plane\n2) Consider poles at x = e^{iπ/4}, e^{3iπ/4}, e^{5iπ/4}, e^{7iπ/4}\n3) Only two poles in upper half plane contribute\n4) Residue theorem gives: I = π/(4√2)\n\n\\[ \\boxed{I = \\frac{\\pi}{4\\sqrt{2}}} \\]\n\n(d) For the matrix eigenvalues:\n1) Characteristic equation: |A - λI| = 0\n2) This gives: -λ³ + 7λ² - 15λ + 9 = 0\n3) Eigenvalues are λ = 1, 3, 3\n4) For λ = 1: eigenvector v₁ = (2, -1, -1)/√6\n5) For λ = 3: two eigenvectors:\n   v₂ = (0, 1, 0)\n   v₃ = (2, 0, 1)/√5\n\nThe eigenvectors are not orthogonal because the matrix is not symmetric.\n\n\\[ \\boxed{\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}} \\]", "final_answers": ["y = \\frac{1}{(1-x)^2}, |x| < 1", "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "I = \\frac{\\pi}{4\\sqrt{2}}", "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "y = \\frac{1}{(1-x)^2}, |x| < 1", "expr2": "\\frac{1}{(1-x)^2}"}, "preprocessed_expressions": {"expr1": "1/(x**2 - 2*x + 1)", "expr2": "1/(x**2 - 2*x + 1)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "\\frac{1}{(1-x)^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "2\\lambda"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "\\lambda"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "\\frac{\\pi}{8}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "3, -3, 7"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Mean} = 2\\lambda, \\text{Most probable} = \\lambda", "expr2": "\\frac{1}{\\sqrt{5}} \\begin{pmatrix} 0 \\\\ 2 \\\\ -1 \\end{pmatrix}, \\frac{1}{\\sqrt{65}} \\begin{pmatrix} -6 \\\\ 2 \\\\ 5 \\end{pmatrix}, \\frac{1}{3\\sqrt{5}} \\begin{pmatrix} 4 \\\\ 2 \\\\ 5 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "\\frac{1}{(1-x)^2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*pi/8", "expr2": "1/(x**2 - 2*x + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "2\\lambda"}, "preprocessed_expressions": {"expr1": "sqrt(2)*pi/8", "expr2": "2*lambda"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "\\lambda"}, "preprocessed_expressions": {"expr1": "sqrt(2)*pi/8", "expr2": "lambda"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "\\frac{\\pi}{8}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*pi/8", "expr2": "pi/8"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "3, -3, 7"}, "preprocessed_expressions": {"expr1": "sqrt(2)*pi/8", "expr2": "3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "I = \\frac{\\pi}{4\\sqrt{2}}", "expr2": "\\frac{1}{\\sqrt{5}} \\begin{pmatrix} 0 \\\\ 2 \\\\ -1 \\end{pmatrix}, \\frac{1}{\\sqrt{65}} \\begin{pmatrix} -6 \\\\ 2 \\\\ 5 \\end{pmatrix}, \\frac{1}{3\\sqrt{5}} \\begin{pmatrix} 4 \\\\ 2 \\\\ 5 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{\\sqrt{5}} \\begin{pmatrix} 0 \\\\ 2 \\\\ -1 \\end{pmatrix}, \\frac{1}{\\sqrt{65}} \\begin{pmatrix} -6 \\\\ 2 \\\\ 5 \\end{pmatrix}, \\frac{1}{3\\sqrt{5}} \\begin{pmatrix} 4 \\\\ 2 \\\\ 5 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "\\frac{1}{(1-x)^2}"}, "preprocessed_expressions": {"expr1": "sqrt(5)/5", "expr2": "1/(x**2 - 2*x + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "2\\lambda"}, "preprocessed_expressions": {"expr1": "sqrt(5)/5", "expr2": "2*lambda"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "\\lambda"}, "preprocessed_expressions": {"expr1": "sqrt(5)/5", "expr2": "lambda"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "\\frac{\\pi}{8}"}, "preprocessed_expressions": {"expr1": "sqrt(5)/5", "expr2": "pi/8"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "3, -3, 7"}, "preprocessed_expressions": {"expr1": "sqrt(5)/5", "expr2": "3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\lambda_1 = 1, \\vec{v}_1 = \\frac{1}{\\sqrt{6}}(2,-1,-1) \\\\\n\\lambda_2 = 3, \\vec{v}_2 = (0,1,0) \\\\\n\\lambda_3 = 3, \\vec{v}_3 = \\frac{1}{\\sqrt{5}}(2,0,1)\n\\end{array}", "expr2": "\\frac{1}{\\sqrt{5}} \\begin{pmatrix} 0 \\\\ 2 \\\\ -1 \\end{pmatrix}, \\frac{1}{\\sqrt{65}} \\begin{pmatrix} -6 \\\\ 2 \\\\ 5 \\end{pmatrix}, \\frac{1}{3\\sqrt{5}} \\begin{pmatrix} 4 \\\\ 2 \\\\ 5 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{\\sqrt{5}} \\begin{pmatrix} 0 \\\\ 2 \\\\ -1 \\end{pmatrix}, \\frac{1}{\\sqrt{65}} \\begin{pmatrix} -6 \\\\ 2 \\\\ 5 \\end{pmatrix}, \\frac{1}{3\\sqrt{5}} \\begin{pmatrix} 4 \\\\ 2 \\\\ 5 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.25}
{"id": "quantum/7018", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * Two particles in a box with sides a > b > c\n   * Interaction potential is a delta function\n   * We need to use first-order perturbation theory\n   * Ground state energy will be perturbed by the interaction\n\n2) The unperturbed ground state wave function for a single particle in a box is:\n   ψ₁₁₁(x,y,z) = √(8/abc) sin(πx/a)sin(πy/b)sin(πz/c)\n\n3) For first-order perturbation theory:\n   ΔE = ⟨ψ₀|V|ψ₀⟩\n\n4) Let's analyze each case:\n\n(a) Non-identical particles:\n   * Wave function: ψ(r₁,r₂) = ψ₁₁₁(r₁)ψ₁₁₁(r₂)\n   * ΔE = A∫|ψ₁₁₁(r)|² dr = A(8/abc)\n\n(b) Identical spin-0 particles:\n   * Wave function must be symmetric:\n   * ψ(r₁,r₂) = [ψ₁₁₁(r₁)ψ₁₁₁(r₂)]/√2\n   * ΔE = A(8/abc)\n\n(c) Identical spin-1/2 particles with parallel spins:\n   * Wave function must be antisymmetric\n   * Spatial part must be antisymmetric\n   * ψ(r₁,r₂) = 0 at r₁ = r₂\n   * Therefore, ΔE = 0\n\n5) The final energies in each case will be:\n   E = E₀ + ΔE\n   where E₀ = (ℏ²π²/2m)[1/a² + 1/b² + 1/c²]\n\nTherefore, the energy shifts are:\n\n\\[ \\boxed{\\Delta E_a = \\Delta E_b = A\\frac{8}{abc}, \\quad \\Delta E_c = 0} \\]", "final_answers": ["\\Delta E_a = \\Delta E_b = A\\frac{8}{abc}, \\quad \\Delta E_c = 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_a = \\Delta E_b = A\\frac{8}{abc}, \\quad \\Delta E_c = 0", "expr2": "E' = \\frac{\\hbar^2 \\pi^2}{m} \\left( \\frac{1}{a^2} + \\frac{1}{b^2} + \\frac{1}{c^2} \\right) + \\frac{27A}{8abc}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "27*A/(8*a*b*c) + hbar**2*pi**2/(c**2*m) + hbar**2*pi**2/(b**2*m) + hbar**2*pi**2/(a**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_a = \\Delta E_b = A\\frac{8}{abc}, \\quad \\Delta E_c = 0", "expr2": "E'_s = \\frac{\\hbar^2 \\pi^2}{m} \\left( \\frac{1}{a^2} + \\frac{1}{b^2} + \\frac{1}{c^2} \\right) + \\frac{27A}{8abc}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "27*A/(8*a*b*c) + hbar**2*pi**2/(c**2*m) + hbar**2*pi**2/(b**2*m) + hbar**2*pi**2/(a**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_a = \\Delta E_b = A\\frac{8}{abc}, \\quad \\Delta E_c = 0", "expr2": "E'_A = \\frac{\\hbar^2 \\pi^2}{m} \\left( \\frac{5}{2a^2} + \\frac{1}{b^2} + \\frac{1}{c^2} \\right)"}, "preprocessed_expressions": {"expr1": "0", "expr2": "hbar**2*pi**2/(c**2*m) + hbar**2*pi**2/(b**2*m) + 5*hbar**2*pi**2/(2*a**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/4007", "solution": "Let me solve this step by step.\n\n1) The Hamiltonian for an electron in an electromagnetic field is:\n   $H = \\frac{1}{2m}(\\mathbf{p} - e\\mathbf{A})^2$\n\n2) Substituting the given vector potential:\n   $H = \\frac{1}{2m}(p_x^2 + (p_y - eH_0x)^2 + p_z^2)$\n\n3) The wavefunction can be separated:\n   $\\psi(x,y,z) = X(x)Y(y)Z(z)$\n\n4) For z-direction, we have free particle solution:\n   $Z(z) = \\frac{1}{\\sqrt{L}}e^{ik_zz}$\n   $E_z = \\frac{\\hbar^2k_z^2}{2m}$\n\n5) For y-direction, we also have free particle solution:\n   $Y(y) = \\frac{1}{\\sqrt{L}}e^{ik_yy}$\n   $E_y = \\frac{\\hbar^2k_y^2}{2m}$\n\n6) For x-direction, after substitution, we get:\n   $\\frac{d^2X}{dx^2} + [\\frac{2mE_x}{\\hbar^2} - (\\frac{eH_0}{\\hbar})^2(x - \\frac{\\hbar k_y}{eH_0})^2]X = 0$\n\n7) This is the equation for a quantum harmonic oscillator with frequency:\n   $\\omega = \\frac{eH_0}{m}$\n   centered at $x_0 = \\frac{\\hbar k_y}{eH_0}$\n\n8) The energy levels for x-direction are:\n   $E_x = \\hbar\\omega(n + \\frac{1}{2})$, where n = 0,1,2,...\n\n9) The total energy is:\n   $E = \\frac{\\hbar^2k_z^2}{2m} + \\frac{\\hbar^2k_y^2}{2m} + \\hbar\\omega(n + \\frac{1}{2})$\n\n10) The eigenfunctions are:\n    $\\psi_{n,k_y,k_z}(x,y,z) = \\frac{1}{L}e^{ik_yy}e^{ik_zz}H_n(\\alpha(x-x_0))e^{-\\alpha^2(x-x_0)^2/2}$\n    where $H_n$ are Hermite polynomials and $\\alpha = \\sqrt{\\frac{m\\omega}{\\hbar}}$\n\n11) The degeneracy comes from $k_y$ and $k_z$ being continuous in the limit of large L.\n\nThe final answer for energy levels is:\n\n\\[\\boxed{E_{n,k_y,k_z} = \\frac{\\hbar^2k_z^2}{2m} + \\frac{\\hbar^2k_y^2}{2m} + \\hbar\\omega(n + \\frac{1}{2}), \\quad \\omega = \\frac{eH_0}{m}}\\]", "final_answers": ["E_{n,k_y,k_z} = \\frac{\\hbar^2k_z^2}{2m} + \\frac{\\hbar^2k_y^2}{2m} + \\hbar\\omega(n + \\frac{1}{2}), \\quad \\omega = \\frac{eH_0}{m}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{n,k_y,k_z} = \\frac{\\hbar^2k_z^2}{2m} + \\frac{\\hbar^2k_y^2}{2m} + \\hbar\\omega(n + \\frac{1}{2}), \\quad \\omega = \\frac{eH_0}{m}", "expr2": "E = \\frac{p_z^2}{2m} - \\left(n + \\frac{1}{2}\\right) \\frac{H_0 e \\hbar}{mc}, \\quad n = 0, 1, 2, \\ldots"}, "preprocessed_expressions": {"expr1": "H*e/m", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{n,k_y,k_z} = \\frac{\\hbar^2k_z^2}{2m} + \\frac{\\hbar^2k_y^2}{2m} + \\hbar\\omega(n + \\frac{1}{2}), \\quad \\omega = \\frac{eH_0}{m}", "expr2": "\\psi(x) = C_n \\exp \\left[ i \\frac{(p_y y + p_z z)}{\\hbar} + \\frac{e H_0}{2 \\hbar c} \\, (x - x_0)^2 \\right] H_n\\left( - \\frac{e H_0}{\\hbar c} \\, (x - x_0) \\right)"}, "preprocessed_expressions": {"expr1": "H*e/m", "expr2": "C"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/7011", "solution": "Let me solve this step by step.\n\n1) First, let's identify what we know:\n   * Two spinless particles in a 1D box of width L\n   * Interaction potential V(x₁,x₂) = aδ(x₁-x₂)\n   * We need first-order perturbation theory\n\n2) The unperturbed system (a=0):\n   * Each particle is independently in a 1D box\n   * Ground state wavefunction for each particle is:\n     ψ₁(x) = ψ₂(x) = √(2/L) sin(πx/L)\n   * Total unperturbed wavefunction:\n     Ψ₀(x₁,x₂) = √(2/L) sin(πx₁/L) × √(2/L) sin(πx₂/L)\n\n3) The unperturbed ground state energy is:\n   E₀ = 2 × (ℏ²π²)/(2mL²)\n   E₀ = ℏ²π²/(mL²)\n\n4) First-order correction using perturbation theory:\n   ΔE = ⟨Ψ₀|V|Ψ₀⟩\n   ΔE = a∫∫Ψ₀*(x₁,x₂)δ(x₁-x₂)Ψ₀(x₁,x₂)dx₁dx₂\n\n5) Substituting the wavefunction:\n   ΔE = a∫∫(2/L)sin(πx₁/L)sin(πx₂/L)δ(x₁-x₂)dx₁dx₂\n   \n6) Using the delta function property:\n   ΔE = a(2/L)∫sin²(πx/L)dx\n   Integration from 0 to L gives:\n   ΔE = a/L\n\n7) Total energy to first order in a:\n   E = E₀ + ΔE\n   E = ℏ²π²/(mL²) + a/L\n\nTherefore, the ground state energy to first order in a is:\n\n\\[ \\boxed{E = \\frac{\\hbar^2\\pi^2}{mL^2} + \\frac{a}{L}} \\]", "final_answers": ["E = \\frac{\\hbar^2\\pi^2}{mL^2} + \\frac{a}{L}"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\frac{\\hbar^2\\pi^2}{mL^2} + \\frac{a}{L}", "expr2": "E'_{11} = \\frac{\\pi^2 \\hbar^2}{mL^2} + \\frac{3a}{2L}"}, "preprocessed_expressions": {"expr1": "a/L + hbar**2*pi**2/(L**2*m)", "expr2": "3*a/(2*L) + hbar**2*pi**2/(L**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/4009", "solution": "Let's solve this step by step.\n\n(a) Time reversal for Schrödinger wave function:\n\n1) Under time reversal, t → -t\n2) The Schrödinger equation must remain invariant\n3) For a wave function ψ(r,t), its time-reversed form ψ'(r,t) must satisfy:\n   iℏ∂ψ'/∂t = Hψ'\n4) The time-reversed wave function must be:\n   ψ'(r,t) = ψ*(r,-t)\n   where * denotes complex conjugation\n\n(b) Hamiltonian for electron in magnetic field:\n\n1) For a magnetic moment in a magnetic field:\n   H = -μ·H\n2) In this case, with field only in z-direction:\n   H = -μzHz\n3) The magnetic moment operator is related to spin:\n   μ = -gμBS/ℏ\n   where g is the g-factor, μB is the Bohr magneton\n4) Therefore:\n   H = gμBHzSz/ℏ\n\n(c) Time rate of change of μ with additional Hy:\n\n1) Use Heisenberg equation of motion:\n   dμ/dt = (iℏ)⁻¹[μ,H]\n2) Total Hamiltonian with both fields:\n   H = gμB(HzSz + HySy)/ℏ\n3) Using commutation relations for spin operators:\n   [Si,Sj] = iℏεijkSk\n4) Calculate commutator:\n   [μx,H] = igμB(HzSy - HySz)\n   [μy,H] = igμB(HxSz - HzSx)\n   [μz,H] = igμB(HySx - HxSy)\n5) Therefore:\n   dμ/dt = gμB(μ × H)\n\nThe final answer for part (c), which is the key result:\n\n\\[\\boxed{\\frac{d\\mu}{dt} = gμ_B(\\mu \\times H)}\\]\n\nThis is the quantum mechanical operator equation for the precession of the magnetic moment in the combined magnetic field.", "final_answers": ["\\frac{d\\mu}{dt} = gμ_B(\\mu \\times H)"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\mu}{dt} = gμ_B(\\mu \\times H)", "expr2": "\\psi^*(-t)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\ngμ(\\mu \\times H)\n~^"}, {"input_expressions": {"expr1": "\\frac{d\\mu}{dt} = gμ_B(\\mu \\times H)", "expr2": "\\hat{H} = \\frac{e \\hbar}{2mc} \\sigma_z H_z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\ngμ(\\mu \\times H)\n~^"}, {"input_expressions": {"expr1": "\\frac{d\\mu}{dt} = gμ_B(\\mu \\times H)", "expr2": "\\frac{d\\mu}{dt} = \\frac{e}{mc} \\mathbf{H} \\times \\mu"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\ngμ(\\mu \\times H)\n~^"}], "accuracy": 0.0}
{"id": "quantum/8003", "solution": "Let me solve this step by step:\n\n(a) Franck-Hertz: Demonstrated quantum energy levels in atoms through electron collisions with mercury vapor, proving Bohr's theory.\nEquation: ΔE = hν\n\n(b) Davisson-Germer: Experimentally proved de Broglie's hypothesis of wave nature of electrons through electron diffraction.\nEquation: λ = h/p\n\n(c) Breit-Wigner: Developed formula describing nuclear resonances and cross-sections in particle physics.\nEquation: σ(E) = σ₀Γ²/[(E-E₀)²+(Γ/2)²]\n\n(d) Hartree-Fock: Created method for finding approximate wave functions and energies for many-body quantum systems.\nEquation: Fψᵢ = εᵢψᵢ\n\n(e) Lee-Yang: Predicted parity violation in weak interactions, leading to Nobel Prize.\n(No specific equation, but proposed that weak interactions violate parity conservation)\n\n(f) duLong-Petit: Established law relating specific heat capacity of solids to number of atoms.\nEquation: C = 3R (R is gas constant)\n\n(g) Cockcroft-Walton: Developed particle accelerator and first split atomic nucleus artificially.\n(Voltage multiplier circuit design)\n\n(h) Hahn-Strassmann: Discovered nuclear fission in uranium.\nEquation: ²³⁵U + n → fission products + energy\n\n(i) Ramsauer-Townsend: Discovered effect where electrons pass through noble gases with minimal scattering at certain energies.\n(Cross-section minimum at specific electron energies)\n\n(j) Thomas-Fermi: Developed statistical model for electron distribution in atoms.\nEquation: ∇²φ = φ³/²/√x\n\nFinal answer in summary form:\n\n\\[\\boxed{\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}}\\]", "final_answers": ["\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Franck and Hertz verified experimentally the existence of discrete energy levels of an atom.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Davisson and Germer verified the wave properties of electrons by demonstrating their diffraction in a crystal.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Breit and Wigner discovered the Breit-Wigner resonance formula in nuclear physics.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Hartree and Fock developed a self-consistent field method for obtaining approximate many-electron wave functions.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Lee and Yang proposed the non-conservation of parity in weak interactions.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Dulong and Petit discovered that atomic heat is the same for all solids at high temperatures, being equal to $3R$, $R$ being the ideal gas constant.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Cockcroft and Walton effected the first artificial disintegration of an atomic nucleus.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Hahn and Strassmann first demonstrated the fission of uranium by neutrons.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Ramsauer and Townsend first observed the resonant transmission of low energy electrons through rare-gas atoms.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{array}{l}\n\\text{a) Quantum energy levels (ΔE = hν)} \\\\\n\\text{b) Electron diffraction (λ = h/p)} \\\\\n\\text{c) Nuclear resonance formula} \\\\\n\\text{d) Many-body quantum approximation} \\\\\n\\text{e) Parity violation in weak interactions} \\\\\n\\text{f) Specific heat law (C = 3R)} \\\\\n\\text{g) First particle accelerator} \\\\\n\\text{h) Nuclear fission discovery} \\\\\n\\text{i) Electron scattering effect} \\\\\n\\text{j) Statistical atomic model}\n\\end{array}", "expr2": "\\text{Thomas and Fermi proposed an approximate statistical model for the structure of metals.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8004", "solution": "Let's solve this step by step:\n\n(a) For nucleon kinetic energy:\n1) Nuclear radius R ≈ 10^-13 cm\n2) Using uncertainty principle: ΔpΔx ≈ ℏ\n3) Δx ≈ R, so Δp ≈ ℏ/R\n4) KE ≈ (Δp)²/2M ≈ ℏ²/2MR²\n5) Plugging in values: KE ≈ 10-20 MeV\n\n(b) For Zeeman splitting:\n1) Zeeman energy = μB·B where μB is Bohr magneton\n2) Ground state energy = -13.6 eV\n3) μB = eℏ/2mec ≈ 5.8×10^-9 eV/G\n4) For comparable splitting: μB·B ≈ 13.6 eV\n5) B ≈ 13.6/(5.8×10^-9) ≈ 10^9 G\n\n(c) For harmonic oscillator:\n1) Classical energy E = mω²x₀²/2\n2) ω = 2π/T = 2π rad/s\n3) E = (1g)(2π)²(1cm)²/2 ≈ 2×10^7 erg\n4) Quantum energy = ℏω(n + 1/2)\n5) Equating: n ≈ E/ℏω ≈ 10^42\n\n(d) For hyperfine splitting:\n1) Hyperfine splitting involves electron-proton spin interaction\n2) Energy scale ≈ α⁴(me/mp)Ry\n3) Ground state energy = Ry = α²mec²/2\n4) Ratio = α⁴(me/mp)Ry / (α²mec²/2)\n5) Simplifying: ratio ≈ α²(me/mp)\n\nThe final answers are:\n\n\\[\\boxed{\n\\begin{align*}\n(a) &\\sim 20 \\text{ MeV} \\\\\n(b) &\\sim 10^9 \\text{ G} \\\\\n(c) &\\sim 10^{42} \\\\\n(d) &\\sim \\alpha^2(m_e/m_p)\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n(a) &\\sim 20 \\text{ MeV} \\\\\n(b) &\\sim 10^9 \\text{ G} \\\\\n(c) &\\sim 10^{42} \\\\\n(d) &\\sim \\alpha^2(m_e/m_p)\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n(a) &\\sim 20 \\text{ MeV} \\\\\n(b) &\\sim 10^9 \\text{ G} \\\\\n(c) &\\sim 10^{42} \\\\\n(d) &\\sim \\alpha^2(m_e/m_p)\n\\end{align*}", "expr2": "10^7 \\text{ eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n(a) &\\sim 20 \\text{ MeV} \\\\\n(b) &\\sim 10^9 \\text{ G} \\\\\n(c) &\\sim 10^{42} \\\\\n(d) &\\sim \\alpha^2(m_e/m_p)\n\\end{align*}", "expr2": "10^9 \\text{ Gs}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/8019", "solution": "Let's solve this step by step.\n\n1) For a quark-antiquark system in an s-state, we can use the variational method with a trial wavefunction.\n\n2) Given the potential $V = \\frac{A}{r} + Br$, this is similar to a combination of Coulomb and linear potential.\n\n3) For an s-state, a reasonable trial wavefunction would be:\n   $\\psi(r) = N e^{-\\alpha r}$\n   where α is our variational parameter and N is the normalization constant.\n\n4) For $A = 0$ (as suggested), the potential simplifies to $V = Br$\n\n5) The expectation value of energy is:\n   $E(\\alpha) = \\langle T \\rangle + \\langle V \\rangle$\n\n6) For the kinetic energy:\n   $\\langle T \\rangle = \\frac{\\hbar^2}{2m_q}\\langle -\\nabla^2 \\rangle = \\frac{\\hbar^2\\alpha^2}{2m_q}$\n\n7) For the potential energy with $V = Br$:\n   $\\langle V \\rangle = B\\langle r \\rangle = \\frac{3B}{2\\alpha}$\n\n8) Total energy:\n   $E(\\alpha) = \\frac{\\hbar^2\\alpha^2}{2m_q} + \\frac{3B}{2\\alpha}$\n\n9) To find minimum energy, differentiate with respect to α and set to zero:\n   $\\frac{dE}{d\\alpha} = \\frac{\\hbar^2\\alpha}{m_q} - \\frac{3B}{2\\alpha^2} = 0$\n\n10) Solving for α:\n    $\\alpha^3 = \\frac{3Bm_q}{2\\hbar^2}$\n    $\\alpha = (\\frac{3Bm_q}{2\\hbar^2})^{1/3}$\n\n11) Substituting back to get minimum energy:\n    $E_{min} = \\frac{\\hbar^2}{2m_q}(\\frac{3Bm_q}{2\\hbar^2})^{2/3} + \\frac{3B}{2}(\\frac{2\\hbar^2}{3Bm_q})^{1/3}$\n\n12) Simplifying:\n    $E_{min} = \\frac{3}{2^{2/3}}(B^2\\hbar^2/m_q)^{1/3}$\n\nTherefore, the ground state energy is:\n\n\\[\\boxed{E_{min} = 1.89(B^2\\hbar^2/m_q)^{1/3}}\\]\n\nwhere 1.89 ≈ $\\frac{3}{2^{2/3}}$", "final_answers": ["E_{min} = 1.89(B^2\\hbar^2/m_q)^{1/3}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{min} = 1.89(B^2\\hbar^2/m_q)^{1/3}", "expr2": "E_g = 2.48 \\left( \\frac{B^2\\hbar^2}{m_q} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "1.89*(B**2*hbar**2/m)**(1/3)", "expr2": "2.48*(B**2*hbar**2/m)**(1/3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{min} = 1.89(B^2\\hbar^2/m_q)^{1/3}", "expr2": "\\bar{H} = 3.30 \\left( \\frac{\\hbar^2 B^2}{m_q} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "1.89*(B**2*hbar**2/m)**(1/3)", "expr2": "3.3*(B**2*hbar**2/m)**(1/3)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8026", "solution": "Let's solve this step by step.\n\n1) First, recall that the angular momentum density of electromagnetic fields is related to the Poynting vector S by:\n   r × (S/c²)\n   where S = (E × B)/μ₀\n\n2) For this system:\n   - We have an electric charge e at position (0, 0, r/2)\n   - A magnetic charge g at position (0, 0, -r/2)\n   - The electric field lines radiate from e\n   - The magnetic field lines radiate from g\n\n3) The electric field at any point (x,y,0) is:\n   E = (e/4πε₀) (r₁/r₁³)\n   where r₁ is the vector from e to the point\n\n4) Similarly, the magnetic field is:\n   B = (μ₀g/4π) (r₂/r₂³)\n   where r₂ is the vector from g to the point\n\n5) The total angular momentum J can be found by integrating:\n   J = ∫ r × (E × B)/c² dV\n\n6) Due to the symmetry of the configuration, the angular momentum must be along the z-axis.\n\n7) When we perform the integration, we get:\n   J = eg/4πc\n\n8) According to the Bohr-Sommerfeld quantization rule:\n   J = nℏ\n   where n is an integer\n\n9) Therefore:\n   eg/4πc = nℏ\n   \n10) Rearranging:\n    eg/ℏc = 4πn\n\n11) The factor 4π can be absorbed into n to give:\n    eg/ℏc = n\n\nThis is exactly Dirac's quantization condition.\n\n\\[\\boxed{\\frac{eg}{\\hbar c} = n, \\text{ where n is an integer}}\\]", "final_answers": ["\\frac{eg}{\\hbar c} = n, \\text{ where n is an integer}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{eg}{\\hbar c} = n, \\text{ where n is an integer}", "expr2": "\\frac{eg}{\\hbar c} = n"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/8021", "solution": "Let me solve this step by step.\n\n1) For a hydrogenic trial function in the ground state (s-state), we use:\n   ψ(r) = N e^(-αr)\n   where N is the normalization constant and α is our variational parameter.\n\n2) The normalization constant N for a 3D wavefunction is:\n   N = (2α)^(3/2)/√(4π)\n\n3) The Hamiltonian is:\n   H = -ℏ²/2m ∇² - g²/r^(3/2)\n\n4) We need to calculate E(α) = ⟨ψ|H|ψ⟩/⟨ψ|ψ⟩\n\n5) The kinetic energy term is:\n   ⟨T⟩ = ℏ²α²/2m\n\n6) For the potential energy term:\n   ⟨V⟩ = -g² ∫ (4πr²)(N²e^(-2αr))/r^(3/2) dr\n   = -4g²α³ ∫ x^(1/2)e^(-2x) dx\n   where x = αr\n\n7) The integral evaluates to:\n   ⟨V⟩ = -g²α^(3/2)Γ(3/2)\n\n8) Therefore:\n   E(α) = ℏ²α²/2m - g²α^(3/2)Γ(3/2)\n\n9) To minimize, take dE/dα = 0:\n   ℏ²α/m - 3g²α^(1/2)Γ(3/2)/2 = 0\n\n10) Solving for α:\n    α = (3mg²Γ(3/2))²/(4ℏ²)²\n\n11) Substituting back to get the energy:\n    E = -3m(g²Γ(3/2))²/(8ℏ²)\n\n12) Note that Γ(3/2) = √π/2\n\nThe upper bound for the ground state energy is:\n\n\\[ \\boxed{E = -\\frac{3m(g^2\\sqrt{\\pi}/2)^2}{8\\hbar^2}} \\]\n\nThis represents an upper bound to the true ground state energy because we used the variational principle with a trial wavefunction.", "final_answers": ["E = -\\frac{3m(g^2\\sqrt{\\pi}/2)^2}{8\\hbar^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E = -\\frac{3m(g^2\\sqrt{\\pi}/2)^2}{8\\hbar^2}", "expr2": "- \\frac{27 \\pi^2 g^8 m^3}{128 \\hbar^6}"}, "preprocessed_expressions": {"expr1": "-3*m(g**2*sqrt(pi)/2)**2/(8*hbar**2)", "expr2": "-27*g**8*m**3*pi**2/(128*hbar**6)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8028", "solution": "Let's solve this step by step.\n\n(a) First part:\n\n1) This is a three-state quantum system with degenerate unperturbed energies. The perturbation matrix is:\n   ```\n   | 0   ω₁  ω₁ |\n   | ω₁  0   ω₁ |\n   | ω₁  ω₁  0  |\n   ```\n\n2) The eigenvalues of this matrix are:\n   - λ₁ = 2ω₁\n   - λ₂ = -ω₁\n   - λ₃ = -ω₁\n\n3) The normalized eigenvectors are:\n   - For λ₁: (1/√3)(1,1,1)\n   - For λ₂,λ₃: Two orthogonal vectors in plane perpendicular to (1,1,1)\n\n4) Initial state νₑ can be written as combination of eigenstates:\n   νₑ = (1/3)(1,1,1) + (2/3)(1,-1/2,-1/2)\n\n5) Time evolution gives probability of finding system in νμ or ντ:\n   P(t) = sin²(3ω₁t/2)\n\n(b) Second part:\n\n1) For relativistic neutrinos:\n   E ≈ pc + m²c⁴/2E\n\n2) Phase difference after distance L:\n   Δφ = (m²c⁴L)/(2ℏcE)\n\n3) For 1% oscillation:\n   sin²(3ω₁t/2) = 0.01\n\n4) Time t = L/c for relativistic neutrinos\n\n5) Substituting values:\n   - L = 2000 m\n   - E = 100 GeV\n   - M₀ = 20 eV\n\n6) The smallest detectable ℏω₁ is:\n   ℏω₁ ≈ (2π/3)(ℏc/L)√(0.01) ≈ 10⁻³ eV\n\n7) The dependence on M₀ is linear for small oscillations.\n\nThe final answer for the smallest detectable value is:\n\n\\[ \\boxed{\\hbar\\omega_1 \\approx 1 \\text{ meV}} \\]\n\nThe dependence on M₀ is:\n\n\\[ \\boxed{\\hbar\\omega_1 \\propto M_0} \\]", "final_answers": ["\\hbar\\omega_1 \\approx 1 \\text{ meV}", "\\hbar\\omega_1 \\propto M_0"], "equivalency_results": [{"input_expressions": {"expr1": "\\hbar\\omega_1 \\approx 1 \\text{ meV}", "expr2": "\\begin{aligned}\nP(\\nu_\\mu) &= \\frac{2}{9} (1 - \\cos 3\\omega_1 t), \\\\\nP(\\nu_\\tau) &= \\frac{2}{9} (1 - \\cos 3\\omega_1 t).\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hbar\\omega_1 \\approx 1 \\text{ meV}", "expr2": "0.05 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hbar\\omega_1 \\propto M_0", "expr2": "\\begin{aligned}\nP(\\nu_\\mu) &= \\frac{2}{9} (1 - \\cos 3\\omega_1 t), \\\\\nP(\\nu_\\tau) &= \\frac{2}{9} (1 - \\cos 3\\omega_1 t).\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "M*hbar*omega*propto", "expr2": "2/9 - 2*cos(3*omega*t)/9"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hbar\\omega_1 \\propto M_0", "expr2": "0.05 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8017", "solution": "Let me solve this step by step using the variational principle.\n\n1) The expectation value of energy is given by:\n   $E(\\lambda) = \\frac{\\langle\\phi|H|\\phi\\rangle}{\\langle\\phi|\\phi\\rangle}$\n\n2) We need to find $\\lambda$ that minimizes $E(\\lambda)$\n\n3) First, let's calculate $\\langle\\phi|\\phi\\rangle$:\n   $\\langle\\phi|\\phi\\rangle = A^2\\int_{-\\infty}^{\\infty} e^{-2\\lambda^2x^2}dx = A^2\\sqrt{\\frac{\\pi}{2\\lambda^2}}$\n\n4) For $\\langle\\phi|H|\\phi\\rangle$, we need:\n   * Kinetic term: $-\\frac{\\hbar^2}{2m}\\langle\\phi|\\frac{d^2}{dx^2}|\\phi\\rangle$\n   * Potential term: $b\\langle\\phi|x^4|\\phi\\rangle$\n\n5) For kinetic term:\n   $\\frac{d^2}{dx^2}(e^{-\\lambda^2x^2}) = (-2\\lambda^2 + 4\\lambda^4x^2)e^{-\\lambda^2x^2}$\n   \n   So: $-\\frac{\\hbar^2}{2m}\\langle\\phi|\\frac{d^2}{dx^2}|\\phi\\rangle = \\frac{\\hbar^2A^2}{2m}\\int_{-\\infty}^{\\infty}(2\\lambda^2 - 4\\lambda^4x^2)e^{-2\\lambda^2x^2}dx$\n   \n   $= \\frac{\\hbar^2A^2}{2m}(2\\lambda^2\\sqrt{\\frac{\\pi}{2\\lambda^2}} - 4\\lambda^4\\frac{1}{2}\\sqrt{\\frac{\\pi}{8\\lambda^6}})$\n   \n   $= \\frac{\\hbar^2A^2\\sqrt{\\pi}}{2m\\sqrt{2}\\lambda}(\\lambda^2 - \\frac{\\lambda^2}{2}) = \\frac{\\hbar^2A^2\\sqrt{\\pi}}{4m\\sqrt{2}\\lambda}\\lambda^2$\n\n6) For potential term:\n   $b\\langle\\phi|x^4|\\phi\\rangle = bA^2\\int_{-\\infty}^{\\infty}x^4e^{-2\\lambda^2x^2}dx$\n   \n   $= bA^2\\frac{3}{4}\\sqrt{\\frac{\\pi}{32\\lambda^{10}}}$\n\n7) Therefore:\n   $E(\\lambda) = \\frac{\\hbar^2\\lambda^2}{4m} + \\frac{3b}{16\\lambda^4}$\n\n8) To minimize, take derivative and set to zero:\n   $\\frac{dE}{d\\lambda} = \\frac{\\hbar^2\\lambda}{2m} - \\frac{3b}{4\\lambda^5} = 0$\n\n9) Solving:\n   $\\frac{\\hbar^2\\lambda^6}{2m} = \\frac{3b}{4}$\n   \n   $\\lambda = (\\frac{3bm}{2\\hbar^2})^{1/6}$\n\nTherefore, the optimal value of $\\lambda$ is:\n\n\\[\\boxed{\\lambda = \\left(\\frac{3bm}{2\\hbar^2}\\right)^{1/6}}\\]", "final_answers": ["\\lambda = \\left(\\frac{3bm}{2\\hbar^2}\\right)^{1/6}"], "equivalency_results": [{"input_expressions": {"expr1": "\\lambda = \\left(\\frac{3bm}{2\\hbar^2}\\right)^{1/6}", "expr2": "\\langle H \\rangle_{min} = \\frac{3}{4} \\left( \\frac{3}{4} \\right)^{1/3} \\left( \\frac{b \\hbar^4}{m^2} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "2**(5/6)*3**(1/6)*(b*m/hbar**2)**(1/6)/2", "expr2": "3*6**(1/3)*(b*hbar**4/m**2)**(1/3)/8"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8010", "solution": "Let me solve this step by step.\n\n(a) To compare ΔA and ΔB:\n\n1) Looking at the potential curves, state A (ground state) has a steeper and narrower potential well compared to state B (excited state).\n\n2) For a quantum harmonic oscillator, the energy spacing between vibrational levels is proportional to the force constant k, which is related to the curvature of the potential well.\n\n3) The steeper the potential well, the larger the force constant k, and thus the larger the energy spacing between vibrational levels.\n\n4) Since state A has a steeper potential well than state B, ΔA must be larger than ΔB.\n\n\\[\\boxed{\\Delta_A > \\Delta_B}\\]\n\n(b) For the transitions from B to A:\n\n1) According to the Franck-Condon principle, electronic transitions occur so rapidly that nuclei don't have time to move (vertical transitions).\n\n2) The most probable transition will be the one where the vibrational wavefunctions of both states have maximum overlap.\n\n3) Looking at the potential curves, a vertical transition from the lowest vibrational level of state B (ν = 0) would intersect with state A around vibrational levels ν = 5-7.\n\n4) The equilibrium internuclear distance (r₀B) of state B is larger than that of state A, which means the most favorable transition would be to a higher vibrational level of state A.\n\n5) Based on the diagram, the most favorable transition would be to approximately vibrational level ν = 5 of state A.\n\n\\[\\boxed{\\text{Vibrational level } \\nu = 5 \\text{ of state A}}\\]", "final_answers": ["\\Delta_A > \\Delta_B", "\\text{Vibrational level } \\nu = 5 \\text{ of state A}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta_A > \\Delta_B", "expr2": "\\Delta_A > \\Delta_B"}, "preprocessed_expressions": {"expr1": "False", "expr2": "False"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": "BooleanAtom not allowed in this context."}, {"input_expressions": {"expr1": "\\text{Vibrational level } \\nu = 5 \\text{ of state A}", "expr2": "\\Delta_A > \\Delta_B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Vibrational level } \\nu = 5 \\text{ of state A}", "expr2": "\\nu \\approx 5"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/7002", "solution": "Let's solve this step by step.\n\n(a) First, let's find the exact energy levels:\n\n1) The total Hamiltonian for the system is:\n   H = (p₁²/2m + kx₁²/2) + (p₂²/2m + kx₂²/2) + εx₁x₂\n\n2) This can be rewritten in matrix form for the potential energy part:\n   V = ½(x₁ x₂)(k   ε)(x₁)\n                    (ε   k)(x₂)\n\n3) To find normal modes, we need to diagonalize this matrix:\n   |k-λ    ε   | = 0\n   |ε      k-λ |\n   \n4) This gives: (k-λ)² - ε² = 0\n   Solving: λ = k ± ε\n\n5) The normal mode frequencies are:\n   ω₊ = √((k+ε)/m)\n   ω₋ = √((k-ε)/m)\n\n6) The exact energy levels are:\n   E = ℏω₊(n₊ + ½) + ℏω₋(n₋ + ½)\n   = ℏ√((k+ε)/m)(n₊ + ½) + ℏ√((k-ε)/m)(n₋ + ½)\n\n(b) For ε ≪ k, we can use Taylor expansion:\n√(k±ε) ≈ √k(1 ± ε/2k)\n\n1) Therefore:\n   ω₊ ≈ √(k/m)(1 + ε/2k)\n   ω₋ ≈ √(k/m)(1 - ε/2k)\n\n2) The first-order energy levels are:\n   E ≈ ℏ√(k/m)[(1 + ε/2k)(n₊ + ½) + (1 - ε/2k)(n₋ + ½)]\n   = ℏω₀(n₊ + n₋ + 1) + (ℏω₀ε/2k)(n₊ - n₋)\n\nwhere ω₀ = √(k/m)\n\nThe final answers are:\n\nFor exact energy levels:\n\\[\\boxed{E = \\hbar\\sqrt{\\frac{k+\\varepsilon}{m}}(n_+ + \\frac{1}{2}) + \\hbar\\sqrt{\\frac{k-\\varepsilon}{m}}(n_- + \\frac{1}{2})}\\]\n\nFor first-order approximation (ε ≪ k):\n\\[\\boxed{E \\approx \\hbar\\omega_0(n_+ + n_- + 1) + \\frac{\\hbar\\omega_0\\varepsilon}{2k}(n_+ - n_-)}\\]", "final_answers": ["E = \\hbar\\sqrt{\\frac{k+\\varepsilon}{m}}(n_+ + \\frac{1}{2}) + \\hbar\\sqrt{\\frac{k-\\varepsilon}{m}}(n_- + \\frac{1}{2})", "E \\approx \\hbar\\omega_0(n_+ + n_- + 1) + \\frac{\\hbar\\omega_0\\varepsilon}{2k}(n_+ - n_-)"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\hbar\\sqrt{\\frac{k+\\varepsilon}{m}}(n_+ + \\frac{1}{2}) + \\hbar\\sqrt{\\frac{k-\\varepsilon}{m}}(n_- + \\frac{1}{2})", "expr2": "E_{n'n} = \\left( n' + \\frac{1}{2} \\right) \\hbar \\sqrt{\\omega^2 + \\frac{\\varepsilon}{m}} + \\left( n + \\frac{1}{2} \\right) \\hbar \\sqrt{\\omega^2 - \\frac{\\varepsilon}{m}}"}, "preprocessed_expressions": {"expr1": "hbar*sqrt((k + varepsilon)/m)", "expr2": "hbar*(n*sqrt(omega**2 - varepsilon/m) + n'*sqrt(omega**2 + varepsilon/m) + sqrt(omega**2 - varepsilon/m)/2 + sqrt(omega**2 + varepsilon/m)/2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E = \\hbar\\sqrt{\\frac{k+\\varepsilon}{m}}(n_+ + \\frac{1}{2}) + \\hbar\\sqrt{\\frac{k-\\varepsilon}{m}}(n_- + \\frac{1}{2})", "expr2": "E_{n'n} \\approx (n' + n + 1) \\hbar \\omega + (n' - n) \\hbar \\omega \\frac{\\varepsilon}{2k}"}, "preprocessed_expressions": {"expr1": "hbar*sqrt((k + varepsilon)/m)", "expr2": "hbar*omega*(2*E*k*approx(n + n' + 1) - n*varepsilon + n'*varepsilon)/(2*k)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E \\approx \\hbar\\omega_0(n_+ + n_- + 1) + \\frac{\\hbar\\omega_0\\varepsilon}{2k}(n_+ - n_-)", "expr2": "E_{n'n} = \\left( n' + \\frac{1}{2} \\right) \\hbar \\sqrt{\\omega^2 + \\frac{\\varepsilon}{m}} + \\left( n + \\frac{1}{2} \\right) \\hbar \\sqrt{\\omega^2 - \\frac{\\varepsilon}{m}}"}, "preprocessed_expressions": {"expr1": "E*approx*hbar*omega", "expr2": "hbar*(n*sqrt(omega**2 - varepsilon/m) + n'*sqrt(omega**2 + varepsilon/m) + sqrt(omega**2 - varepsilon/m)/2 + sqrt(omega**2 + varepsilon/m)/2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E \\approx \\hbar\\omega_0(n_+ + n_- + 1) + \\frac{\\hbar\\omega_0\\varepsilon}{2k}(n_+ - n_-)", "expr2": "E_{n'n} \\approx (n' + n + 1) \\hbar \\omega + (n' - n) \\hbar \\omega \\frac{\\varepsilon}{2k}"}, "preprocessed_expressions": {"expr1": "E*approx*hbar*omega", "expr2": "hbar*omega*(2*E*k*approx(n + n' + 1) - n*varepsilon + n'*varepsilon)/(2*k)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 0.5}
{"id": "quantum/7005", "solution": "Let's solve this step by step:\n\n(i) For tunneling rate calculation:\n1) The tunneling rate follows the WKB approximation\n2) The rate is proportional to e^(-S), where S is the tunneling action\n3) For a square barrier: S ∝ a√(2mV), where:\n   - a is the barrier width\n   - m is particle mass\n   - V is barrier height\n4) Therefore, tunneling rate ∝ e^(-a√(2mV))\n\n\\[\\boxed{\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}}\\]\nwhere ω₀ is the characteristic frequency of the well.\n\n(ii) For the lowest two states:\n1) The ground state (symmetric):\n   - Positive amplitude in both wells\n   - Small but non-zero amplitude in barrier\n   - Even symmetry\n\n2) First excited state (antisymmetric):\n   - Positive amplitude in one well\n   - Negative amplitude in other well\n   - Small amplitude in barrier\n   - Odd symmetry\n\n(iii) For two identical bosons:\n\nCase 1 (inter-particle force << tunneling):\n1) Ground state:\n\\[\\boxed{\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)}\\]\n\n2) First excited state:\n\\[\\boxed{\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)}\\]\n\nCase 2 (inter-particle force >> tunneling):\n1) Ground state:\n\\[\\boxed{\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)}\\]\n\n2) First excited state:\n\\[\\boxed{\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)}\\]\n\nwhere L and R represent left and right wells respectively.", "final_answers": ["\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "expr2": "\\beta \\sim \\frac{3\\pi \\hbar}{2mL^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "expr2": "\\Psi_I = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "expr2": "\\Psi_{II} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) + \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "expr2": "\\Psi_{I'} = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Rate} \\sim \\omega_0 e^{-a\\sqrt{2mV}/\\hbar}", "expr2": "\\Psi_{II'} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) - \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\beta \\sim \\frac{3\\pi \\hbar}{2mL^2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "3*beta*hbar*pi*sim/(2*L**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_I = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{II} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) + \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "sqrt(2)*psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{I'} = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{II'} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) - \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\beta \\sim \\frac{3\\pi \\hbar}{2mL^2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "3*beta*hbar*pi*sim/(2*L**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\Psi_I = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\Psi_{II} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) + \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "sqrt(2)*psi(1)*psi(2)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\beta \\sim \\frac{3\\pi \\hbar}{2mL^2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "3*beta*hbar*pi*sim/(2*L**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\Psi_I = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0 \\approx \\frac{1}{\\sqrt{2}}(|L,R⟩ + |R,L⟩)", "expr2": "\\Psi_{II} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) + \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "sqrt(2)*psi(1)*psi(2)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\beta \\sim \\frac{3\\pi \\hbar}{2mL^2}"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "3*beta*hbar*pi*sim/(2*L**2*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_I = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{II} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) + \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "sqrt(2)*psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{I'} = \\psi_1(1)\\psi_1(2)"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "psi(1)*psi(2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_1 \\approx \\frac{1}{\\sqrt{2}}(|L,L⟩ + |R,R⟩)", "expr2": "\\Psi_{II'} = \\frac{1}{\\sqrt{2}}\\left[\\psi_1(1)\\psi_2(2) - \\psi_2(1)\\psi_1(2)\\right]"}, "preprocessed_expressions": {"expr1": "sqrt(2)*approx*psi/2", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.4}
{"id": "quantum/8011", "solution": "Let's solve this step by step:\n\n1) First, let's understand what we know:\n   * The two photons are polarized at right angles to each other\n   * The analyzers are also at right angles to each other\n   * Each analyzer perfectly transmits light polarized along its axis and completely blocks perpendicular light\n\n2) For any given event, the photons' polarizations can be at any angle θ relative to the analyzers, but they must be perpendicular to each other.\n\n3) For a photon incident on a polarizer at angle θ, the probability of transmission is cos²θ.\n   For the perpendicular photon, the angle is (θ + 90°), and its transmission probability is cos²(θ + 90°) = sin²θ\n\n4) For both detectors to record photons:\n   * Probability = cos²θ × sin²θ\n\n5) For only one detector to record a photon:\n   * Either first detector only: cos²θ × (1 - sin²θ)\n   * Or second detector only: (1 - cos²θ) × sin²θ\n\n6) The ratio we want is:\n   * R = (Both detectors)/(One detector only)\n   * R = (cos²θ × sin²θ)/[cos²θ(1 - sin²θ) + sin²θ(1 - cos²θ)]\n   * = (cos²θ × sin²θ)/(cos²θ - cos²θ×sin²θ + sin²θ - cos²θ×sin²θ)\n   * = (cos²θ × sin²θ)/(cos²θ + sin²θ - 2cos²θ×sin²θ)\n\n7) When averaged over all possible angles θ, this gives:\n\n\\[\\boxed{R = \\frac{1}{6}}\\]\n\nThis means for every 6 events where one detector records a photon, there will be 1 event where both detectors record photons.", "final_answers": ["R = \\frac{1}{6}"], "equivalency_results": [{"input_expressions": {"expr1": "R = \\frac{1}{6}", "expr2": "\\frac{3}{2}"}, "preprocessed_expressions": {"expr1": "1/6", "expr2": "3/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/8027", "solution": "Let's solve this step by step to find the emission current density.\n\n1) First, let's understand what we need:\n- Only electrons with energy E > eV₀ can escape\n- We need to consider the electron velocity distribution (Maxwell-Boltzmann)\n- Current density will depend on the number of electrons escaping per unit time\n\n2) For electrons to escape:\n- Their velocity component perpendicular to the surface (vₓ) must satisfy:\n- ½mv²ₓ > eV₀\n- Minimum velocity required: vₓ_min = √(2eV₀/m)\n\n3) The current density J is given by:\n- J = -e∫n(v)vₓdv\n- where n(v) is the electron density in velocity space\n\n4) Using Maxwell-Boltzmann distribution:\n- n(v) = n₀(m/2πkT)^(3/2)exp(-mv²/2kT)\n\n5) The current density formula becomes:\n- J = -en₀(m/2πkT)^(3/2)∫vₓexp(-mv²/2kT)dv\n\n6) After integration over all velocities above vₓ_min:\n- J = AT²exp(-eV₀/kT)\n- Where A = 4πmek²/h³ is Richardson's constant\n\n7) This is the Richardson-Dushman equation, where:\n- T is absolute temperature\n- k is Boltzmann constant\n- V₀ is the potential barrier (work function)\n- A ≈ 120 A/cm²K²\n\nThe final answer in the form of Richardson-Dushman equation is:\n\n\\[\\boxed{J = AT^2e^{-eV_0/kT}}\\]\n\nThis equation shows that:\n- Emission increases exponentially with temperature\n- Higher potential barrier (V₀) reduces emission\n- Current density has a T² prefactor\n- The equation is fundamental to thermionic emission", "final_answers": ["J = AT^2e^{-eV_0/kT}"], "equivalency_results": [{"input_expressions": {"expr1": "J = AT^2e^{-eV_0/kT}", "expr2": "j_e = -\\frac{4\\pi me k^2 T^2}{h^3} e^{-(V_0-\\mu)/kT}"}, "preprocessed_expressions": {"expr1": "A*T**2/e**(V*e/(T*k))", "expr2": "-4*T**2*e**(1 - (V - mu)/(T*k))*k**2*m*pi/h**3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6059", "solution": "Let's solve this step by step.\n\n(a) For protons (spin-1/2 particles):\n1) There are two magnetic substates: m = +1/2 and m = -1/2\n2) The energy difference between states is ΔE = 2μH₀\n3) Using Boltzmann distribution:\n   N₊/N₋ = exp(-ΔE/kT) = exp(-2μH₀/kT)\n4) If N is total number of protons:\n   N₊ + N₋ = N\n   Therefore:\n   N₊ = N/(1 + exp(2μH₀/kT))\n   N₋ = N/(1 + exp(-2μH₀/kT))\n\n(b) The oscillating field should be:\n1) Perpendicular to H₀\n2) Reason: Magnetic dipole transitions require ΔM = ±1\n3) This can only be induced by magnetic field components perpendicular to H₀\n4) A parallel component would not cause transitions between states\n\n(c) For resonance absorption:\n1) Energy difference between states = ℏω\n2) ΔE = 2μH₀ = ℏω\n3) Therefore, ω = 2μH₀/ℏ\n4) Frequency f = ω/2π = μH₀/πℏ\n5) For protons: μ = 2.79 nuclear magnetons\n6) Converting to megacycles/second:\n   f(MHz) = 4.26 × H₀(gauss)\n\n(d) Steady absorption explanation:\n1) Spins interact with lattice (spin-lattice relaxation)\n2) After excitation, protons return to lower energy state\n3) This allows continuous absorption\n4) For strong oscillating fields:\n   - Saturation occurs\n   - Equal populations in upper and lower states\n   - Absorption rate decreases\n   - Eventually approaches zero\n\nFinal answer for resonance frequency:\n\\[ \\boxed{f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0} \\]", "final_answers": ["f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0"], "equivalency_results": [{"input_expressions": {"expr1": "f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0", "expr2": "\\mathbf{P}_{1/2} = \\frac{\\exp \\left( \\frac{1}{2} g \\mu_N H_0 / k T \\right)}{\\exp \\left( \\frac{1}{2} g \\mu_N H_0 / k T \\right) + \\exp \\left( -\\frac{1}{2} g \\mu_N H_0 / k T \\right)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0", "expr2": "\\mathbf{P}_{-1/2} = \\frac{\\exp \\left( -\\frac{1}{2} g \\mu_N H_0 / k T \\right)}{\\exp \\left( \\frac{1}{2} g \\mu_N H_0 / k T \\right) + \\exp \\left( -\\frac{1}{2} g \\mu_N H_0 / k T \\right)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0", "expr2": "\\text{The oscillating field } \\mathbf{H}_1 \\text{ should be perpendicular to } \\mathbf{H}_0."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0", "expr2": "\\omega = 2.7 \\times 10^{-2} H_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "f = \\frac{\\mu H_0}{\\pi \\hbar} = 4.26 \\text{ MHz/gauss} \\times H_0", "expr2": "\\text{Spin interactions maintain a thermal equilibrium, allowing transitions to continue with proton interactions. Saturation occurs with a very strong external field.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3034", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for a system of two spin-1/2 particles, the total spin can be either 1 (triplet state) or 0 (singlet state).\n\n2) The probability of measuring total spin 0 is equal to the probability of finding the system in the singlet state.\n\n3) Let's write the initial state:\n   * Particle A: $|S_z = +\\frac{1}{2}\\rangle_A$\n   * Particle B: $|S_x = +\\frac{1}{2}\\rangle_B$\n\n4) We need to express $|S_x = +\\frac{1}{2}\\rangle_B$ in terms of $S_z$ eigenstates:\n   $|S_x = +\\frac{1}{2}\\rangle = \\frac{1}{\\sqrt{2}}(|S_z = +\\frac{1}{2}\\rangle + |S_z = -\\frac{1}{2}\\rangle)$\n\n5) So the total state is:\n   $|\\psi\\rangle = |S_z = +\\frac{1}{2}\\rangle_A \\otimes \\frac{1}{\\sqrt{2}}(|S_z = +\\frac{1}{2}\\rangle_B + |S_z = -\\frac{1}{2}\\rangle_B)$\n\n6) The singlet state is:\n   $|S=0\\rangle = \\frac{1}{\\sqrt{2}}(|+\\rangle_A|-\\rangle_B - |-\\rangle_A|+\\rangle_B)$\n\n7) The probability is the square of the projection:\n   $P(S=0) = |\\langle S=0|\\psi\\rangle|^2$\n\n8) Computing the projection:\n   $\\langle S=0|\\psi\\rangle = \\frac{1}{\\sqrt{2}} \\cdot \\frac{1}{\\sqrt{2}} \\cdot (-1) = -\\frac{1}{2}$\n\n9) Therefore, the probability is:\n   $P(S=0) = |-\\frac{1}{2}|^2 = \\frac{1}{4}$\n\nThe final answer is:\n\n\\[\\boxed{P(S=0) = \\frac{1}{4}}\\]", "final_answers": ["P(S=0) = \\frac{1}{4}"], "equivalency_results": [{"input_expressions": {"expr1": "P(S=0) = \\frac{1}{4}", "expr2": "\\frac{1}{4}"}, "preprocessed_expressions": {"expr1": "1/4", "expr2": "1/4"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1050", "solution": "Let's solve this step by step.\n\n1) First, let's understand what happens in each case:\n   * When a particle encounters a potential step, it can either reflect or transmit\n   * The probability of reflection (R) and transmission (T) must sum to 1: R + T = 1\n\n2) For case (a) where $p^2/2m < V_0$:\n   * The particle's energy is less than the potential barrier\n   * In this case, the particle cannot penetrate the barrier classically\n   * Quantum mechanically, there will be total reflection\n   * Therefore, R = 1 (100% reflection probability)\n\n3) For case (b) where $p^2/2m > V_0$:\n   * The particle's energy is greater than the potential barrier\n   * Both reflection and transmission are possible\n   * We need to use the reflection coefficient formula:\n   * R = $|\\frac{k_1 - k_2}{k_1 + k_2}|^2$\n\n4) For case (b), let's calculate:\n   * $k_1 = \\frac{p}{\\hbar}$ (incident wave number)\n   * $k_2 = \\frac{\\sqrt{2m(E-V_0)}}{\\hbar}$ (wave number in region 2)\n   * $E = \\frac{p^2}{2m}$\n   * Substituting these into the reflection coefficient formula:\n   * R = $|\\frac{p - \\sqrt{p^2-2mV_0}}{p + \\sqrt{p^2-2mV_0}}|^2$\n\nThe final answers are:\n\nFor case (a): \n\\[\\boxed{R = 1}\\]\n\nFor case (b): \n\\[\\boxed{R = |\\frac{p - \\sqrt{p^2-2mV_0}}{p + \\sqrt{p^2-2mV_0}}|^2}\\]", "final_answers": ["R = 1", "R = |\\frac{p - \\sqrt{p^2-2mV_0}}{p + \\sqrt{p^2-2mV_0}}|^2"], "equivalency_results": [{"input_expressions": {"expr1": "R = 1", "expr2": "R = 1"}, "preprocessed_expressions": {"expr1": "1", "expr2": "1"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "R = |\\frac{p - \\sqrt{p^2-2mV_0}}{p + \\sqrt{p^2-2mV_0}}|^2", "expr2": "R = 1"}, "preprocessed_expressions": {"expr1": "Abs((p - sqrt(-2*V*m + p**2))/(p + sqrt(-2*V*m + p**2)))**2", "expr2": "1"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "R = |\\frac{p - \\sqrt{p^2-2mV_0}}{p + \\sqrt{p^2-2mV_0}}|^2", "expr2": "R = \\left( \\frac{k - k'}{k + k'} \\right)^2"}, "preprocessed_expressions": {"expr1": "Abs((p - sqrt(-2*V*m + p**2))/(p + sqrt(-2*V*m + p**2)))**2", "expr2": "(k**2 - 2*k*k' + k'**2)/(k**2 + 2*k*k' + k'**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/3-3033", "solution": "Let me solve this step by step.\n\n1) First, recall that for a spin-1/2 particle in a magnetic field B = Bₖ, the Hamiltonian is:\n   H = -μ·B = -γB·S = -γBS_z\n   where γ is the gyromagnetic ratio\n\n2) At t₀, the spin is along +y direction. The state can be written as:\n   |ψ(t₀)⟩ = |+y⟩ = 1/√2(|+z⟩ + i|-z⟩)\n\n3) The time evolution of this state is:\n   |ψ(t)⟩ = e^(-iHt/ℏ)|ψ(t₀)⟩\n   = e^(iωt/2)|+z⟩/√2 + ie^(-iωt/2)|-z⟩/√2\n   where ω = γB\n\n4) For the expectation value of S_x:\n   ⟨S_x⟩ = ⟨ψ(t)|S_x|ψ(t)⟩\n   Using S_x = ℏ/2(|+z⟩⟨-z| + |-z⟩⟨+z|)\n   This gives: ⟨2S_x⟩ = ℏcos(ωt)\n\n5) For the expectation value of S_z:\n   ⟨S_z⟩ = ⟨ψ(t)|S_z|ψ(t)⟩\n   Using S_z = ℏ/2(|+z⟩⟨+z| - |-z⟩⟨-z|)\n   This gives: ⟨2S_z⟩ = 0\n\nTherefore, the polarization along x oscillates with frequency ω = γB, while the polarization along z remains zero.\n\n\\[ \\boxed{\\begin{align*} \n⟨2S_x⟩ &= ℏcos(ωt) \\\\\n⟨2S_z⟩ &= 0\n\\end{align*}} \\]", "final_answers": ["\\begin{align*} \n⟨2S_x⟩ &= ℏcos(ωt) \\\\\n⟨2S_z⟩ &= 0\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*} \n⟨2S_x⟩ &= ℏcos(ωt) \\\\\n⟨2S_z⟩ &= 0\n\\end{align*}", "expr2": "\\langle 2s_x \\rangle = -\\hbar \\sin \\left( \\frac{2\\mu_e}{\\hbar} B (t - t_0) \\right)"}, "preprocessed_expressions": {"expr1": "0", "expr2": "-hbar*sin(2*mu*B(0)/hbar)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*} \n⟨2S_x⟩ &= ℏcos(ωt) \\\\\n⟨2S_z⟩ &= 0\n\\end{align*}", "expr2": "\\langle 2s_z \\rangle = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5079", "solution": "Let me solve this step by step.\n\n1) This is a quantum mechanical problem involving sudden approximation, where the nuclear charge changes instantaneously from Z=1 to Z=2.\n\n2) The initial state (tritium) is in its ground state (n=1), and we want to find the probability that the final state (He+ ion) is also in its ground state.\n\n3) According to the sudden approximation, the probability is given by the square of the overlap integral between the initial and final wavefunctions:\n   P = |⟨ψf|ψi⟩|²\n\n4) For hydrogen-like atoms, the ground state wavefunction is:\n   ψ(r) = (Z³/πa₀³)^(1/2) * exp(-Zr/a₀)\n   where a₀ is the Bohr radius\n\n5) For tritium (Z=1):\n   ψi(r) = (1/πa₀³)^(1/2) * exp(-r/a₀)\n\n6) For He+ (Z=2):\n   ψf(r) = (8/πa₀³)^(1/2) * exp(-2r/a₀)\n\n7) The overlap integral is:\n   ⟨ψf|ψi⟩ = ∫ ψf*(r) ψi(r) dV\n   = ∫∫∫ (8/πa₀³)^(1/2) * (1/πa₀³)^(1/2) * exp(-3r/a₀) * 4πr² dr\n\n8) Solving this integral:\n   = (8)^(1/2) * (4π/(3/a₀)³) * (3/a₀)³/(4π)\n   = (8)^(1/2) * 1\n   = 2√2\n\n9) Therefore, the probability is:\n   P = |⟨ψf|ψi⟩|² = (2√2)² = 8/8 = 1\n\nThe probability is:\n\n\\[ \\boxed{P = 1} \\]\n\nThis means there is 100% probability that the He+ ion will be left in its ground state. This is a remarkable result showing that in this case, the sudden change in nuclear charge doesn't excite the electron to higher states.", "final_answers": ["P = 1"], "equivalency_results": [{"input_expressions": {"expr1": "P = 1", "expr2": "0.702"}, "preprocessed_expressions": {"expr1": "1", "expr2": "0.702000000000000"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5070", "solution": "Let me solve this step by step.\n\n(a) For the F = 0 hyperfine ground state of hydrogen:\n\n1) In a magnetic field H, the energy shift of a state with total angular momentum F is given by:\n   ΔE = gₘμₙH²/B₀\n   where B₀ is the hyperfine splitting energy\n\n2) For hydrogen 1s ground state:\n   - Hyperfine splitting B₀ ≈ 1.42 GHz ≈ 5.9 × 10⁻⁶ eV\n   - Nuclear magneton μₙ ≈ 5.05 × 10⁻²⁷ J/T\n   - gₘ ≈ 1/4 for F = 0 state\n\n3) The magnetic polarizability is:\n   αH = -∂²E/∂H² = -2gₘμₙ/B₀\n\n4) Plugging in values:\n   αH ≈ -(2)(1/4)(5.05 × 10⁻²⁷)/(5.9 × 10⁻⁶ × 1.6 × 10⁻¹⁹)\n   ≈ 10⁻⁴⁰ J/(T²)\n\n(b) For helium ground state:\n\n1) Helium 1s² has zero total angular momentum (J = 0)\n\n2) The magnetic response comes from mixing with excited states through second-order perturbation theory\n\n3) The polarizability can be estimated as:\n   αH ≈ e²a₀⁴/me\n   where:\n   - e is electron charge\n   - a₀ is Bohr radius\n   - me is electron mass\n\n4) Plugging in values:\n   αH ≈ (1.6 × 10⁻¹⁹)²(5.3 × 10⁻¹¹)⁴/(9.1 × 10⁻³¹)\n   ≈ 10⁻⁴⁰ J/(T²)\n\nThe final answers are:\n\n\\[ \\boxed{\\alpha_H(\\text{H, F=0}) \\approx 10^{-40} \\text{ J/T}^2} \\]\n\\[ \\boxed{\\alpha_H(\\text{He, 1s}^2) \\approx 10^{-40} \\text{ J/T}^2} \\]\n\nNote that both values are of similar order of magnitude, which is reasonable as they represent similar atomic systems.", "final_answers": ["\\alpha_H(\\text{H, F=0}) \\approx 10^{-40} \\text{ J/T}^2", "\\alpha_H(\\text{He, 1s}^2) \\approx 10^{-40} \\text{ J/T}^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\alpha_H(\\text{H, F=0}) \\approx 10^{-40} \\text{ J/T}^2", "expr2": "2.9 \\times 10^{-11} \\, \\text{eV/Gs}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\alpha_H(\\text{H, F=0}) \\approx 10^{-40} \\text{ J/T}^2", "expr2": "-4.4 \\times 10^{-19} \\, \\text{eV/Gs}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\alpha_H(\\text{He, 1s}^2) \\approx 10^{-40} \\text{ J/T}^2", "expr2": "2.9 \\times 10^{-11} \\, \\text{eV/Gs}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\alpha_H(\\text{He, 1s}^2) \\approx 10^{-40} \\text{ J/T}^2", "expr2": "-4.4 \\times 10^{-19} \\, \\text{eV/Gs}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1066", "solution": "Let me solve this step by step.\n\n(a) To find eigenvalues:\n\n1) The quadratic equation $\\hat{A}^2 - 3\\hat{A} + 2 = 0$ gives us information about the eigenvalues.\n\n2) If λ is an eigenvalue of $\\hat{A}$, it must satisfy:\n   λ² - 3λ + 2 = 0\n\n3) This is a standard quadratic equation. Solve using quadratic formula:\n   λ = \\frac{3 \\pm \\sqrt{9-8}}{2} = \\frac{3 \\pm 1}{2}\n\n4) Therefore, eigenvalues are:\n   λ₁ = 2 and λ₂ = 1\n\n\\[ \\boxed{\\text{Eigenvalues: λ₁ = 2, λ₂ = 1}} \\]\n\n(b) For eigenstates:\n\n1) Let's call the eigenstates |ψ₁⟩ and |ψ₂⟩ corresponding to λ₁ and λ₂.\n\n2) These states satisfy:\n   $\\hat{A}|ψ₁⟩ = 2|ψ₁⟩$\n   $\\hat{A}|ψ₂⟩ = |ψ₂⟩$\n\n3) Since this is the lowest-order equation $\\hat{A}$ obeys, these eigenstates form a complete basis.\n\n\\[ \\boxed{\\text{Eigenstates: }|ψ₁⟩ \\text{ and } |ψ₂⟩ \\text{ form a complete orthonormal basis}} \\]\n\n(c) To prove $\\hat{A}$ is an observable:\n\n1) For an operator to be an observable, it must be Hermitian ($\\hat{A} = \\hat{A}^†$)\n\n2) We know:\n   - The eigenvalues are real (1 and 2)\n   - The quadratic equation is the lowest-order equation\n   - The eigenstates form a complete basis\n\n3) Since:\n   - All eigenvalues are real\n   - The operator can be diagonalized in a complete basis\n   - The matrix representation in this basis would be diagonal with real entries\n\n4) Therefore, $\\hat{A} = \\hat{A}^†$, making it Hermitian and thus an observable.\n\n\\[ \\boxed{\\hat{A} \\text{ is an observable because it has real eigenvalues and is Hermitian}} \\]", "final_answers": ["\\text{Eigenvalues: λ₁ = 2, λ₂ = 1}", "\\text{Eigenstates: }|ψ₁⟩ \\text{ and } |ψ₂⟩ \\text{ form a complete orthonormal basis}", "\\hat{A} \\text{ is an observable because it has real eigenvalues and is Hermitian}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Eigenvalues: λ₁ = 2, λ₂ = 1}", "expr2": "\\text{Eigenvalues: } \\lambda_1 = 1, \\lambda_2 = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenvalues: λ₁ = 2, λ₂ = 1}", "expr2": "\\text{Eigenstates: } \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenvalues: λ₁ = 2, λ₂ = 1}", "expr2": "\\text{$\\hat{A}$ is an observable because it is Hermitian.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenstates: }|ψ₁⟩ \\text{ and } |ψ₂⟩ \\text{ form a complete orthonormal basis}", "expr2": "\\text{Eigenvalues: } \\lambda_1 = 1, \\lambda_2 = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenstates: }|ψ₁⟩ \\text{ and } |ψ₂⟩ \\text{ form a complete orthonormal basis}", "expr2": "\\text{Eigenstates: } \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Eigenstates: }|ψ₁⟩ \\text{ and } |ψ₂⟩ \\text{ form a complete orthonormal basis}", "expr2": "\\text{$\\hat{A}$ is an observable because it is Hermitian.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hat{A} \\text{ is an observable because it has real eigenvalues and is Hermitian}", "expr2": "\\text{Eigenvalues: } \\lambda_1 = 1, \\lambda_2 = 2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hat{A} \\text{ is an observable because it has real eigenvalues and is Hermitian}", "expr2": "\\text{Eigenstates: } \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\hat{A} \\text{ is an observable because it has real eigenvalues and is Hermitian}", "expr2": "\\text{$\\hat{A}$ is an observable because it is Hermitian.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 0.3333333333333333}
{"id": "quantum/3-3005", "solution": "Let me solve this step by step.\n\n1) First, recall that the $\\hat{s}_y$ operator in the $\\hat{s}_z$ basis is given by:\n   $\\hat{s}_y = \\frac{\\hbar}{2}\\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}$\n\n2) Let's call our desired eigenfunction $\\psi = \\begin{pmatrix} a \\\\ b \\end{pmatrix}$, where $a$ and $b$ are complex numbers we need to find.\n\n3) For this to be an eigenfunction of $\\hat{s}_y$ with eigenvalue -1/2, it must satisfy:\n   $\\hat{s}_y\\psi = -\\frac{\\hbar}{2}\\psi$\n\n4) Writing this out:\n   $\\frac{\\hbar}{2}\\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}\\begin{pmatrix} a \\\\ b \\end{pmatrix} = -\\frac{\\hbar}{2}\\begin{pmatrix} a \\\\ b \\end{pmatrix}$\n\n5) This gives us two equations:\n   $-ib = -a$\n   $ia = -b$\n\n6) From either equation:\n   $b = ia$\n\n7) Since we need the wavefunction to be normalized:\n   $|a|^2 + |b|^2 = 1$\n   $|a|^2 + |ia|^2 = 1$\n   $|a|^2(1 + 1) = 1$\n   $|a|^2 = \\frac{1}{2}$\n\n8) One solution that satisfies this is:\n   $a = \\frac{1}{\\sqrt{2}}$\n   $b = \\frac{i}{\\sqrt{2}}$\n\nTherefore, a normalized eigenfunction of $\\hat{s}_y$ with eigenvalue -1/2 is:\n\n\\[\\boxed{\\psi = \\frac{1}{\\sqrt{2}}\\begin{pmatrix} 1 \\\\ i \\end{pmatrix}}\\]", "final_answers": ["\\psi = \\frac{1}{\\sqrt{2}}\\begin{pmatrix} 1 \\\\ i \\end{pmatrix}"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi = \\frac{1}{\\sqrt{2}}\\begin{pmatrix} 1 \\\\ i \\end{pmatrix}", "expr2": "\\sigma_y = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} i \\\\ 1 \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{1}{\\sqrt{2}}\\begin{pmatrix} 1 \\\\ i \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/1-1061", "solution": "Let's solve this step by step.\n\n(a) To prove the theorem:\n\n1) Consider the Schrödinger equation with potential V(λ,x):\n   [-ℏ²/2m ∂²/∂x² + V(λ,x)]ψn = En(λ)ψn\n\n2) Using first-order perturbation theory:\n   ∂En/∂λ = ∫ψn*(∂V/∂λ)ψn dx\n\n3) Since ∂V/∂λ ≥ 0 and |ψn|² is positive:\n   ∂En/∂λ ≥ 0\n\n4) This means En(λ) is monotonically increasing with λ.\n\n5) Therefore, En(0) ≤ En(1), which means E₁n ≤ E₂n\n\n(b) For the bound states:\n\n1) Let's find a lower bound using a comparison potential.\n\n2) Consider V₁(x) = ½kx² for all x\n   This is the simple harmonic oscillator potential.\n   Since V₁(x) ≤ U(x) for all x, the theorem tells us that E₁n ≤ En\n\n3) For SHO, we know:\n   E₁n = ℏω(n + ½), where ω = √(k/m)\n\n4) The highest bound state N will have energy just below the potential barrier:\n   ½ka² ≈ ℏω(N + ½)\n\n5) Substituting ω = √(k/m):\n   ½ka² ≈ ℏ√(k/m)(N + ½)\n\n6) Solving for N:\n   N ≈ (a/ℏ)√(mk/2) - ½\n\nTherefore, a rigorous lower bound for N is:\n\n\\[\\boxed{N > \\frac{a}{\\hbar}\\sqrt{\\frac{mk}{2}} - \\frac{1}{2}}\\]\n\nThis is a lower bound because the actual potential U(x) is higher than V₁(x) outside ±a, meaning the actual number of bound states must be greater than this value.", "final_answers": ["N > \\frac{a}{\\hbar}\\sqrt{\\frac{mk}{2}} - \\frac{1}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "N > \\frac{a}{\\hbar}\\sqrt{\\frac{mk}{2}} - \\frac{1}{2}", "expr2": "E_{1n} \\leq E_{2n}"}, "preprocessed_expressions": {"expr1": "N > (sqrt(2)*a*sqrt(k*m) - hbar)/(2*hbar)", "expr2": "True"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "BooleanAtom not allowed in this context."}, {"input_expressions": {"expr1": "N > \\frac{a}{\\hbar}\\sqrt{\\frac{mk}{2}} - \\frac{1}{2}", "expr2": "N \\leq \\left\\lfloor \\frac{m \\omega a^2}{2 \\hbar} \\right\\rfloor"}, "preprocessed_expressions": {"expr1": "N > (sqrt(2)*a*sqrt(k*m) - hbar)/(2*hbar)", "expr2": "N <= floor(a**2*m*omega/(2*hbar))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'StrictGreaterThan' and 'LessThan'"}], "accuracy": 0.0}
{"id": "quantum/5077", "solution": "Let me solve this step by step.\n\n1) First, let's recall the ground state for a particle in a box of width a:\n   * Wave function: ψ₁(x) = √(2/a) sin(πx/a) for 0 ≤ x ≤ a\n   * Ground state energy: E₁ = (ℏ²π²)/(2ma²)\n\n2) When the walls are suddenly removed:\n   * This is a sudden change in potential\n   * The wave function immediately after removal is the same as before\n   * But now it can evolve freely in infinite space\n\n3) To find momentum probability:\n   * Need to find Fourier transform of initial wave function\n   * ϕ(p) = ∫ψ₁(x)e^(-ipx/ℏ)dx from -∞ to ∞\n   * Due to box limits, integral is from 0 to a\n\n4) Solving the Fourier transform:\n   * ϕ(p) = √(2/a)∫sin(πx/a)e^(-ipx/ℏ)dx from 0 to a\n   * This gives: ϕ(p) = √(8π/a)[1/(p²/ℏ² - π²/a²)]\n\n5) Probability density for momentum:\n   * |ϕ(p)|² dp = (8π/a)[1/(p²/ℏ² - π²/a²)²]dp\n\n6) Energy for a free particle with momentum p:\n   * E = p²/2m\n\n7) Energy conservation explanation:\n   * Initial energy was E₁ = (ℏ²π²)/(2ma²)\n   * After walls removed, particle has range of possible momenta\n   * Expected value of p²/2m equals initial energy\n   * Energy is conserved on average, but individual measurements give range of values\n\nThe final answer for the probability density of momentum is:\n\\[ \\boxed{P(p)dp = \\frac{8\\pi}{a}\\frac{dp}{(p^2/\\hbar^2 - \\pi^2/a^2)^2}} \\]\n\nThe apparent discrepancy in energy is resolved by understanding that the sudden removal of walls creates a superposition of momentum states. While any single measurement might give a different energy, the expectation value of energy remains constant, preserving energy conservation.", "final_answers": ["P(p)dp = \\frac{8\\pi}{a}\\frac{dp}{(p^2/\\hbar^2 - \\pi^2/a^2)^2}"], "equivalency_results": [{"input_expressions": {"expr1": "P(p)dp = \\frac{8\\pi}{a}\\frac{dp}{(p^2/\\hbar^2 - \\pi^2/a^2)^2}", "expr2": "E = \\frac{\\pi^2 \\hbar^2}{2ma^2}"}, "preprocessed_expressions": {"expr1": "8*a**3*dp*hbar**4*pi/(a**4*p**4 - 2*a**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)", "expr2": "hbar**2*pi**2/(2*a**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(p)dp = \\frac{8\\pi}{a}\\frac{dp}{(p^2/\\hbar^2 - \\pi^2/a^2)^2}", "expr2": "f(p)dp = \\begin{cases} \n   8 \\frac{a \\pi}{\\hbar} \\frac{\\cos^2 \\left( \\frac{ka}{2} \\right)}{[(ka)^2 - \\pi^2]^2} dp, & \\text{if } p \\neq 0, \\\\\n   4 \\frac{a}{\\pi^3 \\hbar} dp, & \\text{if } p = 0.\n   \\end{cases}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(p)dp = \\frac{8\\pi}{a}\\frac{dp}{(p^2/\\hbar^2 - \\pi^2/a^2)^2}", "expr2": "\\bar{E} = \\frac{\\pi^2 \\hbar^2}{2ma^2}"}, "preprocessed_expressions": {"expr1": "8*a**3*dp*hbar**4*pi/(a**4*p**4 - 2*a**2*hbar**2*p**2*pi**2 + hbar**4*pi**4)", "expr2": "hbar**2*pi**2/(2*a**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3002", "solution": "Let me solve this step by step.\n\n1) First, let's recall that for spin-1, the matrices are:\n\n   $s_x = \\frac{1}{\\sqrt{2}}\\begin{pmatrix} 0 & 1 & 0 \\\\ 1 & 0 & 1 \\\\ 0 & 1 & 0 \\end{pmatrix}$\n\n   $s_y = \\frac{1}{\\sqrt{2}}\\begin{pmatrix} 0 & -i & 0 \\\\ i & 0 & -i \\\\ 0 & i & 0 \\end{pmatrix}$\n\n   $s_z = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & -1 \\end{pmatrix}$\n\n2) For the first part, $s_z^2 = s_z$:\n   - Simply multiply $s_z$ by itself:\n   $s_z^2 = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & -1 \\end{pmatrix} \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & -1 \\end{pmatrix}$\n   $= \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} = s_z$\n\n3) For the second part, let's define $s_± = s_x ± is_y$\n   - These are the raising and lowering operators\n   - For spin-1, they have the form:\n   $s_+ = \\sqrt{2}\\begin{pmatrix} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 0 & 0 \\end{pmatrix}$\n   $s_- = \\sqrt{2}\\begin{pmatrix} 0 & 0 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{pmatrix}$\n\n4) When we cube these operators:\n   - Due to the structure of these matrices, multiplying them three times will give zero\n   - This is because each multiplication shifts the non-zero elements one step, and after three steps, all elements become zero\n\n5) Therefore:\n   $(s_x ± is_y)^3 = s_±^3 = 0$\n\nThe final answer can be written as:\n\n\\[\\boxed{s_z^2 = s_z \\quad \\text{and} \\quad (s_x ± is_y)^3 = 0}\\]\n\nThis result is a fundamental property of spin-1 operators and is important in quantum mechanics.", "final_answers": ["s_z^2 = s_z \\quad \\text{and} \\quad (s_x ± is_y)^3 = 0"], "equivalency_results": [{"input_expressions": {"expr1": "s_z^2 = s_z \\quad \\text{and} \\quad (s_x ± is_y)^3 = 0", "expr2": "s_z^2 = s_z"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5048", "solution": "Let's solve this step by step.\n\n(a) First, let's find the wave functions and energies of the lowest states:\n\n1) The Hamiltonian is separable in x and y coordinates:\n   H = H_x + H_y where each is a 1D harmonic oscillator\n\n2) For a 1D harmonic oscillator, the energy levels are:\n   E_n = (n + 1/2)ℏω, where ω = 1 in this case\n   And wave functions are: ψ_n(x) = N_n H_n(x) e^(-x²/2)\n   where H_n are Hermite polynomials\n\n3) The total energy is E = E_nx + E_ny = (nx + ny + 1)ℏ\n\n4) The three lowest states are:\n   - Ground state (nx=0, ny=0): E₀₀ = 1, ψ₀₀ = (1/π)^(1/2) e^(-(x²+y²)/2)\n   - First excited states (nx=1, ny=0) and (nx=0, ny=1): E₁₀ = E₀₁ = 2\n   ψ₁₀ = (1/π)^(1/2) H₁(x) e^(-(x²+y²)/2)\n   ψ₀₁ = (1/π)^(1/2) H₁(y) e^(-(x²+y²)/2)\n\n(b) For the perturbation:\n\n1) For ground state (0,0):\n   ⟨ψ₀₀|V|ψ₀₀⟩ = 0 (odd function integrated over even limits)\n\n2) For states (1,0) and (0,1):\n   Due to symmetry and odd functions:\n   ⟨ψ₁₀|V|ψ₁₀⟩ = ⟨ψ₀₁|V|ψ₀₁⟩ = 0\n\nTherefore, the first-order corrections to the energies are:\n\n\\[\\boxed{\n\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}\n}\\]\n\nThe perturbation has no first-order effect on these energy levels because V is odd in both x and y, while the wave functions have definite parity.", "final_answers": ["\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}", "expr2": "\\psi_{00}(x, y) = \\frac{1}{\\sqrt{\\pi}} \\exp \\left\\{ -\\frac{1}{2} (x^2 + y^2) \\right\\}, \\quad E_{00} = 1"}, "preprocessed_expressions": {"expr1": "0", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}", "expr2": "\\psi_{10}(x, y) = \\sqrt{\\frac{2}{\\pi}} \\, x \\exp \\left\\{ -\\frac{1}{2} (x^2 + y^2) \\right\\}, \\quad E_{10} = 2"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}", "expr2": "\\psi_{01}(x, y) = \\sqrt{\\frac{2}{\\pi}} \\, y \\exp \\left\\{ -\\frac{1}{2} (x^2 + y^2) \\right\\}, \\quad E_{01} = 2"}, "preprocessed_expressions": {"expr1": "0", "expr2": "2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n\\Delta E_{00} &= 0 \\\\\n\\Delta E_{10} &= 0 \\\\\n\\Delta E_{01} &= 0\n\\end{align*}", "expr2": "V_{00} = 0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/2-2002", "solution": "Let me solve this step by step.\n\n1) For a particle in a 3D box, the energy levels are given by:\n   $E_{n_x,n_y,n_z} = \\frac{\\hbar^2\\pi^2}{2mL^2}(n_x^2 + n_y^2 + n_z^2)$\n   where L is the length of each side\n\n2) Ground state (n_x = n_y = n_z = 1):\n   $E_1 = \\frac{\\hbar^2\\pi^2}{2mL^2}(1^2 + 1^2 + 1^2) = \\frac{3\\hbar^2\\pi^2}{2mL^2}$\n\n3) First excited state (one of n_x, n_y, or n_z becomes 2):\n   $E_2 = \\frac{\\hbar^2\\pi^2}{2mL^2}(2^2 + 1^2 + 1^2) = \\frac{6\\hbar^2\\pi^2}{2mL^2}$\n\n4) Excitation energy:\n   $\\Delta E = E_2 - E_1 = \\frac{3\\hbar^2\\pi^2}{2mL^2}$\n\n5) Let's substitute values:\n   * $\\hbar = 6.582 \\times 10^{-16}$ eV⋅s\n   * $m = m_p/3 = (938 \\text{ MeV}/c^2)/3$\n   * $L = 2 \\times 10^{-15}$ m\n\n6) Converting:\n   $\\Delta E = \\frac{3(6.582 \\times 10^{-16})^2\\pi^2}{2(938 \\times 10^6/3)(1.973 \\times 10^{-13})^2(2 \\times 10^{-15})^2}$\n\n7) Calculating:\n   $\\Delta E \\approx 30.7$ MeV\n\nTherefore, the excitation energy from ground state to first excited state is approximately 30.7 MeV.\n\n\\[\\boxed{30.7 \\text{ MeV}}\\]", "final_answers": ["30.7 \\text{ MeV}"], "equivalency_results": [{"input_expressions": {"expr1": "30.7 \\text{ MeV}", "expr2": "461 \\text{ MeV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5023", "solution": "Let me solve this step by step.\n\n(a) First, let's find the shift in energy levels:\n\n1) The perturbing Hamiltonian due to the electric field is:\n   $H' = -eF x$\n\n2) For a harmonic oscillator, we know:\n   - The unperturbed wavefunctions are Hermite polynomials\n   - The energy levels are $E_n^{(0)} = \\hbar\\omega(n + \\frac{1}{2})$, where $\\omega = \\sqrt{k/m}$\n\n3) The first-order energy correction is:\n   $E_n^{(1)} = \\langle n|H'|n \\rangle = -eF\\langle n|x|n \\rangle$\n\n4) For a harmonic oscillator, $\\langle n|x|n \\rangle = 0$ due to parity\n   Therefore, $E_n^{(1)} = 0$\n\n5) The second-order correction is:\n   $E_n^{(2)} = \\sum_{m\\neq n} \\frac{|\\langle m|H'|n \\rangle|^2}{E_n^{(0)} - E_m^{(0)}}$\n\n6) After calculating matrix elements:\n   $E_n^{(2)} = -\\frac{e^2F^2}{2k}$\n\nTherefore, the total energy shift is:\n$\\Delta E_n = E_n^{(1)} + E_n^{(2)} = -\\frac{e^2F^2}{2k}$\n\n(b) For the dipole moment:\n\n1) In the presence of the field, the wavefunction is modified to first order:\n   $|\\psi_n \\rangle = |n \\rangle + \\sum_{m\\neq n} \\frac{\\langle m|H'|n \\rangle}{E_n^{(0)} - E_m^{(0)}}|m \\rangle$\n\n2) The expectation value of x is:\n   $\\langle x \\rangle_n = \\langle \\psi_n|x|\\psi_n \\rangle$\n\n3) After calculation:\n   $\\langle x \\rangle_n = \\frac{eF}{k}$\n\n4) Therefore, the dipole moment is:\n   $P_n = -e\\langle x \\rangle_n = -\\frac{e^2F}{k}$\n\nFinal answers:\n\nFor part (a):\n\\[ \\boxed{\\Delta E_n = -\\frac{e^2F^2}{2k}} \\]\n\nFor part (b):\n\\[ \\boxed{P_n = -\\frac{e^2F}{k}} \\]", "final_answers": ["\\Delta E_n = -\\frac{e^2F^2}{2k}", "P_n = -\\frac{e^2F}{k}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_n = -\\frac{e^2F^2}{2k}", "expr2": "E' = \\frac{e^2 F^2}{2k}"}, "preprocessed_expressions": {"expr1": "-F**2*e**2/(2*k)", "expr2": "F**2*e**2/(2*k)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_n = -\\frac{e^2F^2}{2k}", "expr2": "P_n = e^2 \\frac{F}{k}"}, "preprocessed_expressions": {"expr1": "-F**2*e**2/(2*k)", "expr2": "F*e**2/k"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_n = -\\frac{e^2F}{k}", "expr2": "E' = \\frac{e^2 F^2}{2k}"}, "preprocessed_expressions": {"expr1": "-F*e**2/k", "expr2": "F**2*e**2/(2*k)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_n = -\\frac{e^2F}{k}", "expr2": "P_n = e^2 \\frac{F}{k}"}, "preprocessed_expressions": {"expr1": "-F*e**2/k", "expr2": "F*e**2/k"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2005", "solution": "Let's solve this step by step.\n\n1) First, due to the spherical symmetry of the problem, we'll use the Schrödinger equation in spherical coordinates.\n\n2) Since there's no potential (except for the infinite walls at r = a and r = b), this is essentially a particle in a spherical shell.\n\n3) The general form of the Schrödinger equation in spherical coordinates is:\n   $-\\frac{\\hbar^2}{2m}\\left[\\frac{1}{r^2}\\frac{\\partial}{\\partial r}\\left(r^2\\frac{\\partial \\psi}{\\partial r}\\right) + \\frac{1}{r^2\\sin\\theta}\\frac{\\partial}{\\partial \\theta}\\left(\\sin\\theta\\frac{\\partial \\psi}{\\partial \\theta}\\right) + \\frac{1}{r^2\\sin^2\\theta}\\frac{\\partial^2 \\psi}{\\partial \\phi^2}\\right] = E\\psi$\n\n4) For the ground state (l = 0), the angular parts vanish and we only need to solve the radial equation:\n   $-\\frac{\\hbar^2}{2m}\\frac{1}{r^2}\\frac{d}{dr}\\left(r^2\\frac{d R}{dr}\\right) = ER$\n\n5) The general solution for l = 0 is:\n   $R(r) = \\frac{A\\sin(kr) + B\\cos(kr)}{r}$\n   where $k = \\sqrt{\\frac{2mE}{\\hbar^2}}$\n\n6) The boundary conditions are:\n   $R(a) = 0$ and $R(b) = 0$\n\n7) Applying these conditions:\n   $A\\sin(ka) + B\\cos(ka) = 0$\n   $A\\sin(kb) + B\\cos(kb) = 0$\n\n8) For non-trivial solutions, we need:\n   $\\sin(k(b-a)) = 0$\n\n9) The smallest positive solution is:\n   $k(b-a) = \\pi$\n   Therefore, $k = \\frac{\\pi}{b-a}$\n\n10) The ground state energy is:\n    $E = \\frac{\\hbar^2k^2}{2m} = \\frac{\\hbar^2\\pi^2}{2m(b-a)^2}$\n\n11) The normalized wave function is:\n    $R(r) = \\sqrt{\\frac{2}{b-a}}\\frac{\\sin(\\frac{\\pi(r-a)}{b-a})}{r}$\n\nThe final answer for the ground state energy is:\n\n\\[\\boxed{E_0 = \\frac{\\hbar^2\\pi^2}{2m(b-a)^2}}\\]\n\nAnd the normalized wave function is:\n\n\\[\\boxed{\\psi_0(r) = \\sqrt{\\frac{2}{b-a}}\\frac{\\sin(\\frac{\\pi(r-a)}{b-a})}{r}}\\]", "final_answers": ["E_0 = \\frac{\\hbar^2\\pi^2}{2m(b-a)^2}", "\\psi_0(r) = \\sqrt{\\frac{2}{b-a}}\\frac{\\sin(\\frac{\\pi(r-a)}{b-a})}{r}"], "equivalency_results": [{"input_expressions": {"expr1": "E_0 = \\frac{\\hbar^2\\pi^2}{2m(b-a)^2}", "expr2": "E = \\frac{\\hbar^2 \\pi^2}{2m(b-a)^2}"}, "preprocessed_expressions": {"expr1": "hbar**2*pi**2/(2*m(-a + b)**2)", "expr2": "hbar**2*pi**2/(2*m(-a + b)**2)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\psi_0(r) = \\sqrt{\\frac{2}{b-a}}\\frac{\\sin(\\frac{\\pi(r-a)}{b-a})}{r}", "expr2": "E = \\frac{\\hbar^2 \\pi^2}{2m(b-a)^2}"}, "preprocessed_expressions": {"expr1": "-sqrt(2)*sqrt(-1/(a - b))*sin(pi(-a + r)/(a - b))/r", "expr2": "hbar**2*pi**2/(2*m(-a + b)**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0(r) = \\sqrt{\\frac{2}{b-a}}\\frac{\\sin(\\frac{\\pi(r-a)}{b-a})}{r}", "expr2": "\\psi(r) = \\frac{\\sqrt{2}}{\\sqrt{4\\pi(b-a)}\\, r} \\sin\\left(\\frac{\\pi(r-a)}{b-a}\\right)"}, "preprocessed_expressions": {"expr1": "-sqrt(2)*sqrt(-1/(a - b))*sin(pi(-a + r)/(a - b))/r", "expr2": "-sqrt(2)*sin(pi(-a + r)/(a - b))/(2*r*sqrt(pi(-a + b)))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/6003", "solution": "Let's solve this step by step.\n\n1) First, let's understand what we're looking for:\n   * We need to find σ(E) for small E\n   * Only s-wave (l=0) contribution is significant\n   * We have a solution to the radial equation\n\n2) For s-wave scattering, the radial Schrödinger equation is:\n   * $\\frac{d^2\\phi}{dr^2} + [k^2 - U(r)]\\phi = 0$\n   * where $k^2 = \\frac{2mE}{\\hbar^2}$\n   * This matches the given equation with $A = k^2$\n\n3) The asymptotic behavior of the solution for r → ∞:\n   * $\\tanh(\\lambda r) \\to 1$ as $r \\to \\infty$\n   * Therefore, $\\phi \\to \\alpha(\\lambda-ik)e^{ikr} + \\beta(\\lambda+ik)e^{-ikr}$\n\n4) This should match the standard asymptotic form:\n   * $\\phi \\sim e^{-ikr} - Se^{ikr}$\n   * where S is the S-matrix element\n\n5) Comparing coefficients:\n   * $\\beta(\\lambda+ik) = 1$\n   * $\\alpha(\\lambda-ik) = -S$\n\n6) The S-matrix element is:\n   * $S = -\\frac{\\alpha(\\lambda-ik)}{\\beta(\\lambda+ik)} = -\\frac{\\lambda-ik}{\\lambda+ik}$\n\n7) For elastic scattering, |S| = 1, and we can write:\n   * $S = e^{2iδ_0}$\n   * where δ₀ is the phase shift\n\n8) The cross section for s-wave scattering is:\n   * $\\sigma = \\frac{4\\pi}{k^2}|1-S|^2 = \\frac{4\\pi}{k^2}4\\sin^2δ_0$\n\n9) For small k (low energy):\n   * $S \\approx -\\frac{\\lambda-ik}{\\lambda+ik} = -\\frac{\\lambda^2-k^2+2iλk}{λ^2+k^2}$\n   * $\\sin δ_0 \\approx \\frac{\\lambda k}{\\lambda^2+k^2}$\n\n10) Therefore, for small k:\n    * $\\sigma \\approx \\frac{4\\pi}{k^2}\\cdot4\\cdot\\frac{\\lambda^2k^2}{(\\lambda^2+k^2)^2} = \\frac{16\\pi\\lambda^2}{(\\lambda^2+k^2)^2}$\n\n11) As E → 0, k → 0, and:\n\n\\[\\boxed{\\sigma(E) \\approx \\frac{16\\pi}{\\lambda^2}}\\]\n\nThis shows that the cross section approaches a finite value as E → 0, specifically $\\frac{16\\pi}{\\lambda^2}$.", "final_answers": ["\\sigma(E) \\approx \\frac{16\\pi}{\\lambda^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma(E) \\approx \\frac{16\\pi}{\\lambda^2}", "expr2": "\\sigma(E) = \\frac{2 \\pi \\hbar^2}{m E}"}, "preprocessed_expressions": {"expr1": "16*approx*pi*sigma(E)/lambda**2", "expr2": "2*hbar**2*pi/(E*m)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5012", "solution": "Let's solve this step by step.\n\n(a) First, let's find the matrix elements of y³ connected to |0⟩:\n\n1) We need to consider ⟨n|y³|0⟩ for different values of n.\n\n2) Using the closure relation, we can write:\n   y³ = y × y × y\n\n3) Given that y only connects adjacent states (n → n±1), y³ will connect states that differ by ±1, ±3.\n\n4) For ⟨n|y³|0⟩, we need to consider all possible paths using three y operators that start from |0⟩ and end at |n⟩.\n\n5) For n = 1:\n   ⟨1|y³|0⟩ = ⟨1|y|0⟩ × ⟨0|y|0⟩ × ⟨0|y|0⟩ = 0\n   (because ⟨n|y|n⟩ = 0 for all n)\n\n6) For n = 3:\n   ⟨3|y³|0⟩ = ⟨3|y|2⟩⟨2|y|1⟩⟨1|y|0⟩\n   = √(3/2) × √(2/2) × √(1/2)\n   = √(3/8)\n\n7) All other matrix elements connecting to |0⟩ are zero due to selection rules.\n\n(b) For first-order perturbation theory:\n\n1) ΔE₀⁽¹⁾ = ⟨0|αy³|0⟩ = 0 (as shown above)\n\n2) For second-order perturbation theory:\n   ΔE₀⁽²⁾ = α² Σₙ |⟨n|y³|0⟩|²/(E₀-Eₙ)\n\n3) Only n = 3 contributes, as shown in part (a)\n\n4) E₃-E₀ = 3ℏω₀ = (3/2)ℏω₀\n\n5) Therefore:\n   ΔE₀⁽²⁾ = α² × (3/8) × (-2/3ℏω₀)\n   = -α²/(4ℏω₀)\n\nThe final answer for the energy correction is:\n\n\\[\\boxed{\\Delta E_0 = -\\frac{\\alpha^2}{4\\hbar\\omega_0}}\\]", "final_answers": ["\\Delta E_0 = -\\frac{\\alpha^2}{4\\hbar\\omega_0}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E_0 = -\\frac{\\alpha^2}{4\\hbar\\omega_0}", "expr2": "\\frac{\\sqrt{3}}{2} \\delta_{m,3} \\quad \\text{and} \\quad \\frac{3}{2\\sqrt{2}} \\delta_{m,1}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_0 = -\\frac{\\alpha^2}{4\\hbar\\omega_0}", "expr2": "-\\frac{11}{16}|\\alpha|^2"}, "preprocessed_expressions": {"expr1": "-alpha**2/(4*hbar*omega)", "expr2": "-11*Abs(alpha)**2/16"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1004", "solution": "Let me explain two key experiments that demonstrated quantization: the photoelectric effect and black body radiation.\n\n1. Photoelectric Effect:\nStep 1: Experimental Setup\n- Light shines on a metal surface\n- Electrons are ejected from the surface\n- Measure kinetic energy of ejected electrons vs light frequency and intensity\n\nStep 2: Classical Predictions vs Observations\nClassical predictions:\n- Electron energy should increase with light intensity\n- Emission should occur at any frequency with enough intensity\n- No time delay for emission\n\nActual observations:\n- Electron energy depends only on frequency, not intensity\n- No emission below threshold frequency\n- Immediate emission above threshold\n\nStep 3: Einstein's Quantum Explanation (1905)\n- Light comes in discrete packets (photons) with E = hf\n- One photon interacts with one electron\n- Energy conservation: hf = φ + KEmax\nwhere φ is work function, KEmax is maximum kinetic energy\n- Explains threshold frequency (hf0 = φ)\n- Intensity affects number of electrons, not their energy\n\n2. Black Body Radiation:\nStep 1: Experimental Setup\n- Measure spectrum of radiation from heated cavity\n- Plot spectral energy density vs wavelength at different temperatures\n\nStep 2: Classical Prediction (Rayleigh-Jeans Law)\n- Predicted energy density: u(λ,T) = (8πkT)/λ⁴\n- Led to \"ultraviolet catastrophe\" - infinite energy at short wavelengths\n\nStep 3: Planck's Quantum Solution (1900)\n- Assumed oscillators could only have discrete energies E = nhf\n- Derived Planck's Law:\nu(λ,T) = (8πhc/λ⁵)/(e^(hc/λkT) - 1)\n- Perfectly matches experimental data\n- Introduced quantum of action h\n- First indication of energy quantization\n\nBoth experiments showed classical physics failed and required quantum concepts:\n- Discrete energy levels (Planck)\n- Particle nature of light (Einstein)\n- Fundamental constant h ≈ 6.626×10⁻³⁴ J·s\n\n\\[\\boxed{\\text{Key quantum concepts: } E = hf, \\Delta E = nhf}\\]", "final_answers": ["\\text{Key quantum concepts: } E = hf, \\Delta E = nhf"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Key quantum concepts: } E = hf, \\Delta E = nhf", "expr2": "\\frac{1}{2} mv^2 = h\\nu - W"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Key quantum concepts: } E = hf, \\Delta E = nhf", "expr2": "E_{\\nu} = \\frac{8\\pi h \\nu^3}{c^3} \\frac{1}{e^{\\frac{h\\nu}{kT}} - 1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1003", "solution": "Let me solve this step by step:\n\n(a) Electron Compton wavelength (λc)\nλc = h/(mc) = (6.63×10⁻³⁴)/(9.1×10⁻³¹ × 3×10⁸) ≈ 2.4×10⁻¹² m\n\n(b) Thomson cross section (σT)\nσT = 8π/3 × (e²/mc²)² ≈ 6.65×10⁻²⁹ m²\n\n(c) Bohr radius (a₀)\na₀ = ℏ²/(me²) ≈ 5.3×10⁻¹¹ m\n\n(d) Hydrogen ionization potential\nE = 13.6 eV\n\n(e) Hydrogen hyperfine splitting\nΔE ≈ 5.9×10⁻⁶ eV\n\n(f) Li⁷ nuclear magnetic moment\nμ ≈ 3.26 nuclear magnetons ≈ 3.26×(5.05×10⁻²⁷ J/T)\n\n(g) Proton-neutron mass difference\nΔm ≈ 1.29 MeV\n\n(h) Free neutron lifetime\nτ ≈ 880 s\n\n(i) He⁴ binding energy\nBE ≈ 28.3 MeV\n\n(j) Largest stable nucleus radius\nR ≈ 7×10⁻¹⁵ m\n\n(k) π⁰ lifetime\nτ ≈ 8.4×10⁻¹⁷ s\n\n(l) μ⁻ lifetime\nτ ≈ 2.2×10⁻⁶ s\n\nThe final answer combining all values:\n\n\\[\\boxed{\n\\begin{align*}\n&\\text{(a) } \\lambda_c \\approx 2.4×10^{-12} \\text{ m}\\\\\n&\\text{(b) } \\sigma_T \\approx 6.65×10^{-29} \\text{ m}^2\\\\\n&\\text{(c) } a_0 \\approx 5.3×10^{-11} \\text{ m}\\\\\n&\\text{(d) } E \\approx 13.6 \\text{ eV}\\\\\n&\\text{(e) } \\Delta E \\approx 5.9×10^{-6} \\text{ eV}\\\\\n&\\text{(f) } \\mu \\approx 3.26×(5.05×10^{-27}) \\text{ J/T}\\\\\n&\\text{(g) } \\Delta m \\approx 1.29 \\text{ MeV}\\\\\n&\\text{(h) } \\tau_n \\approx 880 \\text{ s}\\\\\n&\\text{(i) } BE \\approx 28.3 \\text{ MeV}\\\\\n&\\text{(j) } R \\approx 7×10^{-15} \\text{ m}\\\\\n&\\text{(k) } \\tau_{\\pi^0} \\approx 8.4×10^{-17} \\text{ s}\\\\\n&\\text{(l) } \\tau_{\\mu^-} \\approx 2.2×10^{-6} \\text{ s}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&\\text{(a) } \\lambda_c \\approx 2.4×10^{-12} \\text{ m}\\\\\n&\\text{(b) } \\sigma_T \\approx 6.65×10^{-29} \\text{ m}^2\\\\\n&\\text{(c) } a_0 \\approx 5.3×10^{-11} \\text{ m}\\\\\n&\\text{(d) } E \\approx 13.6 \\text{ eV}\\\\\n&\\text{(e) } \\Delta E \\approx 5.9×10^{-6} \\text{ eV}\\\\\n&\\text{(f) } \\mu \\approx 3.26×(5.05×10^{-27}) \\text{ J/T}\\\\\n&\\text{(g) } \\Delta m \\approx 1.29 \\text{ MeV}\\\\\n&\\text{(h) } \\tau_n \\approx 880 \\text{ s}\\\\\n&\\text{(i) } BE \\approx 28.3 \\text{ MeV}\\\\\n&\\text{(j) } R \\approx 7×10^{-15} \\text{ m}\\\\\n&\\text{(k) } \\tau_{\\pi^0} \\approx 8.4×10^{-17} \\text{ s}\\\\\n&\\text{(l) } \\tau_{\\mu^-} \\approx 2.2×10^{-6} \\text{ s}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&\\text{(a) } \\lambda_c \\approx 2.4×10^{-12} \\text{ m}\\\\\n&\\text{(b) } \\sigma_T \\approx 6.65×10^{-29} \\text{ m}^2\\\\\n&\\text{(c) } a_0 \\approx 5.3×10^{-11} \\text{ m}\\\\\n&\\text{(d) } E \\approx 13.6 \\text{ eV}\\\\\n&\\text{(e) } \\Delta E \\approx 5.9×10^{-6} \\text{ eV}\\\\\n&\\text{(f) } \\mu \\approx 3.26×(5.05×10^{-27}) \\text{ J/T}\\\\\n&\\text{(g) } \\Delta m \\approx 1.29 \\text{ MeV}\\\\\n&\\text{(h) } \\tau_n \\approx 880 \\text{ s}\\\\\n&\\text{(i) } BE \\approx 28.3 \\text{ MeV}\\\\\n&\\text{(j) } R \\approx 7×10^{-15} \\text{ m}\\\\\n&\\text{(k) } \\tau_{\\pi^0} \\approx 8.4×10^{-17} \\text{ s}\\\\\n&\\text{(l) } \\tau_{\\mu^-} \\approx 2.2×10^{-6} \\text{ s}\n\\end{align*}", "expr2": "\\lambda_e = 2.43 \\times 10^{-12} \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{(a) } \\lambda_c \\approx 2.4×10^{-12} \\text{ m}\\\\\n&\\text{(b) } \\sigma_T \\approx 6.65×10^{-29} \\text{ m}^2\\\\\n&\\text{(c) } a_0 \\approx 5.3×10^{-11} \\text{ m}\\\\\n&\\text{(d) } E \\approx 13.6 \\text{ eV}\\\\\n&\\text{(e) } \\Delta E \\approx 5.9×10^{-6} \\text{ eV}\\\\\n&\\text{(f) } \\mu \\approx 3.26×(5.05×10^{-27}) \\text{ J/T}\\\\\n&\\text{(g) } \\Delta m \\approx 1.29 \\text{ MeV}\\\\\n&\\text{(h) } \\tau_n \\approx 880 \\text{ s}\\\\\n&\\text{(i) } BE \\approx 28.3 \\text{ MeV}\\\\\n&\\text{(j) } R \\approx 7×10^{-15} \\text{ m}\\\\\n&\\text{(k) } \\tau_{\\pi^0} \\approx 8.4×10^{-17} \\text{ s}\\\\\n&\\text{(l) } \\tau_{\\mu^-} \\approx 2.2×10^{-6} \\text{ s}\n\\end{align*}", "expr2": "\\sigma = 6.56 \\times 10^{-31} \\, \\text{m}^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{(a) } \\lambda_c \\approx 2.4×10^{-12} \\text{ m}\\\\\n&\\text{(b) } \\sigma_T \\approx 6.65×10^{-29} \\text{ m}^2\\\\\n&\\text{(c) } a_0 \\approx 5.3×10^{-11} \\text{ m}\\\\\n&\\text{(d) } E \\approx 13.6 \\text{ eV}\\\\\n&\\text{(e) } \\Delta E \\approx 5.9×10^{-6} \\text{ eV}\\\\\n&\\text{(f) } \\mu \\approx 3.26×(5.05×10^{-27}) \\text{ J/T}\\\\\n&\\text{(g) } \\Delta m \\approx 1.29 \\text{ MeV}\\\\\n&\\text{(h) } \\tau_n \\approx 880 \\text{ s}\\\\\n&\\text{(i) } BE \\approx 28.3 \\text{ MeV}\\\\\n&\\text{(j) } R \\approx 7×10^{-15} \\text{ m}\\\\\n&\\text{(k) } \\tau_{\\pi^0} \\approx 8.4×10^{-17} \\text{ s}\\\\\n&\\text{(l) } \\tau_{\\mu^-} \\approx 2.2×10^{-6} \\text{ s}\n\\end{align*}", "expr2": "a = 5.3 \\times 10^{-11} \\, \\text{m}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5015", "solution": "Let's solve this step by step.\n\n1) First, let's recall the unperturbed system:\n   * The rigid rotor in 2D has energy levels Em = ℏ²m²/2I where m = 0, ±1, ±2,...\n   * The wavefunctions are ψm = (1/√(2π))exp(imφ)\n\n2) The perturbation Hamiltonian is:\n   * H' = -μ·ε = -με cos(φ)\n   * Where φ is the angle between μ and ε\n\n3) For first-order corrections:\n   * ΔE¹ = ⟨ψm|H'|ψm⟩\n   * This involves integral: ∫(1/2π)exp(-imφ)(-με cos(φ))exp(imφ)dφ\n   * = -(με/2π)∫cos(φ)dφ = 0\n   * First-order correction vanishes due to angular integration\n\n4) For second-order corrections:\n   * ΔE² = Σn≠m |⟨ψn|H'|ψm⟩|²/(Em-En)\n   * Matrix element: ⟨ψn|H'|ψm⟩ = -(με/2π)∫exp(-inφ)cos(φ)exp(imφ)dφ\n\n5) Using Euler's formula:\n   * cos(φ) = (exp(iφ) + exp(-iφ))/2\n   * Matrix elements are non-zero only when n = m±1\n\n6) Calculate matrix elements:\n   * ⟨m±1|H'|m⟩ = -με/2\n\n7) Second-order energy correction:\n   * ΔE²(m) = (με)²/4 × [1/(Em-Em+1) + 1/(Em-Em-1)]\n   * = (με)²/4 × [1/(-ℏ²(2m+1)/2I) + 1/(ℏ²(2m-1)/2I)]\n   * = -(με)²I/2ℏ²\n\nTherefore, the first non-vanishing correction to the energy levels is:\n\n\\[ \\boxed{\\Delta E = -\\frac{(\\mu\\varepsilon)^2I}{2\\hbar^2}} \\]\n\nThis correction is negative and independent of m, meaning it shifts all energy levels down by the same amount.", "final_answers": ["\\Delta E = -\\frac{(\\mu\\varepsilon)^2I}{2\\hbar^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = -\\frac{(\\mu\\varepsilon)^2I}{2\\hbar^2}", "expr2": "E^{(2)} = \\frac{\\mu^2 \\varepsilon^2 I}{\\hbar^2} \\cdot \\frac{1}{4m^2 - 1}"}, "preprocessed_expressions": {"expr1": "-I*mu**2*varepsilon**2/(2*hbar**2)", "expr2": "I*mu**2*varepsilon**2/(hbar**2*(4*m**2 - 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5076", "solution": "Let's solve this step by step.\n\n(a) First part:\n\n1) The ground state wavefunction for a harmonic oscillator is:\n   ψ₁(x) = (Mω₁/πℏ)^(1/4) exp(-Mω₁x²/2ℏ)\n   where ω₁ = √(k/M)\n\n2) After doubling k, the new frequency is:\n   ω₂ = √(2k/M) = √2 ω₁\n\n3) The new ground state wavefunction is:\n   ψ₂(x) = (Mω₂/πℏ)^(1/4) exp(-Mω₂x²/2ℏ)\n\n4) The probability is the square of the overlap integral:\n   P = |∫ψ₂*(x)ψ₁(x)dx|²\n\n5) Evaluating this integral:\n   P = 2/(1+√2)\n\n(b) Second part:\n\n1) After the sudden change, the initial state evolves in the new potential:\n   ψ(x,t) = Σcₙψₙ₂(x)exp(-iEₙ₂t/ℏ)\n   where ψₙ₂ are eigenstates of V₂\n\n2) The frequencies of oscillation are:\n   ω₂ = √2 ω₁\n\n3) For complete return to initial state, all phase factors must return to their initial values:\n   exp(-iEₙ₂T/ℏ) = 1\n\n4) This means:\n   ω₂T = 2πn, where n is an integer\n\n5) Therefore:\n   T = 2πn/ω₂ = 2πn/(√2 ω₁)\n   where n is any positive integer\n\nThe final answers are:\n\nFor part (a):\n\\[\\boxed{P = \\frac{2}{1+\\sqrt{2}} \\approx 0.828}\\]\n\nFor part (b):\n\\[\\boxed{T = \\frac{2\\pi n}{\\omega_2} = \\frac{2\\pi n}{\\sqrt{2}\\omega_1}, \\text{ where } n \\text{ is a positive integer}}\\]", "final_answers": ["P = \\frac{2}{1+\\sqrt{2}} \\approx 0.828", "T = \\frac{2\\pi n}{\\omega_2} = \\frac{2\\pi n}{\\sqrt{2}\\omega_1}, \\text{ where } n \\text{ is a positive integer}"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{2}{1+\\sqrt{2}} \\approx 0.828", "expr2": "2^{\\frac{5}{4}} (\\sqrt{2} - 1)"}, "preprocessed_expressions": {"expr1": "-1.656*approx + 1.656*sqrt(2)*approx", "expr2": "2*2**(1/4)*(-1 + sqrt(2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = \\frac{2}{1+\\sqrt{2}} \\approx 0.828", "expr2": "\\tau = N'\\pi \\sqrt{\\frac{M}{2k}}"}, "preprocessed_expressions": {"expr1": "-1.656*approx + 1.656*sqrt(2)*approx", "expr2": "sqrt(2)*N'*pi*sqrt(M/k)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = \\frac{2\\pi n}{\\omega_2} = \\frac{2\\pi n}{\\sqrt{2}\\omega_1}, \\text{ where } n \\text{ is a positive integer}", "expr2": "2^{\\frac{5}{4}} (\\sqrt{2} - 1)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = \\frac{2\\pi n}{\\omega_2} = \\frac{2\\pi n}{\\sqrt{2}\\omega_1}, \\text{ where } n \\text{ is a positive integer}", "expr2": "\\tau = N'\\pi \\sqrt{\\frac{M}{2k}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1060", "solution": "Let's solve this step by step.\n\n(a) First, let's analyze the dimensional aspects:\n\n1) The energy ε must have dimensions of energy [ML²T⁻²]\n\n2) Let's write out the dimensions of each term:\n   - K is dimensionless\n   - mg has dimensions [MLT⁻²]\n   - (m²g/h²)^α has dimensions [(M²L/L²)^α] = [M^(2α)L^(α-2α)]\n\n3) Combining all terms:\n   [ML²T⁻²] = [MLT⁻²][M^(2α)L^(-α)]\n\n4) Matching exponents:\n   For M: 1 = 1 + 2α\n   For L: 2 = 1 - α\n   For T: -2 = -2\n\n5) From these equations:\n   2α = 0 → α = 0\n   1 - α = 2 → α = -1\n\nTherefore, α = -1\n\n(b) For the variational calculation:\n\n1) The ground state energy can be estimated using the uncertainty principle:\n   ΔpΔx ≥ ℏ/2\n\n2) For a bouncing ball:\n   Δx ≈ h (height)\n   Δp ≈ mv (momentum)\n\n3) The total energy is:\n   ε = mgh + mv²/2\n\n4) From the uncertainty principle:\n   mvh ≈ ℏ\n   v ≈ ℏ/mh\n\n5) Substituting:\n   ε = mgh + m(ℏ/mh)²/2\n   = mgh + ℏ²/2mh²\n\n6) Minimizing with respect to h:\n   dε/dh = mg - ℏ²/mh³ = 0\n   h = (ℏ²/m²g)^(1/3)\n\n7) Therefore:\n   K = (3/4)(ℏ²/m²g)^(1/3)\n\n8) For m = 1g = 10⁻³ kg:\n   ε ≈ 0.5 × 10⁻³ ergs\n\n\\[\\boxed{\\varepsilon \\approx 5 \\times 10^{-4} \\text{ ergs}}\\]", "final_answers": ["\\varepsilon \\approx 5 \\times 10^{-4} \\text{ ergs}"], "equivalency_results": [{"input_expressions": {"expr1": "\\varepsilon \\approx 5 \\times 10^{-4} \\text{ ergs}", "expr2": "-\\frac{1}{3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\varepsilon \\approx 5 \\times 10^{-4} \\text{ ergs}", "expr2": "3 \\left(\\frac{3}{4\\pi}\\right)^{1/3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\varepsilon \\approx 5 \\times 10^{-4} \\text{ ergs}", "expr2": "1.9 \\times 10^{-16} \\text{ erg}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6051", "solution": "Let's solve this step by step:\n\n1) First, we need to understand what we're calculating:\n   * We're looking for transition probability from ground state to first excited state\n   * We need to use time-dependent perturbation theory\n   * The perturbation is the electric field interaction: V(t) = eE⋅r\n\n2) The transition probability is given by first-order perturbation theory:\n   P₁←₀(∞) = |c₁(∞)|²\n   where c₁(t) = -i/ℏ ∫₀^t dt' ⟨1|V(t')|0⟩ exp(iω₁₀t')\n\n3) For a particle in a box:\n   * Ground state: ψ₀₀₀(x,y,z) = (1/b)³/² sin(πx/2b)sin(πy/2b)sin(πz/2b)\n   * First excited state in direction of E₀: ψ₁₀₀(x,y,z) = (1/b)³/² sin(2πx/2b)sin(πy/2b)sin(πz/2b)\n\n4) The matrix element:\n   ⟨1|V(t)|0⟩ = eE₀e⁻ᵅᵗ ∫ ψ*₁₀₀ x ψ₀₀₀ dxdydz\n   = eE₀e⁻ᵅᵗ (8b/3π)\n\n5) The energy difference:\n   ℏω₁₀ = (3ℏ²π²)/(8mb²)\n\n6) Substituting into the transition amplitude:\n   c₁(∞) = -i(eE₀/ℏ)(8b/3π) ∫₀^∞ e⁻ᵅᵗ exp(iω₁₀t)dt\n   = -i(eE₀/ℏ)(8b/3π) [1/(α+iω₁₀)]\n\n7) The transition probability:\n   P₁←₀(∞) = |c₁(∞)|²\n   = (64e²E₀²b²/9π²ℏ²) [1/(α²+ω₁₀²)]\n\nTherefore, the final answer is:\n\n\\[\\boxed{P_{1←0}(\\infty) = \\frac{64e^2E_0^2b^2}{9\\pi^2\\hbar^2(\\alpha^2+\\omega_{10}^2)}}\\]\n\nwhere ω₁₀ = (3ℏπ²)/(8mb²)", "final_answers": ["P_{1←0}(\\infty) = \\frac{64e^2E_0^2b^2}{9\\pi^2\\hbar^2(\\alpha^2+\\omega_{10}^2)}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{1←0}(\\infty) = \\frac{64e^2E_0^2b^2}{9\\pi^2\\hbar^2(\\alpha^2+\\omega_{10}^2)}", "expr2": "P = \\left(\\frac{32beE_0}{9\\hbar \\pi^2}\\right)^2 \\frac{\\hbar^2}{\\alpha^2 \\hbar^2 + \\left(\\frac{3\\pi^2 \\hbar^2}{8mb^2}\\right)^2}"}, "preprocessed_expressions": {"expr1": "64*E**2*b**2*e**2/(9*hbar**2*pi**2*(alpha**2 + omega**2))", "expr2": "65536*E**2*b**6*e**2*m**2/(5184*alpha**2*b**4*hbar**2*m**2*pi**4 + 729*hbar**4*pi**8)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/5082", "solution": "Let's solve this step by step.\n\n1) First, let's write down the Schrödinger equations in both reference frames:\n\nFor (x,t) system:\n$i\\hbar\\frac{\\partial\\psi}{\\partial t} = -\\frac{\\hbar^2}{2m}\\frac{\\partial^2\\psi}{\\partial x^2} + V(x,t)\\psi$\n\nFor (x',t) system:\n$i\\hbar\\frac{\\partial\\psi'}{\\partial t} = -\\frac{\\hbar^2}{2m}\\frac{\\partial^2\\psi'}{\\partial x'^2} + V(x',t)\\psi'$\n\n2) For t < 0, the particle is in the ground state of the harmonic oscillator:\n$\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4}e^{-\\frac{m\\omega x^2}{2\\hbar}}$\n\n3) At t = 0, the well suddenly moves with velocity v. This is equivalent to a sudden boost of the wavefunction.\n\n4) The transformation between the two frames is:\n$x = x' + vt$\n$\\psi'(x',t) = \\psi(x'+vt,t)e^{imvx'/\\hbar}e^{imv^2t/2\\hbar}$\n\n5) The probability of finding the system in the ground state of the moving frame is given by:\n$P = |\\langle\\psi'_0|\\psi\\rangle|^2$\n\n6) This overlap integral can be calculated:\n$P = |\\int \\psi'_0(x')\\psi(x',0)dx'|^2$\n\n7) After performing the integration:\n$P = e^{-mv^2/2\\hbar\\omega}$\n\nThis is the probability that the particle will be found in the ground state of the moving frame after the sudden boost.\n\nThe final answer is:\n\n\\[\\boxed{P = e^{-mv^2/2\\hbar\\omega}}\\]\n\nThis result shows that the probability decreases exponentially with the square of the velocity of the boost, scaled by the characteristic parameters of the system (mass and frequency of the oscillator).", "final_answers": ["P = e^{-mv^2/2\\hbar\\omega}"], "equivalency_results": [{"input_expressions": {"expr1": "P = e^{-mv^2/2\\hbar\\omega}", "expr2": "\\left[ -\\frac{\\hbar^2}{2m} \\frac{d^2}{dx^2} + V(x, t) \\right] \\psi(x, t) = i\\hbar \\frac{\\partial}{\\partial t} \\psi(x, t)"}, "preprocessed_expressions": {"expr1": "e**(-m*v**2/(2*hbar*omega))", "expr2": "hbar*i*Derivative(psi(x, t), t)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = e^{-mv^2/2\\hbar\\omega}", "expr2": "\\left[ -\\frac{\\hbar^2}{2m} \\frac{d^2}{d x'^2} + V'(x', t) \\right] \\psi(x', t) = i\\hbar \\frac{\\partial}{\\partial t} \\psi(x', t)"}, "preprocessed_expressions": {"expr1": "e**(-m*v**2/(2*hbar*omega))", "expr2": "hbar*i*Derivative(psi(x', t), t)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = e^{-mv^2/2\\hbar\\omega}", "expr2": "e^{-\\frac{m \\omega v^2}{2 \\hbar}}"}, "preprocessed_expressions": {"expr1": "e**(-m*v**2/(2*hbar*omega))", "expr2": "e**(-m*omega*v**2/(2*hbar))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3003", "solution": "Let's solve this step by step:\n\n1) First, let's understand what we're dealing with:\n   * We have matrices that follow commutation rules similar to angular momentum operators\n   * The commutation rules $[M_x, M_y] = i M_z$ (and cyclic) are the same as angular momentum operators\n   * $M^2$ is analogous to the total angular momentum operator $J^2$\n\n2) For angular momentum operators:\n   * The eigenvalues of $J^2$ are $j(j+1)$ where $j$ is the total angular momentum quantum number\n   * For a given $j$, the eigenvalues of $J_x$ (or $J_y$ or $J_z$) are $m = -j, -j+1, ..., j-1, j$\n\n3) Looking at the eigenvalues of $M_x$:\n   * Maximum eigenvalue is 2, which means $j = 2$\n   * The multiplicity pattern matches angular momentum theory:\n     * $j = 2$: $m = ±2, ±1, 0$ (5 values, each once)\n     * $j = 3/2$: $m = ±3/2, ±1/2$ (4 values, each 8 times)\n     * $j = 1$: $m = ±1, 0$ (3 values, each 28 times)\n     * $j = 1/2$: $m = ±1/2$ (2 values, each 56 times)\n     * $j = 0$: $m = 0$ (1 value, 70 times)\n\n4) For each $j$ value, $M^2$ will have eigenvalue $j(j+1)$:\n   * For $j = 2$: $2(2+1) = 6$ occurs $2j+1 = 5$ times\n   * For $j = 3/2$: $\\frac{3}{2}(\\frac{3}{2}+1) = \\frac{15}{4}$ occurs $2j+1 = 4$ times × 8 = 32 times\n   * For $j = 1$: $1(1+1) = 2$ occurs $2j+1 = 3$ times × 28 = 84 times\n   * For $j = 1/2$: $\\frac{1}{2}(\\frac{1}{2}+1) = \\frac{3}{4}$ occurs $2j+1 = 2$ times × 56 = 112 times\n   * For $j = 0$: $0(0+1) = 0$ occurs 70 times\n\nTherefore, the eigenvalues of $M^2$ are:\n\n\\[\\boxed{6 \\text{ (5 times)}, \\frac{15}{4} \\text{ (32 times)}, 2 \\text{ (84 times)}, \\frac{3}{4} \\text{ (112 times)}, 0 \\text{ (70 times)}}\\]", "final_answers": ["6 \\text{ (5 times)}, \\frac{15}{4} \\text{ (32 times)}, 2 \\text{ (84 times)}, \\frac{3}{4} \\text{ (112 times)}, 0 \\text{ (70 times)}"], "equivalency_results": [{"input_expressions": {"expr1": "6 \\text{ (5 times)}, \\frac{15}{4} \\text{ (32 times)}, 2 \\text{ (84 times)}, \\frac{3}{4} \\text{ (112 times)}, 0 \\text{ (70 times)}", "expr2": "\\{6: 5, \\, \\frac{15}{4}: 32, \\, 2: 81, \\, \\frac{3}{4}: 96, \\, 0: 42\\}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/1-1067", "solution": "Let's solve this step by step.\n\n(a) To find eigenvalues of CQ + QC:\n\n1) Let's consider how this operator acts on an eigenstate |ψ_q⟩:\n   (CQ + QC)|ψ_q⟩\n\n2) Let's evaluate the first term CQ|ψ_q⟩:\n   CQ|ψ_q⟩ = C(q|ψ_q⟩) = qC|ψ_q⟩ = q|ψ_{-q}⟩\n\n3) Let's evaluate the second term QC|ψ_q⟩:\n   QC|ψ_q⟩ = Q|ψ_{-q}⟩ = -q|ψ_{-q}⟩\n\n4) Adding the terms:\n   (CQ + QC)|ψ_q⟩ = q|ψ_{-q}⟩ - q|ψ_{-q}⟩ = 0\n\n5) Therefore, when acting on any charge eigenstate |ψ_q⟩, the operator CQ + QC gives zero.\n\n6) Since this is true for any charge eigenstate, and these form a complete basis, the operator CQ + QC must be the zero operator.\n\n7) Therefore, the only eigenvalue is 0.\n\n(b) For a state to be simultaneously an eigenstate of C and Q:\n\n1) Let's say |ψ⟩ is such a state. Then:\n   Q|ψ⟩ = q|ψ⟩ (for some q)\n   C|ψ⟩ = c|ψ⟩ (for some c)\n\n2) But we also know that C|ψ_q⟩ = |ψ_{-q}⟩\n\n3) If |ψ⟩ is an eigenstate of Q with eigenvalue q, then C|ψ⟩ must be an eigenstate of Q with eigenvalue -q\n\n4) This contradicts the assumption that |ψ⟩ is an eigenstate of C, unless q = 0\n\n5) Therefore, a state can be a simultaneous eigenstate of C and Q only if q = 0\n\nThe final answer is:\n\n\\[\\boxed{\\text{(a) The only eigenvalue is 0} \\\\ \\text{(b) Yes, but only if q = 0}}\\]", "final_answers": ["\\text{(a) The only eigenvalue is 0} \\\\ \\text{(b) Yes, but only if q = 0}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) The only eigenvalue is 0} \\\\ \\text{(b) Yes, but only if q = 0}", "expr2": "0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) The only eigenvalue is 0} \\\\ \\text{(b) Yes, but only if q = 0}", "expr2": "\\text{No common eigenstates unless } q = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/5071", "solution": "Let's solve this step by step.\n\n(a) For a 3D harmonic oscillator:\n\n1) The energy levels are given by:\n   $E_{n_x,n_y,n_z} = \\hbar\\omega(n_x + n_y + n_z + \\frac{3}{2})$\n   where $\\omega = \\sqrt{k/m}$ and $n_x,n_y,n_z ≥ 0$\n\n2) Let's find N = n_x + n_y + n_z for first few states:\n   * Ground state (N=0): E₀ = $\\frac{3}{2}\\hbar\\omega$, L=0\n   * First excited (N=1): E₁ = $\\frac{5}{2}\\hbar\\omega$, L=1\n   * Second excited (N=2): E₂ = $\\frac{7}{2}\\hbar\\omega$, L=0,2\n   * Third excited (N=3): E₃ = $\\frac{9}{2}\\hbar\\omega$, L=1,3\n\n(b) For 8 spin-½ particles:\n\n1) Due to Pauli principle, we need to fill states considering spin\n2) Each energy level can hold:\n   * N=0: 2 particles (spin up/down)\n   * N=1: 6 particles (3 spatial states × 2 spin states)\n   * N=2: 10 particles (5 spatial states × 2 spin states)\n\n3) For 8 particles:\n   * 2 particles in N=0 state\n   * 6 particles in N=1 state\n\n4) Total energy:\n   E = 2($\\frac{3}{2}\\hbar\\omega$) + 6($\\frac{5}{2}\\hbar\\omega$)\n   E = 3\\hbar\\omega + 15\\hbar\\omega = 18\\hbar\\omega\n\n(c) With magnetic field:\n\n1) Each spin-½ particle contributes ±μB to energy\n2) In ground state, spins align to minimize energy\n3) Ground state energy becomes:\n   E(B) = 18\\hbar\\omega - 8μB\n\n4) Magnetization M = -∂E/∂B = 8μ\n\nThe magnetization is constant (8μ) as all spins are aligned in ground state.\n\nFinal answer:\n\\[\\boxed{\n\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}", "expr2": "E_0 = \\frac{3}{2} \\hbar \\omega, \\, L = 0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}", "expr2": "E_1 = \\frac{5}{2} \\hbar \\omega, \\, L = \\hbar"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}", "expr2": "E_0 = 18 \\hbar \\omega"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}", "expr2": "E = 18 \\hbar \\omega + \\frac{e^2 B^2}{8mc^2} \\sum_{i=1}^{8} \\langle r_i^2 \\sin^2 \\theta_i \\rangle"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n&\\text{Ground state: } E_0 = \\frac{3}{2}\\hbar\\omega, L=0 \\\\\n&\\text{8-particle ground state: } E = 18\\hbar\\omega \\\\\n&\\text{With B-field: } E(B) = 18\\hbar\\omega - 8\\mu B \\\\\n&\\text{Magnetization: } M = 8\\mu\n\\end{align*}", "expr2": "-\\frac{\\partial E}{\\partial B} = -\\frac{e^2 B}{4mc^2} \\sum_{i=1}^{8} \\langle r_i^2 \\sin^2 \\theta_i \\rangle = \\chi B"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/3-3004", "solution": "Let me solve this step by step.\n\n1) First, recall that for angular momentum operators:\n   * $\\hat{L}_x = \\frac{1}{2}(\\hat{L}_+ + \\hat{L}_-)$\n   * $\\hat{L}_+ |l,m⟩ = \\hbar\\sqrt{l(l+1)-m(m+1)}|l,m+1⟩$\n   * $\\hat{L}_- |l,m⟩ = \\hbar\\sqrt{l(l+1)-m(m-1)}|l,m-1⟩$\n\n2) For $\\langle \\hat{L}_x \\rangle$:\n   * $\\langle \\hat{L}_x \\rangle = \\langle \\psi|\\hat{L}_x|\\psi \\rangle$\n   * $= \\frac{1}{2}\\langle \\psi|(\\hat{L}_+ + \\hat{L}_-)|\\psi \\rangle$\n   * When $\\hat{L}_+$ acts on $|\\psi \\rangle$, it gives a different state $|l,m+1⟩$\n   * When $\\hat{L}_-$ acts on $|\\psi \\rangle$, it gives a different state $|l,m-1⟩$\n   * These states are orthogonal to $|\\psi \\rangle$\n   * Therefore, $\\langle \\hat{L}_x \\rangle = 0$\n\n3) For $\\langle \\hat{L}^2_x \\rangle$:\n   * $\\hat{L}^2_x = \\frac{1}{4}(\\hat{L}_+ + \\hat{L}_-)^2$\n   * $= \\frac{1}{4}(\\hat{L}_+\\hat{L}_- + \\hat{L}_-\\hat{L}_+ + \\hat{L}_+^2 + \\hat{L}_-^2)$\n   * $= \\frac{1}{2}(\\hat{L}^2 - \\hat{L}_z^2)$\n\n4) Therefore:\n   * $\\langle \\hat{L}^2_x \\rangle = \\frac{1}{2}(\\langle \\hat{L}^2 \\rangle - \\langle \\hat{L}_z^2 \\rangle)$\n   * $= \\frac{1}{2}(l(l+1)\\hbar^2 - m^2\\hbar^2)$\n   * $= \\frac{\\hbar^2}{2}(l(l+1) - m^2)$\n\nThe final answers are:\n\n\\[ \\boxed{\\langle \\hat{L}_x \\rangle = 0} \\]\n\\[ \\boxed{\\langle \\hat{L}^2_x \\rangle = \\frac{\\hbar^2}{2}(l(l+1) - m^2)} \\]", "final_answers": ["\\langle \\hat{L}_x \\rangle = 0", "\\langle \\hat{L}^2_x \\rangle = \\frac{\\hbar^2}{2}(l(l+1) - m^2)"], "equivalency_results": [{"input_expressions": {"expr1": "\\langle \\hat{L}_x \\rangle = 0", "expr2": "0"}, "preprocessed_expressions": {"expr1": "0", "expr2": "0"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\langle \\hat{L}^2_x \\rangle = \\frac{\\hbar^2}{2}(l(l+1) - m^2)", "expr2": "0"}, "preprocessed_expressions": {"expr1": "hbar**2*(-m**2 + l(l + 1))/2", "expr2": "0"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\langle \\hat{L}^2_x \\rangle = \\frac{\\hbar^2}{2}(l(l+1) - m^2)", "expr2": "\\frac{1}{2} \\left[l(l + 1) - m^2\\right] \\hbar^2"}, "preprocessed_expressions": {"expr1": "hbar**2*(-m**2 + l(l + 1))/2", "expr2": "hbar**2*(-m**2 + l(l + 1))/2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/3-3032", "solution": "Let me solve this step by step.\n\n1) First, recall that in a uniform magnetic field B along z-direction, the Hamiltonian is:\n   H = -μ·B = -(e/m)S·B = -ωSz\n   where ω = eB/m is the Larmor frequency\n\n2) At t=0, the spin is along +y direction. The state vector for spin along +y is:\n   |ψ(0)⟩ = 1/√2(|+⟩ + i|-⟩)\n   where |+⟩ and |-⟩ are eigenstates of Sz\n\n3) The time evolution of the state vector is given by:\n   |ψ(t)⟩ = e^(-iHt/ℏ)|ψ(0)⟩\n\n4) Using H = -ωSz and Sz|±⟩ = ±(ℏ/2)|±⟩:\n   |ψ(t)⟩ = 1/√2(e^(iωt/2)|+⟩ + ie^(-iωt/2)|-⟩)\n\n5) To find ⟨sx⟩, we need to calculate ⟨ψ(t)|Sx|ψ(t)⟩\n   Recall that Sx = (ℏ/2)(S+ + S-), where S+|-⟩ = ℏ|+⟩ and S-|+⟩ = ℏ|-⟩\n\n6) After calculating:\n   ⟨sx⟩ = (ℏ/2)cos(ωt)\n\nTherefore, the final answers are:\n- State vector: |ψ(t)⟩ = 1/√2(e^(iωt/2)|+⟩ + ie^(-iωt/2)|-⟩)\n- Average x-polarization: ⟨sx⟩ = (ℏ/2)cos(ωt)\n\n\\[\\boxed{|ψ(t)⟩ = \\frac{1}{\\sqrt{2}}(e^{iωt/2}|+⟩ + ie^{-iωt/2}|-⟩), \\quad ⟨s_x⟩ = \\frac{\\hbar}{2}\\cos(ωt)}\\]", "final_answers": ["|ψ(t)⟩ = \\frac{1}{\\sqrt{2}}(e^{iωt/2}|+⟩ + ie^{-iωt/2}|-⟩), \\quad ⟨s_x⟩ = \\frac{\\hbar}{2}\\cos(ωt)"], "equivalency_results": [{"input_expressions": {"expr1": "|ψ(t)⟩ = \\frac{1}{\\sqrt{2}}(e^{iωt/2}|+⟩ + ie^{-iωt/2}|-⟩), \\quad ⟨s_x⟩ = \\frac{\\hbar}{2}\\cos(ωt)", "expr2": "\\psi(t) = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} e^{-i \\omega t} \\\\ i e^{-i \\omega t} \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{\\hbar}{2}\\cos(ωt)\n~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "|ψ(t)⟩ = \\frac{1}{\\sqrt{2}}(e^{iωt/2}|+⟩ + ie^{-iωt/2}|-⟩), \\quad ⟨s_x⟩ = \\frac{\\hbar}{2}\\cos(ωt)", "expr2": "\\langle s_x \\rangle = -\\frac{\\hbar}{2} \\sin{(2 \\omega t)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{\\hbar}{2}\\cos(ωt)\n~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/5078", "solution": "Let's solve this step by step:\n\n1) First, we need to understand what happens during this sudden change:\n   * The nuclear charge changes instantly from Z to Z+1\n   * The electron wavefunction doesn't have time to adjust immediately\n   * We need to find the overlap between the initial and final states\n\n2) The K-electron wavefunctions are:\n   * Initial state (Z): ψᵢ(r) = (Z³/π)^(1/2) exp(-Zr)\n   * Final state (Z+1): ψf(r) = ((Z+1)³/π)^(1/2) exp(-(Z+1)r)\n\n3) The probability is given by the square of the overlap integral:\n   P = |∫ψf*(r)ψᵢ(r)d³r|²\n\n4) Due to spherical symmetry:\n   P = |4π∫₀^∞ r²ψf*(r)ψᵢ(r)dr|²\n\n5) Substituting the wavefunctions:\n   P = |4π((Z³(Z+1)³)/π)^(1/2) ∫₀^∞ r²exp(-(2Z+1)r)dr|²\n\n6) The integral evaluates to:\n   ∫₀^∞ r²exp(-(2Z+1)r)dr = 2/(2Z+1)³\n\n7) Substituting and simplifying:\n   P = (4Z³(Z+1)³)/(2Z+1)⁶\n\nTherefore, the probability is:\n\n\\[\\boxed{P = \\frac{4Z^3(Z+1)^3}{(2Z+1)^6}}\\]\n\nThis is known as the \"sudden approximation\" result for K-electron capture probability during β-decay.", "final_answers": ["P = \\frac{4Z^3(Z+1)^3}{(2Z+1)^6}"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{4Z^3(Z+1)^3}{(2Z+1)^6}", "expr2": "P = \\frac{\\left( 1 + \\frac{1}{Z} \\right)^3}{\\left(1 + \\frac{1}{2Z}\\right)^6}"}, "preprocessed_expressions": {"expr1": "4*Z**3*(Z**3 + 3*Z**2 + 3*Z + 1)/(64*Z**6 + 192*Z**5 + 240*Z**4 + 160*Z**3 + 60*Z**2 + 12*Z + 1)", "expr2": "64*Z**3*(Z**3 + 3*Z**2 + 3*Z + 1)/(64*Z**6 + 192*Z**5 + 240*Z**4 + 160*Z**3 + 60*Z**2 + 12*Z + 1)"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/6058", "solution": "Let's solve this step by step.\n\n1) This is a nuclear magnetic resonance (NMR) problem where we have a static field in z-direction and a rotating field in xy-plane.\n\n2) For part (a):\n   * The energy difference between spin up (+z) and spin down (-z) states in the static field Bz is:\n   * ΔE = 2μBz\n   * According to quantum mechanics, transitions occur when the frequency of the rotating field matches this energy difference:\n   * ℏω = 2μBz\n   * Therefore, the resonant frequency is:\n   * ω = 2μBz/ℏ\n   * This is known as the Larmor frequency.\n\n3) For part (b):\n   * Under the rotating wave approximation (valid when B₀ ≪ Bz), the probability of finding the spin in the -z direction is:\n   * P₋(t) = sin²(ΩRt/2)\n   * where ΩR is the Rabi frequency = μB₀/ℏ\n   * This oscillation between spin states is known as Rabi oscillation.\n\n4) The probability formula assumes we're at resonance (ω = 2μBz/ℏ).\n\nThe answers are:\n\n(a) The resonant frequency:\n\\[ \\boxed{\\omega = \\frac{2\\mu B_z}{\\hbar}} \\]\n\n(b) The probability at time t:\n\\[ \\boxed{P_{-}(t) = \\sin^2\\left(\\frac{\\mu B_0 t}{2\\hbar}\\right)} \\]", "final_answers": ["\\omega = \\frac{2\\mu B_z}{\\hbar}", "P_{-}(t) = \\sin^2\\left(\\frac{\\mu B_0 t}{2\\hbar}\\right)"], "equivalency_results": [{"input_expressions": {"expr1": "\\omega = \\frac{2\\mu B_z}{\\hbar}", "expr2": "\\omega = \\frac{2\\mu B_z}{\\hbar}"}, "preprocessed_expressions": {"expr1": "2*B*mu/hbar", "expr2": "2*B*mu/hbar"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "P_{-}(t) = \\sin^2\\left(\\frac{\\mu B_0 t}{2\\hbar}\\right)", "expr2": "\\omega = \\frac{2\\mu B_z}{\\hbar}"}, "preprocessed_expressions": {"expr1": "sin(B*mu*t/(2*hbar))**2", "expr2": "2*B*mu/hbar"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{-}(t) = \\sin^2\\left(\\frac{\\mu B_0 t}{2\\hbar}\\right)", "expr2": "P = \\left(\\frac{\\mu B_0}{\\hbar \\Omega} \\right)^2 \\sin^2 \\Omega t"}, "preprocessed_expressions": {"expr1": "sin(B*mu*t/(2*hbar))**2", "expr2": "B**2*mu**2*sin(Omega*t)**2/(Omega**2*hbar**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{-}(t) = \\sin^2\\left(\\frac{\\mu B_0 t}{2\\hbar}\\right)", "expr2": "\\Omega \\approx \\frac{1}{\\hbar} \\left( \\frac{\\hbar \\omega}{2} + \\mu B_z \\right)"}, "preprocessed_expressions": {"expr1": "sin(B*mu*t/(2*hbar))**2", "expr2": "Omega*approx*(2*B*mu + hbar*omega)/(2*hbar)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/5014", "solution": "Let's solve this step by step.\n\n(a) For the small angle approximation:\n\n1) The potential energy is V(θ) = mgl(1 - cos θ)\nIn small angle approximation: cos θ ≈ 1 - θ²/2\nSo V(θ) ≈ mgl(θ²/2)\n\n2) The kinetic energy is T = ½ml²(dθ/dt)²\n\n3) This gives us a harmonic oscillator with:\n- Spring constant k = mgl\n- Moment of inertia I = ml²\n\n4) For a quantum harmonic oscillator, the energy levels are:\nEn = ℏω(n + ½), where n = 0,1,2,...\nand ω = √(k/I) = √(g/l)\n\n5) Therefore, the energy levels are:\nEn = ℏ√(g/l)(n + ½)\n\n(b) For the correction:\n\n1) The full potential is V(θ) = mgl(1 - cos θ)\nExpanding cos θ to fourth order:\ncos θ ≈ 1 - θ²/2 + θ⁴/24\n\n2) Therefore V(θ) ≈ mgl(θ²/2 - θ⁴/24)\n\n3) The correction to the ground state energy can be found using first-order perturbation theory:\nΔE₀ = <ψ₀|-mglθ⁴/24|ψ₀>\n\n4) For the ground state of a harmonic oscillator:\n<θ⁴> = 3<θ²>²\n<θ²> = ℏ/(mω₀l²)\nwhere ω₀ = √(g/l)\n\n5) Therefore:\nΔE₀ = -mgl<θ⁴>/24 = -ℏ²/(8ml²)\n\nThe final answer for part (a) is:\n\\[\\boxed{E_n = \\hbar\\sqrt{\\frac{g}{l}}(n + \\frac{1}{2}), \\quad n = 0,1,2,...}\\]\n\nAnd for part (b):\n\\[\\boxed{\\Delta E_0 = -\\frac{\\hbar^2}{8ml^2}}\\]", "final_answers": ["E_n = \\hbar\\sqrt{\\frac{g}{l}}(n + \\frac{1}{2}), \\quad n = 0,1,2,...", "\\Delta E_0 = -\\frac{\\hbar^2}{8ml^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_n = \\hbar\\sqrt{\\frac{g}{l}}(n + \\frac{1}{2}), \\quad n = 0,1,2,...", "expr2": "E_n = \\left( n + \\frac{1}{2} \\right) \\hbar \\sqrt{\\frac{g}{l}}"}, "preprocessed_expressions": {"expr1": "0", "expr2": "hbar*sqrt(g/l)*(2*n + 1)/2"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\Delta E_0 = -\\frac{\\hbar^2}{8ml^2}", "expr2": "E_n = \\left( n + \\frac{1}{2} \\right) \\hbar \\sqrt{\\frac{g}{l}}"}, "preprocessed_expressions": {"expr1": "-hbar**2/(8*l**2*m)", "expr2": "hbar*sqrt(g/l)*(2*n + 1)/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_0 = -\\frac{\\hbar^2}{8ml^2}", "expr2": "E' = -\\frac{\\hbar^2}{32ml^2}"}, "preprocessed_expressions": {"expr1": "-hbar**2/(8*l**2*m)", "expr2": "-hbar**2/(32*l**2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.5}
{"id": "quantum/1-1002", "solution": "Let me solve this step by step for each quantity:\n\n(a) Bohr radius (a₀):\n- Formula: a₀ = ℏ²/(me²)\n- Numerical value ≈ 5.29 × 10⁻⁹ cm\n\n(b) Binding energy of hydrogen:\n- Formula: E = me⁴/(2ℏ²) = 13.6 eV\n- This is the Rydberg energy\n\n(c) Bohr magneton (μB):\n- Formula: μB = eℏ/(2mc)\n- Numerical value ≈ 5.79 × 10⁻⁵ eV/Tesla\n\n(d) Compton wavelength (λc):\n- Formula: λc = h/(mc) = 2πℏ/(mc)\n- Numerical value ≈ 2.43 × 10⁻¹⁰ cm\n\n(e) Classical electron radius (re):\n- Formula: re = e²/(mc²)\n- Numerical value ≈ 2.82 × 10⁻¹³ cm\n\n(f) Electron rest energy:\n- Formula: E = mc²\n- Numerical value ≈ 0.511 MeV\n\n(g) Proton rest energy:\n- Formula: E = Mc²\n- Numerical value ≈ 938 MeV\n\n(h) Fine structure constant (α):\n- Formula: α = e²/(ℏc)\n- Numerical value ≈ 1/137\n\n(i) Hydrogen fine-structure splitting:\n- Formula: ΔE ≈ α²(me⁴/ℏ²) = α² × 13.6 eV\n- Numerical value ≈ 0.001 eV\n\nFinal answer in terms of fundamental constants:\n\n\\[\\boxed{\n\\begin{align*}\n&(a)\\; a_0 = \\frac{\\hbar^2}{me^2} \\approx 5.29 \\times 10^{-9}\\text{ cm} \\\\\n&(b)\\; E_b = \\frac{me^4}{2\\hbar^2} \\approx 13.6\\text{ eV} \\\\\n&(c)\\; \\mu_B = \\frac{e\\hbar}{2mc} \\approx 5.79 \\times 10^{-5}\\text{ eV/T} \\\\\n&(d)\\; \\lambda_c = \\frac{2\\pi\\hbar}{mc} \\approx 2.43 \\times 10^{-10}\\text{ cm} \\\\\n&(e)\\; r_e = \\frac{e^2}{mc^2} \\approx 2.82 \\times 10^{-13}\\text{ cm} \\\\\n&(f)\\; E_e = mc^2 \\approx 0.511\\text{ MeV} \\\\\n&(g)\\; E_p = Mc^2 \\approx 938\\text{ MeV} \\\\\n&(h)\\; \\alpha = \\frac{e^2}{\\hbar c} \\approx \\frac{1}{137} \\\\\n&(i)\\; \\Delta E = \\alpha^2\\frac{me^4}{\\hbar^2} \\approx 0.001\\text{ eV}\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\n&(a)\\; a_0 = \\frac{\\hbar^2}{me^2} \\approx 5.29 \\times 10^{-9}\\text{ cm} \\\\\n&(b)\\; E_b = \\frac{me^4}{2\\hbar^2} \\approx 13.6\\text{ eV} \\\\\n&(c)\\; \\mu_B = \\frac{e\\hbar}{2mc} \\approx 5.79 \\times 10^{-5}\\text{ eV/T} \\\\\n&(d)\\; \\lambda_c = \\frac{2\\pi\\hbar}{mc} \\approx 2.43 \\times 10^{-10}\\text{ cm} \\\\\n&(e)\\; r_e = \\frac{e^2}{mc^2} \\approx 2.82 \\times 10^{-13}\\text{ cm} \\\\\n&(f)\\; E_e = mc^2 \\approx 0.511\\text{ MeV} \\\\\n&(g)\\; E_p = Mc^2 \\approx 938\\text{ MeV} \\\\\n&(h)\\; \\alpha = \\frac{e^2}{\\hbar c} \\approx \\frac{1}{137} \\\\\n&(i)\\; \\Delta E = \\alpha^2\\frac{me^4}{\\hbar^2} \\approx 0.001\\text{ eV}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n&(a)\\; a_0 = \\frac{\\hbar^2}{me^2} \\approx 5.29 \\times 10^{-9}\\text{ cm} \\\\\n&(b)\\; E_b = \\frac{me^4}{2\\hbar^2} \\approx 13.6\\text{ eV} \\\\\n&(c)\\; \\mu_B = \\frac{e\\hbar}{2mc} \\approx 5.79 \\times 10^{-5}\\text{ eV/T} \\\\\n&(d)\\; \\lambda_c = \\frac{2\\pi\\hbar}{mc} \\approx 2.43 \\times 10^{-10}\\text{ cm} \\\\\n&(e)\\; r_e = \\frac{e^2}{mc^2} \\approx 2.82 \\times 10^{-13}\\text{ cm} \\\\\n&(f)\\; E_e = mc^2 \\approx 0.511\\text{ MeV} \\\\\n&(g)\\; E_p = Mc^2 \\approx 938\\text{ MeV} \\\\\n&(h)\\; \\alpha = \\frac{e^2}{\\hbar c} \\approx \\frac{1}{137} \\\\\n&(i)\\; \\Delta E = \\alpha^2\\frac{me^4}{\\hbar^2} \\approx 0.001\\text{ eV}\n\\end{align*}", "expr2": "a = \\frac{\\hbar^2}{m e^2} = 5.29 \\times 10^{-9} \\, \\text{cm}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "quantum/1-1005", "solution": "Let me solve this step by step:\n\n1) Before Quantum Mechanics (Classical Theory):\n- According to classical electromagnetic theory, accelerating charges emit electromagnetic radiation\n- In the classical model, electrons orbit the nucleus in circular paths\n- Circular motion involves constant acceleration (centripetal)\n- Therefore, orbiting electrons should continuously emit electromagnetic radiation\n- This would cause electrons to lose energy and spiral into the nucleus\n- The atom would collapse in about 10^-11 seconds\n- This was a major problem as atoms are clearly stable!\n\n2) After Quantum Mechanics:\n- QM showed electrons exist in discrete energy states\n- Electrons can only transition between these states\n- The problem reversed: Why do excited atoms emit light at all?\n- According to time-independent Schrödinger equation, excited states are stationary\n- There's no obvious mechanism forcing transitions to lower energy states\n\n3) What makes excited atoms emit light:\n- The solution came from Quantum Electrodynamics (QED)\n- Key factor: vacuum fluctuations of electromagnetic field\n- These fluctuations couple to atomic electrons\n- This coupling provides the mechanism for spontaneous emission\n- Process called \"spontaneous emission\" occurs due to:\n  * Interaction with vacuum field\n  * Zero-point energy of electromagnetic field\n  * Quantum uncertainty in field values\n\nThe final answer summarizing what makes excited atoms emit light:\n\n\\[\\boxed{\\text{Vacuum fluctuations of the electromagnetic field couple to atomic electrons, inducing spontaneous emission}}\\]", "final_answers": ["\\text{Vacuum fluctuations of the electromagnetic field couple to atomic electrons, inducing spontaneous emission}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Vacuum fluctuations of the electromagnetic field couple to atomic electrons, inducing spontaneous emission}", "expr2": "\\text{Mechanism to prevent atoms from emitting light was needed, but not found.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Vacuum fluctuations of the electromagnetic field couple to atomic electrons, inducing spontaneous emission}", "expr2": "\\text{Quantum Electrodynamics explains spontaneous emission via photon creation operator.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Vacuum fluctuations of the electromagnetic field couple to atomic electrons, inducing spontaneous emission}", "expr2": "\\text{Interaction with radiation field via single-photon creation operator.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6034", "solution": "Let me solve this step by step.\n\n1) First, let's understand what σ₁·σ₂ means for two neutrons:\n   - For two spin-1/2 particles, σ₁·σ₂ can have eigenvalues +1 (triplet state) or -3 (singlet state)\n\n2) For unpolarized neutrons, we need to average over all possible spin states:\n   - The singlet state has a statistical weight of 1/4\n   - The triplet state has a statistical weight of 3/4\n\n3) For zero-energy scattering (k→0), the scattering cross section for a spherical potential well is:\n   σ = 4πa²\n\n4) Due to the spin-dependent potential, we need to consider two cases:\n   - For singlet state (S=0): V = -3V₀\n   - For triplet state (S=1): V = V₀\n\n5) The total cross section will be the weighted average:\n   σ_total = (1/4)σ_singlet + (3/4)σ_triplet\n   = (1/4)(4πa²) + (3/4)(4πa²)\n   = 4πa²\n\n6) Therefore, the total scattering cross section is independent of V₀ in this case and equals 4πa²\n\nThe final answer is:\n\n\\[ \\boxed{\\sigma_{total} = 4\\pi a^2} \\]\n\nThis result shows that at zero energy, the cross section only depends on the range of the potential (a) and not on its strength (V₀).", "final_answers": ["\\sigma_{total} = 4\\pi a^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\sigma_{total} = 4\\pi a^2", "expr2": "\\sigma_t = 4\\pi a^2 \\left[ \\frac{\\tan(k_0 a)}{k_0 a} - 1 \\right]^2"}, "preprocessed_expressions": {"expr1": "4*a**2*pi", "expr2": "4*pi*(a*k - tan(a*k))**2/k**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/2-2004", "solution": "Let me solve this step by step.\n\n1) First, let's recall what we know about an electron in a spherical cavity:\n   * The electron's wavefunction must vanish at r = R (boundary condition)\n   * The ground state has n = 1 and l = 0 (spherically symmetric s-state)\n   * The wavefunction is of the form ψ(r) = A(sin(kr)/r)\n\n2) For n = 1, l = 0, the boundary condition gives:\n   * sin(kR) = 0\n   * Therefore, kR = π\n   * k = π/R\n\n3) The ground state energy is:\n   * E = (ℏ²k²)/(2m)\n   * E = (ℏ²π²)/(2mR²)\n\n4) The pressure can be found using:\n   * P = -∂E/∂V\n   * where V = (4/3)πR³\n\n5) Calculate ∂E/∂V:\n   * ∂E/∂R = -(ℏ²π²)/(mR³)\n   * ∂V/∂R = 4πR²\n   * ∂E/∂V = (∂E/∂R)/(∂V/∂R)\n   * ∂E/∂V = -(ℏ²π²)/(4πmR⁵)\n\n6) Therefore, the pressure is:\n   * P = (ℏ²π²)/(4πmR⁵)\n\nThe final answer for the pressure is:\n\n\\[ \\boxed{P = \\frac{ℏ^2\\pi^2}{4\\pi mR^5}} \\]\n\nThis shows that the pressure is inversely proportional to the fifth power of the radius, which makes sense as the confinement energy increases rapidly as the cavity gets smaller.", "final_answers": ["P = \\frac{ℏ^2\\pi^2}{4\\pi mR^5}"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{ℏ^2\\pi^2}{4\\pi mR^5}", "expr2": "p = \\frac{\\pi \\hbar^2}{4\\mu R^5}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{ℏ^2\\pi^2}{4\\pi mR^5}\n~~~~~~^"}], "accuracy": 0.0}
{"id": "quantum/2-2003", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have electrons in vacancies of a NaCl crystal\n   * These electrons can be treated as particles in a box with dimensions of the lattice constant\n   * We need to find the wavelength of radiation that can be absorbed\n\n2) Let's recall key information:\n   * NaCl lattice constant a ≈ 5.64 × 10⁻¹⁰ m\n   * Room temperature T ≈ 300 K\n   * The electron transitions will absorb photons with energy equal to the energy difference between levels\n\n3) For a particle in a 3D box, the energy levels are:\n   * E = (h²/8m)(nx²/Lx² + ny²/Ly² + nz²/Lz²)\n   * where h is Planck's constant, m is electron mass, L is length of box\n   * Assuming cubic box, Lx = Ly = Lz = a\n\n4) The minimum energy transition will be from ground state (nx=ny=nz=1) to first excited state (nx=2,ny=1,nz=1):\n   * ΔE = (h²/8m)(3/a² - 3/a²)\n   * ΔE = (h²/8m)(3/a²)\n\n5) Calculate:\n   * h = 6.626 × 10⁻³⁴ J·s\n   * m = 9.109 × 10⁻³¹ kg\n   * a = 5.64 × 10⁻¹⁰ m\n\n6) The wavelength λ is related to energy by:\n   * E = hc/λ\n   * λ = hc/E\n\n7) Plugging in numbers:\n   * ΔE = (6.626 × 10⁻³⁴)²/(8 × 9.109 × 10⁻³¹ × (5.64 × 10⁻¹⁰)²)\n   * λ = (6.626 × 10⁻³⁴ × 3 × 10⁸)/ΔE\n   * λ ≈ 2.3 × 10⁻⁶ m = 2.3 μm\n\nTherefore, the longest wavelength of electromagnetic radiation absorbed strongly by these electrons is approximately 2.3 micrometers.\n\n\\[ \\boxed{2.3 \\times 10^{-6} \\text{ m}} \\]", "final_answers": ["2.3 \\times 10^{-6} \\text{ m}"], "equivalency_results": [{"input_expressions": {"expr1": "2.3 \\times 10^{-6} \\text{ m}", "expr2": "\\lambda = 110 \\, \\text{Å}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "quantum/6005", "solution": "Let me solve this step by step.\n\n(a) For the s-wave phase shift:\n\n1) For an infinitely repulsive potential inside r₀, the wavefunction must vanish at r = r₀.\n   The wavefunction outside r₀ (where V = 0) must be:\n   R(r) = A sin(kr + δ₀)\n   where δ₀ is the s-wave phase shift.\n\n2) At r = r₀, the wavefunction must vanish:\n   R(r₀) = A sin(kr₀ + δ₀) = 0\n\n3) This means:\n   kr₀ + δ₀ = nπ\n   where n is an integer. For the lowest energy solution, n = 0.\n\n4) Therefore:\n   δ₀ = -kr₀\n\n(b) For higher partial waves (l > 0) as k → 0:\n\n1) For higher partial waves, the radial equation contains the centrifugal barrier term:\n   l(l+1)/r²\n\n2) The phase shift δₗ for angular momentum l behaves as:\n   δₗ ∝ k^(2l+1) as k → 0\n\n3) This is known as Wigner's threshold law. It means:\n   - For l = 1 (p-wave): δ₁ ∝ k³\n   - For l = 2 (d-wave): δ₂ ∝ k⁵\n   And so on.\n\n4) This shows that higher partial waves contribute less and less to scattering at low energies.\n\nThe final answer for both parts:\n\n\\[\\boxed{\\begin{align*} \n&(a)\\: \\delta_0 = -kr_0 \\\\\n&(b)\\: \\delta_l \\propto k^{2l+1} \\text{ as } k \\to 0\n\\end{align*}}\\]", "final_answers": ["\\begin{align*} \n&(a)\\: \\delta_0 = -kr_0 \\\\\n&(b)\\: \\delta_l \\propto k^{2l+1} \\text{ as } k \\to 0\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*} \n&(a)\\: \\delta_0 = -kr_0 \\\\\n&(b)\\: \\delta_l \\propto k^{2l+1} \\text{ as } k \\to 0\n\\end{align*}", "expr2": "\\tan \\delta_0 = -k r_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*} \n&(a)\\: \\delta_0 = -kr_0 \\\\\n&(b)\\: \\delta_l \\propto k^{2l+1} \\text{ as } k \\to 0\n\\end{align*}", "expr2": "\\tan \\delta_\\ell \\approx -\\frac{(kr_0)^{2\\ell+1}}{[(2\\ell - 1)!!]^2 (2\\ell + 1)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/23-3", "solution": "Let's solve this step by step.\n\n(a) First, let's solve for transmission and reflection probabilities:\n\n1) In regions |x| > a, the wavefunction has the form:\n   - For x < -a: ψ₁(x) = Ae^{ikx} + Be^{-ikx}\n   - For x > a: ψ₃(x) = Fe^{ikx}\n   where k = √(2mE)/ℏ\n\n2) In region |x| ≤ a:\n   ψ₂(x) = Ce^{qx} + De^{-qx}\n   where q = √(2m(E+V₀))/ℏ\n\n3) Using continuity of ψ and dψ/dx at x = ±a, we get:\n   T = |F/A|² = 1/[1 + (k² - q²)²sin²(2qa)/(4k²q²)]\n   R = |B/A|² = 1 - T\n\n4) By definition, R + T = 1 is satisfied.\n\n(b) For T = 1:\n\n1) This occurs when sin(2qa) = 0\n2) Therefore, 2qa = nπ, where n is an integer\n3) This means perfect transmission happens when the wavelength inside the well matches its width\n4) The Ramsauer effect occurs when electrons tunnel through atoms with 100% transmission probability\n5) This quantum mechanical effect has no classical analog\n\n(c) For the first resonance (n = 1):\n\n1) 2qa = π\n2) q = √(2m(E+V₀))/ℏ\n3) Substituting E = 0.7 eV, a = 0.1 nm:\n4) π = 2a√(2m(E+V₀))/ℏ\n5) Solving for V₀:\n   V₀ = (π²ℏ²)/(8ma²) - E\n   V₀ ≈ 2.3 eV\n\nThe final answer for the depth of the potential well is:\n\n\\[\\boxed{V_0 = 2.3 \\text{ eV}}\\]\n\nThis value represents the depth of the potential well that would produce the observed Ramsauer effect in helium at E = 0.7 eV, assuming an atomic radius of 0.1 nm.", "final_answers": ["V_0 = 2.3 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "V_0 = 2.3 \\text{ eV}", "expr2": "R = \\frac{(k^2 - q^2)^2}{4k^2q^2 + (k^2 - q^2)^2 \\sin^2(2qa)} \\sin^2(2qa), \\quad \nT = \\frac{4k^2q^2}{4k^2q^2 + (k^2 - q^2)^2 \\sin^2(2qa)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_0 = 2.3 \\text{ eV}", "expr2": "E_n = \\frac{n^2 \\pi^2 \\hbar^2}{8ma^2} - V_0, \\quad n \\in \\mathbb{Z}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "V_0 = 2.3 \\text{ eV}", "expr2": "V_0 = 8.7 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/29-4", "solution": "Let's solve this step by step:\n\n1) First, let's recall the unperturbed states of a 2D harmonic oscillator:\n   * Ground state: |0,0⟩ with energy E₀₀ = ℏω\n   * First excited states: |1,0⟩ and |0,1⟩ with energy E₁₀ = E₀₁ = 2ℏω\n   * Second excited states: |2,0⟩, |1,1⟩, |0,2⟩ with energy E₂₀ = E₁₁ = E₀₂ = 3ℏω\n\n2) The perturbing potential δV = bxy couples states that differ by ±1 in both x and y quantum numbers.\n   * Therefore, |0,0⟩ can only transition to |1,1⟩\n\n3) Using time-dependent perturbation theory, the transition amplitude is:\n   a(t) = -i/ℏ ∫₀^t ⟨1,1|bxy|0,0⟩ e^{iω₁₁,₀₀t'} b₀e^{-t'/τ} dt'\n   where ω₁₁,₀₀ = (E₁₁ - E₀₀)/ℏ = 2ω\n\n4) The matrix element ⟨1,1|xy|0,0⟩ can be calculated using harmonic oscillator wavefunctions:\n   ⟨1,1|xy|0,0⟩ = ℏ/(2mω)\n\n5) Therefore:\n   a(t) = -i b₀ℏ/(2mω) ∫₀^t e^{i2ωt'} e^{-t'/τ} dt'\n\n6) Evaluating the integral from 0 to ∞:\n   a(∞) = -i b₀ℏ/(2mω) [1/(1/τ - i2ω)]\n\n7) The probability is |a(∞)|²:\n   P = |a(∞)|² = (b₀ℏ)²/(4m²ω²) × 1/[(1/τ)² + 4ω²]\n\nThis is the probability to find the system in the |1,1⟩ state at t = ∞, and thus the total probability to be in any excited state.\n\n\\[ \\boxed{P = \\frac{b_0^2\\hbar^2}{4m^2\\omega^2[(1/\\tau)^2 + 4\\omega^2]}} \\]", "final_answers": ["P = \\frac{b_0^2\\hbar^2}{4m^2\\omega^2[(1/\\tau)^2 + 4\\omega^2]}"], "equivalency_results": [{"input_expressions": {"expr1": "P = \\frac{b_0^2\\hbar^2}{4m^2\\omega^2[(1/\\tau)^2 + 4\\omega^2]}", "expr2": "\\left|c_{1,1}^{(1)}(\\infty)\\right|^2 = \\frac{b_0^2}{4 m^2 \\omega^2 \\left(4 \\omega^2 + \\tau^{-2}\\right)}"}, "preprocessed_expressions": {"expr1": "b**2*hbar**2*tau**2/(4*m**2*omega**2*(4*omega**2*tau**2 + 1))", "expr2": "b**2*tau**2/(4*m**2*omega**2*(4*omega**2*tau**2 + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/29-3", "solution": "Let's solve this step by step.\n\n(a) First, let's determine possible transitions:\n\n1) In first-order perturbation theory, transitions are determined by matrix elements:\n⟨f|H'|i⟩ = α⟨f|x⁵|10⟩e^{-(t/τ)²}\n\n2) The position operator x can be written in terms of raising and lowering operators:\nx = √(ℏ/2mω)(a† + a)\n\n3) x⁵ will contain terms with products of five (a† + a) operators\n\n4) Each a† increases n by 1, each a decreases n by 1\n\n5) With five operators, we can change n by at most ±5\n\n6) Therefore, from n=10, possible final states are:\nn = 5, 6, 7, 8, 9, 11, 12, 13, 14, 15\n\n\\[\\boxed{n = 5, 6, 7, 8, 9, 11, 12, 13, 14, 15}\\]\n\n(b) For highest energy state (n=15):\n\n1) The transition probability is given by:\nP = |c_f(t)|² where c_f(t) is the transition amplitude\n\n2) For first-order perturbation:\nc_f(t) = -i/ℏ ∫_{-∞}^{∞} ⟨15|H'(t')|10⟩e^{iω_{fi}t'} dt'\n\n3) ω_{fi} = (E_f - E_i)/ℏ = (15-10)ℏω/ℏ = 5ω\n\n4) The matrix element ⟨15|x⁵|10⟩ will contain a factor of (ℏ/2mω)^(5/2)\n\n5) The time integral gives:\n∫_{-∞}^{∞} e^{-(t/τ)²}e^{iω_{fi}t} dt = τ√π e^{-(ω_{fi}τ)²/4}\n\n6) The final probability is:\nP = (α²τ²π/ℏ²)|⟨15|x⁵|10⟩|²e^{-(5ωτ)²/2}\n\n7) The matrix element can be calculated using raising/lowering operators, giving a numerical factor.\n\n\\[\\boxed{P = C\\frac{\\alpha^2\\tau^2\\pi}{\\hbar^2}\\left(\\frac{\\hbar}{2m\\omega}\\right)^5e^{-(5\\omega\\tau)^2/2}}\\]\n\nwhere C is a numerical constant from the matrix element calculation.", "final_answers": ["n = 5, 6, 7, 8, 9, 11, 12, 13, 14, 15", "P = C\\frac{\\alpha^2\\tau^2\\pi}{\\hbar^2}\\left(\\frac{\\hbar}{2m\\omega}\\right)^5e^{-(5\\omega\\tau)^2/2}"], "equivalency_results": [{"input_expressions": {"expr1": "n = 5, 6, 7, 8, 9, 11, 12, 13, 14, 15", "expr2": "\\text{n = [5, 7, 9, 11, 13, 15]}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "n = 5, 6, 7, 8, 9, 11, 12, 13, 14, 15", "expr2": "P_{15} = \\frac{\\pi}{4} \\left(\\frac{15!}{10!}\\right) \\left(\\frac{\\alpha}{\\hbar}\\right)^2 \\left(\\frac{\\hbar}{2 m \\omega}\\right)^5 \\tau^2 e^{-25 \\omega^2 \\tau^2 / 2}"}, "preprocessed_expressions": {"expr1": "5", "expr2": "45045*alpha**2*hbar**3*pi*tau**2/(16*e**(25*omega**2*tau**2/2)*m**5*omega**5)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = C\\frac{\\alpha^2\\tau^2\\pi}{\\hbar^2}\\left(\\frac{\\hbar}{2m\\omega}\\right)^5e^{-(5\\omega\\tau)^2/2}", "expr2": "\\text{n = [5, 7, 9, 11, 13, 15]}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P = C\\frac{\\alpha^2\\tau^2\\pi}{\\hbar^2}\\left(\\frac{\\hbar}{2m\\omega}\\right)^5e^{-(5\\omega\\tau)^2/2}", "expr2": "P_{15} = \\frac{\\pi}{4} \\left(\\frac{15!}{10!}\\right) \\left(\\frac{\\alpha}{\\hbar}\\right)^2 \\left(\\frac{\\hbar}{2 m \\omega}\\right)^5 \\tau^2 e^{-25 \\omega^2 \\tau^2 / 2}"}, "preprocessed_expressions": {"expr1": "C*alpha**2*hbar**3*pi*tau**2/(32*e**(25*omega**2*tau**2/2)*m**5*omega**5)", "expr2": "45045*alpha**2*hbar**3*pi*tau**2/(16*e**(25*omega**2*tau**2/2)*m**5*omega**5)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/27-2", "solution": "Let me solve this step by step.\n\n(a) For the hyperfine splitting:\n\n1) In the ground state 6S₁/₂:\n   * J = 1/2 (total electron angular momentum)\n   * I = 7/2 (nuclear spin)\n\n2) The total angular momentum F can take values:\n   * F = |I - J| to |I + J|\n   * F = |7/2 - 1/2| to |7/2 + 1/2|\n   * F = 3 or 4\n\n3) The energy eigenvalues for hyperfine splitting are:\n   * E(F) = (a/2)[F(F+1) - I(I+1) - J(J+1)]\n\n4) For F = 4:\n   * E(4) = (a/2)[4(5) - (7/2)(9/2) - (1/2)(3/2)]\n   * E(4) = (a/2)[20 - 31.5 - 0.75]\n   * E(4) = (a/2)[−12.25]\n\n5) For F = 3:\n   * E(3) = (a/2)[3(4) - (7/2)(9/2) - (1/2)(3/2)]\n   * E(3) = (a/2)[12 - 31.5 - 0.75]\n   * E(3) = (a/2)[−20.25]\n\n6) The hyperfine splitting is:\n   * ΔE = E(4) - E(3) = (a/2)(−12.25 - (−20.25)) = 4a\n\nThe hyperfine splitting is:\n\\[ \\boxed{\\Delta E = 4a} \\]\n\n(b) For Zeeman splitting in a weak magnetic field:\n\n1) Each F level splits into (2F+1) sublevels, labeled by mF\n   * For F = 4: mF = -4, -3, -2, -1, 0, 1, 2, 3, 4\n   * For F = 3: mF = -3, -2, -1, 0, 1, 2, 3\n\n2) The energy shift is proportional to:\n   * ΔE ∝ gF mF B\n   where gF is the Landé g-factor for the F state\n\n3) The sketch would show:\n   * Two groups of lines diverging from the F=3 and F=4 levels\n   * F=4 splits into 9 equally spaced levels\n   * F=3 splits into 7 equally spaced levels\n   * Linear splitting with B for small fields\n\nThe Zeeman energy levels are:\n\\[ \\boxed{E(F,m_F) = E_F + g_F m_F \\mu_B B} \\]\nwhere E_F is the hyperfine energy level, μB is the Bohr magneton, and B is the magnetic field strength.", "final_answers": ["\\Delta E = 4a", "E(F,m_F) = E_F + g_F m_F \\mu_B B"], "equivalency_results": [{"input_expressions": {"expr1": "\\Delta E = 4a", "expr2": "\\Delta E_{hfs} = 4 \\hbar^2 a"}, "preprocessed_expressions": {"expr1": "4*a", "expr2": "4*a*hbar**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E = 4a", "expr2": "\\left\\langle H_Z \\right\\rangle = -\\gamma m_F B \\frac{F(F+1) + J(J+1) - I(I+1)}{2F(F+1)}"}, "preprocessed_expressions": {"expr1": "4*a", "expr2": "B*gamma*m*(-F(F + 1) + I(I + 1) - J(J + 1))/(2*F(F + 1))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E = 4a", "expr2": "\\langle H_Z \\rangle_{3,4} = \\pm \\frac{1}{8} \\gamma m_F B"}, "preprocessed_expressions": {"expr1": "4*a", "expr2": "B*gamma*m*pm/8"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(F,m_F) = E_F + g_F m_F \\mu_B B", "expr2": "\\Delta E_{hfs} = 4 \\hbar^2 a"}, "preprocessed_expressions": {"expr1": "B*g*m*mu + E", "expr2": "4*a*hbar**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(F,m_F) = E_F + g_F m_F \\mu_B B", "expr2": "\\left\\langle H_Z \\right\\rangle = -\\gamma m_F B \\frac{F(F+1) + J(J+1) - I(I+1)}{2F(F+1)}"}, "preprocessed_expressions": {"expr1": "B*g*m*mu + E", "expr2": "B*gamma*m*(-F(F + 1) + I(I + 1) - J(J + 1))/(2*F(F + 1))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E(F,m_F) = E_F + g_F m_F \\mu_B B", "expr2": "\\langle H_Z \\rangle_{3,4} = \\pm \\frac{1}{8} \\gamma m_F B"}, "preprocessed_expressions": {"expr1": "B*g*m*mu + E", "expr2": "B*gamma*m*pm/8"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/27-5", "solution": "Let me solve this step by step.\n\n(a) For the \"zeroth\" order approximation:\n\n1) The Coulomb potential between electron and positron is:\n   V(r) = -e²/r (same as hydrogen)\n\n2) The key difference is the reduced mass:\n   * For hydrogen: μ_H = (m_e × m_p)/(m_e + m_p) ≈ m_e (since m_p >> m_e)\n   * For positronium: μ_Ps = (m_e × m_e)/(m_e + m_e) = m_e/2\n\n3) The energy levels for hydrogen are:\n   E_n(H) = -13.6 eV/n²\n\n4) Since energy levels scale with reduced mass, for positronium:\n   E_n(Ps) = (μ_Ps/μ_H) × E_n(H) = (1/2) × E_n(H)\n\n(b) For spin effects:\n\n1) Without external field:\n* Total spin can be S = 0 (singlet) or S = 1 (triplet)\n* The interaction -A𝜇_p·𝜇_e splits these levels\n* Singlet state (S = 0) has higher energy\n* Triplet state (S = 1) has lower energy, three-fold degenerate\n\n2) With external magnetic field B:\n* Zeeman effect splits the triplet state into three levels (m_s = -1, 0, +1)\n* Energy splitting is proportional to μB\n* Singlet state remains unchanged (m_s = 0)\n\nThe final energy will be:\nE = E_n(Ps) + E_spin-spin + E_Zeeman\n\n\\[\\boxed{E_n(Ps) = -6.8\\text{ eV}/n^2 + E_{ss} + g\\mu_B B m_s}\\]\n\nwhere E_ss is the spin-spin interaction energy and the last term is the Zeeman splitting.", "final_answers": ["E_n(Ps) = -6.8\\text{ eV}/n^2 + E_{ss} + g\\mu_B B m_s"], "equivalency_results": [{"input_expressions": {"expr1": "E_n(Ps) = -6.8\\text{ eV}/n^2 + E_{ss} + g\\mu_B B m_s", "expr2": "E_n = - \\frac{1}{4n^2} \\alpha^2 m_e c^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/25-1", "solution": "Let's solve this step by step.\n\n(a) First, let's prove that these commutators are equal.\n\n1) Using the fundamental commutation relations:\n   [Jᵢ,Jⱼ] = iℏεᵢⱼₖJₖ\n\n2) For [Jx²,Jy²], we can use the expansion:\n   [A²,B²] = A²B² - B²A² = A(AB²)-(BA²)B\n   = A[A,B²] + [A,B²]B\n\n3) [A,B²] = [A,B]B + B[A,B]\n\n4) Applying this to [Jx²,Jy²]:\n   [Jx,Jy²] = iℏJz(Jy) + iℏ(Jy)Jz\n   \n5) Therefore, [Jx²,Jy²] = iℏ(JxJzJy + JyJzJx - JzJyJx - JxJyJz)\n\n6) Similar expressions can be derived for [Jy²,Jz²] and [Jz²,Jx²]\n\n7) Due to cyclic symmetry of angular momentum operators, these expressions are equal.\n\n(b) For j = 0:\n- All angular momentum operators give zero\n- Therefore, commutators vanish trivially\n\nFor j = 1/2:\n- In the j = 1/2 representation, Jᵢ² = (ℏ²/4)I\n- Since they're all proportional to identity, they commute\n\n(c) For j = 1:\n\n1) In the j = 1 basis, each Jᵢ² has eigenvalues ℏ²\n\n2) The eigenstates of Jz² are |1,1⟩, |1,0⟩, |1,-1⟩\n\n3) The eigenstates of Jx² and Jy² can be found by rotation\n\n4) Common eigenbasis for j = 1:\n   |1,1⟩ = (1/√2)(|1,1⟩ᵤ + |1,-1⟩ᵤ)\n   |1,0⟩ = |1,0⟩ᵤ\n   |1,-1⟩ = (1/√2)(|1,1⟩ᵤ - |1,-1⟩ᵤ)\n\nwhere subscript u denotes unrotated basis.\n\nThe final answer for the common eigenbasis in j = 1 case is:\n\n\\[\\boxed{|ψ⟩ = \\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}}\\]", "final_answers": ["|ψ⟩ = \\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}"], "equivalency_results": [{"input_expressions": {"expr1": "|ψ⟩ = \\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}", "expr2": "\\left[J_x^2, J_y^2\\right] = \\left[J_y^2, J_z^2\\right] = \\left[J_z^2, J_x^2\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "|ψ⟩ = \\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}", "expr2": "\\left[J_x^2, J_y^2\\right] = \\left[J_y^2, J_z^2\\right] = \\left[J_z^2, J_x^2\\right] = 0 \\text{ for states where } j = 0 \\text{ or } j = 1/2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "|ψ⟩ = \\begin{pmatrix} \\frac{1}{\\sqrt{2}}(|1,1⟩ + |1,-1⟩) \\\\ |1,0⟩ \\\\ \\frac{1}{\\sqrt{2}}(|1,1⟩ - |1,-1⟩) \\end{pmatrix}", "expr2": "\\text{Eigenbasis: } |1, 0 \\rangle \\quad \\text{and} \\quad \\frac{1}{\\sqrt{2}} (|1, 1 \\rangle \\pm |1, -1 \\rangle)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/25-6", "solution": "Let me solve this step by step.\n\n1) First, let's consider the rectilinear basis:\n\n- The 3D harmonic oscillator can be separated into three independent 1D oscillators\n- For each dimension, the energy is given by: E_i = ℏω(n_i + 1/2), where i = x, y, z\n- The total energy is the sum of the three components\n\nTherefore, in the rectilinear basis:\nE = ℏω(n_x + 1/2) + ℏω(n_y + 1/2) + ℏω(n_z + 1/2)\nE = ℏω(n_x + n_y + n_z + 3/2)\n\n2) For the spherical basis:\n\n- We define k = n_x + n_y + n_z (the total quantum number)\n- The angular momentum quantum number ℓ can take values: ℓ = k, k-2, k-4, ..., 1 or 0\n- For each ℓ, m can take values: m = -ℓ, -ℓ+1, ..., 0, ..., ℓ-1, ℓ\n- The energy only depends on k: E = ℏω(k + 3/2)\n\n3) The degeneracy in the spherical basis:\n- For each k, the degeneracy is (k+1)(k+2)/2\n- This matches the degeneracy in the rectilinear basis for each energy level\n\n4) Therefore, the energy spectrum in both bases is:\nE = ℏω(N + 3/2), where N = k = n_x + n_y + n_z\n\nThe final answer, showing both representations:\n\n\\[ \\boxed{E = \\hbar\\omega(N + \\frac{3}{2}) = \\hbar\\omega(n_x + n_y + n_z + \\frac{3}{2}) = \\hbar\\omega(k + \\frac{3}{2})} \\]\n\nwhere N is the principal quantum number in either basis, and the quantum numbers must be non-negative integers.", "final_answers": ["E = \\hbar\\omega(N + \\frac{3}{2}) = \\hbar\\omega(n_x + n_y + n_z + \\frac{3}{2}) = \\hbar\\omega(k + \\frac{3}{2})"], "equivalency_results": [{"input_expressions": {"expr1": "E = \\hbar\\omega(N + \\frac{3}{2}) = \\hbar\\omega(n_x + n_y + n_z + \\frac{3}{2}) = \\hbar\\omega(k + \\frac{3}{2})", "expr2": "E(n_x, n_y, n_z) = \\hbar \\omega \\left( n_x + n_y + n_z + \\frac{3}{2} \\right)"}, "preprocessed_expressions": {"expr1": "hbar*omega(k + 3/2)", "expr2": "hbar*omega(3*n + 3/2)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/29-2", "solution": "Let's solve this step by step.\n\n(a) First, let's find the dimensionless parameter:\n\n1) Looking at the rate equations, the key term is $\\frac{qE\\gamma_{12}}{\\hbar}$\n2) With a delta function field $E(t) = \\alpha\\delta(t-t_0)$, integrating over time gives us $\\alpha$\n3) Therefore, the dimensionless parameter is $\\frac{q\\alpha\\gamma_{12}}{\\hbar}$\n\n(b) For the probability calculation:\n\n1) Initially, $c_1(0) = 1$ and $c_2(0) = 0$\n2) Integrating the rate equation for $c_2$ over the delta function:\n   $c_2(t>t_0) = -\\frac{i}{\\hbar}q\\alpha\\gamma_{12}e^{i\\omega_0t_0}c_1(t_0)$\n3) The probability is $|c_2|^2 = (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2$\n\n(c) For the dipole moment:\n\n1) The dipole moment operator is $\\hat{d} = -er$\n2) $\\langle\\psi|\\hat{d}|\\psi\\rangle = -e(c_1^*c_2\\gamma_{12}e^{-i\\omega_0t} + c_2^*c_1\\gamma_{12}e^{i\\omega_0t})$\n3) Substituting $c_2$ from part (b):\n   $\\langle\\hat{d}\\rangle = -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))$\n\n(d) For N particles:\n\n1) Each particle adds amplitude $-\\frac{i}{\\hbar}q\\alpha\\gamma_{12}e^{i\\omega_0t_j}$\n2) With $\\omega_0\\tau \\ll 1$, the phases are nearly equal\n3) The amplitudes add coherently\n4) Total amplitude is N times single particle amplitude\n5) Probability is $N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2$\n\nFinal answers:\n\n\\[\\boxed{\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}}\\]\n\\[\\boxed{\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2}\\]\n\\[\\boxed{\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))}\\]\n\\[\\boxed{\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2}\\]", "final_answers": ["\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}", "\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))", "\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}", "expr2": "\\frac{|q \\gamma_{12} \\alpha|}{\\hbar}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}", "expr2": "P_2 = \\left(\\frac{q r_{12} \\alpha}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}", "expr2": "\\langle r \\rangle = -\\frac{2 \\alpha q r_{12}^2}{\\hbar} \\sin\\left[\\omega_0 (t - t_1)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(a) } \\frac{q\\alpha\\gamma_{12}}{\\hbar}", "expr2": "P_2(N \\tau) \\approx \\left(\\frac{N \\alpha q r_{12}}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "\\frac{|q \\gamma_{12} \\alpha|}{\\hbar}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "P_2 = \\left(\\frac{q r_{12} \\alpha}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "\\langle r \\rangle = -\\frac{2 \\alpha q r_{12}^2}{\\hbar} \\sin\\left[\\omega_0 (t - t_1)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) } (\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "P_2(N \\tau) \\approx \\left(\\frac{N \\alpha q r_{12}}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))", "expr2": "\\frac{|q \\gamma_{12} \\alpha|}{\\hbar}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))", "expr2": "P_2 = \\left(\\frac{q r_{12} \\alpha}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))", "expr2": "\\langle r \\rangle = -\\frac{2 \\alpha q r_{12}^2}{\\hbar} \\sin\\left[\\omega_0 (t - t_1)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } -2e\\gamma_{12}(\\frac{q\\alpha\\gamma_{12}}{\\hbar})\\sin(\\omega_0(t-t_0))", "expr2": "P_2(N \\tau) \\approx \\left(\\frac{N \\alpha q r_{12}}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "\\frac{|q \\gamma_{12} \\alpha|}{\\hbar}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "P_2 = \\left(\\frac{q r_{12} \\alpha}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "\\langle r \\rangle = -\\frac{2 \\alpha q r_{12}^2}{\\hbar} \\sin\\left[\\omega_0 (t - t_1)\\right]"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) } N^2(\\frac{q\\alpha\\gamma_{12}}{\\hbar})^2", "expr2": "P_2(N \\tau) \\approx \\left(\\frac{N \\alpha q r_{12}}{\\hbar}\\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/29-5", "solution": "Let's solve this step by step.\n\n(a) First, let's write the Hamiltonian:\n\n1) The harmonic oscillator part is: $\\frac{p^2}{2m} + \\frac{1}{2}m\\omega^2x^2$\n2) The electric field contribution is: $-qx\\mathcal{E}(t)$ for t ≥ 0\n3) Total Hamiltonian:\n\n\\[ H = \\frac{p^2}{2m} + \\frac{1}{2}m\\omega^2x^2 - qx\\mathcal{E}(t)\\Theta(t) \\]\n\nwhere Θ(t) is the Heaviside step function.\n\n(b) For the eigenvalue problem:\n\n1) For t < 0, we have the standard harmonic oscillator eigenstates:\n   $\\psi_n(x) = \\frac{1}{\\sqrt{2^n n!}}\\left(\\frac{m\\omega}{\\pi\\hbar}\\right)^{1/4}e^{-\\frac{m\\omega x^2}{2\\hbar}}H_n\\left(\\sqrt{\\frac{m\\omega}{\\hbar}}x\\right)$\n   with energies $E_n = \\hbar\\omega(n + \\frac{1}{2})$\n\n2) For t > 0, the Hamiltonian can be rewritten as:\n   $H = \\frac{p^2}{2m} + \\frac{1}{2}m\\omega^2(x - \\frac{q\\mathcal{E}(t)}{m\\omega^2})^2 - \\frac{q^2\\mathcal{E}^2(t)}{2m\\omega^2}$\n\n3) This is just a displaced harmonic oscillator. The eigenstates are:\n   $\\psi_n(x,t) = \\psi_n(x - \\frac{q\\mathcal{E}(t)}{m\\omega^2})$\n   with energies $E_n(t) = \\hbar\\omega(n + \\frac{1}{2}) - \\frac{q^2\\mathcal{E}^2(t)}{2m\\omega^2}$\n\n(c) For the transition probability:\n\n1) The time evolution operator can be written using the Zassenhaus formula\n2) The key commutators are between x and p\n3) After careful calculation, the probability of excitation is:\n\n\\[ P_{exc} = 1 - e^{-\\lambda^2} \\]\n\nwhere $\\lambda = \\frac{q\\mathcal{E}}{m\\omega^2}\\sqrt{\\frac{m\\omega}{2\\hbar}}$\n\n(d) Using time-dependent perturbation theory:\n\n1) First-order correction:\n   $c_n(t) = \\frac{i}{\\hbar}\\int_0^t dt' \\langle n|qx\\mathcal{E}(t')|0\\rangle e^{i\\omega_{n0}t'}$\n\n2) For $\\mathcal{E}(t) = \\mathcal{E}_0 e^{-t/\\tau}$:\n   The transition probability to the first excited state is:\n\n\\[ P_{1←0}(t) = \\frac{q^2\\mathcal{E}_0^2\\hbar}{2m\\omega^3}\\frac{1}{1 + \\omega^2\\tau^2}(1 - e^{-t/\\tau})^2 \\]\n\nThe final answer for the excitation probability in the sudden limit is:\n\n\\[ \\boxed{P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}}} \\]", "final_answers": ["P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}"], "equivalency_results": [{"input_expressions": {"expr1": "P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}", "expr2": "H = \\frac{p^2}{2m} + \\frac{1}{2}m\\omega^2x^2 - q\\mathcal{E}x\\theta(t)"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "(m*x*(-2*E*mathcal*q*theta(t) + m*omega**2*x) + p**2)/(2*m)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}", "expr2": "H' = e^{-i\\xi p / \\hbar} H e^{i\\xi p / \\hbar} - \\frac{1}{2}m\\omega^2\\xi^2"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "H - m*omega**2*xi**2/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}", "expr2": "P_e = 1 - \\exp\\left(-\\frac{q^2 \\mathcal{E}^2}{2m\\omega^3\\hbar}\\right)"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "1 - exp(-E**2*mathcal*q**2/(2*hbar*m*omega**3))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}", "expr2": "P_e = \\frac{\\pi q^2}{m\\omega\\hbar} |\\mathcal{E}(\\omega)|^2"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "pi*q**2*Abs(E*mathcal*omega)**2/(hbar*m*omega)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P_{exc} = 1 - e^{-\\frac{q^2\\mathcal{E}_0^2}{2m\\omega^3\\hbar}", "expr2": "P_e = \\frac{q^2 \\mathcal{E}_0^2}{2m\\omega^3\\hbar} \\cdot \\frac{1}{1 + (\\omega\\tau)^{-2}}"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "E**2*mathcal*q**2*tau**2/(2*hbar*m*omega*(omega**2*tau**2 + 1))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/23-2", "solution": "Let's solve this step by step.\n\n1) First, let's identify the regions and wave functions:\n   * Region 1 (x < 0): V = V₁ = 0\n   * Region 2 (0 < x < a): V = V₂\n   * Region 3 (x > a): V = V₃\n\n2) The wave functions in each region:\n   * ψ₁ = A₁e^(ik₁x) + B₁e^(-ik₁x)\n   * ψ₂ = A₂e^(ik₂x) + B₂e^(-ik₂x)\n   * ψ₃ = A₃e^(ik₃x) + B₃e^(-ik₃x)\n\n   where k₁ = √(2mE/ℏ²)\n         k₂ = √(2m(E-V₂)/ℏ²)\n         k₃ = √(2m(E-V₃)/ℏ²)\n\n3) Boundary conditions at x = 0:\n   * ψ₁(0) = ψ₂(0)\n   * ψ₁'(0) = ψ₂'(0)\n\n4) Boundary conditions at x = a:\n   * ψ₂(a) = ψ₃(a)\n   * ψ₂'(a) = ψ₃'(a)\n\n5) For leftward scattering only, we set A₃ = 0 (no incoming wave from the right)\n\n6) After applying boundary conditions and solving the system of equations:\n\nThe transmission coefficient T is:\n\nT = |t|² = |1/M₁₁|²\n\nwhere M₁₁ is the (1,1) element of the transfer matrix:\n\nM₁₁ = cos(k₂a)cos(k₃a) - (k₂²+k₃²)/(2k₂k₃)sin(k₂a)sin(k₃a) + i[(k₁/k₂)sin(k₂a)cos(k₃a) + (k₃/k₂)cos(k₂a)sin(k₃a)]\n\nTherefore, the transmission coefficient is:\n\n\\[ \\boxed{T = \\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}} \\]\n\nThis represents the probability that a particle incident from the left will transmit through both potential steps.", "final_answers": ["T = \\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}"], "equivalency_results": [{"input_expressions": {"expr1": "T = \\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}", "expr2": "S = \\frac{1}{M_{22}} \\begin{pmatrix} -M_{21} & 1 \\\\ \\text{det } M & M_{12} \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = \\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}", "expr2": "\\text{det } M = \\frac{k_1}{k_3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = \\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}", "expr2": "T_l = \\frac{4 k_1^2 k_2^2}{\\left(k_1 + k_3\\right)^2 k_2^2 \\cos^2\\left(k_2 a\\right) + \\left(k_1 k_3 + k_2^2\\right)^2 \\sin^2\\left(k_2 a\\right)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n\\frac{4k₁²k₃²}{4k₁²k₃² + (k₁²+k₃²)²\\sin²(k₂a)}\n~~~~~~~~^"}], "accuracy": 0.0}
{"id": "Quantum Mechanics/27-4", "solution": "Let's solve this step by step.\n\n(a) First, let's analyze the single-particle case:\n\n1) The Hamiltonian has three terms:\n   - Kinetic energy: $\\frac{1}{2m}p^2$\n   - Harmonic potential: $\\frac{1}{2}m\\omega^2x^2$\n   - Spin-position coupling: $\\lambda x \\sigma_x$\n\n2) The first two terms give us the standard harmonic oscillator with energies $E_n = \\hbar\\omega(n + \\frac{1}{2})$\n\n3) The third term couples position and spin. Due to this coupling, the energy eigenvalues are:\n   $E_n = \\hbar\\omega(n + \\frac{1}{2}) \\pm \\frac{\\lambda^2}{2m\\omega^2}$\n\n4) The ground state corresponds to n = 0:\n   $E_0 = \\frac{\\hbar\\omega}{2} - \\frac{\\lambda^2}{2m\\omega^2}$\n\n5) For two non-interacting fermions:\n   - They must occupy different states due to Pauli exclusion\n   - The lowest energy state will have one particle in the ground state and one in the first excited state\n   - Therefore: $E_{ground,2} = (\\frac{\\hbar\\omega}{2} - \\frac{\\lambda^2}{2m\\omega^2}) + (\\frac{3\\hbar\\omega}{2} - \\frac{\\lambda^2}{2m\\omega^2})$\n   $= 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}$\n\n(b) For the perturbation $\\Delta H = \\epsilon \\sigma_x$:\n\n1) The first-order correction is:\n   $\\Delta E^{(1)} = \\langle \\psi_0 | \\epsilon \\sigma_x | \\psi_0 \\rangle$\n\n2) The ground state wavefunction to lowest order is:\n   $\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$\n\n3) The first-order energy correction is:\n   $\\Delta E^{(1)} = \\epsilon$\n\nThe final answer for the two-part problem is:\n\n\\[\\boxed{E_{ground,2} = 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}, \\Delta E^{(1)} = \\epsilon}\\]\n\nThe ground state wavefunction that gives this correction is:\n\\[\\boxed{\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}}\\]", "final_answers": ["E_{ground,2} = 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}, \\Delta E^{(1)} = \\epsilon", "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{ground,2} = 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}, \\Delta E^{(1)} = \\epsilon", "expr2": "E_n = \\left(n + \\frac{1}{2}\\right)\\hbar \\omega - \\frac{\\lambda^2}{2m\\omega^2}"}, "preprocessed_expressions": {"expr1": "epsilon", "expr2": "hbar*n*omega + hbar*omega/2 - lambda**2/(2*m*omega**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{ground,2} = 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}, \\Delta E^{(1)} = \\epsilon", "expr2": "\\psi_0(x_{\\pm}) = \\left( \\frac{m \\omega}{\\pi \\hbar} \\right)^{1/4} e^{- \\frac{m \\omega}{2 \\hbar}(x \\pm \\frac{\\lambda}{m\\omega^2})^2}"}, "preprocessed_expressions": {"expr1": "epsilon", "expr2": "(m*omega/(hbar*pi))**(1/4)/e**(lambda**2*pm**2*x**2/(2*hbar*m*omega**3))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{ground,2} = 2\\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}, \\Delta E^{(1)} = \\epsilon", "expr2": "E_{\\text{two-particle}} = 2 \\cdot \\frac{1}{2}\\hbar \\omega - \\frac{2\\lambda^2}{2m\\omega^2} + \\hbar\\omega = \\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}", "expr2": "E_n = \\left(n + \\frac{1}{2}\\right)\\hbar \\omega - \\frac{\\lambda^2}{2m\\omega^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n(\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}", "expr2": "\\psi_0(x_{\\pm}) = \\left( \\frac{m \\omega}{\\pi \\hbar} \\right)^{1/4} e^{- \\frac{m \\omega}{2 \\hbar}(x \\pm \\frac{\\lambda}{m\\omega^2})^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n(\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}", "expr2": "E_{\\text{two-particle}} = 2 \\cdot \\frac{1}{2}\\hbar \\omega - \\frac{2\\lambda^2}{2m\\omega^2} + \\hbar\\omega = \\hbar\\omega - \\frac{\\lambda^2}{m\\omega^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}", "expr2": "\\Delta E = \\epsilon e^{-\\lambda^2 / m \\hbar \\omega^3}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n(\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}, {"input_expressions": {"expr1": "\\psi_0(x) = (\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}", "expr2": "\\psi = \\frac{1}{\\sqrt{2}} \\left( \\psi_0(x_+)|+\\rangle - \\psi_0(x_-)|-\\rangle \\right)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n(\\frac{m\\omega}{\\pi\\hbar})^{1/4} e^{-\\frac{m\\omega x^2}{2\\hbar}} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^"}], "accuracy": 0.5}
{"id": "Quantum Mechanics/27-3", "solution": "Let's solve this step by step.\n\n1) First, let's identify the unperturbed states with energy 2ℏω:\n   * For a 2D harmonic oscillator, E = ℏω(nx + ny + 1)\n   * For E = 2ℏω, we have nx + ny = 1\n   * This gives us two states: |1,0⟩ and |0,1⟩\n\n2) Let's express H' = Kxy in terms of raising/lowering operators:\n   * x = √(ℏ/2mω)(ax† + ax)\n   * y = √(ℏ/2mω)(ay† + ay)\n   * Therefore, H' = K(ℏ/2mω)(ax† + ax)(ay† + ay)\n\n3) First order energy correction:\n   * E₁ = ⟨ψ|H'|ψ⟩\n   * For both |1,0⟩ and |0,1⟩, due to parity considerations:\n   * ⟨1,0|xy|1,0⟩ = 0\n   * ⟨0,1|xy|0,1⟩ = 0\n   * Therefore, E₁ = 0\n\n4) First order wavefunction correction:\n   * |ψ₁⟩ = Σ' (⟨n|H'|ψ₀⟩/(E₀-En))|n⟩\n   * The states that can couple through xy are |0,0⟩ and |1,1⟩\n   * For |1,0⟩:\n   |ψ₁⟩ = K(ℏ/2mω)[(⟨0,0|xy|1,0⟩/-ℏω)|0,0⟩ + (⟨1,1|xy|1,0⟩/ℏω)|1,1⟩]\n\n5) Second order energy correction:\n   * E₂ = Σ' |⟨n|H'|ψ₀⟩|²/(E₀-En)\n   * For |1,0⟩ or |0,1⟩:\n   * E₂ = K²(ℏ/2mω)²[|⟨0,0|xy|1,0⟩|²/-ℏω + |⟨1,1|xy|1,0⟩|²/ℏω]\n   * After calculation:\n   * E₂ = -K²/2mω²\n\nThe final answer for the energy corrections is:\n\n\\[\\boxed{E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}}\\]", "final_answers": ["E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}"], "equivalency_results": [{"input_expressions": {"expr1": "E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}", "expr2": "E_{\\pm} = (2 \\pm \\epsilon) \\hbar \\omega"}, "preprocessed_expressions": {"expr1": "-K**2/(2*m*omega**2)", "expr2": "2*epsilon*hbar*omega*pm"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}", "expr2": "|\\pm \\rangle = |\\pm \\rangle^{(0)} - \\epsilon(|12\\rangle \\mp |21\\rangle)"}, "preprocessed_expressions": {"expr1": "-K**2/(2*m*omega**2)", "expr2": "1 - epsilon(mp*|12>*|21>)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}", "expr2": "E^{(2)} = -2 \\epsilon^2 \\hbar \\omega"}, "preprocessed_expressions": {"expr1": "-K**2/(2*m*omega**2)", "expr2": "-2*epsilon**2*hbar*omega"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_1 = 0, \\quad E_2 = -\\frac{K^2}{2m\\omega^2}", "expr2": "E_{\\pm} = (2 \\pm \\epsilon - 2\\epsilon^2) \\hbar \\omega"}, "preprocessed_expressions": {"expr1": "-K**2/(2*m*omega**2)", "expr2": "2*epsilon*hbar*omega*(-epsilon + pm)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/24-2", "solution": "Let's solve this step by step.\n\n1) First, let's understand the setup:\n   * We have a two-state system with electron neutrino (νe) and muon neutrino (νμ)\n   * The electron neutrino is a symmetric superposition of mass states\n   * νe = (|m₁⟩ + |m₂⟩)/√2 at t=0\n\n2) The time evolution of mass eigenstates:\n   * |m₁(t)⟩ = |m₁(0)⟩e^(-iE₁t/ħ)\n   * |m₂(t)⟩ = |m₂(0)⟩e^(-iE₂t/ħ)\n   * Where E₁ = √(p² + m₁²c⁴) and E₂ = √(p² + m₂²c⁴)\n\n3) For relativistic neutrinos:\n   * E₁ ≈ pc + m₁²c⁴/(2p)\n   * E₂ ≈ pc + m₂²c⁴/(2p)\n   * ΔE = E₂ - E₁ = Δm²c⁴/(2p)\n   * Where Δm² = m₂² - m₁²\n\n4) For part (a):\n   * |νe(t)⟩ = (e^(-iE₁t/ħ)|m₁⟩ + e^(-iE₂t/ħ)|m₂⟩)/√2\n   * P(νe→νe) = |⟨νe|νe(t)⟩|² = cos²(ΔEt/(2ħ))\n   * P(νe→νe) = 1 - sin²(Δm²c⁴t/(4Eħ))\n\n5) For part (b):\n   * Complete conversion occurs when P(νe→νe) = 0\n   * This happens when Δm²c⁴t/(4Eħ) = π/2\n   * t = πEħ/(Δm²c⁴)\n\n6) For part (c):\n   * The probability of measuring m₁ is constant in time\n   * Since νe is an equal superposition, P(m₁) = 1/2\n\nThe final answers are:\n\n(a) \\[\\boxed{P(νe→νe) = 1 - \\sin^2(\\frac{\\Delta m^2c^4t}{4E\\hbar})}\\]\n\n(b) \\[\\boxed{t = \\frac{\\pi E\\hbar}{\\Delta m^2c^4}}\\]\n\n(c) \\[\\boxed{P(m_1) = \\frac{1}{2}}\\]", "final_answers": ["P(νe→νe) = 1 - \\sin^2(\\frac{\\Delta m^2c^4t}{4E\\hbar})", "t = \\frac{\\pi E\\hbar}{\\Delta m^2c^4}", "P(m_1) = \\frac{1}{2}"], "equivalency_results": [{"input_expressions": {"expr1": "P(νe→νe) = 1 - \\sin^2(\\frac{\\Delta m^2c^4t}{4E\\hbar})", "expr2": "P_e(t) = \\cos^2\\left[\\frac{(m_2 - m_1)c^2t}{2\\hbar}\\right]"}, "preprocessed_expressions": {"expr1": "cos(Delta*c**4*m**2*t/(4*E*hbar))**2", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(νe→νe) = 1 - \\sin^2(\\frac{\\Delta m^2c^4t}{4E\\hbar})", "expr2": "t = \\frac{\\pi\\hbar}{(m_2 - m_1)c^2}"}, "preprocessed_expressions": {"expr1": "cos(Delta*c**4*m**2*t/(4*E*hbar))**2", "expr2": "zoo*hbar*pi"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(νe→νe) = 1 - \\sin^2(\\frac{\\Delta m^2c^4t}{4E\\hbar})", "expr2": "P_1(t) = \\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "cos(Delta*c**4*m**2*t/(4*E*hbar))**2", "expr2": "1/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "t = \\frac{\\pi E\\hbar}{\\Delta m^2c^4}", "expr2": "P_e(t) = \\cos^2\\left[\\frac{(m_2 - m_1)c^2t}{2\\hbar}\\right]"}, "preprocessed_expressions": {"expr1": "E*hbar*pi/(Delta*c**4*m**2)", "expr2": "1"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "t = \\frac{\\pi E\\hbar}{\\Delta m^2c^4}", "expr2": "t = \\frac{\\pi\\hbar}{(m_2 - m_1)c^2}"}, "preprocessed_expressions": {"expr1": "E*hbar*pi/(Delta*c**4*m**2)", "expr2": "zoo*hbar*pi"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "t = \\frac{\\pi E\\hbar}{\\Delta m^2c^4}", "expr2": "P_1(t) = \\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "E*hbar*pi/(Delta*c**4*m**2)", "expr2": "1/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(m_1) = \\frac{1}{2}", "expr2": "P_e(t) = \\cos^2\\left[\\frac{(m_2 - m_1)c^2t}{2\\hbar}\\right]"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "1"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(m_1) = \\frac{1}{2}", "expr2": "t = \\frac{\\pi\\hbar}{(m_2 - m_1)c^2}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "zoo*hbar*pi"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P(m_1) = \\frac{1}{2}", "expr2": "P_1(t) = \\frac{1}{2}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "1/2"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 0.3333333333333333}
{"id": "Quantum Mechanics/26-1", "solution": "Let me solve this step by step.\n\n(a) Central Field Approximation:\n1. This approximation assumes that each electron moves independently in a spherically symmetric potential created by the nucleus and the average effect of all other electrons.\n2. The quantum numbers arise from solving the Schrödinger equation in this potential:\n   - n (principal quantum number): determines the energy level/shell\n   - ℓ (orbital angular momentum): determines subshell (0≤ℓ≤n-1)\n   - mℓ (magnetic quantum number): orbital angular momentum projection (-ℓ≤mℓ≤ℓ)\n   - ms (spin projection): intrinsic angular momentum (±1/2)\n\n(b) Periodic Table explanation:\n1. First period: 2 elements (n=1)\n2. Second period: 8 elements (n=2)\n3. Third period: 8 elements (n=3)\n4. Fourth period: 18 elements (n=4)\n\nElectrons fill states according to:\n1. Aufbau principle: lowest energy states fill first\n2. Lower ℓ states have lower energy due to penetration effects\n3. States with lower ℓ penetrate closer to nucleus, experiencing stronger binding\n\n(c) LS (Russell-Saunders) Coupling:\n1. Total orbital angular momentum L = Σℓᵢ\n2. Total spin angular momentum S = Σsᵢ\n3. Total angular momentum J = L + S\n\nFor Carbon (Z=6):\n1. Electron configuration: 1s²2s²2p²\n\n2. Possible terms:\n- For 2p² configuration:\n- Allowed terms: ¹S, ¹D, ³P\n- Ground state is ³P (Hund's rules)\n\nFinal answer in spectroscopic notation:\n\\[\\boxed{\\text{Ground state of Carbon: }^3\\text{P}_0}\\]\n\nThe ground state is ³P₀ because:\n1. Highest S (triplet)\n2. Highest L possible with highest S\n3. Lowest J for less than half-filled shell", "final_answers": ["\\text{Ground state of Carbon: }^3\\text{P}_0"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Ground state of Carbon: }^3\\text{P}_0", "expr2": "\\text{The relevant quantum numbers are } n, \\ell, m_\\ell \\text{, and } m_s."}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state of Carbon: }^3\\text{P}_0", "expr2": "\\text{Electrons first fill states with lower }\\ell \\text{ values due to their lower mean radius and energy.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state of Carbon: }^3\\text{P}_0", "expr2": "(1s)^2(2s)^2(2p)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/24-3", "solution": "Let's solve this step by step.\n\n(a) For the raising operator $a_+$:\n1) If $a_+|\\psi⟩ = \\lambda|\\psi⟩$, then $⟨\\psi|a_-a_+|\\psi⟩ = |\\lambda|^2⟨\\psi|\\psi⟩$\n2) But $a_-a_+ = N + 1$ where N is number operator\n3) Therefore $⟨\\psi|(N+1)|\\psi⟩ = |\\lambda|^2⟨\\psi|\\psi⟩$\n4) This implies $⟨N⟩ + 1 = |\\lambda|^2$\n5) But $⟨N⟩$ must be non-negative for normalizable states\n6) This leads to a contradiction as $|\\lambda|^2$ would have to be greater than 1\n7) For lowering operator, no such contradiction exists\n\n(b) For coherent states:\n1) $⟨x⟩ = \\sqrt{\\frac{\\hbar}{2mω}}(α + α^*)$\n2) $⟨p⟩ = i\\sqrt{\\frac{mω\\hbar}{2}}(α^* - α)$\n3) $⟨x^2⟩ = \\frac{\\hbar}{2mω}(2|α|^2 + 1)$\n4) $⟨p^2⟩ = \\frac{mω\\hbar}{2}(2|α|^2 + 1)$\n\n(c) From these:\n1) $σ_x^2 = ⟨x^2⟩ - ⟨x⟩^2 = \\frac{\\hbar}{2mω}$\n2) $σ_p^2 = ⟨p^2⟩ - ⟨p⟩^2 = \\frac{mω\\hbar}{2}$\n3) Therefore $σ_xσ_p = \\frac{\\hbar}{2}$, saturating uncertainty\n\n(d) For expansion coefficients:\n1) Using $a_-|α⟩ = α|α⟩$ recursively\n2) $c_n = \\frac{α^n}{\\sqrt{n!}}c_0$\n3) Normalization gives $|c_0|^2\\sum_{n=0}^∞\\frac{|α|^{2n}}{n!} = 1$\n4) Therefore $c_0 = e^{-|α|^2/2}$\n\n(e) Time evolution:\n1) $|α(t)⟩ = e^{-iHt/\\hbar}|α⟩$\n2) Using $H = \\hbar ω(a_+a_- + \\frac{1}{2})$\n3) Shows $a_-|α(t)⟩ = αe^{-iωt}|α(t)⟩$\n\n(f) The ground state is a coherent state:\n1) It's eigenstate of $a_-$ with eigenvalue 0\n2) Therefore ground state is coherent state with $α = 0$\n\nFinal answer:\n\\[\\boxed{\\text{Ground state is coherent state with } α = 0}\\]", "final_answers": ["\\text{Ground state is coherent state with } α = 0"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{Ground state is coherent state with } α = 0", "expr2": "\\text{Raising operator: No normalizable eigenfunctions}; \\quad \\text{Lowering operator: Has eigenfunctions.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{Ground state is coherent state with } α = 0", "expr2": "\\langle x \\rangle = \\sqrt{\\hbar / 2 m \\omega}\\left(\\alpha + \\alpha^*\\right),\n\\quad \\langle x^2 \\rangle = (\\hbar / 2 m \\omega)\\left[1 + \\left(\\alpha + \\alpha^*\\right)^2\\right],"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/28-1", "solution": "Let me solve this step by step.\n\n(a) First, let's find the upper bound:\n\n1) The energy expectation value is:\n   E(β) = ⟨ψ_t|H|ψ_t⟩ = ⟨ψ_t|-ℏ²/2m d²/dx² + λx^(2n)|ψ_t⟩\n\n2) This splits into kinetic and potential terms:\n   E(β) = ⟨T⟩ + ⟨V⟩\n\n3) For the kinetic term:\n   ⟨T⟩ = (ℏ²β)/(2m)\n\n4) For the potential term:\n   ⟨V⟩ = λ⟨x^(2n)⟩ = λ(1/2β)^n × (2n-1)!!\n\n5) Therefore:\n   E(β) = (ℏ²β)/(2m) + λ(1/2β)^n × (2n-1)!!\n\n6) To minimize E(β), take dE/dβ = 0:\n   ℏ²/(2m) - nλ(1/2β)^(n+1) × (2n-1)!! = 0\n\n7) Solving for β:\n   β^(n+1) = (nmλ/ℏ²)(1/2)^n × (2n-1)!!\n\n8) The minimum energy is found by substituting this β back:\n   E_min = [(n+1)/n] × (ℏ²β)/(2m)\n\n(b) For n = 1 (harmonic oscillator):\n\n1) The potential is V(x) = λx²\n\n2) Our formula gives:\n   β = (mλ/ℏ²)^(1/2)\n   E_min = (ℏ²β)/(m) = (ℏλ/m)^(1/2)\n\n3) The exact ground state energy for harmonic oscillator is:\n   E_exact = (ℏω)/2 = (ℏ/2)(2λ/m)^(1/2)\n\n4) Comparing:\n   E_min/E_exact = 2/√2 ≈ 1.414\n\nTherefore, our variational result is about 41.4% higher than the exact ground state energy.\n\nThe final answer for the minimum energy for general n is:\n\n\\[\\boxed{E_{min} = \\frac{n+1}{n} \\left(\\frac{\\hbar^2}{2m}\\right) \\left(\\frac{nm\\lambda}{\\hbar^2}\\right)^{\\frac{1}{n+1}} \\left(\\frac{1}{2}\\right)^{\\frac{n}{n+1}} [(2n-1)!!]^{\\frac{1}{n+1}}}\\]", "final_answers": ["E_{min} = \\frac{n+1}{n} \\left(\\frac{\\hbar^2}{2m}\\right) \\left(\\frac{nm\\lambda}{\\hbar^2}\\right)^{\\frac{1}{n+1}} \\left(\\frac{1}{2}\\right)^{\\frac{n}{n+1}} [(2n-1)!!]^{\\frac{1}{n+1}}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{min} = \\frac{n+1}{n} \\left(\\frac{\\hbar^2}{2m}\\right) \\left(\\frac{nm\\lambda}{\\hbar^2}\\right)^{\\frac{1}{n+1}} \\left(\\frac{1}{2}\\right)^{\\frac{n}{n+1}} [(2n-1)!!]^{\\frac{1}{n+1}}", "expr2": "E_0 \\leq \\frac{\\hbar^2}{4m} \\left(1 + \\frac{1}{n} \\right) \\left( \\frac{\\lambda m (2n)!}{\\hbar^2 2^{2(n-1)}(n-1)!} \\right)^{\\frac{1}{n+1}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "SymPy computation timed out!"}, {"input_expressions": {"expr1": "E_{min} = \\frac{n+1}{n} \\left(\\frac{\\hbar^2}{2m}\\right) \\left(\\frac{nm\\lambda}{\\hbar^2}\\right)^{\\frac{1}{n+1}} \\left(\\frac{1}{2}\\right)^{\\frac{n}{n+1}} [(2n-1)!!]^{\\frac{1}{n+1}}", "expr2": "E_0 \\leq \\frac{\\hbar}{2} \\sqrt{\\frac{2 \\lambda}{m}} = \\frac{1}{2} \\hbar \\omega"}, "preprocessed_expressions": {"expr1": "hbar**2*(lambda*m*n/hbar**2)**(1/(n + 1))*(n + 1)*gamma(1 + gamma(2*n + 1)/(2*n))**(1/(n + 1))/(2*2**(n/(n + 1))*m*n)", "expr2": "hbar*omega/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/30-2", "solution": "Let me solve this step by step.\n\n1) In the Born approximation, the differential cross section is given by:\n   $\\frac{d\\sigma}{d\\Omega} = \\frac{m^2}{4\\pi^2\\hbar^4}|V(q)|^2$\n   where q is the momentum transfer and V(q) is the Fourier transform of the potential.\n\n2) For a delta function potential V(r) = aδ³(r):\n   The Fourier transform is:\n   $V(q) = \\int a\\delta^3(r)e^{-iq·r}d^3r = a$\n   This is because the Fourier transform of a delta function is a constant.\n\n3) Therefore, the differential cross section is:\n   $\\frac{d\\sigma}{d\\Omega} = \\frac{m^2a^2}{4\\pi^2\\hbar^4}$\n\n4) For a finite range potential:\n   - At low momentum (p), the wavelength λ = h/p is much larger than the range of the potential R\n   - When λ >> R, the particle can't resolve the details of the potential\n   - The scattering amplitude becomes independent of angle\n   - The potential effectively looks like a delta function\n\n5) The condition for \"low\" momentum is:\n   pR/ħ << 1\n   where R is the range of the potential\n\n6) Under this condition, any finite range potential will give a differential cross section with the same energy and angular dependence as the delta function potential (constant with respect to angle and proportional to m²/ħ⁴).\n\nThe final answer for the differential cross section is:\n\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} = \\frac{m^2a^2}{4\\pi^2\\hbar^4}} \\]\n\nwith the low momentum condition:\n\n\\[ \\boxed{pR/\\hbar << 1} \\]\n\nThis result shows that at low energies, the scattering is isotropic (independent of angle) and the cross section is independent of the incident momentum p. This is characteristic of s-wave scattering, which dominates at low energies.", "final_answers": ["\\frac{d\\sigma}{d\\Omega} = \\frac{m^2a^2}{4\\pi^2\\hbar^4}", "pR/\\hbar << 1"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\frac{m^2a^2}{4\\pi^2\\hbar^4}", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\left( \\frac{m a}{2 \\pi \\hbar^2} \\right)^2"}, "preprocessed_expressions": {"expr1": "a**2*m**2/(4*hbar**4*pi**2)", "expr2": "a**2*m**2/(4*hbar**4*pi**2)"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}, {"input_expressions": {"expr1": "pR/\\hbar << 1", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\left( \\frac{m a}{2 \\pi \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\npR/\\hbar << 1\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "pR/\\hbar << 1", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\left( \\frac{m a}{2 \\pi \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\npR/\\hbar << 1\n~~~~~~~~~~^"}, {"input_expressions": {"expr1": "pR/\\hbar << 1", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\left( \\frac{m a}{2 \\pi \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\npR/\\hbar << 1\n~~~~~~~~~~^"}], "accuracy": 0.5}
{"id": "Quantum Mechanics/30-3", "solution": "Let me solve this step by step.\n\n(a) First, let's find the differential and total cross sections:\n\n1) In the first Born approximation, the scattering amplitude is given by:\n   f(θ) = -2m/ℏ² ∫ V(r)e^(iq·r)d³r\n   where q = k' - k is the momentum transfer\n\n2) For elastic scattering, |q| = 2k sin(θ/2)\n   where k is the initial momentum\n\n3) The Yukawa potential in momentum space (Fourier transform) is:\n   V(q) = 4πg/(q² + μ²)\n\n4) Therefore, the scattering amplitude is:\n   f(θ) = -2mg/(ℏ²) · 4π/((2k sin(θ/2))² + μ²)\n\n5) The differential cross section is:\n   dσ/dΩ = |f(θ)|² = (2mg/ℏ²)² · (4π)²/((4k²sin²(θ/2) + μ²)²)\n\n6) The total cross section is found by integrating over all solid angles:\n   σ = 2π ∫|f(θ)|²sin(θ)dθ\n   σ = 8πg²m²/(ℏ⁴k²μ²)\n\n(b) For the optical theorem:\n\n1) The optical theorem states:\n   σ = (4π/k)Im[f(0)]\n\n2) Using our result from part (a):\n   8πg²m²/(ℏ⁴k²μ²) = (4π/k)Im[f(0)]\n\n3) Therefore:\n   Im[f(0)] = 2g²m²/(ℏ⁴kμ²)\n\nThe final answers are:\n\nFor differential cross section:\n\\[ \\boxed{\\frac{d\\sigma}{d\\Omega} = \\left(\\frac{2mg}{\\hbar^2}\\right)^2 \\frac{(4\\pi)^2}{(4k^2\\sin^2(\\theta/2) + \\mu^2)^2}} \\]\n\nFor total cross section:\n\\[ \\boxed{\\sigma = \\frac{8\\pi g^2m^2}{\\hbar^4k^2\\mu^2}} \\]\n\nFor imaginary part of forward scattering amplitude:\n\\[ \\boxed{Im[f(0)] = \\frac{2g^2m^2}{\\hbar^4k\\mu^2}} \\]", "final_answers": ["\\frac{d\\sigma}{d\\Omega} = \\left(\\frac{2mg}{\\hbar^2}\\right)^2 \\frac{(4\\pi)^2}{(4k^2\\sin^2(\\theta/2) + \\mu^2)^2}", "\\sigma = \\frac{8\\pi g^2m^2}{\\hbar^4k^2\\mu^2}", "Im[f(0)] = \\frac{2g^2m^2}{\\hbar^4k\\mu^2}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\left(\\frac{2mg}{\\hbar^2}\\right)^2 \\frac{(4\\pi)^2}{(4k^2\\sin^2(\\theta/2) + \\mu^2)^2}", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\frac{4 m^2 g^2}{\\hbar^4 \\left[\\mu^2 + 4 k^2 \\sin^2(\\theta / 2)\\right]^2}"}, "preprocessed_expressions": {"expr1": "64*g**2*m**2*pi**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)", "expr2": "4*g**2*m**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\left(\\frac{2mg}{\\hbar^2}\\right)^2 \\frac{(4\\pi)^2}{(4k^2\\sin^2(\\theta/2) + \\mu^2)^2}", "expr2": "\\sigma = \\frac{16 \\pi m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "64*g**2*m**2*pi**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)", "expr2": "16*g**2*m**2*pi/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{d\\sigma}{d\\Omega} = \\left(\\frac{2mg}{\\hbar^2}\\right)^2 \\frac{(4\\pi)^2}{(4k^2\\sin^2(\\theta/2) + \\mu^2)^2}", "expr2": "\\operatorname{Im} f(0) = \\frac{4 k m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "64*g**2*m**2*pi**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)", "expr2": "4*g**2*k*m**2/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = \\frac{8\\pi g^2m^2}{\\hbar^4k^2\\mu^2}", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\frac{4 m^2 g^2}{\\hbar^4 \\left[\\mu^2 + 4 k^2 \\sin^2(\\theta / 2)\\right]^2}"}, "preprocessed_expressions": {"expr1": "8*g**2*m**2*pi/(hbar**4*k**2*mu**2)", "expr2": "4*g**2*m**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = \\frac{8\\pi g^2m^2}{\\hbar^4k^2\\mu^2}", "expr2": "\\sigma = \\frac{16 \\pi m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "8*g**2*m**2*pi/(hbar**4*k**2*mu**2)", "expr2": "16*g**2*m**2*pi/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\sigma = \\frac{8\\pi g^2m^2}{\\hbar^4k^2\\mu^2}", "expr2": "\\operatorname{Im} f(0) = \\frac{4 k m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "8*g**2*m**2*pi/(hbar**4*k**2*mu**2)", "expr2": "4*g**2*k*m**2/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Im[f(0)] = \\frac{2g^2m^2}{\\hbar^4k\\mu^2}", "expr2": "\\frac{d \\sigma}{d \\Omega} = \\frac{4 m^2 g^2}{\\hbar^4 \\left[\\mu^2 + 4 k^2 \\sin^2(\\theta / 2)\\right]^2}"}, "preprocessed_expressions": {"expr1": "2*g**2*m**2/(hbar**4*k*mu**2)", "expr2": "4*g**2*m**2/(hbar**4*(4*k**2*sin(theta/2)**2 + mu**2)**2)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Im[f(0)] = \\frac{2g^2m^2}{\\hbar^4k\\mu^2}", "expr2": "\\sigma = \\frac{16 \\pi m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "2*g**2*m**2/(hbar**4*k*mu**2)", "expr2": "16*g**2*m**2*pi/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "Im[f(0)] = \\frac{2g^2m^2}{\\hbar^4k\\mu^2}", "expr2": "\\operatorname{Im} f(0) = \\frac{4 k m^2 g^2}{\\hbar^4 \\mu^2 \\left(\\mu^2 + 4 k^2\\right)}"}, "preprocessed_expressions": {"expr1": "2*g**2*m**2/(hbar**4*k*mu**2)", "expr2": "4*g**2*k*m**2/(hbar**4*mu**2*(4*k**2 + mu**2))"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/27-1", "solution": "Let's solve this step by step.\n\n(a) For the 2P to 1S transition energy:\n\n1) This is similar to the hydrogen atom, but with different reduced mass.\n2) Reduced mass μ = (Mp × MK)/(Mp + MK)\n   * Mp = 938 MeV, MK = 494 MeV\n   * μ = (938 × 494)/(938 + 494) = 323 MeV = 6.4 × 10⁸ me\n\n3) Energy levels in a Coulomb system:\n   En = -13.6 eV × (μ/me) × (1/n²)\n\n4) For n=1: E₁ = -13.6 eV × 6.4 × 10⁸ × 1 = -8.7 MeV\n   For n=2: E₂ = -13.6 eV × 6.4 × 10⁸ × (1/4) = -2.2 MeV\n\n5) Transition energy = |E₂ - E₁| = 6.5 MeV\n\n\\[ \\boxed{E_{2P→1S} = 6.5 \\text{ MeV}} \\]\n\n(b) For probability within 10⁻¹³ cm:\n\n1) Use 1S wavefunction: ψ(r) = (1/√πa₀³)e^(-r/a₀)\n2) a₀ = 5.3 × 10⁻⁹ cm × (me/μ) = 8.3 × 10⁻¹⁷ cm\n3) Probability = ∫₀^R |ψ(r)|² 4πr²dr where R = 10⁻¹³ cm\n4) Evaluating: P ≈ 0.9\n\n\\[ \\boxed{P ≈ 0.9} \\]\n\n(c) For perturbation effect:\n\n1) First-order energy shift: ΔE = ⟨ψ|V|ψ⟩\n2) For 1S state: ΔE₁ ≈ -50 MeV × (R/a₀)³ ≈ -50 MeV × 0.9 = -45 MeV\n3) For 2P state: ΔE₂ ≈ -50 MeV × (R/2a₀)³ ≈ -6 MeV\n4) Change in transition energy = |ΔE₂ - ΔE₁| = 39 MeV\n\n\\[ \\boxed{\\Delta E_{transition} = 39 \\text{ MeV}} \\]", "final_answers": ["E_{2P→1S} = 6.5 \\text{ MeV}", "P ≈ 0.9", "\\Delta E_{transition} = 39 \\text{ MeV}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{2P→1S} = 6.5 \\text{ MeV}", "expr2": "\\Delta E' = 6.6 \\, \\text{keV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{2P→1S} = 6.5 \\text{ MeV}", "expr2": "P_{1S}(r < r_0) \\approx 3 \\times 10^{-6}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{2P→1S} = 6.5 \\text{ MeV}", "expr2": "\\Delta E(2P \\rightarrow 1S) \\approx 150 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P ≈ 0.9", "expr2": "\\Delta E' = 6.6 \\, \\text{keV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "P ≈ 0.9", "expr2": "P_{1S}(r < r_0) \\approx 3 \\times 10^{-6}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\nP ≈ 0.9\n~~^"}, {"input_expressions": {"expr1": "P ≈ 0.9", "expr2": "\\Delta E(2P \\rightarrow 1S) \\approx 150 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{transition} = 39 \\text{ MeV}", "expr2": "\\Delta E' = 6.6 \\, \\text{keV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{transition} = 39 \\text{ MeV}", "expr2": "P_{1S}(r < r_0) \\approx 3 \\times 10^{-6}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\Delta E_{transition} = 39 \\text{ MeV}", "expr2": "\\Delta E(2P \\rightarrow 1S) \\approx 150 \\, \\text{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/25-5", "solution": "Let's solve this step by step.\n\n(a) For the ground state (n=1, l=0, m=0):\n\n1) The wave function is: ψ₁₀₀(r) = (1/√π)(1/a₀)³/² e^(-r/a₀)\nwhere a₀ is the Bohr radius.\n\n2) For ⟨r⟩:\n⟨r⟩ = ∫ r|ψ₁₀₀|²4πr²dr = 3a₀/2\n\n3) For ⟨r²⟩:\n⟨r²⟩ = ∫ r²|ψ₁₀₀|²4πr²dr = 3a₀²\n\n4) For most probable radius:\nFind maximum of r²|ψ₁₀₀|² by differentiating and setting to zero:\nr_mp = a₀\n\n(b) For nuclear radius probability:\n\n1) Nuclear radius ≈ 10⁻¹⁵ m = 10⁻⁵ a₀\n\n2) P(r ≤ R_n) = ∫₀^R_n |ψ₁₀₀|²4πr²dr\n                = 1 - (1 + 2R_n/a₀)e^(-2R_n/a₀)\n                ≈ 4R_n³/3a₀³\n                ≈ 10⁻¹⁵\n\n(c) Momentum space wave function:\n\n1) φ(p) = (2/π)½(a₀/ℏ)³/² [1 + (pa₀/ℏ)²]⁻²\n\n2) Kinetic energy expectation:\n⟨T⟩ = ⟨p²/2m⟩ = ℏ²/2ma₀² = 13.6 eV/2\n\nThe final answers are:\n\n\\[ \\boxed{\n\\begin{align*}\n⟨r⟩ &= \\frac{3}{2}a_0 \\\\\n⟨r^2⟩ &= 3a_0^2 \\\\\nr_{mp} &= a_0 \\\\\nP(r ≤ R_n) &≈ 10^{-15} \\\\\n⟨T⟩ &= 13.6\\text{ eV}/2\n\\end{align*}\n} \\]", "final_answers": ["\\begin{align*}\n⟨r⟩ &= \\frac{3}{2}a_0 \\\\\n⟨r^2⟩ &= 3a_0^2 \\\\\nr_{mp} &= a_0 \\\\\nP(r ≤ R_n) &≈ 10^{-15} \\\\\n⟨T⟩ &= 13.6\\text{ eV}/2\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n⟨r⟩ &= \\frac{3}{2}a_0 \\\\\n⟨r^2⟩ &= 3a_0^2 \\\\\nr_{mp} &= a_0 \\\\\nP(r ≤ R_n) &≈ 10^{-15} \\\\\n⟨T⟩ &= 13.6\\text{ eV}/2\n\\end{align*}", "expr2": "\\langle r \\rangle = \\frac{3}{2} a_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/25-2", "solution": "Let's solve this step by step.\n\n(a) For normalization constant C:\n\n1) The spherical harmonics are orthonormal: ∫∫Y_ℓ^m Y_ℓ'^m'* sin(θ)dθdφ = δ_ℓℓ'δ_mm'\n\n2) Therefore, |C|²(|Y_9^1|² + 4|Y_8^{-1}|² + 4|Y_9^3|²) = 1\n\n3) Due to orthonormality, |C|²(1 + 4 + 4) = 1\n\n4) |C|²(9) = 1\n\nTherefore, C = 1/3\n\n(b) For ⟨L²⟩ and ⟨L_z⟩:\n\n1) L² eigenvalue for Y_ℓ^m is ℏ²ℓ(ℓ+1)\n\n2) For Y_9^1: ℏ²(9)(10)\n   For Y_8^{-1}: ℏ²(8)(9)\n   For Y_9^3: ℏ²(9)(10)\n\n3) ⟨L²⟩ = |C|²[ℏ²(9)(10) + 4ℏ²(8)(9) + 4ℏ²(9)(10)]\n        = (1/9)[90ℏ² + 288ℏ² + 360ℏ²] = 82ℏ²\n\n4) L_z eigenvalue for Y_ℓ^m is mℏ\n\n5) ⟨L_z⟩ = |C|²[ℏ(1) + 4ℏ(-1) + 4ℏ(3)]\n         = (1/9)[ℏ - 4ℏ + 12ℏ] = ℏ\n\n(c) For ⟨L_x²⟩:\n\n1) L_x = (L_+ + L_-)/2\n\n2) Using ladder operators and matrix elements between spherical harmonics\n\n3) After calculations: ⟨L_x²⟩ = 41ℏ²\n\n(d) Time evolution:\n\n1) Energy eigenvalue for rigid rotator: E_ℓ = ℏ²ℓ(ℓ+1)/(2I)\n\n2) Time-dependent state:\nψ(t) = C[Y_9^1 e^{-iE_9t/ℏ} - 2Y_8^{-1}e^{-iE_8t/ℏ} + 2Y_9^3e^{-iE_9t/ℏ}]\n\n3) ⟨L²⟩ remains same as it's a constant of motion = 82ℏ²\n\n4) ⟨L_z⟩ remains same as phases cancel = ℏ\n\nThe final answers are:\n\n\\[\\boxed{C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2}\\]", "final_answers": ["C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2"], "equivalency_results": [{"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "C = \\frac{1}{3}"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "1/3"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "\\langle L^2 \\rangle = 82 \\hbar^2"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "82*hbar**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "\\langle L_z \\rangle = \\hbar"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "hbar"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "\\langle L_x^2 \\rangle = \\frac{163}{9} \\hbar^2"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "163*hbar**2/9"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "\\langle L^2 \\rangle = 82 \\hbar^2"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "82*hbar**2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "C = \\frac{1}{3}, \\langle L^2 \\rangle = 82\\hbar^2, \\langle L_z \\rangle = \\hbar, \\langle L_x^2 \\rangle = 41\\hbar^2", "expr2": "\\langle L_z \\rangle = \\hbar"}, "preprocessed_expressions": {"expr1": "41*hbar**2", "expr2": "hbar"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/29-7", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're calculating:\n   - We need to find the transition rate from ground state to continuum (ionization)\n   - We'll use Fermi's Golden Rule: Γ = (2π/ℏ)|⟨f|H'|i⟩|²ρ(E)\n\n2) The interaction Hamiltonian in the presence of electromagnetic field is:\n   H' = -(e/m)𝐀·𝐩\n   In dipole approximation, e^(ik·r) ≈ 1, so 𝐀(𝐫,t) = 𝐀₀e^(-iωt)\n\n3) The initial state is the ground state of hydrogen:\n   ψᵢ(r) = (1/√(πa₀³))e^(-r/a₀)\n   where a₀ is the Bohr radius\n\n4) The final state is a plane wave:\n   ψf(r) = (1/√V)e^(ik·r)\n   where k is the wave vector of the ejected electron\n\n5) The matrix element is:\n   ⟨f|H'|i⟩ = -(e/m)𝐀₀·⟨f|𝐩|i⟩\n\n6) The momentum operator gives:\n   𝐩 = -iℏ∇\n   \n7) The density of states for a free particle is:\n   ρ(E) = V(2m)^(3/2)√E/(4π²ℏ³)\n\n8) After evaluating the matrix element and integrating over all possible directions of k:\n   The ionization rate is:\n   Γ = (4/3)(e²|𝐀₀|²/m²)(2m)^(3/2)√E/(ℏ⁴)|(2π)^(-3/2)8πa₀^(5/2)/(1+k²a₀²)²|²\n\n9) The energy E is related to ω by:\n   E = ℏω - |E₁|\n   where |E₁| is the ground state energy (13.6 eV)\n\nThe final answer, expressing the ionization rate in terms of the incident field intensity I = ω²|𝐀₀|²/2μ₀c:\n\n\\[ \\boxed{\\Gamma = \\frac{32\\pi e^2}{3m^2c\\omega}\\sqrt{\\frac{2m}{\\hbar^2}({\\hbar\\omega-|E_1|})}\\frac{a_0^5}{(1+k^2a_0^2)^4}I} \\]\n\nThis is known as the photoionization cross-section formula in the dipole approximation.", "final_answers": ["\\Gamma = \\frac{32\\pi e^2}{3m^2c\\omega}\\sqrt{\\frac{2m}{\\hbar^2}({\\hbar\\omega-|E_1|})}\\frac{a_0^5}{(1+k^2a_0^2)^4}I"], "equivalency_results": [{"input_expressions": {"expr1": "\\Gamma = \\frac{32\\pi e^2}{3m^2c\\omega}\\sqrt{\\frac{2m}{\\hbar^2}({\\hbar\\omega-|E_1|})}\\frac{a_0^5}{(1+k^2a_0^2)^4}I", "expr2": "W = \\frac{e^2 |A_0|^2 (\\mathbf{k}^{\\prime} \\cdot \\mathbf{p}_{i f})^2}{\\hbar^2 m^2 c^2} \\cdot \\rho(E)"}, "preprocessed_expressions": {"expr1": "32*sqrt(2)*I*a**5*e**2*pi*sqrt(m*(hbar*omega - Abs(E))/hbar**2)/(3*c*m**2*omega*(a**8*k**8 + 4*a**6*k**6 + 6*a**4*k**4 + 4*a**2*k**2 + 1))", "expr2": "e**2*k**(2*prime)*mathbf**4*p**2*rho(E)*Abs(A)**2/(c**2*hbar**2*m**2)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/25-3", "solution": "Let's solve this step by step.\n\n(a) To check if [H,S] = 0:\n1) S = S₁ + S₂ + S₃ is the total spin\n2) The Heisenberg Hamiltonian is rotationally invariant\n3) Therefore, total spin S must be conserved\n4) This means [H,S] = 0\n\n(b) For K = 0:\n1) H = JS₁·S₃ only\n2) S₂ decouples and can have m₂ = ±1/2\n3) For S₁ and S₃:\n   - Combined spin can be S₁₃ = 0 (singlet) or S₁₃ = 1 (triplet)\n   - For singlet: E = -3J/4\n   - For triplet: E = J/4\n4) Spectrum:\n   - E = -3J/4 (2-fold degenerate due to S₂)\n   - E = J/4 (6-fold degenerate: 3 from triplet × 2 from S₂)\n\n(c) Ground state (K = 0):\n1) Lowest energy is -3J/4\n2) This corresponds to S₁₃ = 0 (singlet) between S₁ and S₃\n3) Ground states are:\n   |ψ₁⟩ = 1/√2(|↑↑↓⟩ - |↓↑↑⟩)\n   |ψ₂⟩ = 1/√2(|↑↓↓⟩ - |↓↓↑⟩)\n\n(d) For K = J:\n1) Now all spins interact equally\n2) Total spin S is still conserved\n3) Possible total spin values: S = 3/2, 1/2\n4) Energies:\n   - For S = 3/2: E = J/4\n   - For S = 1/2: E = -3J/4\n5) Degeneracies:\n   - S = 3/2: 4-fold degenerate\n   - S = 1/2: 2 × 2 = 4-fold degenerate\n\n(e) Ground state (K = J):\n1) Lowest energy is -3J/4 corresponding to S = 1/2\n2) Ground states are doublets with total spin 1/2\n\n\\[\\boxed{\\text{(a) Yes, [H,S] = 0}}\\]\n\\[\\boxed{\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}}\\]\n\\[\\boxed{\\text{(c) } \\frac{1}{\\sqrt{2}}(|\\uparrow\\uparrow\\downarrow\\rangle - |\\downarrow\\uparrow\\uparrow\\rangle), \\frac{1}{\\sqrt{2}}(|\\uparrow\\downarrow\\downarrow\\rangle - |\\downarrow\\downarrow\\uparrow\\rangle)}\\]\n\\[\\boxed{\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}}\\]\n\\[\\boxed{\\text{(e) Two S = 1/2 doublets}}\\]", "final_answers": ["\\text{(a) Yes, [H,S] = 0}", "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "\\text{(c) } \\frac{1}{\\sqrt{2}}(|\\uparrow\\uparrow\\downarrow\\rangle - |\\downarrow\\uparrow\\uparrow\\rangle), \\frac{1}{\\sqrt{2}}(|\\uparrow\\downarrow\\downarrow\\rangle - |\\downarrow\\downarrow\\uparrow\\rangle)", "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "\\text{(e) Two S = 1/2 doublets}"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{(a) Yes, [H,S] = 0}", "expr2": "\\text{\\( \\mathbf{S} \\) commutes with \\( H \\).}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "expr2": "\\text{\\( \\mathbf{S} \\) commutes with \\( H \\).}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "expr2": "\\text{Energies: } E_{\\text{singlet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (2-degenerate)}, \\, E_{\\text{triplet}} = \\frac{1}{4} \\hbar^2 J \\text{ (6-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "expr2": "\\text{Ground state wavefunctions: } \\frac{1}{\\sqrt{2}} \\big( | \\uparrow (\\uparrow \\text{ or } \\downarrow) \\downarrow \\rangle - | \\downarrow (\\uparrow \\text{ or } \\downarrow) \\uparrow \\rangle \\big)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "expr2": "\\text{Energies: } E_{\\text{doublet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}, \\, E_{\\text{quadruplet}} = \\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(b) E = -3J/4 (2-fold), E = J/4 (6-fold)}", "expr2": "\\text{Ground state wavefunction: } \\left|\\frac{1}{2}, \\frac{1}{2}\\right\\rangle_2 = \\frac{1}{\\sqrt{6}} (|\\uparrow \\uparrow \\downarrow\\rangle + |\\downarrow \\uparrow \\uparrow\\rangle - 2|\\uparrow \\downarrow \\uparrow\\rangle)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\frac{1}{\\sqrt{2}}(|\\uparrow\\uparrow\\downarrow\\rangle - |\\downarrow\\uparrow\\uparrow\\rangle), \\frac{1}{\\sqrt{2}}(|\\uparrow\\downarrow\\downarrow\\rangle - |\\downarrow\\downarrow\\uparrow\\rangle)", "expr2": "\\text{\\( \\mathbf{S} \\) commutes with \\( H \\).}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\frac{1}{\\sqrt{2}}(|\\uparrow\\uparrow\\downarrow\\rangle - |\\downarrow\\uparrow\\uparrow\\rangle), \\frac{1}{\\sqrt{2}}(|\\uparrow\\downarrow\\downarrow\\rangle - |\\downarrow\\downarrow\\uparrow\\rangle)", "expr2": "\\text{Energies: } E_{\\text{singlet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (2-degenerate)}, \\, E_{\\text{triplet}} = \\frac{1}{4} \\hbar^2 J \\text{ (6-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(c) } \\frac{1}{\\sqrt{2}}(|\\uparrow\\uparrow\\downarrow\\rangle - |\\downarrow\\uparrow\\uparrow\\rangle), \\frac{1}{\\sqrt{2}}(|\\uparrow\\downarrow\\downarrow\\rangle - |\\downarrow\\downarrow\\uparrow\\rangle)", "expr2": "\\text{Ground state wavefunctions: } \\frac{1}{\\sqrt{2}} \\big( | \\uparrow (\\uparrow \\text{ or } \\downarrow) \\downarrow \\rangle - | \\downarrow (\\uparrow \\text{ or } \\downarrow) \\uparrow \\rangle \\big)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}, {"input_expressions": {"expr1": "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "expr2": "\\text{\\( \\mathbf{S} \\) commutes with \\( H \\).}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "expr2": "\\text{Energies: } E_{\\text{singlet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (2-degenerate)}, \\, E_{\\text{triplet}} = \\frac{1}{4} \\hbar^2 J \\text{ (6-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "expr2": "\\text{Ground state wavefunctions: } \\frac{1}{\\sqrt{2}} \\big( | \\uparrow (\\uparrow \\text{ or } \\downarrow) \\downarrow \\rangle - | \\downarrow (\\uparrow \\text{ or } \\downarrow) \\uparrow \\rangle \\big)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "expr2": "\\text{Energies: } E_{\\text{doublet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}, \\, E_{\\text{quadruplet}} = \\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(d) E = J/4 (4-fold), E = -3J/4 (4-fold)}", "expr2": "\\text{Ground state wavefunction: } \\left|\\frac{1}{2}, \\frac{1}{2}\\right\\rangle_2 = \\frac{1}{\\sqrt{6}} (|\\uparrow \\uparrow \\downarrow\\rangle + |\\downarrow \\uparrow \\uparrow\\rangle - 2|\\uparrow \\downarrow \\uparrow\\rangle)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) Two S = 1/2 doublets}", "expr2": "\\text{\\( \\mathbf{S} \\) commutes with \\( H \\).}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) Two S = 1/2 doublets}", "expr2": "\\text{Energies: } E_{\\text{singlet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (2-degenerate)}, \\, E_{\\text{triplet}} = \\frac{1}{4} \\hbar^2 J \\text{ (6-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) Two S = 1/2 doublets}", "expr2": "\\text{Ground state wavefunctions: } \\frac{1}{\\sqrt{2}} \\big( | \\uparrow (\\uparrow \\text{ or } \\downarrow) \\downarrow \\rangle - | \\downarrow (\\uparrow \\text{ or } \\downarrow) \\uparrow \\rangle \\big)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) Two S = 1/2 doublets}", "expr2": "\\text{Energies: } E_{\\text{doublet}} = -\\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}, \\, E_{\\text{quadruplet}} = \\frac{3}{4} \\hbar^2 J \\text{ (4-degenerate)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{(e) Two S = 1/2 doublets}", "expr2": "\\text{Ground state wavefunction: } \\left|\\frac{1}{2}, \\frac{1}{2}\\right\\rangle_2 = \\frac{1}{\\sqrt{6}} (|\\uparrow \\uparrow \\downarrow\\rangle + |\\downarrow \\uparrow \\uparrow\\rangle - 2|\\uparrow \\downarrow \\uparrow\\rangle)"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.4}
{"id": "Quantum Mechanics/25-4", "solution": "Let's solve this step by step.\n\n(a) First, let's construct the Hamiltonian matrix:\n\n1) The Hamiltonian for a magnetic moment in a magnetic field is:\n   H = -μ⋅B = -(e/m)S⋅B = -(e/m)(gₑ/2)ℏB\n\n2) Since B is in the z-direction:\n   H = -(e/m)(gₑ/2)ℏB₀cos(ωt)σz\n\n3) Using gₑ ≈ 2 and μB = (eℏ/2m), we get:\n   H = -μBB₀cos(ωt)σz\n\n4) In matrix form:\n   H = -μBB₀cos(ωt)[1 0; 0 -1]\n\n(b) For spin-up state along x-axis at t=0:\n\n1) Initial state: χ(0) = 1/√2[1; 1]\n\n2) The time-dependent Schrödinger equation:\n   iℏ(dχ/dt) = Hχ\n\n3) Solution form:\n   χ(t) = a(t)[1; 1]/√2\n\n4) Solving differential equation:\n   χ(t) = 1/√2[exp(iμBB₀sin(ωt)/ω); exp(-iμBB₀sin(ωt)/ω)]\n\n(c) For probability of -ℏ/2 for Sx:\n\n1) The x-basis states are: |+⟩x = 1/√2[1; 1] and |-⟩x = 1/√2[1; -1]\n\n2) Probability = |⟨-|χ(t)⟩|² = sin²(μBB₀sin(ωt)/ω)\n\n(d) For complete flip:\n\n1) Need maximum probability = 1\n\n2) This means: μBB₀sin(ωt)/ω = π/2\n\n3) Maximum value of sin(ωt) is 1\n\n4) Therefore: B₀ = πω/(2μB)\n\nThe final answer for minimum field required is:\n\\[\\boxed{B_0 = \\frac{\\pi\\omega}{2\\mu_B}}\\]", "final_answers": ["B_0 = \\frac{\\pi\\omega}{2\\mu_B}"], "equivalency_results": [{"input_expressions": {"expr1": "B_0 = \\frac{\\pi\\omega}{2\\mu_B}", "expr2": "\\hat{H} = -\\frac{\\gamma B_0}{2} \\cos(\\omega t) \n    \\begin{pmatrix} \n    0 & 1 \\\\ \n    1 & 0 \n    \\end{pmatrix}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n-\\frac{\\gamma B}{2} \\cos(\\omega t) \n    \\begin{pmatrix} \n    0 & 1 \\\\ \n    1 & 0 \n    \\end{pmatrix}\n~~~~~~^"}, {"input_expressions": {"expr1": "B_0 = \\frac{\\pi\\omega}{2\\mu_B}", "expr2": "\\chi(t) = \\frac{1}{\\sqrt{2}} e^{i\\left(\\frac{\\gamma B_0}{2 \\omega}\\right) \\sin(\\omega t)} |\\uparrow\\rangle + \\frac{1}{\\sqrt{2}} e^{-i\\left(\\frac{\\gamma B_0}{2 \\omega}\\right)\\sin(\\omega t)} |\\downarrow\\rangle"}, "preprocessed_expressions": {"expr1": "omega*pi/(2*mu)", "expr2": "sqrt(2)*(e**(i(B*gamma/(2*omega))*sin(omega*t))*|uparrow> + |downarrow>/e**(i(B*gamma/(2*omega))*sin(omega*t)))/2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_0 = \\frac{\\pi\\omega}{2\\mu_B}", "expr2": "P_{-}^{(x)}(t) = \\sin^2\\left(\\frac{\\gamma B_0}{2 \\omega} \\sin(\\omega t)\\right)"}, "preprocessed_expressions": {"expr1": "omega*pi/(2*mu)", "expr2": "sin(B*gamma*sin(omega*t)/(2*omega))**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "B_0 = \\frac{\\pi\\omega}{2\\mu_B}", "expr2": "B_0 \\geq \\frac{\\pi \\omega}{\\gamma}"}, "preprocessed_expressions": {"expr1": "omega*pi/(2*mu)", "expr2": "B >= omega*pi/gamma"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'Mul' and 'GreaterThan'"}], "accuracy": 0.0}
{"id": "Quantum Mechanics/29-6", "solution": "Let me solve this step by step.\n\n(a) First, let's organize the energy levels:\n\n1) For n=1:\n- Only ℓ=0 possible (s state)\n- With spin-orbit coupling, j=1/2\n- 2 states total (mj = ±1/2)\n\n2) For n=2:\n- ℓ=0 (s state): j=1/2\n- ℓ=1 (p state): j=3/2 and j=1/2\n- 8 states total\n\n3) For n=3:\n- ℓ=0 (s state): j=1/2\n- ℓ=1 (p state): j=3/2 and j=1/2\n- ℓ=2 (d state): j=5/2 and j=3/2\n- 18 states total\n\n(b) Selection rules for electric dipole transitions:\n- Δℓ = ±1\n- Δj = 0, ±1 (but j=0 → j=0 forbidden)\n- Δmj = 0, ±1\n\n(c) For p states (ℓ=1), coupling with spin (s=1/2):\nThe possible j values are j=3/2 and j=1/2\n\nFor j=3/2:\n⟨1,1/2;m,ms|3/2,mj⟩ coefficients:\n- √(2/3) for m=1,ms=1/2 → mj=3/2\n- √(1/3) for m=0,ms=1/2 → mj=1/2\n- √(1/3) for m=1,ms=-1/2 → mj=1/2\n- √(2/3) for m=0,ms=-1/2 → mj=-1/2\n\nFor j=1/2:\n⟨1,1/2;m,ms|1/2,mj⟩ coefficients:\n- -√(1/3) for m=1,ms=-1/2 → mj=1/2\n- √(2/3) for m=0,ms=1/2 → mj=1/2\n\n(d) The n=2 states are:\n\n\\[\\boxed{\n\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}\n}\\]\n\nwhere C are the Clebsch-Gordan coefficients calculated in part (c).", "final_answers": ["\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}", "expr2": "\\text{Energy levels of hydrogen for } n = 1, 2, 3, \\text{with quantum number labels.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}", "expr2": "\\begin{aligned}\n\\text{Example of transitions:} & \\quad 2p_{3/2} \\to 1s_{1/2}, \\quad 2p_{1/2} \\to 1s_{1/2}, \\quad \\text{etc.}\\\\\n\\text{Forbidden transition:} & \\quad 3d_{5/2} \\to 2p_{1/2}.\n\\end{aligned}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}", "expr2": "\\begin{aligned}\n\\left|\\frac{3}{2}, \\frac{3}{2}\\right\\rangle & = |1\\rangle \\left|\\frac{1}{2}\\right\\rangle \\\\\n\\left|\\frac{3}{2}, \\frac{1}{2}\\right\\rangle & = \\sqrt{\\frac{2}{3}}|0\\rangle \\left|\\frac{1}{2}\\right\\rangle + \\sqrt{\\frac{1}{3}}|1\\rangle \\left|-\\frac{1}{2}\\right\\rangle \\\\\n\\left|\\frac{3}{2}, -\\frac{1}{2}\\right\\rangle & = \\sqrt{\\frac{1}{3}}|-1\\rangle \\left|\\frac{1}{2}\\right\\rangle + \\sqrt{\\frac{2}{3}}|0\\rangle \\left|-\\frac{1}{2}\\right\\rangle \\\\\n\\left|\\frac{3}{2}, -\\frac{3}{2}\\right\\rangle & = |-1\\rangle \\left|-\\frac{1}{2}\\right\\rangle.\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "|-1>*|-1/2>"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "non-commutative expressions are not supported"}, {"input_expressions": {"expr1": "\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}", "expr2": "\\begin{aligned}\n\\left|\\frac{1}{2}, \\frac{1}{2}\\right\\rangle & = -\\sqrt{\\frac{1}{3}}|0\\rangle \\left|\\frac{1}{2}\\right\\rangle + \\sqrt{\\frac{2}{3}}|1\\rangle \\left|-\\frac{1}{2}\\right\\rangle \\\\\n\\left|\\frac{1}{2}, -\\frac{1}{2}\\right\\rangle & = -\\sqrt{\\frac{2}{3}}|-1\\rangle \\left|\\frac{1}{2}\\right\\rangle + \\sqrt{\\frac{1}{3}}|0\\rangle \\left|-\\frac{1}{2}\\right\\rangle.\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "(-sqrt(6)*|-1>*|1/2> + sqrt(3)*|0>*|-1/2>)/3"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "\nCan't calculate derivative wrt |-1>."}, {"input_expressions": {"expr1": "\\begin{align*}\n|2,0,0,\\frac{1}{2},\\pm\\frac{1}{2}\\rangle &= R_{20}(r)Y^0_0(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{3}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=3/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\} \\\\\n|2,1,m,\\frac{1}{2},m_j\\rangle &= R_{21}(r)\\sum_{m_s} C^{j=1/2}_{m,m_s}Y^m_1(\\Omega)\\{\\alpha,\\beta\\}\n\\end{align*}", "expr2": "\\begin{aligned}\n\\Psi_{2s_{1/2}, m_j = +\\frac{1}{2}} &= R_{20}(r) Y^0_0(\\Omega) \\alpha, \\\\\n\\Psi_{2s_{1/2}, m_j = -\\frac{1}{2}} &= R_{20}(r) Y^0_0(\\Omega) \\beta, \\\\\n\\Psi_{2p_{3/2}, m_j = +\\frac{3}{2}} &= R_{21}(r) Y^1_1(\\Omega) \\alpha, \\\\\n\\Psi_{2p_{3/2}, m_j = +\\frac{1}{2}} &= R_{21}(r) \\left(\\sqrt{\\frac{2}{3}}Y^0_1(\\Omega) \\alpha + \\sqrt{\\frac{1}{3}} Y^1_1(\\Omega) \\beta\\right).\n\\end{aligned}"}, "preprocessed_expressions": {"expr1": "1/2", "expr2": "Omega*(sqrt(3)*Y*beta + sqrt(6)*alpha)*R(r)/3"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/29-1", "solution": "Let's solve this step by step.\n\n(a) For infinite square well:\n\n1) The time-independent Schrödinger equation is:\n   $-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi}{dx^2} = E\\psi$\n\n2) With boundary conditions: $\\psi(0) = \\psi(b) = 0$\n\n3) The eigenfunctions are:\n   $\\psi_n(x) = \\sqrt{\\frac{2}{b}}\\sin(\\frac{n\\pi x}{b})$, n = 1,2,3,...\n\n4) The eigenvalues are:\n   $E_n = \\frac{n^2\\pi^2\\hbar^2}{2mb^2}$\n\n(b) For first-order perturbation:\n\n1) The energy shift is given by:\n   $\\Delta E_n^{(1)} = \\langle\\psi_n|V_1|\\psi_n\\rangle$\n\n2) Calculate:\n   $\\Delta E_n^{(1)} = \\epsilon\\int_0^b \\sin(\\frac{n\\pi x}{b})\\sin(\\frac{\\pi x}{b})\\sin(\\frac{n\\pi x}{b})dx$\n\n3) Using trigonometric identities and integrating:\n   $\\Delta E_n^{(1)} = 0$ for all n\n\n(c) For time-dependent perturbation:\n\n1) The transition probability is given by:\n   $P_{1\\rightarrow n}(t) = |\\frac{V_{n1}}{\\hbar}|^2\\frac{4\\sin^2(\\frac{\\omega_{n1}-\\omega}{2}t)}{(\\omega_{n1}-\\omega)^2}$\n\n2) Matrix elements:\n   $V_{n1} = \\lambda\\int_0^b \\psi_n^*(x)(x-\\frac{b}{2})\\psi_1(x)dx$\n\n3) For n = 2:\n   $V_{21} = \\frac{8\\lambda b}{3\\pi}$\n\n4) For n = 3:\n   $V_{31} = 0$\n\n5) The probability for first excited state (n=2):\n   $P_{1\\rightarrow 2}(t) = \\frac{64\\lambda^2b^2}{9\\pi^2\\hbar^2}\\frac{\\sin^2(\\frac{\\omega_{21}-\\omega}{2}t)}{(\\omega_{21}-\\omega)^2}$\n\n6) The probability for second excited state (n=3):\n   $P_{1\\rightarrow 3}(t) = 0$\n\nFinal answer:\n\\[\\boxed{\n\\begin{align*}\nE_n &= \\frac{n^2\\pi^2\\hbar^2}{2mb^2} \\\\\n\\Delta E_n^{(1)} &= 0 \\\\\nP_{1\\rightarrow 2}(t) &= \\frac{64\\lambda^2b^2}{9\\pi^2\\hbar^2}\\frac{\\sin^2(\\frac{\\omega_{21}-\\omega}{2}t)}{(\\omega_{21}-\\omega)^2} \\\\\nP_{1\\rightarrow 3}(t) &= 0\n\\end{align*}\n}\\]", "final_answers": ["\\begin{align*}\nE_n &= \\frac{n^2\\pi^2\\hbar^2}{2mb^2} \\\\\n\\Delta E_n^{(1)} &= 0 \\\\\nP_{1\\rightarrow 2}(t) &= \\frac{64\\lambda^2b^2}{9\\pi^2\\hbar^2}\\frac{\\sin^2(\\frac{\\omega_{21}-\\omega}{2}t)"], "equivalency_results": [{"input_expressions": {"expr1": "\\begin{align*}\nE_n &= \\frac{n^2\\pi^2\\hbar^2}{2mb^2} \\\\\n\\Delta E_n^{(1)} &= 0 \\\\\nP_{1\\rightarrow 2}(t) &= \\frac{64\\lambda^2b^2}{9\\pi^2\\hbar^2}\\frac{\\sin^2(\\frac{\\omega_{21}-\\omega}{2}t)", "expr2": "\\psi_n(x) = \\sqrt{\\dfrac{2}{b}} \\sin \\left( \\dfrac{n \\pi x}{b} \\right), \\quad E_n = \\dfrac{n^2 \\hbar^2 \\pi^2}{2mb^2}, \\quad n = 1, 2, \\ldots"}, "preprocessed_expressions": {"expr1": "64*b**2*lambda**2/(9*hbar**2*pi**2)", "expr2": "1"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/23-1", "solution": "Let me solve this step by step.\n\n1) First, let's recall that any wavefunction can be written as a superposition of energy eigenstates:\n   ψ(x,t) = Σn cn exp(-iEnt/ħ)ψn(x)\n   where En are energy eigenvalues and ψn(x) are energy eigenfunctions.\n\n2) Since the Hamiltonian is real, we can choose the energy eigenfunctions ψn(x) to be real.\n\n3) At t = 0, ψ(x,0) is real. This means:\n   ψ(x,0) = Σn cn ψn(x) must be real\n   Therefore, the coefficients cn must be real.\n\n4) At t = t1, ψ(x,t1) is also real. This means:\n   Σn cn exp(-iEnt1/ħ)ψn(x) must be real\n\n5) For this to be true, exp(-iEnt1/ħ) must be either +1 or -1 for all n\n   This means: Ent1/ħ = πkn, where kn are integers\n\n6) Therefore: En = (πħ/t1)kn\n\n7) The wavefunction at any time t is:\n   ψ(x,t) = Σn cn exp(-iπknt/t1)ψn(x)\n\n8) This expression will repeat when t = T where:\n   T = 2t1\n   Because exp(-iπkn(t+2t1)/t1) = exp(-iπknt/t1)\n\n9) For the energies:\n   En = (πħ/t1)kn = (2πħ/T)kn/2\n   Since kn are integers, En must come in integer multiples of 2πħ/T\n\nTherefore, the period is T = 2t1, and the energies must be integer multiples of 2πħ/T.\n\n\\[ \\boxed{T = 2t_1, \\quad E_n = n\\frac{2\\pi\\hbar}{T}, \\quad n \\in \\mathbb{Z}} \\]", "final_answers": ["T = 2t_1, \\quad E_n = n\\frac{2\\pi\\hbar}{T}, \\quad n \\in \\mathbb{Z}"], "equivalency_results": [{"input_expressions": {"expr1": "T = 2t_1, \\quad E_n = n\\frac{2\\pi\\hbar}{T}, \\quad n \\in \\mathbb{Z}", "expr2": "T = 2t_1"}, "preprocessed_expressions": {"expr1": "2*hbar*n*pi/T", "expr2": "2*t"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = 2t_1, \\quad E_n = n\\frac{2\\pi\\hbar}{T}, \\quad n \\in \\mathbb{Z}", "expr2": "E_j = \\frac{2\\pi n_j \\hbar}{T}"}, "preprocessed_expressions": {"expr1": "2*hbar*n*pi/T", "expr2": "2*hbar*n*pi/T"}, "sympy_result": true, "llm_result": null, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/28-3", "solution": "Let's solve this step by step.\n\n(a) Setting up the variational procedure:\n\n1) For a vibrating string, the wave equation is:\n   $T_0\\frac{\\partial^2y}{\\partial x^2} = μ(x)\\frac{\\partial^2y}{\\partial t^2}$\n\n2) For normal modes with frequency ω:\n   $y(x,t) = ψ(x)e^{-iωt}$\n\n3) This leads to:\n   $-T_0\\frac{d^2ψ}{dx^2} = ω^2μ(x)ψ$\n\n4) The variational principle comes from:\n   $ω^2 = \\frac{\\int_0^a T_0(\\frac{dψ}{dx})^2dx}{\\int_0^a μ(x)ψ^2dx}$\n\n5) This is equivalent to minimizing the expectation value of the Hamiltonian:\n   $\\langle H \\rangle = \\frac{\\langle ψ|-\\frac{T_0}{μ(x)}\\frac{d^2}{dx^2}|ψ \\rangle}{\\langle ψ|ψ \\rangle}$\n\n(b) For $μ(x) = μ_0\\frac{x}{a}$:\n\n1) Let's use a trial function that satisfies boundary conditions:\n   $ψ(x) = \\sin(\\frac{πx}{a})$\n\n2) Substitute into the variational formula:\n   $ω^2 = \\frac{T_0\\int_0^a (\\frac{π}{a})^2\\cos^2(\\frac{πx}{a})dx}{μ_0\\int_0^a \\frac{x}{a}\\sin^2(\\frac{πx}{a})dx}$\n\n3) Evaluate integrals:\n   - Numerator: $T_0(\\frac{π}{a})^2\\frac{a}{2}$\n   - Denominator: $μ_0\\frac{a}{4}$\n\n4) Therefore:\n   $ω^2 = 2π^2\\frac{T_0}{μ_0a^2} ≈ 19.739\\frac{T_0}{μ_0a^2}$\n\n5) Compare with actual value:\n   $ω_0^2 = 18.956\\frac{T_0}{μ_0a^2}$\n\nThe variational result is about 4% higher than the exact value, which is expected as variational methods give upper bounds.\n\n\\[ \\boxed{ω^2 = 2π^2\\frac{T_0}{μ_0a^2} ≈ 19.739\\frac{T_0}{μ_0a^2}} \\]", "final_answers": ["ω^2 = 2π^2\\frac{T_0}{μ_0a^2} ≈ 19.739\\frac{T_0}{μ_0a^2}"], "equivalency_results": [{"input_expressions": {"expr1": "ω^2 = 2π^2\\frac{T_0}{μ_0a^2} ≈ 19.739\\frac{T_0}{μ_0a^2}", "expr2": "\\omega_0^2 \\leq \\frac{\\langle \\psi | \\Omega^2 | \\psi \\rangle}{\\langle \\psi | \\psi \\rangle}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n2π^2\\frac{T}{μa^2} ≈ 19.739\\frac{T}{μa^2}\n~^"}, {"input_expressions": {"expr1": "ω^2 = 2π^2\\frac{T_0}{μ_0a^2} ≈ 19.739\\frac{T_0}{μ_0a^2}", "expr2": "\\omega_0^2 \\leq (19.739) \\frac{T_0}{\\mu_0 a^2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "I don't understand this\n2π^2\\frac{T}{μa^2} ≈ 19.739\\frac{T}{μa^2}\n~^"}], "accuracy": 0.0}
{"id": "Quantum Mechanics/28-4", "solution": "Let's solve this step by step.\n\n(a) First, let's put ψ(x) = e^(if(x)/ℏ) into Schrödinger's equation:\n\n1) The Schrödinger equation is: -ℏ²/2m ψ'' + V(x)ψ = Eψ\n   where p²(x) = 2m(E-V(x))\n\n2) Calculate derivatives:\n   ψ' = (if'/ℏ)e^(if/ℏ)\n   ψ'' = (if''/ℏ - (f'/ℏ)²)e^(if/ℏ)\n\n3) Substituting into Schrödinger's equation:\n   -ℏ²/2m(if''/ℏ - (f'/ℏ)²)e^(if/ℏ) + V(x)e^(if/ℏ) = Ee^(if/ℏ)\n\n4) Multiply by 2m and rearrange:\n   iℏf'' - (f')² + p² = 0\n\n(b) Substitute f(x) = Σℏⁿfₙ(x):\n\n1) For (f')²: (f₀' + ℏf₁' + ℏ²f₂' + ...)²\n2) For f'': f₀'' + ℏf₁'' + ℏ²f₂'' + ...\n\n3) Collecting terms by powers of ℏ:\n   ℏ⁰: (f₀')² = p²\n   ℏ¹: if₀'' = 2f₀'f₁'\n   ℏ²: if₁'' = 2f₀'f₂' + (f₁')²\n\n(c) Solving for f₀ and f₁:\n\n1) From (f₀')² = p²:\n   f₀' = ±p\n   f₀ = ±∫p(x)dx\n\n2) From if₀'' = 2f₀'f₁':\n   f₁' = -i(f₀''/2f₀')\n   f₁' = -i(p'/2p)\n   f₁ = -i/2 ln|p|\n\n3) Therefore, to first order:\n   f(x) ≈ ±∫p(x)dx - iℏ/2 ln|p|\n\n4) Thus:\n   ψ(x) = e^(if/ℏ) ≈ C/√p(x) exp[±i/ℏ ∫p(x)dx]\n\nThis matches the WKB formula.\n\n\\[\\boxed{\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]}\\]", "final_answers": ["\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]"], "equivalency_results": [{"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "i \\hbar f'' - (f')^2 + p^2 = 0"}, "preprocessed_expressions": {"expr1": "C*exp(i*pm*Integral(p(x), x)/hbar)/sqrt(p(x))", "expr2": "0"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "(f_0')^2 = p^2"}, "preprocessed_expressions": {"expr1": "C*exp(i*pm*Integral(p(x), x)/hbar)/sqrt(p(x))", "expr2": "p**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "i f_0'' = 2 f_0' f_1'"}, "preprocessed_expressions": {"expr1": "C*exp(i*pm*Integral(p(x), x)/hbar)/sqrt(p(x))", "expr2": "2*f'**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "i f_1'' = 2 f_0' f_2' + (f_1')^2"}, "preprocessed_expressions": {"expr1": "C*exp(i*pm*Integral(p(x), x)/hbar)/sqrt(p(x))", "expr2": "3*f'**2"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "f_0 = \\pm \\int p(x) \\, dx + \\text{const.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "f_1 = \\frac{i}{2} \\ln p + \\text{const.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\psi(x) = \\frac{C}{\\sqrt{p(x)}} \\exp \\left[ \\pm \\frac{i}{\\hbar} \\int p(x) dx\\right]", "expr2": "\\psi \\approx \\frac{C}{\\sqrt{p}} \\exp\\left(\\pm \\frac{i}{\\hbar} \\int p \\, dx\\right)"}, "preprocessed_expressions": {"expr1": "C*exp(i*pm*Integral(p(x), x)/hbar)/sqrt(p(x))", "expr2": "C*approx*psi*exp(i*p*pm*x/hbar)/sqrt(p)"}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/24-1", "solution": "Let's solve this step by step.\n\n(a) According to quantum measurement postulate, when a measurement is made and a specific eigenvalue is obtained, the system collapses into the corresponding eigenstate. \n* When $a_1$ is measured, the system collapses into $\\psi_1$\n* Therefore, the state after measurement is $\\psi_1 = \\frac{3\\phi_1 + 4\\phi_2}{5}$\n\n(b) For measuring B:\n* The possible results are $b_1$ and $b_2$ (the eigenvalues of B)\n* To find probabilities, we need to project $\\psi_1$ onto $\\phi_1$ and $\\phi_2$\n* For $b_1$: P($b_1$) = |⟨φ₁|ψ₁⟩|² = |3/5|² = 9/25\n* For $b_2$: P($b_2$) = |⟨φ₂|ψ₁⟩|² = |4/5|² = 16/25\n* Verify: 9/25 + 16/25 = 1 (probabilities sum to 1)\n\n(c) For measuring A again after B:\n* If we don't know B's outcome, we need to consider both possibilities:\n* If $b_1$ was measured: State becomes $\\phi_1$\n  * P($a_1$|$b_1$) = |⟨ψ₁|φ₁⟩|² = |3/5|²\n* If $b_2$ was measured: State becomes $\\phi_2$\n  * P($a_1$|$b_2$) = |⟨ψ₁|φ₂⟩|² = |4/5|²\n* Total probability = P($b_1$)P($a_1$|$b_1$) + P($b_2$)P($a_1$|$b_2$)\n* = (9/25)(9/25) + (16/25)(16/25)\n* = 81/625 + 256/625\n* = 337/625\n\nThe final answer for part (c) is:\n\n\\[\\boxed{\\frac{337}{625}}\\]", "final_answers": ["\\frac{337}{625}"], "equivalency_results": [{"input_expressions": {"expr1": "\\frac{337}{625}", "expr2": "\\text{State is } \\psi_1"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{337}{625}", "expr2": "b_1 \\text{ (probability: } \\frac{9}{25} \\text{)}, \\; b_2 \\text{ (probability: } \\frac{16}{25} \\text{)}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\frac{337}{625}", "expr2": "P(a_1) = \\frac{337}{625} \\approx 0.5392"}, "preprocessed_expressions": {"expr1": "337/625", "expr2": "0.29073664*approx"}, "sympy_result": false, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/26-2", "solution": "Let me solve this step by step.\n\n1) First, let's recall the principles for determining term symbols:\n   - We need to find 2S+1L_J where:\n   - S = total spin quantum number\n   - L = total orbital angular momentum\n   - J = total angular momentum (|L+S| to |L-S|)\n\n2) Let's go through each element:\n\nHydrogen (Z=1):\n- Configuration: 1s¹\n- One electron with s=1/2, l=0\n- Term symbol: ²S_{1/2}\n\nHelium (Z=2):\n- Configuration: 1s²\n- Closed shell, all quantum numbers cancel\n- Term symbol: ¹S₀\n\nLithium (Z=3):\n- Configuration: 1s²2s¹\n- Similar to H but with 2s electron\n- Term symbol: ²S_{1/2}\n\nBeryllium (Z=4):\n- Configuration: 1s²2s²\n- Closed shells\n- Term symbol: ¹S₀\n\nBoron (Z=5):\n- Configuration: 1s²2s²2p¹\n- One p electron\n- Term symbol: ²P_{1/2}\n\nCarbon (Z=6):\n- Configuration: 1s²2s²2p²\n- Two p electrons, parallel spins (Hund's rule)\n- Term symbol: ³P₀\n\nNitrogen (Z=7):\n- Configuration: 1s²2s²2p³\n- Three parallel p electrons\n- Term symbol: ⁴S_{3/2}\n\nOxygen (Z=8):\n- Configuration: 1s²2s²2p⁴\n- Two unpaired electrons\n- Term symbol: ³P₂\n\nFluorine (Z=9):\n- Configuration: 1s²2s²2p⁵\n- One hole in p shell\n- Term symbol: ²P_{3/2}\n\nNeon (Z=10):\n- Configuration: 1s²2s²2p⁶\n- Closed shells\n- Term symbol: ¹S₀\n\nThe final answer in order from Z=1 to Z=10:\n\n\\[ \\boxed{ H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0 } \\]", "final_answers": ["H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0"], "equivalency_results": [{"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{H: } {}^2S_{1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{He: } {}^1S_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{Li: } {}^2S_{1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{Be: } {}^1S_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{B: } {}^2P_{1/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{C: } {}^3P_0"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "H: ²S_{1/2}, He: ¹S_0, Li: ²S_{1/2}, Be: ¹S_0, B: ²P_{1/2}, C: ³P_0, N: ⁴S_{3/2}, O: ³P_2, F: ²P_{3/2}, Ne: ¹S_0", "expr2": "\\text{N: } {}^4S_{3/2}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": true, "final_result": true, "error": null}], "accuracy": 1.0}
{"id": "Quantum Mechanics/28-5", "solution": "Let me solve this step by step.\n\n1) First, let's understand what we're dealing with:\n   * We have a barrier with sloping walls\n   * Two turning points: x₁ (upward sloping) and x₂ (downward sloping)\n   * No other classical turning points exist\n\n2) For this type of problem, we need to use WKB connection formulas:\n   * At x₁ (upward sloping): The wave function transitions from oscillatory to exponential behavior\n   * At x₂ (downward sloping): The wave function transitions from exponential to oscillatory behavior\n\n3) Let's write the connection formulas:\n   * For x₁ (upward sloping):\n     Acos(S/ℏ - π/4) → (1/2)B exp(-|S|/ℏ)\n\n   * For x₂ (downward sloping):\n     C exp(-|S|/ℏ) → 2D cos(S/ℏ - π/4)\n\n4) The phase integral S is defined as:\n   S = ∫ √(2m[E-V(x)]) dx\n\n5) The reflection coefficient R can be found by:\n   R = exp(-2γ)\n   where γ = ∫(x₁ to x₂) |p(x)|dx/ℏ\n   and p(x) = √(2m[V(x)-E])\n\n6) The transmission coefficient T is:\n   T = 1 - R = 1 - exp(-2γ)\n\nThe final answer for the transmission coefficient is:\n\n\\[ \\boxed{T = 1 - e^{-2\\int_{x_1}^{x_2} |p(x)|dx/\\hbar}} \\]\n\nThis formula gives the probability of quantum tunneling through the barrier with sloping walls.", "final_answers": ["T = 1 - e^{-2\\int_{x_1}^{x_2} |p(x)|dx/\\hbar}"], "equivalency_results": [{"input_expressions": {"expr1": "T = 1 - e^{-2\\int_{x_1}^{x_2} |p(x)|dx/\\hbar}", "expr2": "A = i \\left( \\frac{1}{4} e^{-\\gamma} - e^{\\gamma} \\right) F"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "F*i(-e**gamma + 1/(4*e**gamma))"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "T = 1 - e^{-2\\int_{x_1}^{x_2} |p(x)|dx/\\hbar}", "expr2": "T = \\frac{e^{-2 \\gamma}}{\\left[1-\\left(e^{-\\gamma} / 2\\right)^2\\right]^2}"}, "preprocessed_expressions": {"expr1": "1 - e", "expr2": "16*e**(2*gamma)/(16*e**(4*gamma) - 8*e**(2*gamma) + 1)"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/28-2", "solution": "Let me solve this step by step.\n\n(a) First part:\n\n1) The trial function is appropriate because:\n   * It satisfies boundary conditions (zero at x < 0)\n   * It goes to zero as x → ∞ (exponential decay)\n   * It's continuous and differentiable\n   * Has adjustable parameters for optimization\n\n2) The expectation value of energy is:\n   E = ∫₀^∞ [(-ℏ²/2m)(d²ψ/dx²)ψ + Cxψ²]dx / ∫₀^∞ ψ²dx\n\n3) For ψ = x^p e^(-ax):\n   * Kinetic energy term involves (d²ψ/dx²)\n   * Potential energy term is Cx\n\n4) The optimum value of p can be found by minimizing E with respect to p.\n   * p = 1 gives the lowest energy\n   * This makes physical sense as the wavefunction should be smooth near x = 0\n\n(b) Second part:\n\n1) The variational theorem can be applied to the first excited state if:\n   * The trial function is orthogonal to the exact ground state\n   * The trial function has the correct symmetry properties\n\n2) For ϕ₁ = xϕ₀:\n   * It's antisymmetric (odd function)\n   * Automatically orthogonal to ϕ₀ (even function)\n   * Has a node at x = 0, as expected for first excited state\n   * Maintains proper boundary conditions\n\n3) This makes xϕ₀ a suitable trial function because:\n   * Preserves the symmetry of first excited state\n   * Ensures orthogonality with ground state\n   * Has correct nodal structure\n   * Decays appropriately at large |x|\n\nThe final answer for the optimum value of p in part (a) is:\n\n\\[\\boxed{p = 1}\\]\n\nThis is because p = 1 gives the lowest variational energy and provides the correct physical behavior near x = 0.", "final_answers": ["p = 1"], "equivalency_results": [{"input_expressions": {"expr1": "p = 1", "expr2": "E_0 \\leq \\left( \\frac{5^{2/3}}{3} \\right) \\left( \\frac{3}{2} \\right)^{5/3} \\left( \\frac{\\hbar^2 C^2}{m} \\right)^{1/3} \\approx 1.92 \\left( \\frac{\\hbar^2 C^2}{m} \\right)^{1/3}"}, "preprocessed_expressions": {"expr1": "1", "expr2": "E <= 0.48*15**(2/3)*2**(1/3)*approx*(C**2*hbar**2/m)**(2/3)"}, "sympy_result": null, "llm_result": false, "final_result": false, "error": "unsupported operand type(s) for -: 'One' and 'LessThan'"}, {"input_expressions": {"expr1": "p = 1", "expr2": "\\text{Orthogonality: Trial function and ground state must have zero overlap.}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/26-3", "solution": "Let's solve this step by step.\n\n(a) First, let's find the ground state wavefunction and energy:\n\n1) For helium (Z=2), each electron sees a nuclear charge of +2e\n2) The hydrogenic ground state wavefunction for each electron is:\n   ψ(r) = (Z/a₀)³/² exp(-Zr/a₀)/√π\n   where a₀ is the Bohr radius\n\n3) The total spatial wavefunction for two electrons is:\n   ψ(r₁,r₂) = ψ(r₁)ψ(r₂)\n\n4) The spin part must be antisymmetric (singlet state):\n   χ = (1/√2)(↑₁↓₂ - ↓₁↑₂)\n\n5) Total wavefunction:\n   Ψ = ψ(r₁,r₂)χ\n\n6) Energy for each electron is E = -Z²(13.6 eV)\n   Total energy = -2(2²)(13.6 eV) = -108.8 eV\n\n(b) For electron-electron repulsion:\n\n1) We need to calculate ⟨1/|r₁-r₂|⟩ using our wavefunction\n2) This involves a 6-dimensional integral:\n   ⟨1/|r₁-r₂|⟩ = ∫∫ |ψ(r₁,r₂)|² (1/|r₁-r₂|) dτ₁dτ₂\n\n3) After solving (it's a complex integral), we get:\n   ⟨1/|r₁-r₂|⟩ = 5Z/8a₀ = 5(2)/8(0.529Å) = 2.38/a₀\n\n(c) Calculating the correction:\n\n1) The electron-electron repulsion energy is:\n   E_ee = e²⟨1/|r₁-r₂|⟩ = (14.4 eV·Å)(2.38/0.529Å) = 34.2 eV\n\n2) Total corrected energy:\n   E_total = -108.8 eV + 34.2 eV = -74.6 eV\n\n3) Comparing with experimental (-78.975 eV):\n   Error ≈ 5.5% \n\nThe final corrected energy is:\n\n\\[\\boxed{E_{total} = -74.6 \\text{ eV}}\\]\n\nThis is reasonably close to the experimental value, considering our approximations. The difference from experimental value is mainly due to using an uncorrelated wavefunction that doesn't account for electrons avoiding each other.", "final_answers": ["E_{total} = -74.6 \\text{ eV}"], "equivalency_results": [{"input_expressions": {"expr1": "E_{total} = -74.6 \\text{ eV}", "expr2": "\\psi\\left(\\mathbf{r}_1, \\mathbf{r}_2\\right)=\\frac{8}{\\pi a_0^3} e^{-2\\left(r_1+r_2\\right) / a_0} \\frac{|\\uparrow\\rangle|\\downarrow\\rangle-|\\downarrow\\rangle|\\uparrow\\rangle}{\\sqrt{2}}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{total} = -74.6 \\text{ eV}", "expr2": "E_0 = -109 \\, \\mathrm{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{total} = -74.6 \\text{ eV}", "expr2": "\\left\\langle \\frac{1}{|\\mathbf{r}_1 - \\mathbf{r}_2|} \\right\\rangle = \\frac{5}{4a_0}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{total} = -74.6 \\text{ eV}", "expr2": "V_{ee} = 34 \\, \\mathrm{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "E_{total} = -74.6 \\text{ eV}", "expr2": "E_0 + V_{ee} = -75 \\, \\mathrm{eV}"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/26-4", "solution": "Let me solve this step by step.\n\n1) First, let's recall what we know about Nitrogen's ground state:\n   * Nitrogen has 7 electrons\n   * Electronic configuration: 1s² 2s² 2p³\n   * We're focusing on the 2p³ electrons as the inner shells are filled\n\n2) For a $^2P$ state:\n   * L = 1 (P state)\n   * S = 1/2 (doublet state)\n   * We want specifically $M_L = 1$ and $M_S = 1/2$\n\n3) The three p electrons need to combine to give:\n   * Total $M_L = 1$\n   * Total $M_S = 1/2$\n\n4) Possible $m_\\ell$ values for p electrons: +1, 0, -1\n   Possible $m_s$ values: +1/2, -1/2\n\n5) To get $M_L = 1$, we need combinations of $m_\\ell$ that sum to 1\n   To get $M_S = 1/2$, we need combinations of $m_s$ that sum to 1/2\n\n6) The possible combinations that give $M_L = 1$ and $M_S = 1/2$ are:\n   * Two electrons with $m_\\ell = 1$ and one with $m_\\ell = -1$\n   * Two electrons must be spin-down and one spin-up\n\n7) The wavefunction must be antisymmetric under electron exchange.\n   Using proper Clebsch-Gordan coefficients and normalization:\n\n\\[ \\boxed{|1,1,\\frac{1}{2},\\frac{1}{2}\\rangle = \\frac{1}{\\sqrt{6}}[(|1,1,-1\\rangle|\\uparrow\\downarrow\\downarrow\\rangle - |1,-1,1\\rangle|\\downarrow\\uparrow\\downarrow\\rangle + |1,1,-1\\rangle|\\downarrow\\downarrow\\uparrow\\rangle)]} \\]\n\nwhere the first ket in each term represents the $m_\\ell$ values and the second ket represents the $m_s$ values of the three electrons.", "final_answers": ["|1,1,\\frac{1}{2},\\frac{1}{2}\\rangle = \\frac{1}{\\sqrt{6}}[(|1,1,-1\\rangle|\\uparrow\\downarrow\\downarrow\\rangle - |1,-1,1\\rangle|\\downarrow\\uparrow\\downarrow\\rangle + |1,1,-1\\rangle|\\downarrow\\downarrow\\uparrow\\rangle)]"], "equivalency_results": [{"input_expressions": {"expr1": "|1,1,\\frac{1}{2},\\frac{1}{2}\\rangle = \\frac{1}{\\sqrt{6}}[(|1,1,-1\\rangle|\\uparrow\\downarrow\\downarrow\\rangle - |1,-1,1\\rangle|\\downarrow\\uparrow\\downarrow\\rangle + |1,1,-1\\rangle|\\downarrow\\downarrow\\uparrow\\rangle)]", "expr2": "\\left|1,1, \\frac{1}{2}, \\frac{1}{2}\\right\\rangle = \\frac{1}{\\sqrt{2}} \\left( |1,1\\rangle_a \\left| \\frac{1}{2}, \\frac{1}{2} \\right\\rangle_b - |1,1\\rangle_b \\left| \\frac{1}{2}, \\frac{1}{2} \\right\\rangle_a \\right)"}, "preprocessed_expressions": {"expr1": "sqrt(6)/6", "expr2": "sqrt(2)/2"}, "sympy_result": false, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
{"id": "Quantum Mechanics/30-1", "solution": "Let me solve this step by step.\n\n1) First, let's recall the key aspects of both methods:\n   - Partial waves method uses phase shifts δₗ\n   - Born approximation is valid when the potential is weak\n\n2) For partial waves, at low energy (k→0):\n   - Only l=0 (s-wave) contributes significantly\n   - The scattering cross section is:\n   σ_pw = 4π/k² sin²δ₀\n\n3) For this square well potential:\n   - At low energy, the phase shift δ₀ ≈ -ka\n   - Where k is the wave number\n   - Therefore, σ_pw ≈ 4πa²\n\n4) For Born approximation:\n   - The scattering amplitude is:\n   f(θ) = -(2π)⁻¹(2m/ℏ²)∫V(r)e^(iq·r)d³r\n   - Where q = 2k sin(θ/2)\n\n5) For this potential:\n   - The Born approximation gives:\n   σ_Born = 4π(mV₀a³/ℏ²)²\n\n6) Comparing the results:\n   - Partial waves: σ_pw ≈ 4πa²\n   - Born: σ_Born = 4π(mV₀a³/ℏ²)²\n\n7) The Born approximation is valid when:\n   mV₀a²/ℏ² << 1\n\n8) At low energy, the partial waves method is more accurate because:\n   - It's non-perturbative\n   - Born approximation fails for strong potentials\n   - Born approximation assumes weak scattering\n\nThe final answer comparing the two methods is:\n\n\\[\\boxed{\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²}\\]\n\nThe partial waves result is more reliable at low energy, while Born approximation is only valid when mV₀a²/ℏ² << 1.", "final_answers": ["\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²"], "equivalency_results": [{"input_expressions": {"expr1": "\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²", "expr2": "\\sigma = 4 \\pi a^2 \\left[ \\frac{\\tan(k_0 a)}{k_0 a} - 1 \\right]^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²", "expr2": "\\sigma = 4 \\pi \\left( \\frac{2 m a^3 V_0}{3 \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²", "expr2": "\\sigma = 4 \\pi \\left( \\frac{2 m a^3 V_0}{3 \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}, {"input_expressions": {"expr1": "\\text{σ_pw} \\approx 4πa² \\quad \\text{and} \\quad \\text{σ_Born} = 4π(mV₀a³/ℏ²)²", "expr2": "\\sigma = 4 \\pi \\left( \\frac{2 m a^3 V_0}{3 \\hbar^2} \\right)^2"}, "preprocessed_expressions": {}, "sympy_result": null, "llm_result": false, "final_result": false, "error": null}], "accuracy": 0.0}
